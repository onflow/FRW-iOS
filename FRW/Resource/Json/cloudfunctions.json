{
    "scripts": {
      "mainnet": {
        "version": "1.0",
        "ft": {
          "isTokenListEnabled": "",
          "isLinkedAccountTokenListEnabled": "",
          "getTokenListBalance": "",
          "addToken": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgYWRkVG9rZW4gLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhmMjMzZGNlZTg4ZmUwYWJlCgppbXBvcnQgPFRva2VuPiBmcm9tIDxUb2tlbkFkZHJlc3M+Cgp0cmFuc2FjdGlvbiB7CgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSwgQ2FwYWJpbGl0aWVzKSAmQWNjb3VudCkgewoKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8JjxUb2tlbj4uVmF1bHQ+KGZyb206IDxUb2tlblN0b3JhZ2VQYXRoPiApID09IG5pbCB7CiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUoPC0gPFRva2VuPi5jcmVhdGVFbXB0eVZhdWx0KHZhdWx0VHlwZTogVHlwZTxAPFRva2VuPi5WYXVsdD4oKSksIHRvOiA8VG9rZW5TdG9yYWdlUGF0aD4pCiAgICAgICAgfQoKICAgICAgICBpZiBzaWduZXIuY2FwYWJpbGl0aWVzLmV4aXN0cyg8VG9rZW5SZWNlaXZlclBhdGg+KSA9PSBmYWxzZSB7CiAgICAgICAgICAgIGxldCByZWNlaXZlckNhcGFiaWxpdHkgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JjxUb2tlbj4uVmF1bHQ+KDxUb2tlblN0b3JhZ2VQYXRoPikKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy5wdWJsaXNoKHJlY2VpdmVyQ2FwYWJpbGl0eSwgYXQ6IDxUb2tlblJlY2VpdmVyUGF0aD4pCiAgICAgICAgCiAgICAgICAgfQogICAgICAgCiAgICAgICAgaWYgc2lnbmVyLmNhcGFiaWxpdGllcy5leGlzdHMoPFRva2VuQmFsYW5jZVBhdGg+KSA9PSBmYWxzZSB7CiAgICAgICAgICAgIGxldCBiYWxhbmNlQ2FwYWJpbGl0eSA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwmPFRva2VuPi5WYXVsdD4oPFRva2VuU3RvcmFnZVBhdGg+KQogICAgICAgICAgICBzaWduZXIuY2FwYWJpbGl0aWVzLnB1Ymxpc2goYmFsYW5jZUNhcGFiaWxpdHksIGF0OiA8VG9rZW5CYWxhbmNlUGF0aD4pCiAgICAgICAgfQogICAgCiAgICB9Cn0=",
          "enableTokenStorage": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZW5hYmxlVG9rZW5TdG9yYWdlIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQoKaW1wb3J0IDxUb2tlbj4gZnJvbSA8VG9rZW5BZGRyZXNzPgoKdHJhbnNhY3Rpb24gewoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UsIENhcGFiaWxpdGllcykgJkFjY291bnQpIHsKCiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UuYm9ycm93PCY8VG9rZW4+LlZhdWx0Pihmcm9tOiA8VG9rZW5TdG9yYWdlUGF0aD4gKSA9PSBuaWwgewogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKDwtIDxUb2tlbj4uY3JlYXRlRW1wdHlWYXVsdCh2YXVsdFR5cGU6IFR5cGU8QDxUb2tlbj4uVmF1bHQ+KCkpLCB0bzogPFRva2VuU3RvcmFnZVBhdGg+KQogICAgICAgIH0KCiAgICAgICAgaWYgc2lnbmVyLmNhcGFiaWxpdGllcy5leGlzdHMoPFRva2VuUmVjZWl2ZXJQYXRoPikgPT0gZmFsc2UgewogICAgICAgICAgICBsZXQgcmVjZWl2ZXJDYXBhYmlsaXR5ID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCY8VG9rZW4+LlZhdWx0Pig8VG9rZW5TdG9yYWdlUGF0aD4pCiAgICAgICAgICAgIHNpZ25lci5jYXBhYmlsaXRpZXMucHVibGlzaChyZWNlaXZlckNhcGFiaWxpdHksIGF0OiA8VG9rZW5SZWNlaXZlclBhdGg+KQogICAgICAgIAogICAgICAgIH0KICAgICAgIAogICAgICAgIGlmIHNpZ25lci5jYXBhYmlsaXRpZXMuZXhpc3RzKDxUb2tlbkJhbGFuY2VQYXRoPikgPT0gZmFsc2UgewogICAgICAgICAgICBsZXQgYmFsYW5jZUNhcGFiaWxpdHkgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JjxUb2tlbj4uVmF1bHQ+KDxUb2tlblN0b3JhZ2VQYXRoPikKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy5wdWJsaXNoKGJhbGFuY2VDYXBhYmlsaXR5LCBhdDogPFRva2VuQmFsYW5jZVBhdGg+KQogICAgICAgIH0KICAgIAogICAgfQp9",
          "getTokenBalanceStorage": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0VG9rZW5CYWxhbmNlU3RvcmFnZSAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweGYyMzNkY2VlODhmZTBhYmUKCgovLy8gUXVlcmllcyBmb3IgRlQuVmF1bHQgYmFsYW5jZSBvZiBhbGwgRlQuVmF1bHRzIGluIHRoZSBzcGVjaWZpZWQgYWNjb3VudC4KLy8vCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MpOiB7U3RyaW5nOiBVRml4NjR9IHsKICAgIC8vIEdldCB0aGUgYWNjb3VudAogICAgbGV0IGFjY291bnQgPSBnZXRBdXRoQWNjb3VudDxhdXRoKEJvcnJvd1ZhbHVlKSAmQWNjb3VudD4oYWRkcmVzcykKICAgIC8vIEluaXQgZm9yIHJldHVybiB2YWx1ZQogICAgbGV0IGJhbGFuY2VzOiB7U3RyaW5nOiBVRml4NjR9ID0ge30KICAgIC8vIFRyYWNrIHNlZW4gVHlwZXMgaW4gYXJyYXkKICAgIGxldCBzZWVuOiBbU3RyaW5nXSA9IFtdCiAgICAvLyBBc3NpZ24gdGhlIHR5cGUgd2UnbGwgbmVlZAogICAgbGV0IHZhdWx0VHlwZTogVHlwZSA9IFR5cGU8QHtGdW5naWJsZVRva2VuLlZhdWx0fT4oKQogICAgLy8gSXRlcmF0ZSBvdmVyIGFsbCBzdG9yZWQgaXRlbXMgJiBnZXQgdGhlIHBhdGggaWYgdGhlIHR5cGUgaXMgd2hhdCB3ZSdyZSBsb29raW5nIGZvcgogICAgYWNjb3VudC5zdG9yYWdlLmZvckVhY2hTdG9yZWQoZnVuIChwYXRoOiBTdG9yYWdlUGF0aCwgdHlwZTogVHlwZSk6IEJvb2wgewogICAgICAgIGlmICF0eXBlLmlzUmVjb3ZlcmVkICYmICh0eXBlLmlzSW5zdGFuY2UodmF1bHRUeXBlKSB8fCB0eXBlLmlzU3VidHlwZShvZjogdmF1bHRUeXBlKSkgewogICAgICAgICAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIHJlc291cmNlICYgaXRzIGJhbGFuY2UKICAgICAgICAgICAgbGV0IHZhdWx0UmVmID0gYWNjb3VudC5zdG9yYWdlLmJvcnJvdzwme0Z1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KGZyb206IHBhdGgpIQogICAgICAgICAgICAvLyBJbnNlcnQgYSBuZXcgdmFsdWVzIGlmIGl0J3MgdGhlIGZpcnN0IHRpbWUgd2UndmUgc2VlbiB0aGUgdHlwZQogICAgICAgICAgICBpZiAhc2Vlbi5jb250YWlucyh0eXBlLmlkZW50aWZpZXIpIHsKICAgICAgICAgICAgICAgIGJhbGFuY2VzLmluc2VydChrZXk6IHR5cGUuaWRlbnRpZmllciwgdmF1bHRSZWYuYmFsYW5jZSkKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSBqdXN0IHVwZGF0ZSB0aGUgYmFsYW5jZSBvZiB0aGUgdmF1bHQgKHVubGlrZWx5IHdlJ2xsIHNlZSB0aGUgc2FtZSB0eXBlIHR3aWNlIGluCiAgICAgICAgICAgICAgICAvLyB0aGUgc2FtZSBhY2NvdW50LCBidXQgd2Ugd2FudCB0byBjb3ZlciB0aGUgY2FzZSkKICAgICAgICAgICAgICAgIGJhbGFuY2VzW3R5cGUuaWRlbnRpZmllcl0gPSBiYWxhbmNlc1t0eXBlLmlkZW50aWZpZXJdISArIHZhdWx0UmVmLmJhbGFuY2UKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gdHJ1ZQogICAgfSkKCiAgICAvLyBBZGQgYXZhaWxhYmxlIEZsb3cgVG9rZW4gQmFsYW5jZQogICAgYmFsYW5jZXMuaW5zZXJ0KGtleTogImF2YWlsYWJsZUZsb3dUb2tlbiIsIGFjY291bnQuYXZhaWxhYmxlQmFsYW5jZSkKCiAgICByZXR1cm4gYmFsYW5jZXMKfQ==",
          "transferEvmTokens": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgdHJhbnNmZXJFdm1Ub2tlbnMgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBFVk0gZnJvbSAweGU0NjdiOWRkMTFmYTAwZGYKCgovLy8gVHJhbnNmZXJzICRGTE9XIGZyb20gdGhlIHNpZ25lcidzIGFjY291bnQgQ2FkZW5jZSBGbG93IGJhbGFuY2UgdG8gdGhlIHJlY2lwaWVudCdzIGhleC1lbmNvZGVkIEVWTSBhZGRyZXNzLgovLy8gTm90ZSB0aGF0IGEgQ09BIG11c3QgaGF2ZSBhICRGTE9XIGJhbGFuY2UgaW4gRVZNIGJlZm9yZSB0cmFuc2ZlcnJpbmcgdmFsdWUgdG8gYW5vdGhlciBFVk0gYWRkcmVzcy4KLy8vCnRyYW5zYWN0aW9uKHRvRVZNQWRkcmVzc0hleDogU3RyaW5nLCBhbW91bnQ6IFVJbnQyNTYsIGdhc0xpbWl0OiBVSW50NjQpIHsKCiAgICBsZXQgY29hOiBhdXRoKEVWTS5XaXRoZHJhdywgRVZNLkNhbGwpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudAogICAgbGV0IHJlY2lwaWVudEVWTUFkZHJlc3M6IEVWTS5FVk1BZGRyZXNzCgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQm9ycm93VmFsdWUsIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS50eXBlKGF0OiAvc3RvcmFnZS9ldm0pID09IG5pbCB7CiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUoPC1FVk0uY3JlYXRlQ2FkZW5jZU93bmVkQWNjb3VudCgpLCB0bzogL3N0b3JhZ2UvZXZtKQogICAgICAgIH0KICAgICAgICBzZWxmLmNvYSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEVWTS5XaXRoZHJhdywgRVZNLkNhbGwpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oZnJvbTogL3N0b3JhZ2UvZXZtKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyByZWZlcmVuY2UgdG8gdGhlIHNpZ25lcidzIGJyaWRnZWQgYWNjb3VudCIpCgogICAgICAgIHNlbGYucmVjaXBpZW50RVZNQWRkcmVzcyA9IEVWTS5hZGRyZXNzRnJvbVN0cmluZyh0b0VWTUFkZHJlc3NIZXgpCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgLy8gaWYgc2VsZi5yZWNpcGllbnRFVk1BZGRyZXNzLmJ5dGVzID09IHNlbGYuY29hLmFkZHJlc3MoKS5ieXRlcyB7CiAgICAgICAgLy8gICAgIHJldHVybgogICAgICAgIC8vIH0KICAgICAgICBsZXQgZGF0YSA9ICIiCiAgICAgICAgbGV0IHR4UmVzdWx0ID0gc2VsZi5jb2EuY2FsbCgKICAgICAgICAgICAgdG86IHNlbGYucmVjaXBpZW50RVZNQWRkcmVzcywKICAgICAgICAgICAgZGF0YTogZGF0YSwKICAgICAgICAgICAgZ2FzTGltaXQ6IGdhc0xpbWl0LAogICAgICAgICAgICB2YWx1ZTogdmFsdWVCYWxhbmNlCiAgICAgICAgKQogICAgICAgIGFzc2VydCgKICAgICAgICAgICAgdHhSZXN1bHQuc3RhdHVzID09IEVWTS5TdGF0dXMuZmFpbGVkIHx8IHR4UmVzdWx0LnN0YXR1cyA9PSBFVk0uU3RhdHVzLnN1Y2Nlc3NmdWwsCiAgICAgICAgICAgIG1lc3NhZ2U6ICJldm1fZXJyb3I9Ii5jb25jYXQodHhSZXN1bHQuZXJyb3JNZXNzYWdlKS5jb25jYXQoIlxuIikKICAgICAgICApCiAgICB9Cn0=",
          "transferTokens": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgdHJhbnNmZXJUb2tlbnMgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhmMjMzZGNlZTg4ZmUwYWJlCgppbXBvcnQgPFRva2VuPiBmcm9tIDxUb2tlbkFkZHJlc3M+CgoKdHJhbnNhY3Rpb24oYW1vdW50OiBVRml4NjQsIHJlY2lwaWVudDogQWRkcmVzcykgewoKICAgIC8vIFRoZSBWYXVsdCByZXNvdXJjZSB0aGF0IGhvbGRzIHRoZSB0b2tlbnMgdGhhdCBhcmUgYmVpbmcgdHJhbnNmZXJlZAogICAgbGV0IHNlbnRWYXVsdDogQHtGdW5naWJsZVRva2VuLlZhdWx0fQoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UsIEJvcnJvd1ZhbHVlKSAmQWNjb3VudCkgewogICAgICAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIHNpZ25lcidzIHN0b3JlZCB2YXVsdAogICAgICAgIGxldCB2YXVsdFJlZiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICY8VG9rZW4+LlZhdWx0Pihmcm9tOiA8VG9rZW5TdG9yYWdlUGF0aD4pCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlZmVyZW5jZSB0byB0aGUgb3duZXIncyBWYXVsdCEiKQoKICAgICAgICAvLyBXaXRoZHJhdyB0b2tlbnMgZnJvbSB0aGUgc2lnbmVyJ3Mgc3RvcmVkIHZhdWx0CiAgICAgICAgc2VsZi5zZW50VmF1bHQgPC0gdmF1bHRSZWYud2l0aGRyYXcoYW1vdW50OiBhbW91bnQpCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgLy8gR2V0IHRoZSByZWNpcGllbnQncyBwdWJsaWMgYWNjb3VudCBvYmplY3QKICAgICAgICBsZXQgcmVjaXBpZW50QWNjb3VudCA9IGdldEFjY291bnQocmVjaXBpZW50KQoKICAgICAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIHJlY2lwaWVudCdzIFJlY2VpdmVyCiAgICAgICAgbGV0IHJlY2VpdmVyUmVmID0gcmVjaXBpZW50QWNjb3VudC5jYXBhYmlsaXRpZXMuYm9ycm93PCZ7RnVuZ2libGVUb2tlbi5WYXVsdH0+KDxUb2tlblJlY2VpdmVyUGF0aD4pIQogICAgICAgICAgICAKICAgICAgICAvLyBEZXBvc2l0IHRoZSB3aXRoZHJhd24gdG9rZW5zIGluIHRoZSByZWNpcGllbnQncyByZWNlaXZlcgogICAgICAgIHJlY2VpdmVyUmVmLmRlcG9zaXQoZnJvbTogPC1zZWxmLnNlbnRWYXVsdCkKCiAgICB9Cn0=",
          "transferTokensV3": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgdHJhbnNmZXJUb2tlbnNWMyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweGYyMzNkY2VlODhmZTBhYmUKCmltcG9ydCBTdG9yYWdlUmVudCBmcm9tIDB4NzA3YWRiYWQxNDI4YzYyNAoKaW1wb3J0IDxUb2tlbj4gZnJvbSA8VG9rZW5BZGRyZXNzPgoKCnRyYW5zYWN0aW9uKGFtb3VudDogVUZpeDY0LCByZWNpcGllbnQ6IEFkZHJlc3MpIHsKCiAgICAvLyBUaGUgVmF1bHQgcmVzb3VyY2UgdGhhdCBob2xkcyB0aGUgdG9rZW5zIHRoYXQgYXJlIGJlaW5nIHRyYW5zZmVyZWQKICAgIGxldCBzZW50VmF1bHQ6IEB7RnVuZ2libGVUb2tlbi5WYXVsdH0KCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChTdG9yYWdlLCBCb3Jyb3dWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICAgLy8gR2V0IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBzdG9yZWQgdmF1bHQKICAgICAgICBsZXQgdmF1bHRSZWYgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAmPFRva2VuPi5WYXVsdD4oZnJvbTogPFRva2VuU3RvcmFnZVBhdGg+KQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyByZWZlcmVuY2UgdG8gdGhlIG93bmVyJ3MgVmF1bHQhIikKCiAgICAgICAgLy8gV2l0aGRyYXcgdG9rZW5zIGZyb20gdGhlIHNpZ25lcidzIHN0b3JlZCB2YXVsdAogICAgICAgIHNlbGYuc2VudFZhdWx0IDwtIHZhdWx0UmVmLndpdGhkcmF3KGFtb3VudDogYW1vdW50KQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIC8vIEdldCB0aGUgcmVjaXBpZW50J3MgcHVibGljIGFjY291bnQgb2JqZWN0CiAgICAgICAgbGV0IHJlY2lwaWVudEFjY291bnQgPSBnZXRBY2NvdW50KHJlY2lwaWVudCkKCiAgICAgICAgLy8gR2V0IGEgcmVmZXJlbmNlIHRvIHRoZSByZWNpcGllbnQncyBSZWNlaXZlcgogICAgICAgIGxldCByZWNlaXZlclJlZiA9IHJlY2lwaWVudEFjY291bnQuY2FwYWJpbGl0aWVzLmJvcnJvdzwme0Z1bmdpYmxlVG9rZW4uVmF1bHR9Pig8VG9rZW5SZWNlaXZlclBhdGg+KSEKICAgICAgICAgICAgCiAgICAgICAgLy8gRGVwb3NpdCB0aGUgd2l0aGRyYXduIHRva2VucyBpbiB0aGUgcmVjaXBpZW50J3MgcmVjZWl2ZXIKICAgICAgICByZWNlaXZlclJlZi5kZXBvc2l0KGZyb206IDwtc2VsZi5zZW50VmF1bHQpCiAgICAgICAgU3RvcmFnZVJlbnQudHJ5UmVmaWxsKHJlY2lwaWVudCkKCiAgICB9Cn0="
        },
        "nft": {
          "checkNFTListEnabled": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBjaGVja05GVExpc3RFbmFibGVkIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgoKICAgIGltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgoKICAgIAogICAgYWNjZXNzKGFsbCkgZnVuIGNoZWNrQWVyYU5GVDB4MzBjZjVkY2Y2ZWE4ZDM3OVZhdWx0KGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgICBsZXQgdmF1bHRSZWYgPSBhY2NvdW50CiAgICAgIC5jYXBhYmlsaXRpZXMuZXhpc3RzKC9wdWJsaWMvYWVyYU5GVHMpCiAgICAgIHJldHVybiB2YXVsdFJlZgogICAgfQogICAgDQoKICAgIGFjY2VzcyhhbGwpIGZ1biBjaGVja0FydDB4ZDc5NmZmMTcxMDdiYmZmNlZhdWx0KGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgICBsZXQgdmF1bHRSZWYgPSBhY2NvdW50CiAgICAgIC5jYXBhYmlsaXRpZXMuZXhpc3RzKC9wdWJsaWMvdmVyc3VzQXJ0Q29sbGVjdGlvbikKICAgICAgcmV0dXJuIHZhdWx0UmVmCiAgICB9CiAgICANCgogICAgYWNjZXNzKGFsbCkgZnVuIGNoZWNrQmwweDB4NzYyMGFjZjZkN2YyNDY4YVZhdWx0KGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgICBsZXQgdmF1bHRSZWYgPSBhY2NvdW50CiAgICAgIC5jYXBhYmlsaXRpZXMuZXhpc3RzKC9wdWJsaWMvYmwweE5GVHMpCiAgICAgIHJldHVybiB2YXVsdFJlZgogICAgfQogICAgDQoKICAgIGFjY2VzcyhhbGwpIGZ1biBjaGVja0JvYmJsel9ORlQweGQ0NWUyYmQ5YTNkNTAwM2JWYXVsdChhZGRyZXNzOiBBZGRyZXNzKSA6IEJvb2wgewogICAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICAgICAgbGV0IHZhdWx0UmVmID0gYWNjb3VudAogICAgICAuY2FwYWJpbGl0aWVzLmV4aXN0cygvcHVibGljL0JvYmJsel9ORlRDb2xsZWN0aW9uKQogICAgICByZXR1cm4gdmF1bHRSZWYKICAgIH0KICAgIA0KCiAgICBhY2Nlc3MoYWxsKSBmdW4gY2hlY2tCcmVha2luZ1RfTkZUMHgzMjlmZWIzYWIwNjJkMjg5VmF1bHQoYWRkcmVzczogQWRkcmVzcykgOiBCb29sIHsKICAgICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgICAgIGxldCB2YXVsdFJlZiA9IGFjY291bnQKICAgICAgLmNhcGFiaWxpdGllcy5leGlzdHMoL3B1YmxpYy9CcmVha2luZ1RfTkZUQ29sbGVjdGlvbikKICAgICAgcmV0dXJuIHZhdWx0UmVmCiAgICB9CiAgICANCgogICAgYWNjZXNzKGFsbCkgZnVuIGNoZWNrQldBWVhfTkZUMHhmMDJiMTVlMTFlYjM3MTViVmF1bHQoYWRkcmVzczogQWRkcmVzcykgOiBCb29sIHsKICAgICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgICAgIGxldCB2YXVsdFJlZiA9IGFjY291bnQKICAgICAgLmNhcGFiaWxpdGllcy5leGlzdHMoL3B1YmxpYy9CV0FZWF9ORlRDb2xsZWN0aW9uKQogICAgICByZXR1cm4gdmF1bHRSZWYKICAgIH0KICAgIA0KCiAgICBhY2Nlc3MoYWxsKSBmdW4gY2hlY2tDYW5lc19WYXVsdF9ORlQweDMyOWZlYjNhYjA2MmQyODlWYXVsdChhZGRyZXNzOiBBZGRyZXNzKSA6IEJvb2wgewogICAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICAgICAgbGV0IHZhdWx0UmVmID0gYWNjb3VudAogICAgICAuY2FwYWJpbGl0aWVzLmV4aXN0cygvcHVibGljL0NhbmVzX1ZhdWx0X05GVENvbGxlY3Rpb24pCiAgICAgIHJldHVybiB2YXVsdFJlZgogICAgfQogICAgDQoKICAgIGFjY2VzcyhhbGwpIGZ1biBjaGVja0NhcjB4Zjg4N2VjZTM5MTY2OTA2ZVZhdWx0KGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgICBsZXQgdmF1bHRSZWYgPSBhY2NvdW50CiAgICAgIC5jYXBhYmlsaXRpZXMuZXhpc3RzKC9wdWJsaWMvQ2FyQ29sbGVjdGlvbikKICAgICAgcmV0dXJuIHZhdWx0UmVmCiAgICB9CiAgICANCgogICAgYWNjZXNzKGFsbCkgZnVuIGNoZWNrQ2FyQ2x1YjB4Zjg4N2VjZTM5MTY2OTA2ZVZhdWx0KGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgICBsZXQgdmF1bHRSZWYgPSBhY2NvdW50CiAgICAgIC5jYXBhYmlsaXRpZXMuZXhpc3RzKC9wdWJsaWMvQ2FyQ2x1YkNvbGxlY3Rpb24pCiAgICAgIHJldHVybiB2YXVsdFJlZgogICAgfQogICAgDQoKICAgIGFjY2VzcyhhbGwpIGZ1biBjaGVja0NoYXJpdHlORlQweDA5N2JhZmE0ZTBiNDhlZWZWYXVsdChhZGRyZXNzOiBBZGRyZXNzKSA6IEJvb2wgewogICAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICAgICAgbGV0IHZhdWx0UmVmID0gYWNjb3VudAogICAgICAuY2FwYWJpbGl0aWVzLmV4aXN0cygvcHVibGljL2ZpbmRDaGFyaXR5Q29sbGVjdGlvbikKICAgICAgcmV0dXJuIHZhdWx0UmVmCiAgICB9CiAgICANCgogICAgYWNjZXNzKGFsbCkgZnVuIGNoZWNrQ3J5cHRvUGlnZ29WMjB4ZDNkZjgyNGJmODE5MTBhNFZhdWx0KGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgICBsZXQgdmF1bHRSZWYgPSBhY2NvdW50CiAgICAgIC5jYXBhYmlsaXRpZXMuZXhpc3RzKC9wdWJsaWMvQ3J5cHRvUGlnZ29WMkNvbGxlY3Rpb24pCiAgICAgIHJldHVybiB2YXVsdFJlZgogICAgfQogICAgDQoKICAgIGFjY2VzcyhhbGwpIGZ1biBjaGVja0RHRF9ORlQweDMyOWZlYjNhYjA2MmQyODlWYXVsdChhZGRyZXNzOiBBZGRyZXNzKSA6IEJvb2wgewogICAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICAgICAgbGV0IHZhdWx0UmVmID0gYWNjb3VudAogICAgICAuY2FwYWJpbGl0aWVzLmV4aXN0cygvcHVibGljL0RHRF9ORlRDb2xsZWN0aW9uKQogICAgICByZXR1cm4gdmF1bHRSZWYKICAgIH0KICAgIA0KCiAgICBhY2Nlc3MoYWxsKSBmdW4gY2hlY2tEb29kbGVzMHhlODExOTNjNDI0Y2ZkM2ZiVmF1bHQoYWRkcmVzczogQWRkcmVzcykgOiBCb29sIHsKICAgICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgICAgIGxldCB2YXVsdFJlZiA9IGFjY291bnQKICAgICAgLmNhcGFiaWxpdGllcy5leGlzdHMoL3B1YmxpYy9kb29kbGVzKQogICAgICByZXR1cm4gdmF1bHRSZWYKICAgIH0KICAgIA0KCiAgICBhY2Nlc3MoYWxsKSBmdW4gY2hlY2tEcml2ZXJ6TkZUMHhhMDM5YmQ3ZDU1YTk2YzBjVmF1bHQoYWRkcmVzczogQWRkcmVzcykgOiBCb29sIHsKICAgICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgICAgIGxldCB2YXVsdFJlZiA9IGFjY291bnQKICAgICAgLmNhcGFiaWxpdGllcy5leGlzdHMoL3B1YmxpYy9Ecml2ZXJ6TkZUQ29sbGVjdGlvbikKICAgICAgcmV0dXJuIHZhdWx0UmVmCiAgICB9CiAgICANCgogICAgYWNjZXNzKGFsbCkgZnVuIGNoZWNrRVZNVk1CcmlkZ2VkTkZUX2QxMTI2MzRmMDY5MDJhOTc3ZGIxZDU5NmM3NzcxNWQ3MmY4ZGE4YTkweDFlNGFhMGI4N2QxMGIxNDFWYXVsdChhZGRyZXNzOiBBZGRyZXNzKSA6IEJvb2wgewogICAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICAgICAgbGV0IHZhdWx0UmVmID0gYWNjb3VudAogICAgICAuY2FwYWJpbGl0aWVzLmV4aXN0cygvcHVibGljL0VWTVZNQnJpZGdlZE5GVF9kMTEyNjM0ZjA2OTAyYTk3N2RiMWQ1OTZjNzc3MTVkNzJmOGRhOGE5Q29sbGVjdGlvbikKICAgICAgcmV0dXJuIHZhdWx0UmVmCiAgICB9CiAgICANCgogICAgYWNjZXNzKGFsbCkgZnVuIGNoZWNrRkxPQVQweDJkNGMzY2FmZmJlYWI4NDVWYXVsdChhZGRyZXNzOiBBZGRyZXNzKSA6IEJvb2wgewogICAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICAgICAgbGV0IHZhdWx0UmVmID0gYWNjb3VudAogICAgICAuY2FwYWJpbGl0aWVzLmV4aXN0cygvcHVibGljL0ZMT0FUQ29sbGVjdGlvblB1YmxpY1BhdGgpCiAgICAgIHJldHVybiB2YXVsdFJlZgogICAgfQogICAgDQoKICAgIGFjY2VzcyhhbGwpIGZ1biBjaGVja0Zsb2JvdDB4OTIxZWE0NDlkZmZlYzY4YVZhdWx0KGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgICBsZXQgdmF1bHRSZWYgPSBhY2NvdW50CiAgICAgIC5jYXBhYmlsaXRpZXMuZXhpc3RzKC9wdWJsaWMvRmxvYm90Q29sbGVjdGlvbikKICAgICAgcmV0dXJuIHZhdWx0UmVmCiAgICB9CiAgICANCgogICAgYWNjZXNzKGFsbCkgZnVuIGNoZWNrRmxvdmF0YXIweDkyMWVhNDQ5ZGZmZWM2OGFWYXVsdChhZGRyZXNzOiBBZGRyZXNzKSA6IEJvb2wgewogICAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICAgICAgbGV0IHZhdWx0UmVmID0gYWNjb3VudAogICAgICAuY2FwYWJpbGl0aWVzLmV4aXN0cygvcHVibGljL0Zsb3ZhdGFyQ29sbGVjdGlvbikKICAgICAgcmV0dXJuIHZhdWx0UmVmCiAgICB9CiAgICANCgogICAgYWNjZXNzKGFsbCkgZnVuIGNoZWNrRmxvdmF0YXJDb21wb25lbnQweDkyMWVhNDQ5ZGZmZWM2OGFWYXVsdChhZGRyZXNzOiBBZGRyZXNzKSA6IEJvb2wgewogICAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICAgICAgbGV0IHZhdWx0UmVmID0gYWNjb3VudAogICAgICAuY2FwYWJpbGl0aWVzLmV4aXN0cygvcHVibGljL0Zsb3ZhdGFyQ29tcG9uZW50Q29sbGVjdGlvbikKICAgICAgcmV0dXJuIHZhdWx0UmVmCiAgICB9CiAgICANCgogICAgYWNjZXNzKGFsbCkgZnVuIGNoZWNrRmxvd1Jld2FyZHMweGE0NWVhZDFjZjFjYTllZGFWYXVsdChhZGRyZXNzOiBBZGRyZXNzKSA6IEJvb2wgewogICAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICAgICAgbGV0IHZhdWx0UmVmID0gYWNjb3VudAogICAgICAuY2FwYWJpbGl0aWVzLmV4aXN0cygvcHVibGljL2Zsb3dSZXdhcmRzQ29sbGVjdGlvblB1YmxpYykKICAgICAgcmV0dXJuIHZhdWx0UmVmCiAgICB9CiAgICANCgogICAgYWNjZXNzKGFsbCkgZnVuIGNoZWNrRmxvd3ZlcnNlUGFzczB4OTIxMmE4NzUwMWE4YTZhMlZhdWx0KGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgICBsZXQgdmF1bHRSZWYgPSBhY2NvdW50CiAgICAgIC5jYXBhYmlsaXRpZXMuZXhpc3RzKC9wdWJsaWMvRmxvd3ZlcnNlUGFzc0NvbGxlY3Rpb24pCiAgICAgIHJldHVybiB2YXVsdFJlZgogICAgfQogICAgDQoKICAgIGFjY2VzcyhhbGwpIGZ1biBjaGVja0Zsb3d2ZXJzZVNvY2tzMHhjZTRjMDI1MzlkMWZhYmU4VmF1bHQoYWRkcmVzczogQWRkcmVzcykgOiBCb29sIHsKICAgICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgICAgIGxldCB2YXVsdFJlZiA9IGFjY291bnQKICAgICAgLmNhcGFiaWxpdGllcy5leGlzdHMoL3B1YmxpYy9NYXRyaXhNYXJrZXRGbG93dmVyc2VTb2Nrc0NvbGxlY3Rpb24pCiAgICAgIHJldHVybiB2YXVsdFJlZgogICAgfQogICAgDQoKICAgIGFjY2VzcyhhbGwpIGZ1biBjaGVja0Zsb3d2ZXJzZVRyZWFzdXJlczB4OTIxMmE4NzUwMWE4YTZhMlZhdWx0KGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgICBsZXQgdmF1bHRSZWYgPSBhY2NvdW50CiAgICAgIC5jYXBhYmlsaXRpZXMuZXhpc3RzKC9wdWJsaWMvRmxvd3ZlcnNlVHJlYXN1cmVzQ29sbGVjdGlvbikKICAgICAgcmV0dXJuIHZhdWx0UmVmCiAgICB9CiAgICANCgogICAgYWNjZXNzKGFsbCkgZnVuIGNoZWNrRlJDMjBTZW1pTkZUMHhkMmFiYjVkYmY1ZTA4NjY2VmF1bHQoYWRkcmVzczogQWRkcmVzcykgOiBCb29sIHsKICAgICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgICAgIGxldCB2YXVsdFJlZiA9IGFjY291bnQKICAgICAgLmNhcGFiaWxpdGllcy5leGlzdHMoL3B1YmxpYy9GUkMyMFNlbWlORlRfMHhkMmFiYjVkYmY1ZTA4NjY2Y29sbGVjdGlvbikKICAgICAgcmV0dXJuIHZhdWx0UmVmCiAgICB9CiAgICANCgogICAgYWNjZXNzKGFsbCkgZnVuIGNoZWNrRnVjaGlib2xhX05GVDB4ZjNlZTY4NGNkMDI1OWZlZFZhdWx0KGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgICBsZXQgdmF1bHRSZWYgPSBhY2NvdW50CiAgICAgIC5jYXBhYmlsaXRpZXMuZXhpc3RzKC9wdWJsaWMvRnVjaGlib2xhX05GVENvbGxlY3Rpb24pCiAgICAgIHJldHVybiB2YXVsdFJlZgogICAgfQogICAgDQoKICAgIGFjY2VzcyhhbGwpIGZ1biBjaGVja0dvb2JlclhDb250cmFjdDB4MzRmMmJmNGE4MGJiMGY2OVZhdWx0KGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgICBsZXQgdmF1bHRSZWYgPSBhY2NvdW50CiAgICAgIC5jYXBhYmlsaXRpZXMuZXhpc3RzKC9wdWJsaWMvR29vYmVyelBhcnR5Rm9sa3NDb2xsZWN0aW9uUHVibGljKQogICAgICByZXR1cm4gdmF1bHRSZWYKICAgIH0KICAgIA0KCiAgICBhY2Nlc3MoYWxsKSBmdW4gY2hlY2tIZWxtZXQweGY4ODdlY2UzOTE2NjkwNmVWYXVsdChhZGRyZXNzOiBBZGRyZXNzKSA6IEJvb2wgewogICAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICAgICAgbGV0IHZhdWx0UmVmID0gYWNjb3VudAogICAgICAuY2FwYWJpbGl0aWVzLmV4aXN0cygvcHVibGljL0hlbG1ldENvbGxlY3Rpb24pCiAgICAgIHJldHVybiB2YXVsdFJlZgogICAgfQogICAgDQoKICAgIGFjY2VzcyhhbGwpIGZ1biBjaGVja0ljb25vR3JhcGhpa2EweGE2ZWU0N2RhODhlNmNiZGVWYXVsdChhZGRyZXNzOiBBZGRyZXNzKSA6IEJvb2wgewogICAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICAgICAgbGV0IHZhdWx0UmVmID0gYWNjb3VudAogICAgICAuY2FwYWJpbGl0aWVzLmV4aXN0cygvcHVibGljL0ljb25vR3JhcGhpa2FORlQpCiAgICAgIHJldHVybiB2YXVsdFJlZgogICAgfQogICAgDQoKICAgIGFjY2VzcyhhbGwpIGZ1biBjaGVja0pvbGx5Sm9rZXJzMHg2OTliZjI4NDEwMWE3NmYxVmF1bHQoYWRkcmVzczogQWRkcmVzcykgOiBCb29sIHsKICAgICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgICAgIGxldCB2YXVsdFJlZiA9IGFjY291bnQKICAgICAgLmNhcGFiaWxpdGllcy5leGlzdHMoL3B1YmxpYy9Kb2xseUpva2Vyc0NvbGxlY3Rpb24pCiAgICAgIHJldHVybiB2YXVsdFJlZgogICAgfQogICAgDQoKICAgIGFjY2VzcyhhbGwpIGZ1biBjaGVja01hZ25ldGlxMHg1MjU3ZjE0NTVlZDM2NmZlVmF1bHQoYWRkcmVzczogQWRkcmVzcykgOiBCb29sIHsKICAgICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgICAgIGxldCB2YXVsdFJlZiA9IGFjY291bnQKICAgICAgLmNhcGFiaWxpdGllcy5leGlzdHMoL3B1YmxpYy9NYWduZXRpcVRva2Vuc0NvbGxlY3Rpb24pCiAgICAgIHJldHVybiB2YXVsdFJlZgogICAgfQogICAgDQoKICAgIGFjY2VzcyhhbGwpIGZ1biBjaGVja01ldGF2ZXJzZU1hcmtldDB4ZDc1NjQ1MGYzODZmYjRhY1ZhdWx0KGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgICBsZXQgdmF1bHRSZWYgPSBhY2NvdW50CiAgICAgIC5jYXBhYmlsaXRpZXMuZXhpc3RzKC9wdWJsaWMvTmZ0TWV0YXZlcnNlTWFya2V0Q29sbGVjdGlvblZlcnNpb25Ud28pCiAgICAgIHJldHVybiB2YXVsdFJlZgogICAgfQogICAgDQoKICAgIGFjY2VzcyhhbGwpIGZ1biBjaGVja01GTENsdWIweDhlYmNiZmQ1MTZiMWRhMjdWYXVsdChhZGRyZXNzOiBBZGRyZXNzKSA6IEJvb2wgewogICAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICAgICAgbGV0IHZhdWx0UmVmID0gYWNjb3VudAogICAgICAuY2FwYWJpbGl0aWVzLmV4aXN0cygvcHVibGljL01GTENsdWJDb2xsZWN0aW9uKQogICAgICByZXR1cm4gdmF1bHRSZWYKICAgIH0KICAgIA0KCiAgICBhY2Nlc3MoYWxsKSBmdW4gY2hlY2tNRkxQbGF5ZXIweDhlYmNiZmQ1MTZiMWRhMjdWYXVsdChhZGRyZXNzOiBBZGRyZXNzKSA6IEJvb2wgewogICAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICAgICAgbGV0IHZhdWx0UmVmID0gYWNjb3VudAogICAgICAuY2FwYWJpbGl0aWVzLmV4aXN0cygvcHVibGljL01GTFBsYXllckNvbGxlY3Rpb24pCiAgICAgIHJldHVybiB2YXVsdFJlZgogICAgfQogICAgDQoKICAgIGFjY2VzcyhhbGwpIGZ1biBjaGVja01JS09TRUFORlQweDBiODBlNDJhYWFiMzA1ZjBWYXVsdChhZGRyZXNzOiBBZGRyZXNzKSA6IEJvb2wgewogICAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICAgICAgbGV0IHZhdWx0UmVmID0gYWNjb3VudAogICAgICAuY2FwYWJpbGl0aWVzLmV4aXN0cygvcHVibGljL01pa29TZWFDb2xsZWN0aW9uKQogICAgICByZXR1cm4gdmF1bHRSZWYKICAgIH0KICAgIA0KCiAgICBhY2Nlc3MoYWxsKSBmdW4gY2hlY2tORkd2MzB4MTIzY2I2NjY5OTZiODQzMlZhdWx0KGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgICBsZXQgdmF1bHRSZWYgPSBhY2NvdW50CiAgICAgIC5jYXBhYmlsaXRpZXMuZXhpc3RzKC9wdWJsaWMvbmZnTkZUQ29sbGVjdGlvbikKICAgICAgcmV0dXJuIHZhdWx0UmVmCiAgICB9CiAgICANCgogICAgYWNjZXNzKGFsbCkgZnVuIGNoZWNrT25lU2hvdHMweDRmN2ZmNTQzYzkzNjA3MmJWYXVsdChhZGRyZXNzOiBBZGRyZXNzKSA6IEJvb2wgewogICAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICAgICAgbGV0IHZhdWx0UmVmID0gYWNjb3VudAogICAgICAuY2FwYWJpbGl0aWVzLmV4aXN0cygvcHVibGljL1RpYmxlc09uZVNob3RzQ29sbGVjdGlvbikKICAgICAgcmV0dXJuIHZhdWx0UmVmCiAgICB9CiAgICANCgogICAgYWNjZXNzKGFsbCkgZnVuIGNoZWNrUGFja05GVDB4ZTRjZjRiZGMxNzUxYzY1ZFZhdWx0KGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgICBsZXQgdmF1bHRSZWYgPSBhY2NvdW50CiAgICAgIC5jYXBhYmlsaXRpZXMuZXhpc3RzKC9wdWJsaWMvUGFja05GVENvbGxlY3Rpb25QdWIpCiAgICAgIHJldHVybiB2YXVsdFJlZgogICAgfQogICAgDQoKICAgIGFjY2VzcyhhbGwpIGZ1biBjaGVja1BhcnR5TWFuc2lvbkRyaW5rc0NvbnRyYWN0MHgzNGYyYmY0YTgwYmIwZjY5VmF1bHQoYWRkcmVzczogQWRkcmVzcykgOiBCb29sIHsKICAgICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgICAgIGxldCB2YXVsdFJlZiA9IGFjY291bnQKICAgICAgLmNhcGFiaWxpdGllcy5leGlzdHMoL3B1YmxpYy9QYXJ0eU1hbnNpb25Ecmlua0NvbGxlY3Rpb25QdWJsaWMpCiAgICAgIHJldHVybiB2YXVsdFJlZgogICAgfQogICAgDQoKICAgIGFjY2VzcyhhbGwpIGZ1biBjaGVja1BpZWNlMHhmZGM0MzZmZDdkYjIyZTAxVmF1bHQoYWRkcmVzczogQWRkcmVzcykgOiBCb29sIHsKICAgICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgICAgIGxldCB2YXVsdFJlZiA9IGFjY291bnQKICAgICAgLmNhcGFiaWxpdGllcy5leGlzdHMoL3B1YmxpYy9QaWVjZV9Db2xsZWN0aW9uMHhmZGM0MzZmZDdkYjIyZTAxKQogICAgICByZXR1cm4gdmF1bHRSZWYKICAgIH0KICAgIA0KCiAgICBhY2Nlc3MoYWxsKSBmdW4gY2hlY2tQdWZmUGFsejB4YTNlYjk3ODRhZTdkYzljOFZhdWx0KGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgICBsZXQgdmF1bHRSZWYgPSBhY2NvdW50CiAgICAgIC5jYXBhYmlsaXRpZXMuZXhpc3RzKC9wdWJsaWMvUHVmZlBhbHpDb2xsZWN0aW9uKQogICAgICByZXR1cm4gdmF1bHRSZWYKICAgIH0KICAgIA0KCiAgICBhY2Nlc3MoYWxsKSBmdW4gY2hlY2tSYWNlRGF5X05GVDB4MzI5ZmViM2FiMDYyZDI4OVZhdWx0KGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgICBsZXQgdmF1bHRSZWYgPSBhY2NvdW50CiAgICAgIC5jYXBhYmlsaXRpZXMuZXhpc3RzKC9wdWJsaWMvUmFjZURheV9ORlRDb2xsZWN0aW9uKQogICAgICByZXR1cm4gdmF1bHRSZWYKICAgIH0KICAgIA0KCiAgICBhY2Nlc3MoYWxsKSBmdW4gY2hlY2tSZWRlZW1hYmxlczB4ZTgxMTkzYzQyNGNmZDNmYlZhdWx0KGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgICBsZXQgdmF1bHRSZWYgPSBhY2NvdW50CiAgICAgIC5jYXBhYmlsaXRpZXMuZXhpc3RzKC9wdWJsaWMvcmVkZWVtYWJsZXMpCiAgICAgIHJldHVybiB2YXVsdFJlZgogICAgfQogICAgDQoKICAgIGFjY2VzcyhhbGwpIGZ1biBjaGVja1JvZ3VlQnVubmllc19ORlQweDM5NjY0NmYxMTBhZmIyZTZWYXVsdChhZGRyZXNzOiBBZGRyZXNzKSA6IEJvb2wgewogICAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICAgICAgbGV0IHZhdWx0UmVmID0gYWNjb3VudAogICAgICAuY2FwYWJpbGl0aWVzLmV4aXN0cygvcHVibGljL1JvZ3VlQnVubmllc19ORlRDb2xsZWN0aW9uKQogICAgICByZXR1cm4gdmF1bHRSZWYKICAgIH0KICAgIA0KCiAgICBhY2Nlc3MoYWxsKSBmdW4gY2hlY2tTcG9ydGJpdDB4Y2E1YzMxYzBjMDNlMTFiZVZhdWx0KGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgICBsZXQgdmF1bHRSZWYgPSBhY2NvdW50CiAgICAgIC5jYXBhYmlsaXRpZXMuZXhpc3RzKC9wdWJsaWMvU3BvcnRiaXRDb2xsZWN0aW9uKQogICAgICByZXR1cm4gdmF1bHRSZWYKICAgIH0KICAgIA0KCiAgICBhY2Nlc3MoYWxsKSBmdW4gY2hlY2tTcG9ydHZhdGFyMHhjYTVjMzFjMGMwM2UxMWJlVmF1bHQoYWRkcmVzczogQWRkcmVzcykgOiBCb29sIHsKICAgICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgICAgIGxldCB2YXVsdFJlZiA9IGFjY291bnQKICAgICAgLmNhcGFiaWxpdGllcy5leGlzdHMoL3B1YmxpYy9TcG9ydHZhdGFyQ29sbGVjdGlvbikKICAgICAgcmV0dXJuIHZhdWx0UmVmCiAgICB9CiAgICANCgogICAgYWNjZXNzKGFsbCkgZnVuIGNoZWNrVG9wU2hvdDB4MGIyYTMyOTljYzg1N2UyOVZhdWx0KGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgICBsZXQgdmF1bHRSZWYgPSBhY2NvdW50CiAgICAgIC5jYXBhYmlsaXRpZXMuZXhpc3RzKC9wdWJsaWMvTW9tZW50Q29sbGVjdGlvbikKICAgICAgcmV0dXJuIHZhdWx0UmVmCiAgICB9CiAgICANCgogICAgYWNjZXNzKGFsbCkgZnVuIGNoZWNrVUZDX05GVDB4MzI5ZmViM2FiMDYyZDI4OVZhdWx0KGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgICBsZXQgdmF1bHRSZWYgPSBhY2NvdW50CiAgICAgIC5jYXBhYmlsaXRpZXMuZXhpc3RzKC9wdWJsaWMvVUZDX05GVENvbGxlY3Rpb24pCiAgICAgIHJldHVybiB2YXVsdFJlZgogICAgfQogICAgDQoKICAgIGFjY2VzcyhhbGwpIGZ1biBjaGVja1dlYXJhYmxlczB4ZTgxMTkzYzQyNGNmZDNmYlZhdWx0KGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgICBsZXQgdmF1bHRSZWYgPSBhY2NvdW50CiAgICAgIC5jYXBhYmlsaXRpZXMuZXhpc3RzKC9wdWJsaWMvd2VhcmFibGVzKQogICAgICByZXR1cm4gdmF1bHRSZWYKICAgIH0KICAgIA0KCiAgICBhY2Nlc3MoYWxsKSBmdW4gY2hlY2tXaGVlbDB4Zjg4N2VjZTM5MTY2OTA2ZVZhdWx0KGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgICBsZXQgdmF1bHRSZWYgPSBhY2NvdW50CiAgICAgIC5jYXBhYmlsaXRpZXMuZXhpc3RzKC9wdWJsaWMvV2hlZWxDb2xsZWN0aW9uKQogICAgICByZXR1cm4gdmF1bHRSZWYKICAgIH0KICAgIA0KCiAgICBhY2Nlc3MoYWxsKSBmdW4gY2hlY2taZWVkeklOTzB4NjJiMzA2M2ZiZTY3MmZjOFZhdWx0KGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgICBsZXQgdmF1bHRSZWYgPSBhY2NvdW50CiAgICAgIC5jYXBhYmlsaXRpZXMuZXhpc3RzKC9wdWJsaWMvWmVlZHpJTk9Db2xsZWN0aW9uKQogICAgICByZXR1cm4gdmF1bHRSZWYKICAgIH0KICAgIA0KCiAgICBhY2Nlc3MoYWxsKSBmdW4gY2hlY2tBZXJhUmV3YXJkczB4MzBjZjVkY2Y2ZWE4ZDM3OVZhdWx0KGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgICBsZXQgdmF1bHRSZWYgPSBhY2NvdW50CiAgICAgIC5jYXBhYmlsaXRpZXMuZXhpc3RzKC9wdWJsaWMvYWVyYVJld2FyZHNORlQpCiAgICAgIHJldHVybiB2YXVsdFJlZgogICAgfQogICAgDQoKICAgIGFjY2VzcyhhbGwpIGZ1biBjaGVja2FpU3BvcnRzTWludGVyMHhhYmU1YTJiZjQ3Y2U1YmYzVmF1bHQoYWRkcmVzczogQWRkcmVzcykgOiBCb29sIHsKICAgICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgICAgIGxldCB2YXVsdFJlZiA9IGFjY291bnQKICAgICAgLmNhcGFiaWxpdGllcy5leGlzdHMoL3B1YmxpYy9haVNwb3J0c01pbnRlckNvbGxlY3Rpb24pCiAgICAgIHJldHVybiB2YXVsdFJlZgogICAgfQogICAgDQoKICAgIGFjY2VzcyhhbGwpIGZ1biBjaGVja0FsbERheTB4ZTRjZjRiZGMxNzUxYzY1ZFZhdWx0KGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgICBsZXQgdmF1bHRSZWYgPSBhY2NvdW50CiAgICAgIC5jYXBhYmlsaXRpZXMuZXhpc3RzKC9wdWJsaWMvQWxsRGF5TkZUQ29sbGVjdGlvbikKICAgICAgcmV0dXJuIHZhdWx0UmVmCiAgICB9CiAgICANCgogICAgYWNjZXNzKGFsbCkgZnVuIGNoZWNrQmxvdml6ZU5GVDB4ZWU0NTY3YWI3ZjYzYWJmMlZhdWx0KGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgICBsZXQgdmF1bHRSZWYgPSBhY2NvdW50CiAgICAgIC5jYXBhYmlsaXRpZXMuZXhpc3RzKC9wdWJsaWMvYmxvdml6ZU5GVENvbGxlY3Rpb24pCiAgICAgIHJldHVybiB2YXVsdFJlZgogICAgfQogICAgDQoKICAgIGFjY2VzcyhhbGwpIGZ1biBjaGVja0JvbmV5YXJkMHg3YTk0NDJiZTBiM2MxNzhhVmF1bHQoYWRkcmVzczogQWRkcmVzcykgOiBCb29sIHsKICAgICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgICAgIGxldCB2YXVsdFJlZiA9IGFjY291bnQKICAgICAgLmNhcGFiaWxpdGllcy5leGlzdHMoL3B1YmxpYy9Cb25leWFyZENvbGxlY3Rpb24pCiAgICAgIHJldHVybiB2YXVsdFJlZgogICAgfQogICAgDQoKICAgIGFjY2VzcyhhbGwpIGZ1biBjaGVja0NpbWVsaW9fTkZUMHgyYzlkZTkzN2MzMTk0NjhkVmF1bHQoYWRkcmVzczogQWRkcmVzcykgOiBCb29sIHsKICAgICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgICAgIGxldCB2YXVsdFJlZiA9IGFjY291bnQKICAgICAgLmNhcGFiaWxpdGllcy5leGlzdHMoL3B1YmxpYy9DaW1lbGlvX05GVENvbGxlY3Rpb24pCiAgICAgIHJldHVybiB2YXVsdFJlZgogICAgfQogICAgDQoKICAgIGFjY2VzcyhhbGwpIGZ1biBjaGVja0NyeXB0b1BpZ2dvMHhkM2RmODI0YmY4MTkxMGE0VmF1bHQoYWRkcmVzczogQWRkcmVzcykgOiBCb29sIHsKICAgICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgICAgIGxldCB2YXVsdFJlZiA9IGFjY291bnQKICAgICAgLmNhcGFiaWxpdGllcy5leGlzdHMoL3B1YmxpYy9DcnlwdG9QaWdnb0NvbGxlY3Rpb24pCiAgICAgIHJldHVybiB2YXVsdFJlZgogICAgfQogICAgDQoKICAgIGFjY2VzcyhhbGwpIGZ1biBjaGVja0NyeXB0b1BpZ2dvUG90aW9uMHhkM2RmODI0YmY4MTkxMGE0VmF1bHQoYWRkcmVzczogQWRkcmVzcykgOiBCb29sIHsKICAgICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgICAgIGxldCB2YXVsdFJlZiA9IGFjY291bnQKICAgICAgLmNhcGFiaWxpdGllcy5leGlzdHMoL3B1YmxpYy9DcnlwdG9QaWdnb1BvdGlvbkNvbGxlY3Rpb24pCiAgICAgIHJldHVybiB2YXVsdFJlZgogICAgfQogICAgDQoKICAgIGFjY2VzcyhhbGwpIGZ1biBjaGVja0RpbWVuc2lvblgweGUzYWQ2MDMwY2JhZmYxYzJWYXVsdChhZGRyZXNzOiBBZGRyZXNzKSA6IEJvb2wgewogICAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICAgICAgbGV0IHZhdWx0UmVmID0gYWNjb3VudAogICAgICAuY2FwYWJpbGl0aWVzLmV4aXN0cygvcHVibGljL2RteENvbGxlY3Rpb24pCiAgICAgIHJldHVybiB2YXVsdFJlZgogICAgfQogICAgDQoKICAgIGFjY2VzcyhhbGwpIGZ1biBjaGVja0RvbWFpbnMweDIzM2ViMDEyZDM0YjAwNzBWYXVsdChhZGRyZXNzOiBBZGRyZXNzKSA6IEJvb2wgewogICAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICAgICAgbGV0IHZhdWx0UmVmID0gYWNjb3VudAogICAgICAuY2FwYWJpbGl0aWVzLmV4aXN0cygvcHVibGljL2Zuc0RvbWFpbkNvbGxlY3Rpb24pCiAgICAgIHJldHVybiB2YXVsdFJlZgogICAgfQogICAgDQoKICAgIGFjY2VzcyhhbGwpIGZ1biBjaGVja0ZhbnRhc3RlY05GVDB4NGJiZmY0NjFmYThmNjE5MlZhdWx0KGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgICBsZXQgdmF1bHRSZWYgPSBhY2NvdW50CiAgICAgIC5jYXBhYmlsaXRpZXMuZXhpc3RzKC9wdWJsaWMvRmFudGFzdGVjTkZUQ29sbGVjdGlvbikKICAgICAgcmV0dXJuIHZhdWx0UmVmCiAgICB9CiAgICANCgogICAgYWNjZXNzKGFsbCkgZnVuIGNoZWNrRmxvdmF0YXJEdXN0Q29sbGVjdGlibGUweDkyMWVhNDQ5ZGZmZWM2OGFWYXVsdChhZGRyZXNzOiBBZGRyZXNzKSA6IEJvb2wgewogICAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICAgICAgbGV0IHZhdWx0UmVmID0gYWNjb3VudAogICAgICAuY2FwYWJpbGl0aWVzLmV4aXN0cygvcHVibGljL0Zsb3ZhdGFyRHVzdENvbGxlY3RpYmxlQ29sbGVjdGlvbikKICAgICAgcmV0dXJuIHZhdWx0UmVmCiAgICB9CiAgICANCgogICAgYWNjZXNzKGFsbCkgZnVuIGNoZWNrRmxvd3R5V3JhcHBlZDB4NTkyZWIzMmI0N2Q4Yjg1ZlZhdWx0KGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgICBsZXQgdmF1bHRSZWYgPSBhY2NvdW50CiAgICAgIC5jYXBhYmlsaXRpZXMuZXhpc3RzKC9wdWJsaWMvRmxvd3R5V3JhcHBlZF8weDU5MmViMzJiNDdkOGI4NWYpCiAgICAgIHJldHVybiB2YXVsdFJlZgogICAgfQogICAgDQoKICAgIGFjY2VzcyhhbGwpIGZ1biBjaGVja0Zsb3d2ZXJzZVNoaXJ0MHg5MjEyYTg3NTAxYThhNmEyVmF1bHQoYWRkcmVzczogQWRkcmVzcykgOiBCb29sIHsKICAgICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgICAgIGxldCB2YXVsdFJlZiA9IGFjY291bnQKICAgICAgLmNhcGFiaWxpdGllcy5leGlzdHMoL3B1YmxpYy9GbG93dmVyc2VTaGlydENvbGxlY3Rpb24pCiAgICAgIHJldHVybiB2YXVsdFJlZgogICAgfQogICAgDQoKICAgIGFjY2VzcyhhbGwpIGZ1biBjaGVja0dhaWEweDhiMTQ4MTgzYzI4ZmY4OGZWYXVsdChhZGRyZXNzOiBBZGRyZXNzKSA6IEJvb2wgewogICAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICAgICAgbGV0IHZhdWx0UmVmID0gYWNjb3VudAogICAgICAuY2FwYWJpbGl0aWVzLmV4aXN0cygvcHVibGljL0dhaWFDb2xsZWN0aW9uMDAxKQogICAgICByZXR1cm4gdmF1bHRSZWYKICAgIH0KICAgIA0KCiAgICBhY2Nlc3MoYWxsKSBmdW4gY2hlY2tHb2xhem9zMHg4N2NhNzNhNDFiYjUwYWQ1VmF1bHQoYWRkcmVzczogQWRkcmVzcykgOiBCb29sIHsKICAgICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgICAgIGxldCB2YXVsdFJlZiA9IGFjY291bnQKICAgICAgLmNhcGFiaWxpdGllcy5leGlzdHMoL3B1YmxpYy9Hb2xhem9zTkZUQ29sbGVjdGlvbikKICAgICAgcmV0dXJuIHZhdWx0UmVmCiAgICB9CiAgICANCgogICAgYWNjZXNzKGFsbCkgZnVuIGNoZWNrSGVyb2VzT2ZUaGVGbG93MHgxZGMzN2FiNTFhNTRkODNmVmF1bHQoYWRkcmVzczogQWRkcmVzcykgOiBCb29sIHsKICAgICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgICAgIGxldCB2YXVsdFJlZiA9IGFjY291bnQKICAgICAgLmNhcGFiaWxpdGllcy5leGlzdHMoL3B1YmxpYy9IZXJvZXNPZlRoZUZsb3dDb2xsZWN0aW9uKQogICAgICByZXR1cm4gdmF1bHRSZWYKICAgIH0KICAgIA0KCiAgICBhY2Nlc3MoYWxsKSBmdW4gY2hlY2tIV0dhcmFnZUNhcmQweGQwYmNlZmRmMWU2N2VhODVWYXVsdChhZGRyZXNzOiBBZGRyZXNzKSA6IEJvb2wgewogICAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICAgICAgbGV0IHZhdWx0UmVmID0gYWNjb3VudAogICAgICAuY2FwYWJpbGl0aWVzLmV4aXN0cygvcHVibGljL0hXR2FyYWdlQ2FyZENvbGxlY3Rpb24pCiAgICAgIHJldHVybiB2YXVsdFJlZgogICAgfQogICAgDQoKICAgIGFjY2VzcyhhbGwpIGZ1biBjaGVja0thcmF0TkZUMHg4MmVkMWI5Y2JhNWJiMWIzVmF1bHQoYWRkcmVzczogQWRkcmVzcykgOiBCb29sIHsKICAgICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgICAgIGxldCB2YXVsdFJlZiA9IGFjY291bnQKICAgICAgLmNhcGFiaWxpdGllcy5leGlzdHMoL3B1YmxpYy9LYXJhdE5GVENvbGxlY3Rpb24pCiAgICAgIHJldHVybiB2YXVsdFJlZgogICAgfQogICAgDQoKICAgIGFjY2VzcyhhbGwpIGZ1biBjaGVja0tlZXBySXRlbXMweDVlYjEyYWQzZDVhOTk5NDVWYXVsdChhZGRyZXNzOiBBZGRyZXNzKSA6IEJvb2wgewogICAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICAgICAgbGV0IHZhdWx0UmVmID0gYWNjb3VudAogICAgICAuY2FwYWJpbGl0aWVzLmV4aXN0cygvcHVibGljL0tlZXBySXRlbXNDb2xsZWN0aW9uVjEwKQogICAgICByZXR1cm4gdmF1bHRSZWYKICAgIH0KICAgIA0KCiAgICBhY2Nlc3MoYWxsKSBmdW4gY2hlY2tNYXRyaXhXb3JsZFZvdWNoZXIweDBkNzdlYzQ3YmJhZDhlZjZWYXVsdChhZGRyZXNzOiBBZGRyZXNzKSA6IEJvb2wgewogICAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICAgICAgbGV0IHZhdWx0UmVmID0gYWNjb3VudAogICAgICAuY2FwYWJpbGl0aWVzLmV4aXN0cygvcHVibGljL01hdHJpeFdvcmxkVm91Y2hlckNvbGxlY3Rpb24pCiAgICAgIHJldHVybiB2YXVsdFJlZgogICAgfQogICAgDQoKICAgIGFjY2VzcyhhbGwpIGZ1biBjaGVja01GTFBhY2sweDhlYmNiZmQ1MTZiMWRhMjdWYXVsdChhZGRyZXNzOiBBZGRyZXNzKSA6IEJvb2wgewogICAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICAgICAgbGV0IHZhdWx0UmVmID0gYWNjb3VudAogICAgICAuY2FwYWJpbGl0aWVzLmV4aXN0cygvcHVibGljL01GTFBhY2tDb2xsZWN0aW9uKQogICAgICByZXR1cm4gdmF1bHRSZWYKICAgIH0KICAgIA0KCiAgICBhY2Nlc3MoYWxsKSBmdW4gY2hlY2tPcmRpbmFsMHg5MjEyYTg3NTAxYThhNmEyVmF1bHQoYWRkcmVzczogQWRkcmVzcykgOiBCb29sIHsKICAgICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgICAgIGxldCB2YXVsdFJlZiA9IGFjY291bnQKICAgICAgLmNhcGFiaWxpdGllcy5leGlzdHMoL3B1YmxpYy9PcmRpbmFsQ29sbGVjdGlvbikKICAgICAgcmV0dXJuIHZhdWx0UmVmCiAgICB9CiAgICANCgogICAgYWNjZXNzKGFsbCkgZnVuIGNoZWNrU2V1c3NpYmxlczB4MzIxZDhmY2RlMDVmNmU4Y1ZhdWx0KGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgICBsZXQgdmF1bHRSZWYgPSBhY2NvdW50CiAgICAgIC5jYXBhYmlsaXRpZXMuZXhpc3RzKC9wdWJsaWMvVGlibGVzU2V1c3NpYmxlc0NvbGxlY3Rpb24pCiAgICAgIHJldHVybiB2YXVsdFJlZgogICAgfQogICAgDQoKICAgIGFjY2VzcyhhbGwpIGZ1biBjaGVja1NrOHRpYmxlczB4MGEyZmJiOTJhOGFlNWM2ZFZhdWx0KGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgICBsZXQgdmF1bHRSZWYgPSBhY2NvdW50CiAgICAgIC5jYXBhYmlsaXRpZXMuZXhpc3RzKC9wdWJsaWMvVGlibGVzU2s4dGlibGVzQ29sbGVjdGlvbikKICAgICAgcmV0dXJuIHZhdWx0UmVmCiAgICB9CiAgICANCgogICAgYWNjZXNzKGFsbCkgZnVuIGNoZWNrU3Rhcmx5Q2FyZDB4NWI4MmYyMWMwZWRmNzZlM1ZhdWx0KGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgICBsZXQgdmF1bHRSZWYgPSBhY2NvdW50CiAgICAgIC5jYXBhYmlsaXRpZXMuZXhpc3RzKC9wdWJsaWMvc3Rhcmx5Q2FyZENvbGxlY3Rpb24pCiAgICAgIHJldHVybiB2YXVsdFJlZgogICAgfQogICAgDQoKICAgIGFjY2VzcyhhbGwpIGZ1biBjaGVja1N0dXJkeUl0ZW1zMHg0MjdjZWFkYTI3MWFhMGIxVmF1bHQoYWRkcmVzczogQWRkcmVzcykgOiBCb29sIHsKICAgICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgICAgIGxldCB2YXVsdFJlZiA9IGFjY291bnQKICAgICAgLmNhcGFiaWxpdGllcy5leGlzdHMoL3B1YmxpYy9TdHVyZHlJdGVtc0NvbGxlY3Rpb24pCiAgICAgIHJldHVybiB2YXVsdFJlZgogICAgfQogICAgCiAgICBhY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzKSA6IHtTdHJpbmc6IEJvb2x9IHsKICAgICAgcmV0dXJuIHsKICAgICJBLjMwY2Y1ZGNmNmVhOGQzNzkuQWVyYU5GVCIgOgogICAgY2hlY2tBZXJhTkZUMHgzMGNmNWRjZjZlYThkMzc5VmF1bHQoYWRkcmVzczogYWRkcmVzcykKICAgICwKICAgICJBLmQ3OTZmZjE3MTA3YmJmZjYuQXJ0IiA6CiAgICBjaGVja0FydDB4ZDc5NmZmMTcxMDdiYmZmNlZhdWx0KGFkZHJlc3M6IGFkZHJlc3MpCiAgICAsCiAgICAiQS43NjIwYWNmNmQ3ZjI0NjhhLkJsMHgiIDoKICAgIGNoZWNrQmwweDB4NzYyMGFjZjZkN2YyNDY4YVZhdWx0KGFkZHJlc3M6IGFkZHJlc3MpCiAgICAsCiAgICAiQS5kNDVlMmJkOWEzZDUwMDNiLkJvYmJsel9ORlQiIDoKICAgIGNoZWNrQm9iYmx6X05GVDB4ZDQ1ZTJiZDlhM2Q1MDAzYlZhdWx0KGFkZHJlc3M6IGFkZHJlc3MpCiAgICAsCiAgICAiQS4zMjlmZWIzYWIwNjJkMjg5LkJyZWFraW5nVF9ORlQiIDoKICAgIGNoZWNrQnJlYWtpbmdUX05GVDB4MzI5ZmViM2FiMDYyZDI4OVZhdWx0KGFkZHJlc3M6IGFkZHJlc3MpCiAgICAsCiAgICAiQS5mMDJiMTVlMTFlYjM3MTViLkJXQVlYX05GVCIgOgogICAgY2hlY2tCV0FZWF9ORlQweGYwMmIxNWUxMWViMzcxNWJWYXVsdChhZGRyZXNzOiBhZGRyZXNzKQogICAgLAogICAgIkEuMzI5ZmViM2FiMDYyZDI4OS5DYW5lc19WYXVsdF9ORlQiIDoKICAgIGNoZWNrQ2FuZXNfVmF1bHRfTkZUMHgzMjlmZWIzYWIwNjJkMjg5VmF1bHQoYWRkcmVzczogYWRkcmVzcykKICAgICwKICAgICJBLmY4ODdlY2UzOTE2NjkwNmUuQ2FyIiA6CiAgICBjaGVja0NhcjB4Zjg4N2VjZTM5MTY2OTA2ZVZhdWx0KGFkZHJlc3M6IGFkZHJlc3MpCiAgICAsCiAgICAiQS5mODg3ZWNlMzkxNjY5MDZlLkNhckNsdWIiIDoKICAgIGNoZWNrQ2FyQ2x1YjB4Zjg4N2VjZTM5MTY2OTA2ZVZhdWx0KGFkZHJlc3M6IGFkZHJlc3MpCiAgICAsCiAgICAiQS4wOTdiYWZhNGUwYjQ4ZWVmLkNoYXJpdHlORlQiIDoKICAgIGNoZWNrQ2hhcml0eU5GVDB4MDk3YmFmYTRlMGI0OGVlZlZhdWx0KGFkZHJlc3M6IGFkZHJlc3MpCiAgICAsCiAgICAiQS5kM2RmODI0YmY4MTkxMGE0LkNyeXB0b1BpZ2dvVjIiIDoKICAgIGNoZWNrQ3J5cHRvUGlnZ29WMjB4ZDNkZjgyNGJmODE5MTBhNFZhdWx0KGFkZHJlc3M6IGFkZHJlc3MpCiAgICAsCiAgICAiQS4zMjlmZWIzYWIwNjJkMjg5LkRHRF9ORlQiIDoKICAgIGNoZWNrREdEX05GVDB4MzI5ZmViM2FiMDYyZDI4OVZhdWx0KGFkZHJlc3M6IGFkZHJlc3MpCiAgICAsCiAgICAiQS5lODExOTNjNDI0Y2ZkM2ZiLkRvb2RsZXMiIDoKICAgIGNoZWNrRG9vZGxlczB4ZTgxMTkzYzQyNGNmZDNmYlZhdWx0KGFkZHJlc3M6IGFkZHJlc3MpCiAgICAsCiAgICAiQS5hMDM5YmQ3ZDU1YTk2YzBjLkRyaXZlcnpORlQiIDoKICAgIGNoZWNrRHJpdmVyek5GVDB4YTAzOWJkN2Q1NWE5NmMwY1ZhdWx0KGFkZHJlc3M6IGFkZHJlc3MpCiAgICAsCiAgICAiQS4xZTRhYTBiODdkMTBiMTQxLkVWTVZNQnJpZGdlZE5GVF9kMTEyNjM0ZjA2OTAyYTk3N2RiMWQ1OTZjNzc3MTVkNzJmOGRhOGE5IiA6CiAgICBjaGVja0VWTVZNQnJpZGdlZE5GVF9kMTEyNjM0ZjA2OTAyYTk3N2RiMWQ1OTZjNzc3MTVkNzJmOGRhOGE5MHgxZTRhYTBiODdkMTBiMTQxVmF1bHQoYWRkcmVzczogYWRkcmVzcykKICAgICwKICAgICJBLjJkNGMzY2FmZmJlYWI4NDUuRkxPQVQiIDoKICAgIGNoZWNrRkxPQVQweDJkNGMzY2FmZmJlYWI4NDVWYXVsdChhZGRyZXNzOiBhZGRyZXNzKQogICAgLAogICAgIkEuOTIxZWE0NDlkZmZlYzY4YS5GbG9ib3QiIDoKICAgIGNoZWNrRmxvYm90MHg5MjFlYTQ0OWRmZmVjNjhhVmF1bHQoYWRkcmVzczogYWRkcmVzcykKICAgICwKICAgICJBLjkyMWVhNDQ5ZGZmZWM2OGEuRmxvdmF0YXIiIDoKICAgIGNoZWNrRmxvdmF0YXIweDkyMWVhNDQ5ZGZmZWM2OGFWYXVsdChhZGRyZXNzOiBhZGRyZXNzKQogICAgLAogICAgIkEuOTIxZWE0NDlkZmZlYzY4YS5GbG92YXRhckNvbXBvbmVudCIgOgogICAgY2hlY2tGbG92YXRhckNvbXBvbmVudDB4OTIxZWE0NDlkZmZlYzY4YVZhdWx0KGFkZHJlc3M6IGFkZHJlc3MpCiAgICAsCiAgICAiQS5hNDVlYWQxY2YxY2E5ZWRhLkZsb3dSZXdhcmRzIiA6CiAgICBjaGVja0Zsb3dSZXdhcmRzMHhhNDVlYWQxY2YxY2E5ZWRhVmF1bHQoYWRkcmVzczogYWRkcmVzcykKICAgICwKICAgICJBLjkyMTJhODc1MDFhOGE2YTIuRmxvd3ZlcnNlUGFzcyIgOgogICAgY2hlY2tGbG93dmVyc2VQYXNzMHg5MjEyYTg3NTAxYThhNmEyVmF1bHQoYWRkcmVzczogYWRkcmVzcykKICAgICwKICAgICJBLmNlNGMwMjUzOWQxZmFiZTguRmxvd3ZlcnNlU29ja3MiIDoKICAgIGNoZWNrRmxvd3ZlcnNlU29ja3MweGNlNGMwMjUzOWQxZmFiZThWYXVsdChhZGRyZXNzOiBhZGRyZXNzKQogICAgLAogICAgIkEuOTIxMmE4NzUwMWE4YTZhMi5GbG93dmVyc2VUcmVhc3VyZXMiIDoKICAgIGNoZWNrRmxvd3ZlcnNlVHJlYXN1cmVzMHg5MjEyYTg3NTAxYThhNmEyVmF1bHQoYWRkcmVzczogYWRkcmVzcykKICAgICwKICAgICJBLmQyYWJiNWRiZjVlMDg2NjYuRlJDMjBTZW1pTkZUIiA6CiAgICBjaGVja0ZSQzIwU2VtaU5GVDB4ZDJhYmI1ZGJmNWUwODY2NlZhdWx0KGFkZHJlc3M6IGFkZHJlc3MpCiAgICAsCiAgICAiQS5mM2VlNjg0Y2QwMjU5ZmVkLkZ1Y2hpYm9sYV9ORlQiIDoKICAgIGNoZWNrRnVjaGlib2xhX05GVDB4ZjNlZTY4NGNkMDI1OWZlZFZhdWx0KGFkZHJlc3M6IGFkZHJlc3MpCiAgICAsCiAgICAiQS4zNGYyYmY0YTgwYmIwZjY5Lkdvb2JlclhDb250cmFjdCIgOgogICAgY2hlY2tHb29iZXJYQ29udHJhY3QweDM0ZjJiZjRhODBiYjBmNjlWYXVsdChhZGRyZXNzOiBhZGRyZXNzKQogICAgLAogICAgIkEuZjg4N2VjZTM5MTY2OTA2ZS5IZWxtZXQiIDoKICAgIGNoZWNrSGVsbWV0MHhmODg3ZWNlMzkxNjY5MDZlVmF1bHQoYWRkcmVzczogYWRkcmVzcykKICAgICwKICAgICJBLmE2ZWU0N2RhODhlNmNiZGUuSWNvbm9HcmFwaGlrYSIgOgogICAgY2hlY2tJY29ub0dyYXBoaWthMHhhNmVlNDdkYTg4ZTZjYmRlVmF1bHQoYWRkcmVzczogYWRkcmVzcykKICAgICwKICAgICJBLjY5OWJmMjg0MTAxYTc2ZjEuSm9sbHlKb2tlcnMiIDoKICAgIGNoZWNrSm9sbHlKb2tlcnMweDY5OWJmMjg0MTAxYTc2ZjFWYXVsdChhZGRyZXNzOiBhZGRyZXNzKQogICAgLAogICAgIkEuNTI1N2YxNDU1ZWQzNjZmZS5NYWduZXRpcSIgOgogICAgY2hlY2tNYWduZXRpcTB4NTI1N2YxNDU1ZWQzNjZmZVZhdWx0KGFkZHJlc3M6IGFkZHJlc3MpCiAgICAsCiAgICAiQS5kNzU2NDUwZjM4NmZiNGFjLk1ldGF2ZXJzZU1hcmtldCIgOgogICAgY2hlY2tNZXRhdmVyc2VNYXJrZXQweGQ3NTY0NTBmMzg2ZmI0YWNWYXVsdChhZGRyZXNzOiBhZGRyZXNzKQogICAgLAogICAgIkEuOGViY2JmZDUxNmIxZGEyNy5NRkxDbHViIiA6CiAgICBjaGVja01GTENsdWIweDhlYmNiZmQ1MTZiMWRhMjdWYXVsdChhZGRyZXNzOiBhZGRyZXNzKQogICAgLAogICAgIkEuOGViY2JmZDUxNmIxZGEyNy5NRkxQbGF5ZXIiIDoKICAgIGNoZWNrTUZMUGxheWVyMHg4ZWJjYmZkNTE2YjFkYTI3VmF1bHQoYWRkcmVzczogYWRkcmVzcykKICAgICwKICAgICJBLjBiODBlNDJhYWFiMzA1ZjAuTUlLT1NFQU5GVCIgOgogICAgY2hlY2tNSUtPU0VBTkZUMHgwYjgwZTQyYWFhYjMwNWYwVmF1bHQoYWRkcmVzczogYWRkcmVzcykKICAgICwKICAgICJBLjEyM2NiNjY2OTk2Yjg0MzIuTkZHdjMiIDoKICAgIGNoZWNrTkZHdjMweDEyM2NiNjY2OTk2Yjg0MzJWYXVsdChhZGRyZXNzOiBhZGRyZXNzKQogICAgLAogICAgIkEuNGY3ZmY1NDNjOTM2MDcyYi5PbmVTaG90cyIgOgogICAgY2hlY2tPbmVTaG90czB4NGY3ZmY1NDNjOTM2MDcyYlZhdWx0KGFkZHJlc3M6IGFkZHJlc3MpCiAgICAsCiAgICAiQS5lNGNmNGJkYzE3NTFjNjVkLlBhY2tORlQiIDoKICAgIGNoZWNrUGFja05GVDB4ZTRjZjRiZGMxNzUxYzY1ZFZhdWx0KGFkZHJlc3M6IGFkZHJlc3MpCiAgICAsCiAgICAiQS4zNGYyYmY0YTgwYmIwZjY5LlBhcnR5TWFuc2lvbkRyaW5rc0NvbnRyYWN0IiA6CiAgICBjaGVja1BhcnR5TWFuc2lvbkRyaW5rc0NvbnRyYWN0MHgzNGYyYmY0YTgwYmIwZjY5VmF1bHQoYWRkcmVzczogYWRkcmVzcykKICAgICwKICAgICJBLmZkYzQzNmZkN2RiMjJlMDEuUGllY2UiIDoKICAgIGNoZWNrUGllY2UweGZkYzQzNmZkN2RiMjJlMDFWYXVsdChhZGRyZXNzOiBhZGRyZXNzKQogICAgLAogICAgIkEuYTNlYjk3ODRhZTdkYzljOC5QdWZmUGFseiIgOgogICAgY2hlY2tQdWZmUGFsejB4YTNlYjk3ODRhZTdkYzljOFZhdWx0KGFkZHJlc3M6IGFkZHJlc3MpCiAgICAsCiAgICAiQS4zMjlmZWIzYWIwNjJkMjg5LlJhY2VEYXlfTkZUIiA6CiAgICBjaGVja1JhY2VEYXlfTkZUMHgzMjlmZWIzYWIwNjJkMjg5VmF1bHQoYWRkcmVzczogYWRkcmVzcykKICAgICwKICAgICJBLmU4MTE5M2M0MjRjZmQzZmIuUmVkZWVtYWJsZXMiIDoKICAgIGNoZWNrUmVkZWVtYWJsZXMweGU4MTE5M2M0MjRjZmQzZmJWYXVsdChhZGRyZXNzOiBhZGRyZXNzKQogICAgLAogICAgIkEuMzk2NjQ2ZjExMGFmYjJlNi5Sb2d1ZUJ1bm5pZXNfTkZUIiA6CiAgICBjaGVja1JvZ3VlQnVubmllc19ORlQweDM5NjY0NmYxMTBhZmIyZTZWYXVsdChhZGRyZXNzOiBhZGRyZXNzKQogICAgLAogICAgIkEuY2E1YzMxYzBjMDNlMTFiZS5TcG9ydGJpdCIgOgogICAgY2hlY2tTcG9ydGJpdDB4Y2E1YzMxYzBjMDNlMTFiZVZhdWx0KGFkZHJlc3M6IGFkZHJlc3MpCiAgICAsCiAgICAiQS5jYTVjMzFjMGMwM2UxMWJlLlNwb3J0dmF0YXIiIDoKICAgIGNoZWNrU3BvcnR2YXRhcjB4Y2E1YzMxYzBjMDNlMTFiZVZhdWx0KGFkZHJlc3M6IGFkZHJlc3MpCiAgICAsCiAgICAiQS4wYjJhMzI5OWNjODU3ZTI5LlRvcFNob3QiIDoKICAgIGNoZWNrVG9wU2hvdDB4MGIyYTMyOTljYzg1N2UyOVZhdWx0KGFkZHJlc3M6IGFkZHJlc3MpCiAgICAsCiAgICAiQS4zMjlmZWIzYWIwNjJkMjg5LlVGQ19ORlQiIDoKICAgIGNoZWNrVUZDX05GVDB4MzI5ZmViM2FiMDYyZDI4OVZhdWx0KGFkZHJlc3M6IGFkZHJlc3MpCiAgICAsCiAgICAiQS5lODExOTNjNDI0Y2ZkM2ZiLldlYXJhYmxlcyIgOgogICAgY2hlY2tXZWFyYWJsZXMweGU4MTE5M2M0MjRjZmQzZmJWYXVsdChhZGRyZXNzOiBhZGRyZXNzKQogICAgLAogICAgIkEuZjg4N2VjZTM5MTY2OTA2ZS5XaGVlbCIgOgogICAgY2hlY2tXaGVlbDB4Zjg4N2VjZTM5MTY2OTA2ZVZhdWx0KGFkZHJlc3M6IGFkZHJlc3MpCiAgICAsCiAgICAiQS42MmIzMDYzZmJlNjcyZmM4LlplZWR6SU5PIiA6CiAgICBjaGVja1plZWR6SU5PMHg2MmIzMDYzZmJlNjcyZmM4VmF1bHQoYWRkcmVzczogYWRkcmVzcykKICAgICwKICAgICJBLjMwY2Y1ZGNmNmVhOGQzNzkuQWVyYVJld2FyZHMiIDoKICAgIGNoZWNrQWVyYVJld2FyZHMweDMwY2Y1ZGNmNmVhOGQzNzlWYXVsdChhZGRyZXNzOiBhZGRyZXNzKQogICAgLAogICAgIkEuYWJlNWEyYmY0N2NlNWJmMy5haVNwb3J0c01pbnRlciIgOgogICAgY2hlY2thaVNwb3J0c01pbnRlcjB4YWJlNWEyYmY0N2NlNWJmM1ZhdWx0KGFkZHJlc3M6IGFkZHJlc3MpCiAgICAsCiAgICAiQS5lNGNmNGJkYzE3NTFjNjVkLkFsbERheSIgOgogICAgY2hlY2tBbGxEYXkweGU0Y2Y0YmRjMTc1MWM2NWRWYXVsdChhZGRyZXNzOiBhZGRyZXNzKQogICAgLAogICAgIkEuZWU0NTY3YWI3ZjYzYWJmMi5CbG92aXplTkZUIiA6CiAgICBjaGVja0Jsb3ZpemVORlQweGVlNDU2N2FiN2Y2M2FiZjJWYXVsdChhZGRyZXNzOiBhZGRyZXNzKQogICAgLAogICAgIkEuN2E5NDQyYmUwYjNjMTc4YS5Cb25leWFyZCIgOgogICAgY2hlY2tCb25leWFyZDB4N2E5NDQyYmUwYjNjMTc4YVZhdWx0KGFkZHJlc3M6IGFkZHJlc3MpCiAgICAsCiAgICAiQS4yYzlkZTkzN2MzMTk0NjhkLkNpbWVsaW9fTkZUIiA6CiAgICBjaGVja0NpbWVsaW9fTkZUMHgyYzlkZTkzN2MzMTk0NjhkVmF1bHQoYWRkcmVzczogYWRkcmVzcykKICAgICwKICAgICJBLmQzZGY4MjRiZjgxOTEwYTQuQ3J5cHRvUGlnZ28iIDoKICAgIGNoZWNrQ3J5cHRvUGlnZ28weGQzZGY4MjRiZjgxOTEwYTRWYXVsdChhZGRyZXNzOiBhZGRyZXNzKQogICAgLAogICAgIkEuZDNkZjgyNGJmODE5MTBhNC5DcnlwdG9QaWdnb1BvdGlvbiIgOgogICAgY2hlY2tDcnlwdG9QaWdnb1BvdGlvbjB4ZDNkZjgyNGJmODE5MTBhNFZhdWx0KGFkZHJlc3M6IGFkZHJlc3MpCiAgICAsCiAgICAiQS5lM2FkNjAzMGNiYWZmMWMyLkRpbWVuc2lvblgiIDoKICAgIGNoZWNrRGltZW5zaW9uWDB4ZTNhZDYwMzBjYmFmZjFjMlZhdWx0KGFkZHJlc3M6IGFkZHJlc3MpCiAgICAsCiAgICAiQS4yMzNlYjAxMmQzNGIwMDcwLkRvbWFpbnMiIDoKICAgIGNoZWNrRG9tYWluczB4MjMzZWIwMTJkMzRiMDA3MFZhdWx0KGFkZHJlc3M6IGFkZHJlc3MpCiAgICAsCiAgICAiQS40YmJmZjQ2MWZhOGY2MTkyLkZhbnRhc3RlY05GVCIgOgogICAgY2hlY2tGYW50YXN0ZWNORlQweDRiYmZmNDYxZmE4ZjYxOTJWYXVsdChhZGRyZXNzOiBhZGRyZXNzKQogICAgLAogICAgIkEuOTIxZWE0NDlkZmZlYzY4YS5GbG92YXRhckR1c3RDb2xsZWN0aWJsZSIgOgogICAgY2hlY2tGbG92YXRhckR1c3RDb2xsZWN0aWJsZTB4OTIxZWE0NDlkZmZlYzY4YVZhdWx0KGFkZHJlc3M6IGFkZHJlc3MpCiAgICAsCiAgICAiQS41OTJlYjMyYjQ3ZDhiODVmLkZsb3d0eVdyYXBwZWQiIDoKICAgIGNoZWNrRmxvd3R5V3JhcHBlZDB4NTkyZWIzMmI0N2Q4Yjg1ZlZhdWx0KGFkZHJlc3M6IGFkZHJlc3MpCiAgICAsCiAgICAiQS45MjEyYTg3NTAxYThhNmEyLkZsb3d2ZXJzZVNoaXJ0IiA6CiAgICBjaGVja0Zsb3d2ZXJzZVNoaXJ0MHg5MjEyYTg3NTAxYThhNmEyVmF1bHQoYWRkcmVzczogYWRkcmVzcykKICAgICwKICAgICJBLjhiMTQ4MTgzYzI4ZmY4OGYuR2FpYSIgOgogICAgY2hlY2tHYWlhMHg4YjE0ODE4M2MyOGZmODhmVmF1bHQoYWRkcmVzczogYWRkcmVzcykKICAgICwKICAgICJBLjg3Y2E3M2E0MWJiNTBhZDUuR29sYXpvcyIgOgogICAgY2hlY2tHb2xhem9zMHg4N2NhNzNhNDFiYjUwYWQ1VmF1bHQoYWRkcmVzczogYWRkcmVzcykKICAgICwKICAgICJBLjFkYzM3YWI1MWE1NGQ4M2YuSGVyb2VzT2ZUaGVGbG93IiA6CiAgICBjaGVja0hlcm9lc09mVGhlRmxvdzB4MWRjMzdhYjUxYTU0ZDgzZlZhdWx0KGFkZHJlc3M6IGFkZHJlc3MpCiAgICAsCiAgICAiQS5kMGJjZWZkZjFlNjdlYTg1LkhXR2FyYWdlQ2FyZCIgOgogICAgY2hlY2tIV0dhcmFnZUNhcmQweGQwYmNlZmRmMWU2N2VhODVWYXVsdChhZGRyZXNzOiBhZGRyZXNzKQogICAgLAogICAgIkEuODJlZDFiOWNiYTViYjFiMy5LYXJhdE5GVCIgOgogICAgY2hlY2tLYXJhdE5GVDB4ODJlZDFiOWNiYTViYjFiM1ZhdWx0KGFkZHJlc3M6IGFkZHJlc3MpCiAgICAsCiAgICAiQS41ZWIxMmFkM2Q1YTk5OTQ1LktlZXBySXRlbXMiIDoKICAgIGNoZWNrS2VlcHJJdGVtczB4NWViMTJhZDNkNWE5OTk0NVZhdWx0KGFkZHJlc3M6IGFkZHJlc3MpCiAgICAsCiAgICAiQS4wZDc3ZWM0N2JiYWQ4ZWY2Lk1hdHJpeFdvcmxkVm91Y2hlciIgOgogICAgY2hlY2tNYXRyaXhXb3JsZFZvdWNoZXIweDBkNzdlYzQ3YmJhZDhlZjZWYXVsdChhZGRyZXNzOiBhZGRyZXNzKQogICAgLAogICAgIkEuOGViY2JmZDUxNmIxZGEyNy5NRkxQYWNrIiA6CiAgICBjaGVja01GTFBhY2sweDhlYmNiZmQ1MTZiMWRhMjdWYXVsdChhZGRyZXNzOiBhZGRyZXNzKQogICAgLAogICAgIkEuOTIxMmE4NzUwMWE4YTZhMi5PcmRpbmFsIiA6CiAgICBjaGVja09yZGluYWwweDkyMTJhODc1MDFhOGE2YTJWYXVsdChhZGRyZXNzOiBhZGRyZXNzKQogICAgLAogICAgIkEuMzIxZDhmY2RlMDVmNmU4Yy5TZXVzc2libGVzIiA6CiAgICBjaGVja1NldXNzaWJsZXMweDMyMWQ4ZmNkZTA1ZjZlOGNWYXVsdChhZGRyZXNzOiBhZGRyZXNzKQogICAgLAogICAgIkEuMGEyZmJiOTJhOGFlNWM2ZC5Tazh0aWJsZXMiIDoKICAgIGNoZWNrU2s4dGlibGVzMHgwYTJmYmI5MmE4YWU1YzZkVmF1bHQoYWRkcmVzczogYWRkcmVzcykKICAgICwKICAgICJBLjViODJmMjFjMGVkZjc2ZTMuU3Rhcmx5Q2FyZCIgOgogICAgY2hlY2tTdGFybHlDYXJkMHg1YjgyZjIxYzBlZGY3NmUzVmF1bHQoYWRkcmVzczogYWRkcmVzcykKICAgICwKICAgICJBLjQyN2NlYWRhMjcxYWEwYjEuU3R1cmR5SXRlbXMiIDoKICAgIGNoZWNrU3R1cmR5SXRlbXMweDQyN2NlYWRhMjcxYWEwYjFWYXVsdChhZGRyZXNzOiBhZGRyZXNzKQogICAgfQogICAgfQogIA=="
        },
        "swap": {
          "DeployPairTemplate": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgRGVwbG95UGFpclRlbXBsYXRlIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHgxNjU0NjUzMzk5MDQwYTYxCnRyYW5zYWN0aW9uKHBhaXJUZW1wbGF0ZUNvZGU6IFN0cmluZykgewogICAgcHJlcGFyZShkZXBsb3lBY2NvdW50OiBBdXRoQWNjb3VudCkgewogICAgICAgIGxldCB0b2tlbjBWYXVsdCA8LSBGbG93VG9rZW4uY3JlYXRlRW1wdHlWYXVsdCgpCiAgICAgICAgbGV0IHRva2VuMVZhdWx0IDwtIEZsb3dUb2tlbi5jcmVhdGVFbXB0eVZhdWx0KCkKICAgICAgICBkZXBsb3lBY2NvdW50LmNvbnRyYWN0cy5hZGQobmFtZTogIlN3YXBQYWlyIiwgY29kZTogcGFpclRlbXBsYXRlQ29kZS51dGY4LCB0b2tlbjBWYXVsdDogPC10b2tlbjBWYXVsdCwgdG9rZW4xVmF1bHQ6IDwtdG9rZW4xVmF1bHQpCiAgICB9Cn0=",
          "CreatePairTemplate": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgQ3JlYXRlUGFpclRlbXBsYXRlIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgVG9rZW4wTmFtZSBmcm9tIFRva2VuMEFkZHIKaW1wb3J0IFRva2VuMU5hbWUgZnJvbSBUb2tlbjFBZGRyCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweDE2NTQ2NTMzOTkwNDBhNjEKaW1wb3J0IFN3YXBGYWN0b3J5IGZyb20gMHhiMDYzYzE2Y2FjODVkYmQxCnRyYW5zYWN0aW9uKCkgewogICAgcHJlcGFyZSh1c2VyQWNjb3VudDogQXV0aEFjY291bnQpIHsKICAgICAgICBsZXQgZmxvd1ZhdWx0UmVmID0gdXNlckFjY291bnQuYm9ycm93PCZGbG93VG9rZW4uVmF1bHQ+KGZyb206IC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0KSEKICAgICAgICBhc3NlcnQoZmxvd1ZhdWx0UmVmLmJhbGFuY2UgPj0gMC4wMDIsIG1lc3NhZ2U6ICJJbnN1ZmZpY2llbnQgYmFsYW5jZSB0byBjcmVhdGUgcGFpciwgbWluaW11bSBiYWxhbmNlIHJlcXVpcmVtZW50OiAwLjAwMiBmbG93IikKICAgICAgICBsZXQgYWNjb3VudENyZWF0aW9uRmVlVmF1bHQgPC0gZmxvd1ZhdWx0UmVmLndpdGhkcmF3KGFtb3VudDogMC4wMDEpCiAgICAgICAgbGV0IHRva2VuMFZhdWx0IDwtIFRva2VuME5hbWUuY3JlYXRlRW1wdHlWYXVsdCgpCiAgICAgICAgbGV0IHRva2VuMVZhdWx0IDwtIFRva2VuMU5hbWUuY3JlYXRlRW1wdHlWYXVsdCgpCiAgICAgICAgU3dhcEZhY3RvcnkuY3JlYXRlUGFpcih0b2tlbjBWYXVsdDogPC10b2tlbjBWYXVsdCwgdG9rZW4xVmF1bHQ6IDwtdG9rZW4xVmF1bHQsIGFjY291bnRDcmVhdGlvbkZlZTogPC1hY2NvdW50Q3JlYXRpb25GZWVWYXVsdCkKICAgIH0KfQ==",
          "AddLiquidity": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgQWRkTGlxdWlkaXR5IC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQppbXBvcnQgU3dhcEZhY3RvcnkgZnJvbSAweGIwNjNjMTZjYWM4NWRiZDEKaW1wb3J0IFN3YXBJbnRlcmZhY2VzIGZyb20gMHhiNzhlZjdhZmE1MmZmOTA2CmltcG9ydCBTd2FwQ29uZmlnIGZyb20gMHhiNzhlZjdhZmE1MmZmOTA2CmltcG9ydCBTd2FwRXJyb3IgZnJvbSAweGI3OGVmN2FmYTUyZmY5MDYKdHJhbnNhY3Rpb24oCiAgICB0b2tlbjBLZXk6IFN0cmluZywKICAgIHRva2VuMUtleTogU3RyaW5nLAogICAgdG9rZW4wSW5EZXNpcmVkOiBVRml4NjQsCiAgICB0b2tlbjFJbkRlc2lyZWQ6IFVGaXg2NCwKICAgIHRva2VuMEluTWluOiBVRml4NjQsCiAgICB0b2tlbjFJbk1pbjogVUZpeDY0LAogICAgZGVhZGxpbmU6IFVGaXg2NCwKICAgIHRva2VuMFZhdWx0UGF0aDogU3RvcmFnZVBhdGgsCiAgICB0b2tlbjFWYXVsdFBhdGg6IFN0b3JhZ2VQYXRoLAopIHsKICAgIHByZXBhcmUodXNlckFjY291bnQ6IEF1dGhBY2NvdW50KSB7CiAgICAgICAgYXNzZXJ0KGRlYWRsaW5lID49IGdldEN1cnJlbnRCbG9jaygpLnRpbWVzdGFtcCwgbWVzc2FnZToKICAgICAgICAgICAgU3dhcEVycm9yLkVycm9yRW5jb2RlKAogICAgICAgICAgICAgICAgbXNnOiAiQWRkTGlxdWlkaXR5OiBleHBpcmVkICIuY29uY2F0KGRlYWRsaW5lLnRvU3RyaW5nKCkpLmNvbmNhdCgiIDwgIikuY29uY2F0KGdldEN1cnJlbnRCbG9jaygpLnRpbWVzdGFtcC50b1N0cmluZygpKSwKICAgICAgICAgICAgICAgIGVycjogU3dhcEVycm9yLkVycm9yQ29kZS5FWFBJUkVECiAgICAgICAgICAgICkKICAgICAgICApCiAgICAgICAgbGV0IHBhaXJBZGRyID0gU3dhcEZhY3RvcnkuZ2V0UGFpckFkZHJlc3ModG9rZW4wS2V5OiB0b2tlbjBLZXksIHRva2VuMUtleTogdG9rZW4xS2V5KQogICAgICAgICAgICA/PyBwYW5pYygiQWRkTGlxdWlkaXR5OiBub25leGlzdGVudCBwYWlyICIuY29uY2F0KHRva2VuMEtleSkuY29uY2F0KCIgPC0+ICIpLmNvbmNhdCh0b2tlbjFLZXkpLmNvbmNhdCgiLCBjcmVhdGUgcGFpciBmaXJzdCIpKQogICAgICAgIGxldCBwYWlyUHVibGljUmVmID0gZ2V0QWNjb3VudChwYWlyQWRkcikuZ2V0Q2FwYWJpbGl0eTwme1N3YXBJbnRlcmZhY2VzLlBhaXJQdWJsaWN9PihTd2FwQ29uZmlnLlBhaXJQdWJsaWNQYXRoKS5ib3Jyb3coKSEKICAgICAgICBsZXQgcGFpckluZm8gPSBwYWlyUHVibGljUmVmLmdldFBhaXJJbmZvKCkKICAgICAgICB2YXIgdG9rZW4wSW4gPSAwLjAKICAgICAgICB2YXIgdG9rZW4xSW4gPSAwLjAKICAgICAgICB2YXIgdG9rZW4wUmVzZXJ2ZSA9IDAuMAogICAgICAgIHZhciB0b2tlbjFSZXNlcnZlID0gMC4wCiAgICAgICAgaWYgdG9rZW4wS2V5ID09IChwYWlySW5mb1swXSBhcyEgU3RyaW5nKSB7CiAgICAgICAgICAgIHRva2VuMFJlc2VydmUgPSAocGFpckluZm9bMl0gYXMhIFVGaXg2NCkKICAgICAgICAgICAgdG9rZW4xUmVzZXJ2ZSA9IChwYWlySW5mb1szXSBhcyEgVUZpeDY0KQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRva2VuMFJlc2VydmUgPSAocGFpckluZm9bM10gYXMhIFVGaXg2NCkKICAgICAgICAgICAgdG9rZW4xUmVzZXJ2ZSA9IChwYWlySW5mb1syXSBhcyEgVUZpeDY0KQogICAgICAgIH0KICAgICAgICBpZiB0b2tlbjBSZXNlcnZlID09IDAuMCAmJiB0b2tlbjFSZXNlcnZlID09IDAuMCB7CiAgICAgICAgICAgIHRva2VuMEluID0gdG9rZW4wSW5EZXNpcmVkCiAgICAgICAgICAgIHRva2VuMUluID0gdG9rZW4xSW5EZXNpcmVkCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdmFyIGFtb3VudDFPcHRpbWFsID0gU3dhcENvbmZpZy5xdW90ZShhbW91bnRBOiB0b2tlbjBJbkRlc2lyZWQsIHJlc2VydmVBOiB0b2tlbjBSZXNlcnZlLCByZXNlcnZlQjogdG9rZW4xUmVzZXJ2ZSkKICAgICAgICAgICAgaWYgKGFtb3VudDFPcHRpbWFsIDw9IHRva2VuMUluRGVzaXJlZCkgewogICAgICAgICAgICAgICAgYXNzZXJ0KGFtb3VudDFPcHRpbWFsID49IHRva2VuMUluTWluLCBtZXNzYWdlOgogICAgICAgICAgICAgICAgICAgIFN3YXBFcnJvci5FcnJvckVuY29kZSgKICAgICAgICAgICAgICAgICAgICAgICAgbXNnOiAiU0xJUFBBR0VfT0ZGU0VUX1RPT19MQVJHRSBleHBlY3QgbWluIi5jb25jYXQodG9rZW4xSW5NaW4udG9TdHJpbmcoKSkuY29uY2F0KCIgZ290ICIpLmNvbmNhdChhbW91bnQxT3B0aW1hbC50b1N0cmluZygpKSwKICAgICAgICAgICAgICAgICAgICAgICAgZXJyOiBTd2FwRXJyb3IuRXJyb3JDb2RlLlNMSVBQQUdFX09GRlNFVF9UT09fTEFSR0UKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICB0b2tlbjBJbiA9IHRva2VuMEluRGVzaXJlZAogICAgICAgICAgICAgICAgdG9rZW4xSW4gPSBhbW91bnQxT3B0aW1hbAogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdmFyIGFtb3VudDBPcHRpbWFsID0gU3dhcENvbmZpZy5xdW90ZShhbW91bnRBOiB0b2tlbjFJbkRlc2lyZWQsIHJlc2VydmVBOiB0b2tlbjFSZXNlcnZlLCByZXNlcnZlQjogdG9rZW4wUmVzZXJ2ZSkKICAgICAgICAgICAgICAgIGFzc2VydChhbW91bnQwT3B0aW1hbCA8PSB0b2tlbjBJbkRlc2lyZWQpCiAgICAgICAgICAgICAgICBhc3NlcnQoYW1vdW50ME9wdGltYWwgPj0gdG9rZW4wSW5NaW4sIG1lc3NhZ2U6CiAgICAgICAgICAgICAgICAgICAgU3dhcEVycm9yLkVycm9yRW5jb2RlKAogICAgICAgICAgICAgICAgICAgICAgICBtc2c6ICJTTElQUEFHRV9PRkZTRVRfVE9PX0xBUkdFIGV4cGVjdCBtaW4iLmNvbmNhdCh0b2tlbjBJbk1pbi50b1N0cmluZygpKS5jb25jYXQoIiBnb3QgIikuY29uY2F0KGFtb3VudDBPcHRpbWFsLnRvU3RyaW5nKCkpLAogICAgICAgICAgICAgICAgICAgICAgICBlcnI6IFN3YXBFcnJvci5FcnJvckNvZGUuU0xJUFBBR0VfT0ZGU0VUX1RPT19MQVJHRQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIHRva2VuMEluID0gYW1vdW50ME9wdGltYWwKICAgICAgICAgICAgICAgIHRva2VuMUluID0gdG9rZW4xSW5EZXNpcmVkCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgbGV0IHRva2VuMFZhdWx0IDwtIHVzZXJBY2NvdW50LmJvcnJvdzwmRnVuZ2libGVUb2tlbi5WYXVsdD4oZnJvbTogdG9rZW4wVmF1bHRQYXRoKSEud2l0aGRyYXcoYW1vdW50OiB0b2tlbjBJbikKICAgICAgICBsZXQgdG9rZW4xVmF1bHQgPC0gdXNlckFjY291bnQuYm9ycm93PCZGdW5naWJsZVRva2VuLlZhdWx0Pihmcm9tOiB0b2tlbjFWYXVsdFBhdGgpIS53aXRoZHJhdyhhbW91bnQ6IHRva2VuMUluKQogICAgICAgIGxldCBscFRva2VuVmF1bHQgPC0gcGFpclB1YmxpY1JlZi5hZGRMaXF1aWRpdHkoCiAgICAgICAgICAgIHRva2VuQVZhdWx0OiA8LSB0b2tlbjBWYXVsdCwKICAgICAgICAgICAgdG9rZW5CVmF1bHQ6IDwtIHRva2VuMVZhdWx0CiAgICAgICAgKQogICAgICAgIGxldCBscFRva2VuQ29sbGVjdGlvblN0b3JhZ2VQYXRoID0gU3dhcENvbmZpZy5McFRva2VuQ29sbGVjdGlvblN0b3JhZ2VQYXRoCiAgICAgICAgbGV0IGxwVG9rZW5Db2xsZWN0aW9uUHVibGljUGF0aCA9IFN3YXBDb25maWcuTHBUb2tlbkNvbGxlY3Rpb25QdWJsaWNQYXRoCiAgICAgICAgdmFyIGxwVG9rZW5Db2xsZWN0aW9uUmVmID0gdXNlckFjY291bnQuYm9ycm93PCZTd2FwRmFjdG9yeS5McFRva2VuQ29sbGVjdGlvbj4oZnJvbTogbHBUb2tlbkNvbGxlY3Rpb25TdG9yYWdlUGF0aCkKICAgICAgICBpZiBscFRva2VuQ29sbGVjdGlvblJlZiA9PSBuaWwgewogICAgICAgICAgICBkZXN0cm95IDwtIHVzZXJBY2NvdW50LmxvYWQ8QEFueVJlc291cmNlPihmcm9tOiBscFRva2VuQ29sbGVjdGlvblN0b3JhZ2VQYXRoKQogICAgICAgICAgICB1c2VyQWNjb3VudC5zYXZlKDwtU3dhcEZhY3RvcnkuY3JlYXRlRW1wdHlMcFRva2VuQ29sbGVjdGlvbigpLCB0bzogbHBUb2tlbkNvbGxlY3Rpb25TdG9yYWdlUGF0aCkKICAgICAgICAgICAgdXNlckFjY291bnQubGluazwme1N3YXBJbnRlcmZhY2VzLkxwVG9rZW5Db2xsZWN0aW9uUHVibGljfT4obHBUb2tlbkNvbGxlY3Rpb25QdWJsaWNQYXRoLCB0YXJnZXQ6IGxwVG9rZW5Db2xsZWN0aW9uU3RvcmFnZVBhdGgpCiAgICAgICAgICAgIGxwVG9rZW5Db2xsZWN0aW9uUmVmID0gdXNlckFjY291bnQuYm9ycm93PCZTd2FwRmFjdG9yeS5McFRva2VuQ29sbGVjdGlvbj4oZnJvbTogbHBUb2tlbkNvbGxlY3Rpb25TdG9yYWdlUGF0aCkKICAgICAgICB9CiAgICAgICAgbHBUb2tlbkNvbGxlY3Rpb25SZWYhLmRlcG9zaXQocGFpckFkZHI6IHBhaXJBZGRyLCBscFRva2VuVmF1bHQ6IDwtIGxwVG9rZW5WYXVsdCkKICAgIH0KfQ==",
          "RemoveLiquidity": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgUmVtb3ZlTGlxdWlkaXR5IC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQppbXBvcnQgU3dhcEZhY3RvcnkgZnJvbSAweGIwNjNjMTZjYWM4NWRiZDEKaW1wb3J0IFN3YXBJbnRlcmZhY2VzIGZyb20gMHhiNzhlZjdhZmE1MmZmOTA2CmltcG9ydCBTd2FwQ29uZmlnIGZyb20gMHhiNzhlZjdhZmE1MmZmOTA2CmltcG9ydCBTd2FwRXJyb3IgZnJvbSAweGI3OGVmN2FmYTUyZmY5MDYKdHJhbnNhY3Rpb24oCiAgICB0b2tlbjBLZXk6IFN0cmluZywKICAgIHRva2VuMUtleTogU3RyaW5nLAogICAgbHBUb2tlbkFtb3VudDogVUZpeDY0LAogICAgdG9rZW4wT3V0TWluOiBVRml4NjQsCiAgICB0b2tlbjFPdXRNaW46IFVGaXg2NCwKICAgIGRlYWRsaW5lOiBVRml4NjQsCiAgICB0b2tlbjBWYXVsdFBhdGg6IFN0b3JhZ2VQYXRoLAogICAgdG9rZW4xVmF1bHRQYXRoOiBTdG9yYWdlUGF0aCwKKSB7CiAgICBwcmVwYXJlKHVzZXJBY2NvdW50OiBBdXRoQWNjb3VudCkgewogICAgICAgIGFzc2VydChkZWFkbGluZSA+PSBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAsIG1lc3NhZ2U6CiAgICAgICAgICAgIFN3YXBFcnJvci5FcnJvckVuY29kZSgKICAgICAgICAgICAgICAgIG1zZzogIlJlbW92ZUxpcXVpZGl0eTogZXhwaXJlZCAiLmNvbmNhdChkZWFkbGluZS50b1N0cmluZygpKS5jb25jYXQoIiA8ICIpLmNvbmNhdChnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAudG9TdHJpbmcoKSksCiAgICAgICAgICAgICAgICBlcnI6IFN3YXBFcnJvci5FcnJvckNvZGUuRVhQSVJFRAogICAgICAgICAgICApCiAgICAgICAgKQogICAgICAgIGxldCBwYWlyQWRkciA9IFN3YXBGYWN0b3J5LmdldFBhaXJBZGRyZXNzKHRva2VuMEtleTogdG9rZW4wS2V5LCB0b2tlbjFLZXk6IHRva2VuMUtleSkKICAgICAgICAgICAgPz8gcGFuaWMoIlJlbW92ZUxpcXVpZGl0eTogbm9uZXhpc3RlbnQgcGFpciAiLmNvbmNhdCh0b2tlbjBLZXkpLmNvbmNhdCgiIDwtPiAiKS5jb25jYXQodG9rZW4xS2V5KS5jb25jYXQoIiwgY3JlYXRlIHBhaXIgZmlyc3QiKSkKICAgICAgICBsZXQgbHBUb2tlbkNvbGxlY3Rpb25SZWYgPSB1c2VyQWNjb3VudC5ib3Jyb3c8JlN3YXBGYWN0b3J5LkxwVG9rZW5Db2xsZWN0aW9uPihmcm9tOiBTd2FwQ29uZmlnLkxwVG9rZW5Db2xsZWN0aW9uU3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJSZW1vdmVMaXF1aWRpdHk6IGNhbm5vdCBib3Jyb3cgcmVmZXJlbmNlIHRvIExwVG9rZW5Db2xsZWN0aW9uIikKICAgICAgICBsZXQgbHBUb2tlblJlbW92ZSA8LSBscFRva2VuQ29sbGVjdGlvblJlZi53aXRoZHJhdyhwYWlyQWRkcjogcGFpckFkZHIsIGFtb3VudDogbHBUb2tlbkFtb3VudCkKICAgICAgICBsZXQgdG9rZW5zIDwtIGdldEFjY291bnQocGFpckFkZHIpLmdldENhcGFiaWxpdHk8JntTd2FwSW50ZXJmYWNlcy5QYWlyUHVibGljfT4oU3dhcENvbmZpZy5QYWlyUHVibGljUGF0aCkuYm9ycm93KCkhLnJlbW92ZUxpcXVpZGl0eShscFRva2VuVmF1bHQ6IDwtbHBUb2tlblJlbW92ZSkKICAgICAgICBsZXQgdG9rZW4wVmF1bHQgPC0gdG9rZW5zWzBdLndpdGhkcmF3KGFtb3VudDogdG9rZW5zWzBdLmJhbGFuY2UpCiAgICAgICAgbGV0IHRva2VuMVZhdWx0IDwtIHRva2Vuc1sxXS53aXRoZHJhdyhhbW91bnQ6IHRva2Vuc1sxXS5iYWxhbmNlKQogICAgICAgIGRlc3Ryb3kgdG9rZW5zCiAgICAgICAgYXNzZXJ0KHRva2VuMFZhdWx0LmJhbGFuY2UgPj0gdG9rZW4wT3V0TWluICYmIHRva2VuMVZhdWx0LmJhbGFuY2UgPj0gdG9rZW4xT3V0TWluLCBtZXNzYWdlOgogICAgICAgICAgICBTd2FwRXJyb3IuRXJyb3JFbmNvZGUoCiAgICAgICAgICAgICAgICBtc2c6ICJSZW1vdmVMaXF1aWRpdHk6IElOU1VGRklDSUVOVF9SRU1PVkVfTElRVUlESVRZX09VVF9BTU9VTlQiLAogICAgICAgICAgICAgICAgZXJyOiBTd2FwRXJyb3IuRXJyb3JDb2RlLlNMSVBQQUdFX09GRlNFVF9UT09fTEFSR0UKICAgICAgICAgICAgKQogICAgICAgICkKICAgICAgICBsZXQgbG9jYWxWYXVsdDBSZWYgPSB1c2VyQWNjb3VudC5ib3Jyb3c8JkZ1bmdpYmxlVG9rZW4uVmF1bHQ+KGZyb206IHRva2VuMFZhdWx0UGF0aCkhCiAgICAgICAgbGV0IGxvY2FsVmF1bHQxUmVmID0gdXNlckFjY291bnQuYm9ycm93PCZGdW5naWJsZVRva2VuLlZhdWx0Pihmcm9tOiB0b2tlbjFWYXVsdFBhdGgpIQogICAgICAgIGlmIHRva2VuMFZhdWx0LmlzSW5zdGFuY2UobG9jYWxWYXVsdDBSZWYuZ2V0VHlwZSgpKSB7CiAgICAgICAgICAgIGxvY2FsVmF1bHQwUmVmLmRlcG9zaXQoZnJvbTogPC10b2tlbjBWYXVsdCkKICAgICAgICAgICAgbG9jYWxWYXVsdDFSZWYuZGVwb3NpdChmcm9tOiA8LXRva2VuMVZhdWx0KQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGxvY2FsVmF1bHQwUmVmLmRlcG9zaXQoZnJvbTogPC10b2tlbjFWYXVsdCkKICAgICAgICAgICAgbG9jYWxWYXVsdDFSZWYuZGVwb3NpdChmcm9tOiA8LXRva2VuMFZhdWx0KQogICAgICAgIH0KICAgIH0KfQ==",
          "SwapExactTokensForTokens": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgU3dhcEV4YWN0VG9rZW5zRm9yVG9rZW5zIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgVG9rZW4xTmFtZSBmcm9tIFRva2VuMUFkZHIKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweGYyMzNkY2VlODhmZTBhYmUKaW1wb3J0IFN3YXBSb3V0ZXIgZnJvbSAweGE2ODUwNzc2YTk0ZTY1NTEKaW1wb3J0IFN3YXBFcnJvciBmcm9tIDB4Yjc4ZWY3YWZhNTJmZjkwNgp0cmFuc2FjdGlvbigKICAgIHRva2VuS2V5RmxhdFNwbGl0UGF0aDogW1N0cmluZ10sCiAgICBhbW91bnRJblNwbGl0OiBbVUZpeDY0XSwKICAgIGFtb3VudE91dE1pbjogVUZpeDY0LAogICAgZGVhZGxpbmU6IFVGaXg2NCwKICAgIHRva2VuSW5WYXVsdFBhdGg6IFN0b3JhZ2VQYXRoLAogICAgdG9rZW5PdXRWYXVsdFBhdGg6IFN0b3JhZ2VQYXRoLAogICAgdG9rZW5PdXRSZWNlaXZlclBhdGg6IFB1YmxpY1BhdGgsCiAgICB0b2tlbk91dEJhbGFuY2VQYXRoOiBQdWJsaWNQYXRoLAopIHsKICAgIHByZXBhcmUodXNlckFjY291bnQ6IEF1dGhBY2NvdW50KSB7CiAgICAgICAgYXNzZXJ0KGRlYWRsaW5lID49IGdldEN1cnJlbnRCbG9jaygpLnRpbWVzdGFtcCwgbWVzc2FnZToKICAgICAgICAgICAgU3dhcEVycm9yLkVycm9yRW5jb2RlKAogICAgICAgICAgICAgICAgbXNnOiAiRVhQSVJFRCIsCiAgICAgICAgICAgICAgICBlcnI6IFN3YXBFcnJvci5FcnJvckNvZGUuRVhQSVJFRAogICAgICAgICAgICApCiAgICAgICAgKQogICAgICAgIGxldCBsZW4gPSB0b2tlbktleUZsYXRTcGxpdFBhdGgubGVuZ3RoCiAgICAgICAgbGV0IHRva2VuSW5LZXkgPSB0b2tlbktleUZsYXRTcGxpdFBhdGhbMF0KICAgICAgICBsZXQgdG9rZW5PdXRLZXkgPSB0b2tlbktleUZsYXRTcGxpdFBhdGhbbGVuLTFdCiAgICAgICAgdmFyIHRva2VuT3V0QW1vdW50VG90YWwgPSAwLjAKICAgICAgICB2YXIgdG9rZW5PdXRSZWNlaXZlclJlZiA9IHVzZXJBY2NvdW50LmJvcnJvdzwmRnVuZ2libGVUb2tlbi5WYXVsdD4oZnJvbTogdG9rZW5PdXRWYXVsdFBhdGgpCiAgICAgICAgaWYgdG9rZW5PdXRSZWNlaXZlclJlZiA9PSBuaWwgewogICAgICAgICAgICB1c2VyQWNjb3VudC5zYXZlKDwtIFRva2VuMU5hbWUuY3JlYXRlRW1wdHlWYXVsdCgpLCB0bzogdG9rZW5PdXRWYXVsdFBhdGgpCiAgICAgICAgICAgIHVzZXJBY2NvdW50Lmxpbms8JlRva2VuMU5hbWUuVmF1bHR7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KHRva2VuT3V0UmVjZWl2ZXJQYXRoLCB0YXJnZXQ6IHRva2VuT3V0VmF1bHRQYXRoKQogICAgICAgICAgICB1c2VyQWNjb3VudC5saW5rPCZUb2tlbjFOYW1lLlZhdWx0e0Z1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KHRva2VuT3V0QmFsYW5jZVBhdGgsIHRhcmdldDogdG9rZW5PdXRWYXVsdFBhdGgpCiAgICAgICAgICAgIHRva2VuT3V0UmVjZWl2ZXJSZWYgPSB1c2VyQWNjb3VudC5ib3Jyb3c8JkZ1bmdpYmxlVG9rZW4uVmF1bHQ+KGZyb206IHRva2VuT3V0VmF1bHRQYXRoKQogICAgICAgIH0KICAgICAgICB2YXIgcGF0aEluZGV4ID0gMAogICAgICAgIHZhciBpID0gMAogICAgICAgIHZhciBwYXRoOiBbU3RyaW5nXSA9IFtdCiAgICAgICAgd2hpbGUoaSA8IGxlbikgewogICAgICAgICAgICB2YXIgY3VyVG9rZW5LZXkgPSB0b2tlbktleUZsYXRTcGxpdFBhdGhbaV0KICAgICAgICAgICAgcGF0aC5hcHBlbmQoY3VyVG9rZW5LZXkpCiAgICAgICAgICAgIGlmIChjdXJUb2tlbktleSA9PSB0b2tlbk91dEtleSkgewogICAgICAgICAgICAgICAgbGV0IHRva2VuSW5BbW91bnQgPSBhbW91bnRJblNwbGl0W3BhdGhJbmRleF0KICAgICAgICAgICAgICAgIGxldCB0b2tlbkluVmF1bHQgPC0gdXNlckFjY291bnQuYm9ycm93PCZGdW5naWJsZVRva2VuLlZhdWx0Pihmcm9tOiB0b2tlbkluVmF1bHRQYXRoKSEud2l0aGRyYXcoYW1vdW50OiB0b2tlbkluQW1vdW50KQogICAgICAgICAgICAgICAgbGV0IHRva2VuT3V0VmF1bHQgPC0gU3dhcFJvdXRlci5zd2FwV2l0aFBhdGgodmF1bHRJbjogPC0gdG9rZW5JblZhdWx0LCB0b2tlbktleVBhdGg6IHBhdGgsIGV4YWN0QW1vdW50czogbmlsKQogICAgICAgICAgICAgICAgdG9rZW5PdXRBbW91bnRUb3RhbCA9IHRva2VuT3V0QW1vdW50VG90YWwgKyB0b2tlbk91dFZhdWx0LmJhbGFuY2UKICAgICAgICAgICAgICAgIHRva2VuT3V0UmVjZWl2ZXJSZWYhLmRlcG9zaXQoZnJvbTogPC0gdG9rZW5PdXRWYXVsdCkKICAgICAgICAgICAgICAgIHBhdGggPSBbXQogICAgICAgICAgICAgICAgcGF0aEluZGV4ID0gcGF0aEluZGV4ICsgMQogICAgICAgICAgICB9CiAgICAgICAgICAgIGkgPSBpICsgMQogICAgICAgIH0KICAgICAgICBhc3NlcnQodG9rZW5PdXRBbW91bnRUb3RhbCA+PSBhbW91bnRPdXRNaW4sIG1lc3NhZ2U6CiAgICAgICAgICAgIFN3YXBFcnJvci5FcnJvckVuY29kZSgKICAgICAgICAgICAgICAgIG1zZzogIlNMSVBQQUdFX09GRlNFVF9UT09fTEFSR0UgZXhwZWN0IG1pbiAiLmNvbmNhdChhbW91bnRPdXRNaW4udG9TdHJpbmcoKSkuY29uY2F0KCIgZ290ICIpLmNvbmNhdCh0b2tlbk91dEFtb3VudFRvdGFsLnRvU3RyaW5nKCkpLAogICAgICAgICAgICAgICAgZXJyOiBTd2FwRXJyb3IuRXJyb3JDb2RlLlNMSVBQQUdFX09GRlNFVF9UT09fTEFSR0UKICAgICAgICAgICAgKQogICAgICAgICkKICAgIH0KfQ==",
          "SwapTokensForExactTokens": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgU3dhcFRva2Vuc0ZvckV4YWN0VG9rZW5zIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgVG9rZW4xTmFtZSBmcm9tIFRva2VuMUFkZHIKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweGYyMzNkY2VlODhmZTBhYmUKaW1wb3J0IFN3YXBSb3V0ZXIgZnJvbSAweGE2ODUwNzc2YTk0ZTY1NTEKaW1wb3J0IFN3YXBFcnJvciBmcm9tIDB4Yjc4ZWY3YWZhNTJmZjkwNgp0cmFuc2FjdGlvbigKICAgIHRva2VuS2V5RmxhdFNwbGl0UGF0aDogW1N0cmluZ10sCiAgICBhbW91bnRPdXRTcGxpdDogW1VGaXg2NF0sCiAgICBhbW91bnRJbk1heDogVUZpeDY0LAogICAgZGVhZGxpbmU6IFVGaXg2NCwKICAgIHRva2VuSW5WYXVsdFBhdGg6IFN0b3JhZ2VQYXRoLAogICAgdG9rZW5PdXRWYXVsdFBhdGg6IFN0b3JhZ2VQYXRoLAogICAgdG9rZW5PdXRSZWNlaXZlclBhdGg6IFB1YmxpY1BhdGgsCiAgICB0b2tlbk91dEJhbGFuY2VQYXRoOiBQdWJsaWNQYXRoLAopIHsKICAgIHByZXBhcmUodXNlckFjY291bnQ6IEF1dGhBY2NvdW50KSB7CiAgICAgICAgYXNzZXJ0KCBkZWFkbGluZSA+PSBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAsIG1lc3NhZ2U6CiAgICAgICAgICAgIFN3YXBFcnJvci5FcnJvckVuY29kZSgKICAgICAgICAgICAgICAgIG1zZzogIkVYUElSRUQiLAogICAgICAgICAgICAgICAgZXJyOiBTd2FwRXJyb3IuRXJyb3JDb2RlLkVYUElSRUQKICAgICAgICAgICAgKQogICAgICAgICkKICAgICAgICBsZXQgbGVuID0gdG9rZW5LZXlGbGF0U3BsaXRQYXRoLmxlbmd0aAogICAgICAgIGxldCB0b2tlbkluS2V5ID0gdG9rZW5LZXlGbGF0U3BsaXRQYXRoWzBdCiAgICAgICAgbGV0IHRva2VuT3V0S2V5ID0gdG9rZW5LZXlGbGF0U3BsaXRQYXRoW2xlbi0xXQogICAgICAgIHZhciB0b2tlbk91dEFtb3VudFRvdGFsID0gMC4wCiAgICAgICAgdmFyIHRva2VuT3V0UmVjZWl2ZXJSZWYgPSB1c2VyQWNjb3VudC5ib3Jyb3c8JkZ1bmdpYmxlVG9rZW4uVmF1bHQ+KGZyb206IHRva2VuT3V0VmF1bHRQYXRoKQogICAgICAgIGlmIHRva2VuT3V0UmVjZWl2ZXJSZWYgPT0gbmlsIHsKICAgICAgICAgICAgdXNlckFjY291bnQuc2F2ZSg8LSBUb2tlbjFOYW1lLmNyZWF0ZUVtcHR5VmF1bHQoKSwgdG86IHRva2VuT3V0VmF1bHRQYXRoKQogICAgICAgICAgICB1c2VyQWNjb3VudC5saW5rPCZUb2tlbjFOYW1lLlZhdWx0e0Z1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9Pih0b2tlbk91dFJlY2VpdmVyUGF0aCwgdGFyZ2V0OiB0b2tlbk91dFZhdWx0UGF0aCkKICAgICAgICAgICAgdXNlckFjY291bnQubGluazwmVG9rZW4xTmFtZS5WYXVsdHtGdW5naWJsZVRva2VuLkJhbGFuY2V9Pih0b2tlbk91dEJhbGFuY2VQYXRoLCB0YXJnZXQ6IHRva2VuT3V0VmF1bHRQYXRoKQogICAgICAgICAgICB0b2tlbk91dFJlY2VpdmVyUmVmID0gdXNlckFjY291bnQuYm9ycm93PCZGdW5naWJsZVRva2VuLlZhdWx0Pihmcm9tOiB0b2tlbk91dFZhdWx0UGF0aCkKICAgICAgICB9CiAgICAgICAgdmFyIHBhdGhJbmRleCA9IDAKICAgICAgICB2YXIgaSA9IDAKICAgICAgICB2YXIgcGF0aDogW1N0cmluZ10gPSBbXQogICAgICAgIHZhciBhbW91bnRJblRvdGFsID0gMC4wCiAgICAgICAgd2hpbGUoaSA8IGxlbikgewogICAgICAgICAgICB2YXIgY3VyVG9rZW5LZXkgPSB0b2tlbktleUZsYXRTcGxpdFBhdGhbaV0KICAgICAgICAgICAgcGF0aC5hcHBlbmQoY3VyVG9rZW5LZXkpCiAgICAgICAgICAgIGlmIChjdXJUb2tlbktleSA9PSB0b2tlbk91dEtleSkgewogICAgICAgICAgICAgICAgbGV0IHRva2VuT3V0RXhwZWN0QW1vdW50ID0gYW1vdW50T3V0U3BsaXRbcGF0aEluZGV4XQogICAgICAgICAgICAgICAgbGV0IGFtb3VudHMgPSBTd2FwUm91dGVyLmdldEFtb3VudHNJbihhbW91bnRPdXQ6IHRva2VuT3V0RXhwZWN0QW1vdW50LCB0b2tlbktleVBhdGg6IHBhdGgpCiAgICAgICAgICAgICAgICBsZXQgdG9rZW5JbkFtb3VudCA9IGFtb3VudHNbMF0KICAgICAgICAgICAgICAgIGFtb3VudEluVG90YWwgPSBhbW91bnRJblRvdGFsICsgdG9rZW5JbkFtb3VudAogICAgICAgICAgICAgICAgbGV0IHRva2VuSW5WYXVsdCA8LSB1c2VyQWNjb3VudC5ib3Jyb3c8JkZ1bmdpYmxlVG9rZW4uVmF1bHQ+KGZyb206IHRva2VuSW5WYXVsdFBhdGgpIS53aXRoZHJhdyhhbW91bnQ6IHRva2VuSW5BbW91bnQpCiAgICAgICAgICAgICAgICBsZXQgdG9rZW5PdXRWYXVsdCA8LSBTd2FwUm91dGVyLnN3YXBXaXRoUGF0aCh2YXVsdEluOiA8LSB0b2tlbkluVmF1bHQsIHRva2VuS2V5UGF0aDogcGF0aCwgZXhhY3RBbW91bnRzOiBhbW91bnRzKQogICAgICAgICAgICAgICAgdG9rZW5PdXRBbW91bnRUb3RhbCA9IHRva2VuT3V0QW1vdW50VG90YWwgKyB0b2tlbk91dFZhdWx0LmJhbGFuY2UKICAgICAgICAgICAgICAgIHRva2VuT3V0UmVjZWl2ZXJSZWYhLmRlcG9zaXQoZnJvbTogPC0gdG9rZW5PdXRWYXVsdCkKICAgICAgICAgICAgICAgIHBhdGggPSBbXQogICAgICAgICAgICAgICAgcGF0aEluZGV4ID0gcGF0aEluZGV4ICsgMQogICAgICAgICAgICB9CiAgICAgICAgICAgIGkgPSBpICsgMQogICAgICAgIH0KICAgICAgICBhc3NlcnQoYW1vdW50SW5Ub3RhbCA8PSBhbW91bnRJbk1heCwgbWVzc2FnZToKICAgICAgICAgICAgU3dhcEVycm9yLkVycm9yRW5jb2RlKAogICAgICAgICAgICAgICAgbXNnOiAiU0xJUFBBR0VfT0ZGU0VUX1RPT19MQVJHRSIsCiAgICAgICAgICAgICAgICBlcnI6IFN3YXBFcnJvci5FcnJvckNvZGUuU0xJUFBBR0VfT0ZGU0VUX1RPT19MQVJHRQogICAgICAgICAgICApCiAgICAgICAgKQogICAgfQp9",
          "MintAllTokens": "",
          "QueryTokenNames": "cHViIGZ1biBtYWluKHF1ZXJ5QWRkcjogQWRkcmVzcyk6IFtTdHJpbmddIHsKICAgIGxldCBuYW1lcyA9IGdldEFjY291bnQocXVlcnlBZGRyKS5jb250cmFjdHMubmFtZXMKICAgIGxldCB0b2tlbk5hbWVzOiBbU3RyaW5nXSA9IFtdCiAgICBsZXQgY29sb246IFVJbnQ4ID0gNTgKICAgIGxldCBzcGFjZTogVUludDggPSAzMgogICAgbGV0IGJyYWNlOiBVSW50OCA9IDEyMwogICAgbGV0IHRva2VuSW5kZW50aWZpZXI6IFtVSW50OF0gPSBbNzAsIDExNywgMTEwLCAxMDMsIDEwNSwgOTgsIDEwOCwgMTAxLCA4NCwgMTExLCAxMDcsIDEwMSwgMTEwXSAKICAgIGxldCBpbmRlbnRpZmllckxlbmd0aCA9IHRva2VuSW5kZW50aWZpZXIubGVuZ3RoCiAgICBmb3IgbmFtZSBpbiBuYW1lcyB7CiAgICAgICAgbGV0IGNvZGUgPSBnZXRBY2NvdW50KHF1ZXJ5QWRkcikuY29udHJhY3RzLmdldChuYW1lOiBuYW1lKSEuY29kZQogICAgICAgIGxldCBjb2RlTGVuZ3RoID0gY29kZS5sZW5ndGgKICAgICAgICB2YXIgaXNUb2tlbiA9IGZhbHNlCiAgICAgICAgdmFyIGkgPSAxMwogICAgICAgIHdoaWxlKGkgPCBjb2RlTGVuZ3RoLTEpIHsKICAgICAgICAgICAgaWYgY29kZVtpXSA9PSBicmFjZSB7CiAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIGNvZGVbaV0gPT0gY29sb24gJiYgY29kZVtpKzFdID09IHNwYWNlIHsKICAgICAgICAgICAgICAgIGkgPSBpICsgMQogICAgICAgICAgICAgICAgd2hpbGUoY29kZVtpXSA9PSBzcGFjZSAmJiBpIDwgY29kZUxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIGkgPSBpICsgMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIGogPSAwCiAgICAgICAgICAgICAgICB3aGlsZShqIDwgaW5kZW50aWZpZXJMZW5ndGggJiYgaSA8IGNvZGVMZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBpZiBjb2RlW2ldID09IHRva2VuSW5kZW50aWZpZXJbal0gewogICAgICAgICAgICAgICAgICAgICAgICBpID0gaSArIDEKICAgICAgICAgICAgICAgICAgICAgICAgaiA9IGogKyAxCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiBqID09IGluZGVudGlmaWVyTGVuZ3RoICYmIChjb2RlW2ldPT1zcGFjZSB8fCBjb2RlW2ldPT1icmFjZSkgewogICAgICAgICAgICAgICAgICAgIGlzVG9rZW4gPSB0cnVlCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGkgPSBpICsgMQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIGlzVG9rZW4gewogICAgICAgICAgICB0b2tlbk5hbWVzLmFwcGVuZChuYW1lKQogICAgICAgIH0KICAgIH0KICAgIHJldHVybiB0b2tlbk5hbWVzCn0=",
          "QueryPairArrayAddr": "aW1wb3J0IFN3YXBGYWN0b3J5IGZyb20gMHhiMDYzYzE2Y2FjODVkYmQxCnB1YiBmdW4gbWFpbihmcm9tOiBVSW50NjQsIHRvOiBVSW50NjQpOiBbQWRkcmVzc10gewogICAgcmV0dXJuIFN3YXBGYWN0b3J5LmdldFNsaWNlZFBhaXJzKGZyb206IGZyb20sIHRvOiB0bykKfQo=",
          "QueryPairArrayInfo": "aW1wb3J0IFN3YXBGYWN0b3J5IGZyb20gMHhiMDYzYzE2Y2FjODVkYmQxCnB1YiBmdW4gbWFpbihmcm9tOiBVSW50NjQsIHRvOiBVSW50NjQpOiBbQW55U3RydWN0XSB7CiAgICByZXR1cm4gU3dhcEZhY3RvcnkuZ2V0U2xpY2VkUGFpckluZm9zKGZyb206IGZyb20sIHRvOiB0bykKfQo=",
          "QueryPairInfoByAddrs": "aW1wb3J0IFN3YXBJbnRlcmZhY2VzIGZyb20gMHhiNzhlZjdhZmE1MmZmOTA2CmltcG9ydCBTd2FwQ29uZmlnIGZyb20gMHhiNzhlZjdhZmE1MmZmOTA2CnB1YiBmdW4gbWFpbihwYWlyQWRkcnM6IFtBZGRyZXNzXSk6IFtBbnlTdHJ1Y3RdIHsKICAgIHZhciByZXM6IFtBbnlTdHJ1Y3RdID0gW10KICAgIHZhciBpID0gMAogICAgdmFyIGxlbiA9IHBhaXJBZGRycy5sZW5ndGgKICAgIHdoaWxlKGkgPCBsZW4pIHsKICAgICAgICByZXMuYXBwZW5kKAogICAgICAgICAgICBnZXRBY2NvdW50KHBhaXJBZGRyc1tpXSkuZ2V0Q2FwYWJpbGl0eTwme1N3YXBJbnRlcmZhY2VzLlBhaXJQdWJsaWN9PihTd2FwQ29uZmlnLlBhaXJQdWJsaWNQYXRoKS5ib3Jyb3coKSEuZ2V0UGFpckluZm8oKQogICAgICAgICkKICAgICAgICBpID0gaSArIDEKICAgIH0KICAgIHJldHVybiByZXMKfQo=",
          "QueryPairInfoByTokenKey": "aW1wb3J0IFN3YXBGYWN0b3J5IGZyb20gMHhiMDYzYzE2Y2FjODVkYmQxCnB1YiBmdW4gbWFpbih0b2tlbjBLZXk6U3RyaW5nICx0b2tlbjFLZXk6U3RyaW5nKTogQW55U3RydWN0PyB7CiAgICByZXR1cm4gU3dhcEZhY3RvcnkuZ2V0UGFpckluZm8odG9rZW4wS2V5OiB0b2tlbjBLZXksIHRva2VuMUtleTogdG9rZW4xS2V5KQp9",
          "QueryUserAllLiquidities": "aW1wb3J0IFN3YXBGYWN0b3J5IGZyb20gMHhiMDYzYzE2Y2FjODVkYmQxCmltcG9ydCBTd2FwQ29uZmlnIGZyb20gMHhiNzhlZjdhZmE1MmZmOTA2CmltcG9ydCBTd2FwSW50ZXJmYWNlcyBmcm9tIDB4Yjc4ZWY3YWZhNTJmZjkwNgpwdWIgZnVuIG1haW4odXNlckFkZHI6IEFkZHJlc3MpOiB7QWRkcmVzczogVUZpeDY0fSB7CiAgICB2YXIgbHBUb2tlbkNvbGxlY3Rpb25QdWJsaWNQYXRoID0gU3dhcENvbmZpZy5McFRva2VuQ29sbGVjdGlvblB1YmxpY1BhdGgKICAgIGxldCBscFRva2VuQ29sbGVjdGlvbkNhcCA9IGdldEFjY291bnQodXNlckFkZHIpLmdldENhcGFiaWxpdHk8JntTd2FwSW50ZXJmYWNlcy5McFRva2VuQ29sbGVjdGlvblB1YmxpY30+KGxwVG9rZW5Db2xsZWN0aW9uUHVibGljUGF0aCkKICAgIGlmIGxwVG9rZW5Db2xsZWN0aW9uQ2FwLmNoZWNrKCkgPT0gZmFsc2UgewogICAgICAgIHJldHVybiB7fQogICAgfQogICAgbGV0IGxwVG9rZW5Db2xsZWN0aW9uUmVmID0gbHBUb2tlbkNvbGxlY3Rpb25DYXAuYm9ycm93KCkhCiAgICBsZXQgbGlxdWlkaXR5UGFpckFkZHJzID0gbHBUb2tlbkNvbGxlY3Rpb25SZWYuZ2V0QWxsTFBUb2tlbnMoKQogICAgdmFyIHJlczoge0FkZHJlc3M6IFVGaXg2NH0gPSB7fQogICAgZm9yIHBhaXJBZGRyIGluIGxpcXVpZGl0eVBhaXJBZGRycyB7CiAgICAgICAgdmFyIGxwVG9rZW5BbW91bnQgPSBscFRva2VuQ29sbGVjdGlvblJlZi5nZXRMcFRva2VuQmFsYW5jZShwYWlyQWRkcjogcGFpckFkZHIpCiAgICAgICAgcmVzW3BhaXJBZGRyXSA9IGxwVG9rZW5BbW91bnQKICAgIH0KICAgIHJldHVybiByZXMKfQ==",
          "QueryTimestamp": "cHViIGZ1biBtYWluKCk6IFVGaXg2NCB7CiAgICByZXR1cm4gZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wCn0=",
          "QueryVaultBalanceBatched": "aW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweGYyMzNkY2VlODhmZTBhYmUKcHViIGZ1biBtYWluKHVzZXJBZGRyOiBBZGRyZXNzLCB2YXVsdFBhdGhzOiBbUHVibGljUGF0aF0pOiBbVUZpeDY0XSB7CiAgICB2YXIgYmFsYW5jZXM6IFtVRml4NjRdID0gW10KICAgIGZvciB2YXVsdFBhdGggaW4gdmF1bHRQYXRocyB7CiAgICAgICAgbGV0IHZhdWx0QmFsYW5jZSA9IGdldEFjY291bnQodXNlckFkZHIpLmdldENhcGFiaWxpdHk8JntGdW5naWJsZVRva2VuLkJhbGFuY2V9Pih2YXVsdFBhdGgpCiAgICAgICAgaWYgdmF1bHRCYWxhbmNlLmNoZWNrKCkgPT0gZmFsc2UgfHwgdmF1bHRCYWxhbmNlLmJvcnJvdygpID09IG5pbCB7CiAgICAgICAgICAgIGJhbGFuY2VzLmFwcGVuZCgwLjApCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYmFsYW5jZXMuYXBwZW5kKHZhdWx0QmFsYW5jZS5ib3Jyb3coKSEuYmFsYW5jZSkKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gYmFsYW5jZXMKfQ==",
          "QueryTokenPathPrefix": "aW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweGYyMzNkY2VlODhmZTBhYmUKcHViIGZ1biBtYWluKHRva2VuTmFtZTogU3RyaW5nLCB0b2tlbkFkZHI6IEFkZHJlc3MsIHVzZXJBZGRyOiBBZGRyZXNzKToge1N0cmluZzogQW55U3RydWN0fSB7CiAgICBsZXQgY29kZSA9IGdldEFjY291bnQodG9rZW5BZGRyKS5jb250cmFjdHMuZ2V0KG5hbWU6IHRva2VuTmFtZSkhLmNvZGUKICAgIHZhciBsb2NhbFByZWZpeCA9ICIiCiAgICB2YXIgYmFsYW5jZVBhdGggPSAvcHVibGljL1BhdGhQcmVmaXgxQmFsYW5jZQogICAgdmFyIHJlY2VpdmVyUGF0aCA9IC9wdWJsaWMvUGF0aFByZWZpeDFSZWNlaXZlcgogICAgaWYgZ2V0QWNjb3VudCh1c2VyQWRkcikuZ2V0Q2FwYWJpbGl0eTwme0Z1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KGJhbGFuY2VQYXRoKS5jaGVjaygpICYmIGdldEFjY291bnQodXNlckFkZHIpLmdldENhcGFiaWxpdHk8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4ocmVjZWl2ZXJQYXRoKS5jaGVjaygpIHsKICAgICAgICBsb2NhbFByZWZpeCA9ICJQYXRoUHJlZml4MSIKICAgIH0KICAgIGJhbGFuY2VQYXRoID0gL3B1YmxpYy9QYXRoUHJlZml4MkJhbGFuY2UKICAgIHJlY2VpdmVyUGF0aCA9IC9wdWJsaWMvUGF0aFByZWZpeDJSZWNlaXZlcgogICAgaWYgZ2V0QWNjb3VudCh1c2VyQWRkcikuZ2V0Q2FwYWJpbGl0eTwme0Z1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KGJhbGFuY2VQYXRoKS5jaGVjaygpICYmIGdldEFjY291bnQodXNlckFkZHIpLmdldENhcGFiaWxpdHk8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4ocmVjZWl2ZXJQYXRoKS5jaGVjaygpIHsKICAgICAgICBsb2NhbFByZWZpeCA9ICJQYXRoUHJlZml4MiIKICAgIH0KICAgIGJhbGFuY2VQYXRoID0gL3B1YmxpYy9QYXRoUHJlZml4M0JhbGFuY2UKICAgIHJlY2VpdmVyUGF0aCA9IC9wdWJsaWMvUGF0aFByZWZpeDNSZWNlaXZlcgogICAgaWYgZ2V0QWNjb3VudCh1c2VyQWRkcikuZ2V0Q2FwYWJpbGl0eTwme0Z1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KGJhbGFuY2VQYXRoKS5jaGVjaygpICYmIGdldEFjY291bnQodXNlckFkZHIpLmdldENhcGFiaWxpdHk8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4ocmVjZWl2ZXJQYXRoKS5jaGVjaygpIHsKICAgICAgICBsb2NhbFByZWZpeCA9ICJQYXRoUHJlZml4MyIKICAgIH0KICAgIGJhbGFuY2VQYXRoID0gL3B1YmxpYy9QYXRoUHJlZml4NEJhbGFuY2UKICAgIHJlY2VpdmVyUGF0aCA9IC9wdWJsaWMvUGF0aFByZWZpeDRSZWNlaXZlcgogICAgaWYgZ2V0QWNjb3VudCh1c2VyQWRkcikuZ2V0Q2FwYWJpbGl0eTwme0Z1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KGJhbGFuY2VQYXRoKS5jaGVjaygpICYmIGdldEFjY291bnQodXNlckFkZHIpLmdldENhcGFiaWxpdHk8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4ocmVjZWl2ZXJQYXRoKS5jaGVjaygpIHsKICAgICAgICBsb2NhbFByZWZpeCA9ICJQYXRoUHJlZml4NCIKICAgIH0KICAgIHJldHVybiB7CiAgICAgICAgIkxvY2FsUHJlZml4IjogbG9jYWxQcmVmaXgsCiAgICAgICAgIlRva2VuQ29kZSI6IGNvZGUKICAgIH0KfQ==",
          "CenterTokens": [
            "A.1654653399040a61.FlowToken",
            "A.3c5959b568896393.FUSD",
            "A.b19436aae4d94622.FiatToken",
            "A.cfdd90d4a00f7b5b.TeleportedTetherToken",
            "A.231cc0dbbcffc4b7.ceWETH",
            "A.231cc0dbbcffc4b7.ceWBTC"
          ]
        },
        "basic": {
          "accountStorage": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgYWNjb3VudFN0b3JhZ2UgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCiBhY2Nlc3MoYWxsKSBzdHJ1Y3QgU3RvcmFnZUluZm8gewogICAgYWNjZXNzKGFsbCkgIGxldCBjYXBhY2l0eTogVUludDY0CiAgICBhY2Nlc3MoYWxsKSAgbGV0IHVzZWQ6IFVJbnQ2NAogICAgYWNjZXNzKGFsbCkgIGxldCBhdmFpbGFibGU6IFVJbnQ2NAoKICAgIGluaXQoY2FwYWNpdHk6IFVJbnQ2NCwgdXNlZDogVUludDY0LCBhdmFpbGFibGU6IFVJbnQ2NCkgewogICAgICAgIHNlbGYuY2FwYWNpdHkgPSBjYXBhY2l0eQogICAgICAgIHNlbGYudXNlZCA9IHVzZWQKICAgICAgICBzZWxmLmF2YWlsYWJsZSA9IGF2YWlsYWJsZQogICAgfQp9CgphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyOiBBZGRyZXNzKTogU3RvcmFnZUluZm8gewogICAgbGV0IGFjY3QgPSBnZXRBY2NvdW50KGFkZHIpCiAgICB2YXIgYXZhaWxhYmxlOiBVSW50NjQgPSAwCiAgICBpZiBhY2N0LnN0b3JhZ2UuY2FwYWNpdHkgPiAwIHsKICAgICAgICBhdmFpbGFibGUgPSBhY2N0LnN0b3JhZ2UuY2FwYWNpdHkgLSBhY2N0LnN0b3JhZ2UudXNlZAogICAgfQogICAgcmV0dXJuIFN0b3JhZ2VJbmZvKGNhcGFjaXR5OiBhY2N0LnN0b3JhZ2UuY2FwYWNpdHksCiAgICAgICAgICAgIHVzZWQ6IGFjY3Quc3RvcmFnZS51c2VkLAogICAgICAgICAgICBhdmFpbGFibGU6IGF2YWlsYWJsZSkKfQ==",
          "addContractToAccount": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgYWRkQ29udHJhY3RUb0FjY291bnQgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCnRyYW5zYWN0aW9uKG5hbWU6IFN0cmluZywgY29kZTogU3RyaW5nKSB7CiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChDb250cmFjdHMsIEFkZENvbnRyYWN0KSAmQWNjb3VudCkgewogICAgICAgIHNpZ25lci5jb250cmFjdHMuYWRkKG5hbWU6IG5hbWUsIGNvZGU6IGNvZGUudXRmOCkKICAgIH0KfQ==",
          "addKey": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgYWRkS2V5IC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgQ3J5cHRvCgp0cmFuc2FjdGlvbihwdWJsaWNLZXk6IFN0cmluZywgc2lnbmF0dXJlQWxnb3JpdGhtOiBVSW50OCwgaGFzaEFsZ29yaXRobTogVUludDgsIHdlaWdodDogVUZpeDY0KSB7CiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChLZXlzKSAmQWNjb3VudCkgewogICAgICAgIGxldCBrZXkgPSBQdWJsaWNLZXkoCiAgICAgICAgICAgIHB1YmxpY0tleTogcHVibGljS2V5LmRlY29kZUhleCgpLAogICAgICAgICAgICBzaWduYXR1cmVBbGdvcml0aG06IFNpZ25hdHVyZUFsZ29yaXRobShyYXdWYWx1ZTogc2lnbmF0dXJlQWxnb3JpdGhtKSEKICAgICAgICApCgogICAgICAgIHNpZ25lci5rZXlzLmFkZCgKICAgICAgICAgICAgcHVibGljS2V5OiBrZXksCiAgICAgICAgICAgIGhhc2hBbGdvcml0aG06IEhhc2hBbGdvcml0aG0ocmF3VmFsdWU6IGhhc2hBbGdvcml0aG0pISwKICAgICAgICAgICAgd2VpZ2h0OiB3ZWlnaHQKICAgICAgICApCiAgICB9Cn0=",
          "addKeyTemp": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgYWRkS2V5VGVtcCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IENyeXB0bwoKdHJhbnNhY3Rpb24ocHVibGljS2V5czogW0NyeXB0by5LZXlMaXN0RW50cnldLCBjb250cmFjdHM6IHtTdHJpbmc6IFN0cmluZ30pIHsKCXByZXBhcmUoc2lnbmVyOiBhdXRoKEJvcnJvd1ZhbHVlIHwgU3RvcmFnZSkgJkFjY291bnQpIHsKCgkJbGV0IGFjY291bnQgPSBBY2NvdW50KHBheWVyOiBzaWduZXIpCgoJCS8vIGFkZCBhbGwgdGhlIGtleXMgdG8gdGhlIGFjY291bnQKCQlmb3Iga2V5IGluIHB1YmxpY0tleXMgewoJCQlhY2NvdW50LmtleXMuYWRkKHB1YmxpY0tleToga2V5LnB1YmxpY0tleSwgaGFzaEFsZ29yaXRobToga2V5Lmhhc2hBbGdvcml0aG0sIHdlaWdodDoga2V5LndlaWdodCkKCQl9CgkJCgkJLy8gYWRkIGNvbnRyYWN0cyBpZiBwcm92aWRlZAoJCWZvciBjb250cmFjdCBpbiBjb250cmFjdHMua2V5cyB7CgkJCWFjY291bnQuY29udHJhY3RzLmFkZChuYW1lOiBjb250cmFjdCwgY29kZTogY29udHJhY3RzW2NvbnRyYWN0XSEuZGVjb2RlSGV4KCkpCgkJfQoJfQp9",
          "createAccount": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgY3JlYXRlQWNjb3VudCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IENyeXB0bwppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHgxNjU0NjUzMzk5MDQwYTYxCgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQoKCiB0cmFuc2FjdGlvbihwdWJsaWNLZXlzOiBbQ3J5cHRvLktleUxpc3RFbnRyeV0sIGNvbnRyYWN0czoge1N0cmluZzogU3RyaW5nfSwgZnVuZEFtb3VudDogVUZpeDY0KSB7CiAgICBsZXQgdG9rZW5SZWNlaXZlcjogJntGdW5naWJsZVRva2VuLlJlY2VpdmVyfQogICAgbGV0IHNlbnRWYXVsdDogQEZ1bmdpYmxlVG9rZW4uVmF1bHQKCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChCb3Jyb3dWYWx1ZSB8IFN0b3JhZ2UpICZBY2NvdW50KSB7CiAgICAgICAgbGV0IGFjY291bnQgPSBBY2NvdW50KHBheWVyOiBzaWduZXIpCiAgICAgICAgZm9yIGtleSBpbiBwdWJsaWNLZXlzIHsKICAgICAgICAgICAgYWNjb3VudC5rZXlzLmFkZChwdWJsaWNLZXk6IGtleS5wdWJsaWNLZXksIGhhc2hBbGdvcml0aG06IGtleS5oYXNoQWxnb3JpdGhtLCB3ZWlnaHQ6IGtleS53ZWlnaHQpCiAgICAgICAgfQogICAgICAgIGZvciBjb250cmFjdCBpbiBjb250cmFjdHMua2V5cyB7CiAgICAgICAgICAgIGFjY291bnQuY29udHJhY3RzLmFkZChuYW1lOiBjb250cmFjdCwgY29kZTogY29udHJhY3RzW2NvbnRyYWN0XSEuZGVjb2RlSGV4KCkpCiAgICAgICAgfQogICAgICAgIHNlbGYudG9rZW5SZWNlaXZlciA9IGFjY291bnQuY2FwYWJpbGl0aWVzLmJvcnJvdzwme0Z1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9PigvcHVibGljL2Zsb3dUb2tlblJlY2VpdmVyKSA/PyBwYW5pYygiVW5hYmxlIHRvIGJvcnJvdyByZWNlaXZlciByZWZlcmVuY2UiKQogICAgICAgIGxldCB2YXVsdFJlZiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZGbG93VG9rZW4uVmF1bHQ+KGZyb206IC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0KSA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyByZWZlcmVuY2UgdG8gdGhlIG93bmVyJydzIFZhdWx0ISIpCiAgICAgICAgc2VsZi5zZW50VmF1bHQgPC0gdmF1bHRSZWYud2l0aGRyYXcoYW1vdW50OiBmdW5kQW1vdW50KQogICAgfQogICAgZXhlY3V0ZSB7CiAgICAgICAgc2VsZi50b2tlblJlY2VpdmVyLmRlcG9zaXQoZnJvbTogPC1zZWxmLnNlbnRWYXVsdCkKICAgIH0KIH0=",
          "createAccountSdk": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgY3JlYXRlQWNjb3VudFNkayAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IENyeXB0bwoKdHJhbnNhY3Rpb24ocHVibGljS2V5OiBTdHJpbmcsIHNpZ25hdHVyZUFsZ29yaXRobTogVUludDgsIGhhc2hBbGdvcml0aG06IFVJbnQ4LCB3ZWlnaHQ6IFVGaXg2NCwgY29udHJhY3RzOiB7U3RyaW5nOiBTdHJpbmd9KSB7CiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChCb3Jyb3dWYWx1ZSB8IFN0b3JhZ2UpICZBY2NvdW50KSB7CiAgICAgICAgbGV0IGFjY291bnQgPSBBY2NvdW50KHBheWVyOiBzaWduZXIpCgogICAgICAgIGxldCBrZXkgPSBQdWJsaWNLZXkoCiAgICAgICAgICAgIHB1YmxpY0tleTogcHVibGljS2V5LmRlY29kZUhleCgpLAogICAgICAgICAgICBzaWduYXR1cmVBbGdvcml0aG06IFNpZ25hdHVyZUFsZ29yaXRobShyYXdWYWx1ZTogc2lnbmF0dXJlQWxnb3JpdGhtKSEKICAgICAgICApCgogICAgICAgIGFjY291bnQua2V5cy5hZGQoCiAgICAgICAgICAgIHB1YmxpY0tleToga2V5LAogICAgICAgICAgICBoYXNoQWxnb3JpdGhtOiBIYXNoQWxnb3JpdGhtKHJhd1ZhbHVlOiBoYXNoQWxnb3JpdGhtKSEsCiAgICAgICAgICAgIHdlaWdodDogd2VpZ2h0CiAgICAgICAgKQoKICAgICAgICBmb3IgY29udHJhY3QgaW4gY29udHJhY3RzLmtleXMgewogICAgICAgICAgICBhY2NvdW50LmNvbnRyYWN0cy5hZGQobmFtZTogY29udHJhY3QsIGNvZGU6IGNvbnRyYWN0c1tjb250cmFjdF0hLmRlY29kZUhleCgpKQogICAgICAgIH0KICAgIH0KfQ==",
          "getAccountInfo": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0QWNjb3VudEluZm8gLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmFjY2VzcyhhbGwpIHN0cnVjdCBSZXN1bHQgewogIGFjY2VzcyhhbGwpIGxldCBhZGRyZXNzOiBBZGRyZXNzCiAgYWNjZXNzKGFsbCkgbGV0IGJhbGFuY2U6IFVGaXg2NAogIGFjY2VzcyhhbGwpIGxldCBhdmFpbGFibGVCYWxhbmNlOiBVRml4NjQKICBhY2Nlc3MoYWxsKSBsZXQgc3RvcmFnZVVzZWQ6IFVJbnQ2NAogIGFjY2VzcyhhbGwpIGxldCBzdG9yYWdlQ2FwYWNpdHk6IFVJbnQ2NAogIGFjY2VzcyhhbGwpIGxldCBzdG9yYWdlRmxvdzogVUZpeDY0CgogIGluaXQoCiAgICBhZGRyZXNzOiBBZGRyZXNzLAogICAgYmFsYW5jZTogVUZpeDY0LAogICAgYXZhaWxhYmxlQmFsYW5jZTogVUZpeDY0LAogICAgc3RvcmFnZVVzZWQ6IFVJbnQ2NCwKICAgIHN0b3JhZ2VDYXBhY2l0eTogVUludDY0LAogICAgc3RvcmFnZUZsb3c6IFVGaXg2NCwKICApIHsKICAgIHNlbGYuYWRkcmVzcyA9IGFkZHJlc3MKICAgIHNlbGYuYmFsYW5jZSA9IGJhbGFuY2UKICAgIHNlbGYuYXZhaWxhYmxlQmFsYW5jZSA9IGF2YWlsYWJsZUJhbGFuY2UKICAgIHNlbGYuc3RvcmFnZVVzZWQgPSBzdG9yYWdlVXNlZAogICAgc2VsZi5zdG9yYWdlQ2FwYWNpdHkgPSBzdG9yYWdlQ2FwYWNpdHkKICAgIHNlbGYuc3RvcmFnZUZsb3cgPSBzdG9yYWdlRmxvdwogIH0KfQoKYWNjZXNzKGFsbCkgZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcyk6IFJlc3VsdCB7CiAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgcmV0dXJuIFJlc3VsdCgKICAgIGFkZHJlc3M6IGFjY291bnQuYWRkcmVzcywKICAgIGJhbGFuY2U6IGFjY291bnQuYmFsYW5jZSwKICAgIGF2YWlsYWJsZUJhbGFuY2U6IGFjY291bnQuYXZhaWxhYmxlQmFsYW5jZSwKICAgIHN0b3JhZ2VVc2VkOiBhY2NvdW50LnN0b3JhZ2UudXNlZCwKICAgIHN0b3JhZ2VDYXBhY2l0eTogYWNjb3VudC5zdG9yYWdlLmNhcGFjaXR5LAogICAgc3RvcmFnZUZsb3c6IGFjY291bnQuYmFsYW5jZSAtIGFjY291bnQuYXZhaWxhYmxlQmFsYW5jZQogICkKfQ==",
          "getAccountMinFlow": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0QWNjb3VudE1pbkZsb3cgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MpOiBVRml4NjQgewogIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogIHJldHVybiBhY2NvdW50LmJhbGFuY2UgLSBhY2NvdW50LmF2YWlsYWJsZUJhbGFuY2UKfQ==",
          "getAccountTotalFlowBalance": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0QWNjb3VudFRvdGFsRmxvd0JhbGFuY2UgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhmMjMzZGNlZTg4ZmUwYWJlCgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHgxNjU0NjUzMzk5MDQwYTYxCgppbXBvcnQgTG9ja2VkVG9rZW5zIGZyb20gMHg4ZDBlODdiNjUxNTlhZTYzCgovLyBpbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQoKLy8gaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4MTY1NDY1MzM5OTA0MGE2MQoKLy8gaW1wb3J0IExvY2tlZFRva2VucyBmcm9tIDB4OGQwZTg3YjY1MTU5YWU2MwoKCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MpOiBVRml4NjQgewogICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgICBsZXQgdW5sb2NrZWRWYXVsdCA9IGFjY291bnQKICAgICAgLmNhcGFiaWxpdGllcy5nZXQ8JntGdW5naWJsZVRva2VuLkJhbGFuY2V9PigvcHVibGljL2Zsb3dUb2tlbkJhbGFuY2UpIQogICAgICAuYm9ycm93KCkKICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBCYWxhbmNlIHJlZmVyZW5jZSB0byB0aGUgVmF1bHQiKQogICAgbGV0IHVubG9ja2VkQmFsYW5jZSA9IHVubG9ja2VkVmF1bHQuYmFsYW5jZQogICAgICAgIAogICAgbGV0IGxvY2tlZEFjY291bnRJbmZvQ2FwID0gYWNjb3VudAogICAgICAuY2FwYWJpbGl0aWVzLmdldAogICAgICA8JkxvY2tlZFRva2Vucy5Ub2tlbkhvbGRlcj4KICAgICAgKExvY2tlZFRva2Vucy5Mb2NrZWRBY2NvdW50SW5mb1B1YmxpY1BhdGgpCiAgICBpZiBsb2NrZWRBY2NvdW50SW5mb0NhcCA9PSBuaWwgfHwgIShsb2NrZWRBY2NvdW50SW5mb0NhcCEuY2hlY2soKSkgewogICAgICAgIHJldHVybiB1bmxvY2tlZEJhbGFuY2UKICAgIH0KICAgIAogICAgbGV0IGxvY2tlZEFjY291bnRJbmZvUmVmID0gbG9ja2VkQWNjb3VudEluZm9DYXAhLmJvcnJvdygpIQogICAgbGV0IGxvY2tlZEJhbGFuY2UgPSBsb2NrZWRBY2NvdW50SW5mb1JlZi5nZXRMb2NrZWRBY2NvdW50QmFsYW5jZSgpCiAgICAKICAgIHJldHVybiBsb2NrZWRCYWxhbmNlICsgdW5sb2NrZWRCYWxhbmNlCn0=",
          "getAccountTotalLockedFlowBalance": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0QWNjb3VudFRvdGFsTG9ja2VkRmxvd0JhbGFuY2UgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhmMjMzZGNlZTg4ZmUwYWJlCgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHgxNjU0NjUzMzk5MDQwYTYxCgppbXBvcnQgTG9ja2VkVG9rZW5zIGZyb20gMHg4ZDBlODdiNjUxNTlhZTYzCgoKLy8gaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweGYyMzNkY2VlODhmZTBhYmUKCi8vIGltcG9ydCBGbG93VG9rZW4gZnJvbSAweDE2NTQ2NTMzOTkwNDBhNjEKCi8vIGltcG9ydCBMb2NrZWRUb2tlbnMgZnJvbSAweDhkMGU4N2I2NTE1OWFlNjMKCgphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzKTogVUZpeDY0IHsKICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQoKICAgIGxldCBsb2NrZWRBY2NvdW50SW5mb0NhcCA9IGFjY291bnQKICAgICAgLmNhcGFiaWxpdGllcy5nZXQKICAgICAgPCZMb2NrZWRUb2tlbnMuVG9rZW5Ib2xkZXI+CiAgICAgIChMb2NrZWRUb2tlbnMuTG9ja2VkQWNjb3VudEluZm9QdWJsaWNQYXRoKQogICAgaWYgbG9ja2VkQWNjb3VudEluZm9DYXAgPT0gbmlsIHx8ICEobG9ja2VkQWNjb3VudEluZm9DYXAhLmNoZWNrKCkpIHsKICAgICAgICByZXR1cm4gVUZpeDY0KDApCiAgICB9CiAgICAKICAgIGxldCBsb2NrZWRBY2NvdW50SW5mb1JlZiA9IGxvY2tlZEFjY291bnRJbmZvQ2FwIS5ib3Jyb3coKSEKICAgIGxldCBsb2NrZWRCYWxhbmNlID0gbG9ja2VkQWNjb3VudEluZm9SZWYuZ2V0TG9ja2VkQWNjb3VudEJhbGFuY2UoKQogICAgCiAgICByZXR1cm4gbG9ja2VkQmFsYW5jZQp9",
          "getAccountTotalUnlockedFlowBalance": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0QWNjb3VudFRvdGFsVW5sb2NrZWRGbG93QmFsYW5jZSAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKLy8gaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweGYyMzNkY2VlODhmZTBhYmUKCi8vIGltcG9ydCBGbG93VG9rZW4gZnJvbSAweDE2NTQ2NTMzOTkwNDBhNjEKCi8vIGltcG9ydCBMb2NrZWRUb2tlbnMgZnJvbSAweDhkMGU4N2I2NTE1OWFlNjMKCgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQoKaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4MTY1NDY1MzM5OTA0MGE2MQoKaW1wb3J0IExvY2tlZFRva2VucyBmcm9tIDB4OGQwZTg3YjY1MTU5YWU2MwoKCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MpOiBVRml4NjQgewogICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCgogICAgbGV0IHVubG9ja2VkVmF1bHQgPSBhY2NvdW50CiAgICAgIC5jYXBhYmlsaXRpZXMuZ2V0PCZGbG93VG9rZW4uVmF1bHQ+KC9wdWJsaWMvZmxvd1Rva2VuQmFsYW5jZSkhCiAgICAgIC5ib3Jyb3coKQogICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IEJhbGFuY2UgcmVmZXJlbmNlIHRvIHRoZSBWYXVsdCIpCiAgICBsZXQgdW5sb2NrZWRCYWxhbmNlID0gdW5sb2NrZWRWYXVsdC5iYWxhbmNlCgogICAgbGV0IGxvY2tlZEFjY291bnRJbmZvQ2FwID0gYWNjb3VudAogICAgICAuY2FwYWJpbGl0aWVzLmdldAogICAgICA8JkxvY2tlZFRva2Vucy5Ub2tlbkhvbGRlcj4KICAgICAgKExvY2tlZFRva2Vucy5Mb2NrZWRBY2NvdW50SW5mb1B1YmxpY1BhdGgpCiAgICBpZiBsb2NrZWRBY2NvdW50SW5mb0NhcCA9PSBuaWwgfHwgIShsb2NrZWRBY2NvdW50SW5mb0NhcCEuY2hlY2soKSkgewogICAgICAgIHJldHVybiB1bmxvY2tlZEJhbGFuY2UKICAgIH0KICAgIAogICAgbGV0IGxvY2tlZEFjY291bnRJbmZvUmVmID0gbG9ja2VkQWNjb3VudEluZm9DYXAhLmJvcnJvdygpIQogICAgbGV0IGxvY2tlZEJhbGFuY2UgPSBsb2NrZWRBY2NvdW50SW5mb1JlZi5nZXRMb2NrZWRBY2NvdW50QmFsYW5jZSgpCiAgICBsZXQgbG9ja2VkQmFsYW5jZVVubG9ja2VkID0gbG9ja2VkQWNjb3VudEluZm9SZWYuZ2V0VW5sb2NrTGltaXQoKQoKICAgIGlmIGxvY2tlZEJhbGFuY2UgPT0gVUZpeDY0KDApIHsKICAgICAgICByZXR1cm4gdW5sb2NrZWRCYWxhbmNlCiAgICB9CgogICAgaWYgbG9ja2VkQmFsYW5jZVVubG9ja2VkID4gbG9ja2VkQmFsYW5jZSB7CiAgICAgICAgcmV0dXJuIHVubG9ja2VkQmFsYW5jZSArIGxvY2tlZEJhbGFuY2UKICAgIH0KCiAgICByZXR1cm4gbG9ja2VkQmFsYW5jZVVubG9ja2VkICsgdW5sb2NrZWRCYWxhbmNlCn0=",
          "getFindAddress": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0RmluZEFkZHJlc3MgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGSU5EIGZyb20gMHgwOTdiYWZhNGUwYjQ4ZWVmCgovL0NoZWNrIHRoZSBzdGF0dXMgb2YgYSBmaW4gdXNlcgphY2Nlc3MoYWxsKSBmdW4gbWFpbihuYW1lOiBTdHJpbmcpIDogQWRkcmVzcz8gewogICAgbGV0IHN0YXR1cyA9IEZJTkQuc3RhdHVzKG5hbWUpCiAgICByZXR1cm4gc3RhdHVzLm93bmVyCn0=",
          "getFindDomainByAddress": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0RmluZERvbWFpbkJ5QWRkcmVzcyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZJTkQgZnJvbSAweDA5N2JhZmE0ZTBiNDhlZWYKCgphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzKSA6IFN0cmluZz97CiAgICByZXR1cm4gRklORC5yZXZlcnNlTG9va3VwKGFkZHJlc3MpCn0=",
          "getFlowBalanceForAnyAccounts": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0Rmxvd0JhbGFuY2VGb3JBbnlBY2NvdW50cyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEVWTSBmcm9tIDB4ZTQ2N2I5ZGQxMWZhMDBkZgoKCi8vIEdldCB0aGUgYWNjb3VudCBiYWxhbmNlIGZvciBhIENPQSBhY2NvdW50CmFjY2VzcyhhbGwpIGZ1biBnZXRFVk1CYWxhbmNlKF8gYWRkcmVzczogU3RyaW5nKTogVUZpeDY0PyB7CiAgICByZXR1cm4gRVZNLmFkZHJlc3NGcm9tU3RyaW5nKGFkZHJlc3MpLmJhbGFuY2UoKS5pbkZMT1coKQp9CgovLyBHZXQgdGhlIGF2YWlsYWJsZSBhY2NvdW50IGJhbGFuY2UgZm9yIGEgRmxvdyBhY2NvdW50CmFjY2VzcyhhbGwpIGZ1biBnZXRGbG93QmFsYW5jZShfIGFkZHJlc3M6IFN0cmluZyk6IFVGaXg2ND8gewogICAgaWYgbGV0IGFjY291bnQgPSBBZGRyZXNzLmZyb21TdHJpbmcoYWRkcmVzcykgewogICAgICAgIC8vIFVzZSBhdmFpbGFibGUgYmFsYW5jZSBpbnN0ZWFkIG9mIHRvdGFsIGJhbGFuY2UKICAgICAgICByZXR1cm4gZ2V0QWNjb3VudChhY2NvdW50KS5hdmFpbGFibGVCYWxhbmNlCiAgICB9CiAgICByZXR1cm4gbmlsCn0KCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHJlc3NlczogW1N0cmluZ10pOiB7U3RyaW5nOiBVRml4NjQ/fSB7CiAgICBsZXQgcmVzOiB7U3RyaW5nOiBVRml4NjQ/fSA9IHt9CgogICAgZm9yIGFkZHIgaW4gYWRkcmVzc2VzIHsKICAgICAgICBsZXQgaGV4ID0gYWRkclsxXSA9PSAieCIgPyBhZGRyIDogIjB4Ii5jb25jYXQoYWRkcikKICAgICAgICBpZiBsZXQgZmxvd0JhbGFuY2UgPSBnZXRGbG93QmFsYW5jZShoZXgpIHsKICAgICAgICAgICAgcmVzW2hleF0gPSBmbG93QmFsYW5jZQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmIGxldCBldm1CYWxhbmNlID0gZ2V0RVZNQmFsYW5jZShoZXgpIHsKICAgICAgICAgICAgICAgIHJlc1toZXhdID0gZXZtQmFsYW5jZQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIHJlcwp9",
          "getFlownsAddress": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0Rmxvd25zQWRkcmVzcyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZsb3ducyBmcm9tIDB4MjMzZWIwMTJkMzRiMDA3MAoKaW1wb3J0IERvbWFpbnMgZnJvbSAweDIzM2ViMDEyZDM0YjAwNzAKCgphY2Nlc3MoYWxsKSBmdW4gbWFpbihuYW1lOiBTdHJpbmcsIHJvb3Q6IFN0cmluZykgOiBBZGRyZXNzPyB7CiAgICBsZXQgcHJlZml4ID0gIjB4IgogICAgbGV0IHJvb3RIYWhzaCA9IEZsb3ducy5oYXNoKG5vZGU6ICIiLCBsYWJsZTogcm9vdCkKICAgIGxldCBuYW1laGFzaCA9IHByZWZpeC5jb25jYXQoRmxvd25zLmhhc2gobm9kZTogcm9vdEhhaHNoLCBsYWJsZTogbmFtZSkpCiAgICB2YXIgYWRkcmVzcyA9IERvbWFpbnMuZ2V0UmVjb3JkcyhuYW1laGFzaCkKICAgIHJldHVybiBhZGRyZXNzCn0=",
          "getFlownsDomainsByAddress": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0Rmxvd25zRG9tYWluc0J5QWRkcmVzcyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IERvbWFpbnMgZnJvbSAweDIzM2ViMDEyZDM0YjAwNzAKCi8vIGFkZHJlc3M6IEZsb3cgYWRkcmVzcwoKYWNjZXNzKGFsbCkgZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcyk6IFtEb21haW5zLkRvbWFpbkRldGFpbF0gewogICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgICBsZXQgY29sbGVjdGlvbkNhcCA9IGFjY291bnQuZ2V0Q2FwYWJpbGl0eTwme0RvbWFpbnMuQ29sbGVjdGlvblB1YmxpY30+KERvbWFpbnMuQ29sbGVjdGlvblB1YmxpY1BhdGgpCiAgICBsZXQgY29sbGVjdGlvbiA9IGNvbGxlY3Rpb25DYXAuYm9ycm93KCkhCiAgICBsZXQgZG9tYWluczpbRG9tYWlucy5Eb21haW5EZXRhaWxdID0gW10KICAgIGxldCBpZHMgPSBjb2xsZWN0aW9uLmdldElEcygpCgogICAgZm9yIGlkIGluIGlkcyB7CiAgICAgICAgbGV0IGRvbWFpbiA9IGNvbGxlY3Rpb24uYm9ycm93RG9tYWluKGlkOiBpZCkKICAgICAgICBsZXQgZGV0YWlsID0gZG9tYWluLmdldERldGFpbCgpCiAgICAgICAgZG9tYWlucy5hcHBlbmQoZGV0YWlsKQogICAgfQoKICAgIHJldHVybiBkb21haW5zCn0=",
          "getStorageInfo": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0U3RvcmFnZUluZm8gLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCiBhY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyOiBBZGRyZXNzKToge1N0cmluZzogVUludDY0fSB7CiAgICBsZXQgYWNjdCA9IGdldEFjY291bnQoYWRkcikKICAgIGxldCByZXQ6IHtTdHJpbmc6IFVJbnQ2NH0gPSB7fQogICAgcmV0WyJjYXBhY2l0eSJdID0gYWNjdC5zdG9yYWdlLmNhcGFjaXR5CiAgICByZXRbInVzZWQiXSA9IGFjY3Quc3RvcmFnZS51c2VkCiAgICBpZiBhY2N0LnN0b3JhZ2UuY2FwYWNpdHkgPiAwIHsKICAgICAgICByZXRbImF2YWlsYWJsZSJdID0gYWNjdC5zdG9yYWdlLmNhcGFjaXR5IC0gIGFjY3Quc3RvcmFnZS51c2VkCiAgICB9IGVsc2UgewogICAgICAgIHJldFsiYXZhaWxhYmxlIl0gPSAwCiAgICB9CiAgICAKICAgIHJldHVybiByZXQKfQ==",
          "getTokenBalanceWithModel": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0VG9rZW5CYWxhbmNlV2l0aE1vZGVsIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQoKaW1wb3J0IDxUb2tlbj4gZnJvbSA8VG9rZW5BZGRyZXNzPgoKYWNjZXNzKGFsbCkgZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcyk6IFVGaXg2NCB7CiAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKCiAgICBsZXQgdmF1bHRSZWYgPSBhY2NvdW50LmNhcGFiaWxpdGllcy5ib3Jyb3c8JntGdW5naWJsZVRva2VuLkJhbGFuY2V9Pig8VG9rZW5CYWxhbmNlUGF0aD4pCiAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBCYWxhbmNlIGNhcGFiaWxpdHkiKQoKICAgIHJldHVybiB2YXVsdFJlZi5iYWxhbmNlCn0=",
          "isKeyHasFullAuth": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgaXNLZXlIYXNGdWxsQXV0aCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MsIHB1YmxpY0tleTogU3RyaW5nKTogQm9vbCB7CiAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgdmFyIGZsYWcgPSBmYWxzZQogIGZ1biBhY2NvdW50Rm4oYWNjb3VudEtleTogQWNjb3VudEtleSk6IEJvb2wgewogICAgbGV0IGtleSA9IFN0cmluZy5lbmNvZGVIZXgoYWNjb3VudEtleS5wdWJsaWNLZXkucHVibGljS2V5KQogICAgaWYgcHVibGljS2V5ID09IGtleSB7CiAgICAgIGZsYWcgPSBhY2NvdW50S2V5LndlaWdodCA+PSBVRml4NjQoMTAwMCkgJiYgIWFjY291bnRLZXkuaXNSZXZva2VkCiAgICB9CiAgICByZXR1cm4gZmFsc2UKICB9CiAgYWNjb3VudC5rZXlzLmZvckVhY2goYWNjb3VudEZuKQoKICByZXR1cm4gZmxhZwp9Cg==",
          "isKeysHasFullAuth": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgaXNLZXlzSGFzRnVsbEF1dGggLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCgphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzLCBwdWJsaWNLZXlzOiBbU3RyaW5nXSk6IEJvb2wgewogIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogIHZhciB3ZWlnaHQ6IFVGaXg2NCA9IDAuMAogIGZ1biBhY2NvdW50Rm4oYWNjb3VudEtleTogQWNjb3VudEtleSk6IEJvb2wgewogICAgbGV0IGtleSA9IFN0cmluZy5lbmNvZGVIZXgoYWNjb3VudEtleS5wdWJsaWNLZXkucHVibGljS2V5KQogICAgaWYgcHVibGljS2V5cy5jb250YWlucyhrZXkpICYmICFhY2NvdW50S2V5LmlzUmV2b2tlZCB7CiAgICAgIHdlaWdodCA9IHdlaWdodCArIGFjY291bnRLZXkud2VpZ2h0IAogICAgfQogICAgcmV0dXJuIGZhbHNlCiAgfQogIGFjY291bnQua2V5cy5mb3JFYWNoKGFjY291bnRGbikKCiAgcmV0dXJuIHdlaWdodCA+PSBVRml4NjQoMTAwMCkKfQo=",
          "isLockedFlowEnable": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgaXNMb2NrZWRGbG93RW5hYmxlIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgTG9ja2VkVG9rZW5zIGZyb20gMHg4ZDBlODdiNjUxNTlhZTYzCgoKYWNjZXNzKGFsbCkgZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcyk6IEJvb2wgewogICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgICByZXR1cm4gYWNjb3VudC5jYXBhYmlsaXRpZXMuZXhpc3RzKExvY2tlZFRva2Vucy5Mb2NrZWRBY2NvdW50SW5mb1B1YmxpY1BhdGgpCn0=",
          "isTokenStorageEnabled": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgaXNUb2tlblN0b3JhZ2VFbmFibGVkIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQoKaW1wb3J0IDxUb2tlbj4gZnJvbSA8VG9rZW5BZGRyZXNzPgoKYWNjZXNzKGFsbCkgZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcykgOiBCb29sIHsKICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAKICAgIGxldCByZWNlaXZlciA9IGFjY291bnQuY2FwYWJpbGl0aWVzLmV4aXN0cyg8VG9rZW5SZWNlaXZlclBhdGg+KQogICAgbGV0IGJhbGFuY2UgPSBhY2NvdW50LmNhcGFiaWxpdGllcy5leGlzdHMoPFRva2VuQmFsYW5jZVBhdGg+KQoKICAgIHJldHVybiByZWNlaXZlciAmJiBiYWxhbmNlCn0=",
          "queryCustomFT": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgcXVlcnlDdXN0b21GVCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgppbXBvcnQgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MgZnJvbSAweGYyMzNkY2VlODhmZTBhYmUKTWV0YWRhdGFWaWV3cwoKCmFjY2VzcyhhbGwpIGZ1biBtYWluKGNvbnRyYWN0QWRkcmVzczogQWRkcmVzcywgY29udHJhY3ROYW1lOiBTdHJpbmcpOiBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YSB7CiAgICAKICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KGNvbnRyYWN0QWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IGNvbnRyYWN0TmFtZSkKICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZpZXdSZXNvbHZlciBmcm9tIEZ1bmdpYmxlVG9rZW4gY29udHJhY3QiKQogICAgbGV0IHZhdWx0RGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgIHJlc291cmNlVHlwZTogbmlsLAogICAgICAgIHZpZXdUeXBlOiBUeXBlPEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPigpCiAgICApIGFzISBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT8gPz8gcGFuaWMoIkNvdWxkIG5vdCByZXNvbHZlIEZUVmF1bHREYXRhIHZpZXciKQoKICAgIHJldHVybiB2YXVsdERhdGEKfQ==",
          "queryCustomNFT": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgcXVlcnlDdXN0b21ORlQgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKCmFjY2VzcyhhbGwpIGZ1biBtYWluKGNvbnRyYWN0QWRkcmVzczogQWRkcmVzcywgY29udHJhY3ROYW1lOiBTdHJpbmcpOiBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhIHsKCiAgICBsZXQgdmlld1Jlc29sdmVyID0gZ2V0QWNjb3VudChjb250cmFjdEFkZHJlc3MpLmNvbnRyYWN0cy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXJ9PihuYW1lOiBjb250cmFjdE5hbWUpCiAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gTkZUIGNvbnRyYWN0IikKICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICByZXNvdXJjZVR5cGU6IG5pbCwKICAgICAgICAgICAgdmlld1R5cGU6IFR5cGU8TWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT4oKQogICAgICAgICkgYXMhIE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE/ID8/IHBhbmljKCJDb3VsZCBub3QgcmVzb2x2ZSBORlRDb2xsZWN0aW9uRGF0YSB2aWV3IikKICAgIAogICAgcmV0dXJuIGNvbGxlY3Rpb25EYXRhCn0=",
          "queryFlowBalance": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgcXVlcnlGbG93QmFsYW5jZSAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweGYyMzNkY2VlODhmZTBhYmUKCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweDE2NTQ2NTMzOTkwNDBhNjEKCgphY2Nlc3MoYWxsKSBmdW4gY2hlY2tGbG93VG9rZW5CYWxhbmNlKGFkZHJlc3M6IEFkZHJlc3MpIDogVUZpeDY0IHsKICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgbGV0IHZhdWx0UmVmID0gYWNjb3VudC5jYXBhYmlsaXRpZXMuYm9ycm93PCZ7RnVuZ2libGVUb2tlbi5CYWxhbmNlfT4oL3B1YmxpYy9mbG93VG9rZW5CYWxhbmNlKQogICAgPz8gbmlsCgogICAgCiAgICBpZiB2YXVsdFJlZiAhPSBuaWwgewogICAgICAgIHJldHVybiB2YXVsdFJlZiEuYmFsYW5jZQogICAgfQogICAgCiAgICByZXR1cm4gMC4wCn0KCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHJzOiBbQWRkcmVzc10pOiBbVUZpeDY0XSB7CiAgICBsZXQgYmFsczogW1VGaXg2NF0gPSBbXQoKICAgIGZvciBhZGRyIGluIGFkZHJzIHsKICAgICAgICBsZXQgYmFsID0gY2hlY2tGbG93VG9rZW5CYWxhbmNlKGFkZHJlc3M6IGFkZHIpCiAgICAgICAgYmFscy5hcHBlbmQoYmFsKQogICAgfQogICAgCiAgICByZXR1cm4gYmFscwp9",
          "removeAccountKeyByIndex": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgcmVtb3ZlQWNjb3VudEtleUJ5SW5kZXggLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCnRyYW5zYWN0aW9uKGtleUluZGV4OiBJbnQpIHsKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKEtleXMpICZBY2NvdW50KSB7CiAgICAgICAgc2lnbmVyLmtleXMucmV2b2tlKGtleUluZGV4OiBrZXlJbmRleCkKICAgIH0KfQ==",
          "removeContractFromAccount": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgcmVtb3ZlQ29udHJhY3RGcm9tQWNjb3VudCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKdHJhbnNhY3Rpb24obmFtZTogU3RyaW5nKSB7CiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChSZW1vdmVDb250cmFjdCkgJkFjY291bnQpIHsKICAgICAgICBzaWduZXIuY29udHJhY3RzLnJlbW92ZShuYW1lOiBuYW1lKQogICAgfQp9",
          "revokeKey": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgcmV2b2tlS2V5IC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+Cgp0cmFuc2FjdGlvbihpbmRleDogSW50KSB7CiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChLZXlzKSAmQWNjb3VudCkgewogICAgICAgIC8vIEdldCBhIGtleSBmcm9tIGFuIGF1dGggYWNjb3VudC4KICAgICAgICBsZXQga2V5QSA9IHNpZ25lci5rZXlzLnJldm9rZShrZXlJbmRleDogaW5kZXgpCiAgICB9Cn0=",
          "test": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgdGVzdCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweGYyMzNkY2VlODhmZTBhYmUKCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweDE2NTQ2NTMzOTkwNDBhNjEKCgp0cmFuc2FjdGlvbihhbW91bnQ6IFVGaXg2NCwgcmVjaXBpZW50OiBBZGRyZXNzKSB7CgogICAgLy8gVGhlIFZhdWx0IHJlc291cmNlIHRoYXQgaG9sZHMgdGhlIHRva2VucyB0aGF0IGFyZSBiZWluZyB0cmFuc2ZlcmVkCiAgICBsZXQgc2VudFZhdWx0OiBAe0Z1bmdpYmxlVG9rZW4uVmF1bHR9CgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSwgQm9ycm93VmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3Mgc3RvcmVkIHZhdWx0CiAgICAgICAgbGV0IHZhdWx0UmVmID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJkZsb3dUb2tlbi5WYXVsdD4oZnJvbTogL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlZmVyZW5jZSB0byB0aGUgb3duZXIncyBWYXVsdCEiKQoKICAgICAgICAvLyBXaXRoZHJhdyB0b2tlbnMgZnJvbSB0aGUgc2lnbmVyJ3Mgc3RvcmVkIHZhdWx0CiAgICAgICAgc2VsZi5zZW50VmF1bHQgPC0gdmF1bHRSZWYud2l0aGRyYXcoYW1vdW50OiBhbW91bnQpCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgLy8gR2V0IHRoZSByZWNpcGllbnQncyBwdWJsaWMgYWNjb3VudCBvYmplY3QKICAgICAgICBsZXQgcmVjaXBpZW50QWNjb3VudCA9IGdldEFjY291bnQocmVjaXBpZW50KQoKICAgICAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIHJlY2lwaWVudCdzIFJlY2VpdmVyCiAgICAgICAgbGV0IHJlY2VpdmVyUmVmID0gcmVjaXBpZW50QWNjb3VudC5jYXBhYmlsaXRpZXMuYm9ycm93PCZ7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KC9wdWJsaWMvZmxvd1Rva2VuUmVjZWl2ZXIpIQogICAgICAgICAgICAKICAgICAgICAvLyBEZXBvc2l0IHRoZSB3aXRoZHJhd24gdG9rZW5zIGluIHRoZSByZWNpcGllbnQncyByZWNlaXZlcgogICAgICAgIHJlY2VpdmVyUmVmLmRlcG9zaXQoZnJvbTogPC1zZWxmLnNlbnRWYXVsdCkKICAgIH0KfQ==",
          "updateContractOfAccount": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgdXBkYXRlQ29udHJhY3RPZkFjY291bnQgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCnRyYW5zYWN0aW9uKG5hbWU6IFN0cmluZywgY29kZTogU3RyaW5nKSB7CiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChVcGRhdGVDb250cmFjdCkgJkFjY291bnQpIHsKICAgICAgICBzaWduZXIuY29udHJhY3RzLnVwZGF0ZShuYW1lOiBuYW1lLCBjb2RlOiBjb2RlLnV0ZjgpCiAgICB9Cn0=",
          "verifyUserSignature": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgdmVyaWZ5VXNlclNpZ25hdHVyZSAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IENyeXB0bwoKYWNjZXNzKGFsbCkgZnVuIG1haW4oCiAgICBtZXNzYWdlOiBTdHJpbmcsCiAgICByYXdQdWJsaWNLZXlzOiBbU3RyaW5nXSwKICAgIHdlaWdodHM6IFtVRml4NjRdLAogICAgc2lnbkFsZ29zOiBbVUludDhdLAogICAgaGFzaEFsZ29zOiBbVUludDhdLAogICAgc2lnbmF0dXJlczogW1N0cmluZ10sCik6IEJvb2wgewoKICAgIGxldCBrZXlMaXN0ID0gQ3J5cHRvLktleUxpc3QoKQoKICAgIHZhciBpID0gMAogICAgZm9yIHJhd1B1YmxpY0tleSBpbiByYXdQdWJsaWNLZXlzIHsKICAgIGtleUxpc3QuYWRkKAogICAgICAgIFB1YmxpY0tleSgKICAgICAgICBwdWJsaWNLZXk6IHJhd1B1YmxpY0tleS5kZWNvZGVIZXgoKSwKICAgICAgICBzaWduYXR1cmVBbGdvcml0aG06IFNpZ25hdHVyZUFsZ29yaXRobShyYXdWYWx1ZTogc2lnbkFsZ29zW2ldKSEKICAgICAgICApLAogICAgICAgIGhhc2hBbGdvcml0aG06IEhhc2hBbGdvcml0aG0ocmF3VmFsdWU6IGhhc2hBbGdvc1tpXSkhLAogICAgICAgIHdlaWdodDogd2VpZ2h0c1tpXSwKICAgICkKICAgIGkgPSBpICsgMQogICAgfQoKICAgIGxldCBzaWduYXR1cmVTZXQ6IFtDcnlwdG8uS2V5TGlzdFNpZ25hdHVyZV0gPSBbXQoKICAgIHZhciBqID0gMAogICAgZm9yIHNpZ25hdHVyZSBpbiBzaWduYXR1cmVzIHsKICAgIHNpZ25hdHVyZVNldC5hcHBlbmQoCiAgICAgICAgQ3J5cHRvLktleUxpc3RTaWduYXR1cmUoCiAgICAgICAgICAgIGtleUluZGV4OiBqLAogICAgICAgICAgICBzaWduYXR1cmU6IHNpZ25hdHVyZS5kZWNvZGVIZXgoKQogICAgICAgICkKICAgICkKICAgICAgICBqID0gaiArIDEKICAgIH0KCiAgICBsZXQgc2lnbmVkRGF0YSA9IG1lc3NhZ2UuZGVjb2RlSGV4KCkKCiAgICByZXR1cm4ga2V5TGlzdC52ZXJpZnkoCiAgICAgICAgc2lnbmF0dXJlU2V0OiBzaWduYXR1cmVTZXQsCiAgICAgICAgc2lnbmVkRGF0YTogc2lnbmVkRGF0YSwKICAgICAgICBkb21haW5TZXBhcmF0aW9uVGFnOiAiRkxPVy1WMC4wLXVzZXIiCiAgICApCn0=",
          "withdrawAllUnlockedFlow": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgd2l0aGRyYXdBbGxVbmxvY2tlZEZsb3cgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhmMjMzZGNlZTg4ZmUwYWJlCgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHgxNjU0NjUzMzk5MDQwYTYxCgppbXBvcnQgTG9ja2VkVG9rZW5zIGZyb20gMHg4ZDBlODdiNjUxNTlhZTYzCgovLyBpbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQoKLy8gaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4MTY1NDY1MzM5OTA0MGE2MQoKLy8gaW1wb3J0IExvY2tlZFRva2VucyBmcm9tIDB4OGQwZTg3YjY1MTU5YWU2MwoKCnRyYW5zYWN0aW9uKCkgewoKICAgIGxldCBob2xkZXJSZWY6IGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJkxvY2tlZFRva2Vucy5Ub2tlbkhvbGRlcgogICAgbGV0IHZhdWx0UmVmOiAmRmxvd1Rva2VuLlZhdWx0CiAgICBsZXQgYW1vdW50OiBVRml4NjQKCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChCb3Jyb3dWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICAgc2VsZi5ob2xkZXJSZWYgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAmTG9ja2VkVG9rZW5zLlRva2VuSG9sZGVyPihmcm9tOiBMb2NrZWRUb2tlbnMuVG9rZW5Ib2xkZXJTdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgYSByZWZlcmVuY2UgdG8gVG9rZW5Ib2xkZXIiKQoKCQkJCXNlbGYudmF1bHRSZWYgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8JkZsb3dUb2tlbi5WYXVsdD4oZnJvbTogL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IGZsb3cgdG9rZW4gdmF1bHQgcmVmIikKCiAgICAgICAgbGV0IGxvY2tlZEFjY291bnRJbmZvQ2FwID0gc2lnbmVyCiAgICAgICAgLmNhcGFiaWxpdGllcy5nZXQ8JkxvY2tlZFRva2Vucy5Ub2tlbkhvbGRlcj4KICAgICAgICAoTG9ja2VkVG9rZW5zLkxvY2tlZEFjY291bnRJbmZvUHVibGljUGF0aCkKCiAgICAgICAgaWYgbG9ja2VkQWNjb3VudEluZm9DYXAgPT0gbmlsIHx8ICEobG9ja2VkQWNjb3VudEluZm9DYXAhLmNoZWNrKCkpIHsKICAgICAgICAgICAgcGFuaWMoIkNvdWxkIG5vdCBnZXQgZmxvdyBsb2NrZWQgdG9rZW4gdmF1bHQiKQogICAgICAgIH0KCiAgICAgICAgbGV0IGxvY2tlZEFjY291bnRJbmZvUmVmID0gbG9ja2VkQWNjb3VudEluZm9DYXAhLmJvcnJvdygpIQogICAgICAgIGxldCBsb2NrZWRCYWxhbmNlID0gbG9ja2VkQWNjb3VudEluZm9SZWYuZ2V0TG9ja2VkQWNjb3VudEJhbGFuY2UoKQogICAgICAgIGxldCBsb2NrZWRCYWxhbmNlVW5sb2NrZWQgPSBsb2NrZWRBY2NvdW50SW5mb1JlZi5nZXRVbmxvY2tMaW1pdCgpCgogICAgICAgIC8vIGlmIGxvY2tlZEJhbGFuY2UgPT0gVUZpeDY0KDApIHsKICAgICAgICAvLyAgICAgcGFuaWMoIk5vdCBlbm91Z2ggYW1vdW50IHRvIHdpdGhkcmF3IikKICAgICAgICAvLyB9CgogICAgICAgIHNlbGYuYW1vdW50ID0gbG9ja2VkQmFsYW5jZVVubG9ja2VkCiAgICAKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICBzZWxmLnZhdWx0UmVmLmRlcG9zaXQoZnJvbTogPC1zZWxmLmhvbGRlclJlZi53aXRoZHJhdyhhbW91bnQ6IHNlbGYuYW1vdW50KSkKICAgIH0KfQ==",
          "withdrawUnlockedFlow": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgd2l0aGRyYXdVbmxvY2tlZEZsb3cgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCi8vIGltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhmMjMzZGNlZTg4ZmUwYWJlCgovLyBpbXBvcnQgRmxvd1Rva2VuIGZyb20gMHgxNjU0NjUzMzk5MDQwYTYxCgovLyBpbXBvcnQgTG9ja2VkVG9rZW5zIGZyb20gMHg4ZDBlODdiNjUxNTlhZTYzCgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweGYyMzNkY2VlODhmZTBhYmUKCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweDE2NTQ2NTMzOTkwNDBhNjEKCmltcG9ydCBMb2NrZWRUb2tlbnMgZnJvbSAweDhkMGU4N2I2NTE1OWFlNjMKCgp0cmFuc2FjdGlvbihhbW91bnQ6IFVGaXg2NCkgewoKICAgIGxldCBob2xkZXJSZWY6IGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgICZMb2NrZWRUb2tlbnMuVG9rZW5Ib2xkZXIKICAgIGxldCB2YXVsdFJlZjogJkZsb3dUb2tlbi5WYXVsdAoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKEJvcnJvd1ZhbHVlKSAmQWNjb3VudCkgewogICAgICAgIHNlbGYuaG9sZGVyUmVmID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJkxvY2tlZFRva2Vucy5Ub2tlbkhvbGRlcj4oZnJvbTogTG9ja2VkVG9rZW5zLlRva2VuSG9sZGVyU3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IGEgcmVmZXJlbmNlIHRvIFRva2VuSG9sZGVyIikKCiAgICAgICAgc2VsZi52YXVsdFJlZiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzwmRmxvd1Rva2VuLlZhdWx0Pihmcm9tOiAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdCkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgZmxvdyB0b2tlbiB2YXVsdCByZWYiKQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIHNlbGYudmF1bHRSZWYuZGVwb3NpdChmcm9tOiA8LXNlbGYuaG9sZGVyUmVmLndpdGhkcmF3KGFtb3VudDogYW1vdW50KSkKICAgIH0KfQ=="
        },
        "bridge": {
          "batchBridgeNFTFromEvm": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgYmF0Y2hCcmlkZ2VORlRGcm9tRXZtIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQoKaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4MTY1NDY1MzM5OTA0MGE2MQoKaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgppbXBvcnQgU2NvcGVkRlRQcm92aWRlcnMgZnJvbSAweDFlNGFhMGI4N2QxMGIxNDEKCgppbXBvcnQgRVZNIGZyb20gMHhlNDY3YjlkZDExZmEwMGRmCgoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VVdGlscyBmcm9tIDB4MWU0YWEwYjg3ZDEwYjE0MQoKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweDFlNGFhMGI4N2QxMGIxNDEKCmltcG9ydCBGbG93RVZNQnJpZGdlQ29uZmlnIGZyb20gMHgxZTRhYTBiODdkMTBiMTQxCgoKCi8vLyBUaGlzIHRyYW5zYWN0aW9uIGJyaWRnZXMgYW4gTkZUIGZyb20gRVZNIHRvIENhZGVuY2UgYXNzdW1pbmcgaXQgaGFzIGFscmVhZHkgYmVlbiBvbmJvYXJkZWQgdG8gdGhlIEZsb3dFVk1CcmlkZ2UKLy8vIE5PVEU6IFRoZSBFUkM3MjEgbXVzdCBoYXZlIGZpcnN0IGJlZW4gb25ib2FyZGVkIHRvIHRoZSBicmlkZ2UuIFRoaXMgY2FuIGJlIGNoZWNrZWQgdmlhIHRoZSBtZXRob2QKLy8vICAgICBGbG93RVZNQnJpZGdlLmV2bUFkZHJlc3NSZXF1aXJlc09uYm9hcmRpbmcoYWRkcmVzczogc2VsZi5ldm1Db250cmFjdEFkZHJlc3MpCi8vLwovLy8gQHBhcmFtIG5mdENvbnRyYWN0QWRkcmVzczogVGhlIEZsb3cgYWNjb3VudCBhZGRyZXNzIGhvc3RpbmcgdGhlIE5GVC1kZWZpbmluZyBDYWRlbmNlIGNvbnRyYWN0Ci8vLyBAcGFyYW0gbmZ0Q29udHJhY3ROYW1lOiBUaGUgbmFtZSBvZiB0aGUgTkZULWRlZmluaW5nIENhZGVuY2UgY29udHJhY3QKLy8vIEBwYXJhbSBpZDogVGhlIEVSQzcyMSBpZCBvZiB0aGUgTkZUIHRvIGJyaWRnZSB0byBDYWRlbmNlIGZyb20gRVZNCi8vLwp0cmFuc2FjdGlvbihuZnRDb250cmFjdEFkZHJlc3M6IEFkZHJlc3MsIG5mdENvbnRyYWN0TmFtZTogU3RyaW5nLCBpZHM6IFtVSW50MjU2XSkgewoKICAgIGxldCBuZnRUeXBlOiBUeXBlCiAgICBsZXQgY29sbGVjdGlvbjogJntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259CiAgICBsZXQgc2NvcGVkUHJvdmlkZXI6IEBTY29wZWRGVFByb3ZpZGVycy5TY29wZWRGVFByb3ZpZGVyCiAgICBsZXQgY29hOiBhdXRoKEVWTS5CcmlkZ2UpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudAogICAgCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChCb3Jyb3dWYWx1ZSwgQ29weVZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSwgVW5wdWJsaXNoQ2FwYWJpbGl0eSkgJkFjY291bnQpIHsKICAgICAgICAvKiAtLS0gUmVmZXJlbmNlIHRoZSBzaWduZXIncyBDYWRlbmNlT3duZWRBY2NvdW50IC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBDT0EKICAgICAgICBzZWxmLmNvYSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEVWTS5CcmlkZ2UpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oZnJvbTogL3N0b3JhZ2UvZXZtKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBDT0EgZnJvbSBwcm92aWRlZCBnYXRld2F5IGFkZHJlc3MiKQoKICAgICAgICAvLyBHZXQgdGhlIEVSQzcyMSBjb250cmFjdCBhZGRyZXNzIGZvciB0aGUgZ2l2ZW4gTkZUIHR5cGUKICAgICAgICBzZWxmLm5mdFR5cGUgPSBGbG93RVZNQnJpZGdlVXRpbHMuYnVpbGRDb21wb3NpdGVUeXBlKAogICAgICAgICAgICAgICAgYWRkcmVzczogbmZ0Q29udHJhY3RBZGRyZXNzLAogICAgICAgICAgICAgICAgY29udHJhY3ROYW1lOiBuZnRDb250cmFjdE5hbWUsCiAgICAgICAgICAgICAgICByZXNvdXJjZU5hbWU6ICJORlQiCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkNvdWxkIG5vdCBjb25zdHJ1Y3QgTkZUIHR5cGUiKQoKICAgICAgICAvKiAtLS0gUmVmZXJlbmNlIHRoZSBzaWduZXIncyBORlQgQ29sbGVjdGlvbiAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgTkZUIGNvbGxlY3Rpb24sIGNvbmZpZ3VyaW5nIGlmIG5lY2Vzc2FyeQogICAgICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KG5mdENvbnRyYWN0QWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IG5mdENvbnRyYWN0TmFtZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gTkZUIGNvbnRyYWN0IikKICAgICAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgICAgIHJlc291cmNlVHlwZTogc2VsZi5uZnRUeXBlLAogICAgICAgICAgICAgICAgdmlld1R5cGU6IFR5cGU8TWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT4oKQogICAgICAgICAgICApIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgTkZUQ29sbGVjdGlvbkRhdGEgdmlldyIpCiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UuYm9ycm93PCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufT4oZnJvbTogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUoPC1jb2xsZWN0aW9uRGF0YS5jcmVhdGVFbXB0eUNvbGxlY3Rpb24oKSwgdG86IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgICAgICBzaWduZXIuY2FwYWJpbGl0aWVzLnVucHVibGlzaChjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKQogICAgICAgICAgICBsZXQgY29sbGVjdGlvbkNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgICAgICBzaWduZXIuY2FwYWJpbGl0aWVzLnB1Ymxpc2goY29sbGVjdGlvbkNhcCwgYXQ6IGNvbGxlY3Rpb25EYXRhLnB1YmxpY1BhdGgpCiAgICAgICAgfQogICAgICAgIHNlbGYuY29sbGVjdGlvbiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KGZyb206IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBjb2xsZWN0aW9uIGZyb20gc3RvcmFnZSBwYXRoIikKCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGJyaWRnZSBmZWUgLSBicmlkZ2luZyBmcm9tIEVWTSBjb25zdW1lcyBubyBzdG9yYWdlLCBzbyBmbGF0IGZlZQogICAgICAgIGxldCBhcHByb3hGZWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuY2FsY3VsYXRlQnJpZGdlRmVlKGJ5dGVzOiA0MDBfMDAwKSAqIFVGaXg2NChpZHMubGVuZ3RoKQogICAgICAgIC8vIElzc3VlIGFuZCBzdG9yZSBicmlkZ2UtZGVkaWNhdGVkIFByb3ZpZGVyIENhcGFiaWxpdHkgaW4gc3RvcmFnZSBpZiBuZWNlc3NhcnkKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS50eXBlKGF0OiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigKICAgICAgICAgICAgICAgIC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICAgICAgICkKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZShwcm92aWRlckNhcCwgdG86IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpCiAgICAgICAgfQogICAgICAgIC8vIENvcHkgdGhlIHN0b3JlZCBQcm92aWRlciBjYXBhYmlsaXR5IGFuZCBjcmVhdGUgYSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgbGV0IHByb3ZpZGVyQ2FwQ29weSA9IHNpZ25lci5zdG9yYWdlLmNvcHk8Q2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+PigKICAgICAgICAgICAgICAgIGZyb206IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiSW52YWxpZCBQcm92aWRlciBDYXBhYmlsaXR5IGZvdW5kIGluIHN0b3JhZ2UuIikKICAgICAgICBsZXQgcHJvdmlkZXJGaWx0ZXIgPSBTY29wZWRGVFByb3ZpZGVycy5BbGxvd2FuY2VGaWx0ZXIoYXBwcm94RmVlKQogICAgICAgIHNlbGYuc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgICAgICAgICBmaWx0ZXJzOiBbIHByb3ZpZGVyRmlsdGVyIF0sCiAgICAgICAgICAgICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICAgICAgICAgKQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIC8vIEV4ZWN1dGUgdGhlIGJyaWRnZQogICAgICAgIGZvciBpZCBpbiBpZHMgewogICAgICAgICAgICBsZXQgbmZ0OiBAe05vbkZ1bmdpYmxlVG9rZW4uTkZUfSA8LSBzZWxmLmNvYS53aXRoZHJhd05GVCgKICAgICAgICAgICAgICAgIHR5cGU6IHNlbGYubmZ0VHlwZSwKICAgICAgICAgICAgICAgIGlkOiBpZCwKICAgICAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICAgICAgKQogICAgICAgICAgICBzZWxmLmNvbGxlY3Rpb24uZGVwb3NpdCh0b2tlbjogPC1uZnQpCiAgICAgICAgfQogICAgICAgIAogICAgICAgIC8vIERlcG9zaXQgdGhlIGJyaWRnZWQgTkZUIGludG8gdGhlIHNpZ25lcidzIGNvbGxlY3Rpb24KICAgICAgICAvLyBEZXN0cm95IHRoZSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgZGVzdHJveSBzZWxmLnNjb3BlZFByb3ZpZGVyCiAgICB9Cn0K",
          "batchBridgeNFTFromEvmV2": "",
          "batchBridgeNFTFromEvmWithPayer": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgYmF0Y2hCcmlkZ2VORlRGcm9tRXZtV2l0aFBheWVyIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhmMjMzZGNlZTg4ZmUwYWJlCgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHgxNjU0NjUzMzk5MDQwYTYxCgppbXBvcnQgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MgZnJvbSAweGYyMzNkY2VlODhmZTBhYmUKCmltcG9ydCBTY29wZWRGVFByb3ZpZGVycyBmcm9tIDB4MWU0YWEwYjg3ZDEwYjE0MQoKaW1wb3J0IEVWTSBmcm9tIDB4ZTQ2N2I5ZGQxMWZhMDBkZgoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VVdGlscyBmcm9tIDB4MWU0YWEwYjg3ZDEwYjE0MQoKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweDFlNGFhMGI4N2QxMGIxNDEKCmltcG9ydCBGbG93RVZNQnJpZGdlQ29uZmlnIGZyb20gMHgxZTRhYTBiODdkMTBiMTQxCgppbXBvcnQgQ3Jvc3NWTU1ldGFkYXRhVmlld3MgZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCgovLy8gVGhpcyB0cmFuc2FjdGlvbiBicmlkZ2VzIGFuIE5GVCBmcm9tIEVWTSB0byBDYWRlbmNlIGFzc3VtaW5nIGl0IGhhcyBhbHJlYWR5IGJlZW4gb25ib2FyZGVkIHRvIHRoZSBGbG93RVZNQnJpZGdlCi8vLyBOT1RFOiBUaGUgRVJDNzIxIG11c3QgaGF2ZSBmaXJzdCBiZWVuIG9uYm9hcmRlZCB0byB0aGUgYnJpZGdlLiBUaGlzIGNhbiBiZSBjaGVja2VkIHZpYSB0aGUgbWV0aG9kCi8vLyAgICAgRmxvd0VWTUJyaWRnZS5ldm1BZGRyZXNzUmVxdWlyZXNPbmJvYXJkaW5nKGFkZHJlc3M6IHNlbGYuZXZtQ29udHJhY3RBZGRyZXNzKQovLy8KLy8vIEBwYXJhbSBuZnRJZGVudGlmaWVyOiBUaGUgQ2FkZW5jZSB0eXBlIGlkZW50aWZpZXIgb2YgdGhlIE5GVCB0byBicmlkZ2UgLSBlLmcuIG5mdC5nZXRUeXBlKCkuaWRlbnRpZmllcgovLy8gQHBhcmFtIGlkOiBUaGUgRVJDNzIxIGlkIG9mIHRoZSBORlQgdG8gYnJpZGdlIHRvIENhZGVuY2UgZnJvbSBFVk0KLy8vCnRyYW5zYWN0aW9uKG5mdElkZW50aWZpZXI6IFN0cmluZywgaWRzOiBbVUludDI1Nl0pIHsKCiAgICBsZXQgbmZ0VHlwZTogVHlwZQogICAgbGV0IGNvbGxlY3Rpb246ICZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufQogICAgbGV0IHNjb3BlZFByb3ZpZGVyOiBAU2NvcGVkRlRQcm92aWRlcnMuU2NvcGVkRlRQcm92aWRlcgogICAgbGV0IGNvYTogYXV0aChFVk0uQ2FsbCwgRVZNLkJyaWRnZSkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50CiAgICBsZXQgdmlld1Jlc29sdmVyOiAme1ZpZXdSZXNvbHZlcn0KCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChCb3Jyb3dWYWx1ZSwgQ29weVZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSwgVW5wdWJsaXNoQ2FwYWJpbGl0eSkgJkFjY291bnQsIHBheWVyOiBhdXRoKEJvcnJvd1ZhbHVlLCBDb3B5VmFsdWUsIElzc3VlU3RvcmFnZUNhcGFiaWxpdHlDb250cm9sbGVyLCBQdWJsaXNoQ2FwYWJpbGl0eSwgU2F2ZVZhbHVlLCBVbnB1Ymxpc2hDYXBhYmlsaXR5KSAmQWNjb3VudCkgewogICAgICAgIC8qIC0tLSBSZWZlcmVuY2UgdGhlIHNpZ25lcidzIENhZGVuY2VPd25lZEFjY291bnQgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIHNpZ25lcidzIENPQQogICAgICAgIHNlbGYuY29hID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRVZNLkNhbGwsIEVWTS5CcmlkZ2UpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oZnJvbTogL3N0b3JhZ2UvZXZtKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBDT0EgZnJvbSBwcm92aWRlZCBnYXRld2F5IGFkZHJlc3MiKQoKICAgICAgICAvKiAtLS0gQ29uc3RydWN0IHRoZSBORlQgdHlwZSAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIENvbnN0cnVjdCB0aGUgTkZUIHR5cGUgZnJvbSB0aGUgcHJvdmlkZWQgaWRlbnRpZmllcgogICAgICAgIHNlbGYubmZ0VHlwZSA9IENvbXBvc2l0ZVR5cGUobmZ0SWRlbnRpZmllcikKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBjb25zdHJ1Y3QgTkZUIHR5cGUgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdChuZnRJZGVudGlmaWVyKSkKICAgICAgICAvLyBQYXJzZSB0aGUgTkZUIGlkZW50aWZpZXIgaW50byBpdHMgY29tcG9uZW50cwogICAgICAgIGxldCBuZnRDb250cmFjdEFkZHJlc3MgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3RBZGRyZXNzKGZyb21UeXBlOiBzZWxmLm5mdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IGFkZHJlc3MgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdChuZnRJZGVudGlmaWVyKSkKICAgICAgICBsZXQgbmZ0Q29udHJhY3ROYW1lID0gRmxvd0VWTUJyaWRnZVV0aWxzLmdldENvbnRyYWN0TmFtZShmcm9tVHlwZTogc2VsZi5uZnRUeXBlKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCBjb250cmFjdCBuYW1lIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQobmZ0SWRlbnRpZmllcikpCgogICAgICAgIC8qIC0tLSBSZWZlcmVuY2UgdGhlIHNpZ25lcidzIE5GVCBDb2xsZWN0aW9uIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBORlQgY29sbGVjdGlvbiwgY29uZmlndXJpbmcgaWYgbmVjZXNzYXJ5CiAgICAgICAgc2VsZi52aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KG5mdENvbnRyYWN0QWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IG5mdENvbnRyYWN0TmFtZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gTkZUIGNvbnRyYWN0IikKICAgICAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSBzZWxmLnZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBzZWxmLm5mdFR5cGUsCiAgICAgICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPigpCiAgICAgICAgICAgICkgYXMhIE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE/ID8/IHBhbmljKCJDb3VsZCBub3QgcmVzb2x2ZSBORlRDb2xsZWN0aW9uRGF0YSB2aWV3IikKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8JntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259Pihmcm9tOiBjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZSg8LWNvbGxlY3Rpb25EYXRhLmNyZWF0ZUVtcHR5Q29sbGVjdGlvbigpLCB0bzogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpCiAgICAgICAgICAgIHNpZ25lci5jYXBhYmlsaXRpZXMudW5wdWJsaXNoKGNvbGxlY3Rpb25EYXRhLnB1YmxpY1BhdGgpCiAgICAgICAgICAgIGxldCBjb2xsZWN0aW9uQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufT4oY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpCiAgICAgICAgICAgIHNpZ25lci5jYXBhYmlsaXRpZXMucHVibGlzaChjb2xsZWN0aW9uQ2FwLCBhdDogY29sbGVjdGlvbkRhdGEucHVibGljUGF0aCkKICAgICAgICB9CiAgICAgICAgc2VsZi5jb2xsZWN0aW9uID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufT4oZnJvbTogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IGNvbGxlY3Rpb24gZnJvbSBzdG9yYWdlIHBhdGgiKQoKICAgICAgICAvKiAtLS0gQ29uZmlndXJlIGEgU2NvcGVkRlRQcm92aWRlciAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgYnJpZGdlIGZlZSAtIGJyaWRnaW5nIGZyb20gRVZNIGNvbnN1bWVzIG5vIHN0b3JhZ2UsIHNvIGZsYXQgZmVlCiAgICAgICAgbGV0IGFwcHJveEZlZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5jYWxjdWxhdGVCcmlkZ2VGZWUoYnl0ZXM6IDQwMF8wMDApICsgKEZsb3dFVk1CcmlkZ2VDb25maWcuYmFzZUZlZSAqIFVGaXg2NChpZHMubGVuZ3RoKSkKICAgICAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICAgICAgaWYgcGF5ZXIuc3RvcmFnZS50eXBlKGF0OiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBwYXllci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KAogICAgICAgICAgICAgICAgL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgICAgICAgKQogICAgICAgICAgICBwYXllci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICAgIH0KICAgICAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBwYXllci5zdG9yYWdlLmNvcHk8Q2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+PigKICAgICAgICAgICAgICAgIGZyb206IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiSW52YWxpZCBQcm92aWRlciBDYXBhYmlsaXR5IGZvdW5kIGluIHN0b3JhZ2UuIikKICAgICAgICBsZXQgcHJvdmlkZXJGaWx0ZXIgPSBTY29wZWRGVFByb3ZpZGVycy5BbGxvd2FuY2VGaWx0ZXIoYXBwcm94RmVlKQogICAgICAgIHNlbGYuc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgICAgICAgcHJvdmlkZXI6IHByb3ZpZGVyQ2FwQ29weSwKICAgICAgICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICAgICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICAgICApCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgLy8gVW53cmFwIE5GVHMgZnJvbSBwcm9qZWN0LWRlZmluZWQgRVJDNzIxIHdyYXBwZXIgY29udHJhY3QgaWYgYXBwbGljYWJsZQogICAgICAgIHVud3JhcE5GVHNJZkFwcGxpY2FibGUoc2VsZi5jb2EsIG5mdElEczogaWRzLCBuZnRUeXBlOiBzZWxmLm5mdFR5cGUsIHZpZXdSZXNvbHZlcjogc2VsZi52aWV3UmVzb2x2ZXIpCgogICAgICAgIC8vIEV4ZWN1dGUgdGhlIGJyaWRnZQogICAgICAgIHZhciBpZHggPSAwCiAgICAgICAgd2hpbGUgaWR4IDwgaWRzLmxlbmd0aCB7CiAgICAgICAgICAgIGxldCBuZnRJZCA9IGlkc1tpZHhdIQogICAgICAgICAgICAvLyBFeGVjdXRlIHRoZSBicmlkZ2UKICAgICAgICAgICAgbGV0IG5mdDogQHtOb25GdW5naWJsZVRva2VuLk5GVH0gPC0gc2VsZi5jb2Eud2l0aGRyYXdORlQoCiAgICAgICAgICAgICAgICB0eXBlOiBzZWxmLm5mdFR5cGUsCiAgICAgICAgICAgICAgICBpZDogbmZ0SWQsCiAgICAgICAgICAgICAgICBmZWVQcm92aWRlcjogJnNlbGYuc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgICAgICkKICAgICAgICAgICAgLy8gRW5zdXJlIHRoZSBicmlkZ2VkIG5mdCBpcyB0aGUgY29ycmVjdCB0eXBlCiAgICAgICAgICAgIGFzc2VydCgKICAgICAgICAgICAgICAgIG5mdC5nZXRUeXBlKCkgPT0gc2VsZi5uZnRUeXBlLAogICAgICAgICAgICAgICAgbWVzc2FnZTogIkJyaWRnZWQgbmZ0IHR5cGUgbWlzbWF0Y2ggLSByZXF1ZXN0ZWQ6ICIuY29uY2F0KHNlbGYubmZ0VHlwZS5pZGVudGlmaWVyKQogICAgICAgICAgICAgICAgICAgIC5jb25jYXQoIiwgcmVjZWl2ZWQ6ICIpLmNvbmNhdChuZnQuZ2V0VHlwZSgpLmlkZW50aWZpZXIpCiAgICAgICAgICAgICkKICAgICAgICAgICAgLy8gRGVwb3NpdCB0aGUgYnJpZGdlZCBORlQgaW50byB0aGUgc2lnbmVyJ3MgY29sbGVjdGlvbgogICAgICAgICAgICBzZWxmLmNvbGxlY3Rpb24uZGVwb3NpdCh0b2tlbjogPC1uZnQpCiAgICAgICAgICAgIGlkeCA9IGlkeCArIDEKICAgICAgICB9CgogICAgICAgIC8vIERlc3Ryb3kgdGhlIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBkZXN0cm95IHNlbGYuc2NvcGVkUHJvdmlkZXIKICAgIH0KfQoKLy8vIFVud3JhcHMgTkZUcyBmcm9tIGEgcHJvamVjdCdzIGN1c3RvbSBFUkM3MjEgd3JhcHBlciBjb250cmFjdCB0byBicmlkZ2VkIE5GVHMgb24gRVZNLCBpZiBhcHBsaWNhYmxlLgovLy8gRW5hYmxlcyBwcm9qZWN0cyB0byB1c2UgdGhlaXIgb3duIEVSQzcyMSBjb250cmFjdCB3aGlsZSBsZXZlcmFnaW5nIHRoZSBicmlkZ2UncyB1bmRlcmx5aW5nIGNvbnRyYWN0LAovLy8gdW50aWwgZGlyZWN0IGN1c3RvbSBjb250cmFjdCBzdXBwb3J0IGlzIGFkZGVkIHRvIHRoZSBicmlkZ2UuCi8vLwovLy8gQHBhcmFtIGNvYTogVGhlIENPQSBvZiB0aGUgc2lnbmVyCi8vLyBAcGFyYW0gbmZ0SURzOiBUaGUgSURzIG9mIHRoZSBORlRzIHRvIHdyYXAKLy8vIEBwYXJhbSBuZnRUeXBlOiBUaGUgdHlwZSBvZiB0aGUgTkZUcyB0byB3cmFwCi8vLyBAcGFyYW0gdmlld1Jlc29sdmVyOiBUaGUgVmlld1Jlc29sdmVyIG9mIHRoZSBORlQgY29udHJhY3QKLy8vCmFjY2VzcyhhbGwpIGZ1biB1bndyYXBORlRzSWZBcHBsaWNhYmxlKAogICAgXyBjb2E6IGF1dGgoRVZNLkNhbGwpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudCwKICAgIG5mdElEczogW1VJbnQyNTZdLAogICAgbmZ0VHlwZTogVHlwZSwKICAgIHZpZXdSZXNvbHZlcjogJntWaWV3UmVzb2x2ZXJ9CikgewogICAgLy8gR2V0IHRoZSBwcm9qZWN0LWRlZmluZWQgRVJDNzIxIGFkZHJlc3MgaWYgaXQgZXhpc3RzCiAgICBpZiBsZXQgY3Jvc3NWTVBvaW50ZXIgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBuZnRUeXBlLAogICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxDcm9zc1ZNTWV0YWRhdGFWaWV3cy5FVk1Qb2ludGVyPigpCiAgICApIGFzISBDcm9zc1ZNTWV0YWRhdGFWaWV3cy5FVk1Qb2ludGVyPyB7CiAgICAgICAgLy8gR2V0IHRoZSB1bmRlcmx5aW5nIEVSQzcyMSBhZGRyZXNzIGlmIGl0IGV4aXN0cwogICAgICAgIGlmIGxldCB1bmRlcmx5aW5nQWRkcmVzcyA9IGdldFVuZGVybHlpbmdFUkM3MjFBZGRyZXNzKGNvYSwgY3Jvc3NWTVBvaW50ZXIuZXZtQ29udHJhY3RBZGRyZXNzKSB7CiAgICAgICAgICAgIGZvciBpZCBpbiBuZnRJRHMgewogICAgICAgICAgICAgICAgLy8gVW53cmFwIE5GVCBpZiBpdCBpcyB3cmFwcGVkCiAgICAgICAgICAgICAgICBpZiBpc05GVFdyYXBwZWQoY29hLAogICAgICAgICAgICAgICAgICAgIG5mdElEOiBpZCwKICAgICAgICAgICAgICAgICAgICB1bmRlcmx5aW5nOiB1bmRlcmx5aW5nQWRkcmVzcywKICAgICAgICAgICAgICAgICAgICB3cmFwcGVyOiBjcm9zc1ZNUG9pbnRlci5ldm1Db250cmFjdEFkZHJlc3MKICAgICAgICAgICAgICAgICkgewogICAgICAgICAgICAgICAgICAgIGxldCByZXMgPSBtdXN0Q2FsbChjb2EsIGNyb3NzVk1Qb2ludGVyLmV2bUNvbnRyYWN0QWRkcmVzcywKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb25TaWc6ICJ3aXRoZHJhd1RvKGFkZHJlc3MsdWludDI1NltdKSIsCiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3M6IFtjb2EuYWRkcmVzcygpLCBbaWRdXQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBsZXQgZGVjb2RlZFJlcyA9IEVWTS5kZWNvZGVBQkkodHlwZXM6IFtUeXBlPEJvb2w+KCldLCBkYXRhOiByZXMuZGF0YSkKICAgICAgICAgICAgICAgICAgICBhc3NlcnQoZGVjb2RlZFJlcy5sZW5ndGggPT0gMSwgbWVzc2FnZTogIkludmFsaWQgcmVzcG9uc2UgbGVuZ3RoIikKICAgICAgICAgICAgICAgICAgICBhc3NlcnQoZGVjb2RlZFJlc1swXSBhcyEgQm9vbCwgbWVzc2FnZTogIkZhaWxlZCB0byB1bndyYXAgTkZUIikKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKLy8vIEdldHMgdGhlIHVuZGVybHlpbmcgRVJDNzIxIGFkZHJlc3MgaWYgaXQgZXhpc3RzIChpLmUuIGlmIHRoZSBFUkM3MjEgaXMgYSB3cmFwcGVyKQovLy8KYWNjZXNzKGFsbCkgZnVuIGdldFVuZGVybHlpbmdFUkM3MjFBZGRyZXNzKAogICAgXyBjb2E6IGF1dGgoRVZNLkNhbGwpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudCwKICAgIF8gd3JhcHBlckFkZHJlc3M6IEVWTS5FVk1BZGRyZXNzCik6IEVWTS5FVk1BZGRyZXNzPyB7CiAgICBsZXQgcmVzID0gY29hLmNhbGwoCiAgICAgICAgdG86IHdyYXBwZXJBZGRyZXNzLAogICAgICAgIGRhdGE6IEVWTS5lbmNvZGVBQklXaXRoU2lnbmF0dXJlKCJ1bmRlcmx5aW5nKCkiLCBbXSksCiAgICAgICAgZ2FzTGltaXQ6IDEwMF8wMDAsCiAgICAgICAgdmFsdWU6IEVWTS5CYWxhbmNlKGF0dG9mbG93OiAwKQogICAgKQoKICAgIC8vIElmIHRoZSBjYWxsIGZhaWxzLCByZXR1cm4gbmlsCiAgICBpZiByZXMuc3RhdHVzICE9IEVWTS5TdGF0dXMuc3VjY2Vzc2Z1bCB8fCByZXMuZGF0YS5sZW5ndGggPT0gMCB7CiAgICAgICAgcmV0dXJuIG5pbAogICAgfQoKICAgIC8vIERlY29kZSBhbmQgcmV0dXJuIHRoZSB1bmRlcmx5aW5nIEVSQzcyMSBhZGRyZXNzCiAgICBsZXQgZGVjb2RlZFJlc3VsdCA9IEVWTS5kZWNvZGVBQkkoCiAgICAgICAgdHlwZXM6IFtUeXBlPEVWTS5FVk1BZGRyZXNzPigpXSwKICAgICAgICBkYXRhOiByZXMuZGF0YQogICAgKQogICAgYXNzZXJ0KGRlY29kZWRSZXN1bHQubGVuZ3RoID09IDEsIG1lc3NhZ2U6ICJJbnZhbGlkIHJlc3BvbnNlIGxlbmd0aCIpCiAgICByZXR1cm4gZGVjb2RlZFJlc3VsdFswXSBhcyEgRVZNLkVWTUFkZHJlc3MKfQoKLy8vIENoZWNrcyBpZiB0aGUgcHJvdmlkZWQgTkZUIGlzIHdyYXBwZWQgaW4gdGhlIHVuZGVybHlpbmcgRVJDNzIxIGNvbnRyYWN0Ci8vLwphY2Nlc3MoYWxsKSBmdW4gaXNORlRXcmFwcGVkKAogICAgXyBjb2E6IGF1dGgoRVZNLkNhbGwpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudCwKICAgIG5mdElEOiBVSW50MjU2LAogICAgdW5kZXJseWluZzogRVZNLkVWTUFkZHJlc3MsCiAgICB3cmFwcGVyOiBFVk0uRVZNQWRkcmVzcwopOiBCb29sIHsKICAgIGxldCByZXMgPSBjb2EuY2FsbCgKICAgICAgICB0bzogdW5kZXJseWluZywKICAgICAgICBkYXRhOiBFVk0uZW5jb2RlQUJJV2l0aFNpZ25hdHVyZSgib3duZXJPZih1aW50MjU2KSIsIFtuZnRJRF0pLAogICAgICAgIGdhc0xpbWl0OiAxMDBfMDAwLAogICAgICAgIHZhbHVlOiBFVk0uQmFsYW5jZShhdHRvZmxvdzogMCkKICAgICkKCiAgICAvLyBJZiB0aGUgY2FsbCBmYWlscywgcmV0dXJuIGZhbHNlCiAgICBpZiByZXMuc3RhdHVzICE9IEVWTS5TdGF0dXMuc3VjY2Vzc2Z1bCB8fCByZXMuZGF0YS5sZW5ndGggPT0gMHsKICAgICAgICByZXR1cm4gZmFsc2UKICAgIH0KCiAgICAvLyBEZWNvZGUgYW5kIGNvbXBhcmUgdGhlIGFkZHJlc3NlcwogICAgbGV0IGRlY29kZWRSZXN1bHQgPSBFVk0uZGVjb2RlQUJJKAogICAgICAgIHR5cGVzOiBbVHlwZTxFVk0uRVZNQWRkcmVzcz4oKV0sCiAgICAgICAgZGF0YTogcmVzLmRhdGEKICAgICkKICAgIGFzc2VydChkZWNvZGVkUmVzdWx0Lmxlbmd0aCA9PSAxLCBtZXNzYWdlOiAiSW52YWxpZCByZXNwb25zZSBsZW5ndGgiKQogICAgbGV0IG93bmVyID0gZGVjb2RlZFJlc3VsdFswXSBhcyEgRVZNLkVWTUFkZHJlc3MKICAgIHJldHVybiBvd25lci50b1N0cmluZygpID09IHdyYXBwZXIudG9TdHJpbmcoKQp9CgovLy8gQ2FsbHMgYSBmdW5jdGlvbiBvbiBhbiBFVk0gY29udHJhY3QgZnJvbSBwcm92aWRlZCBjb2EKLy8vCmFjY2VzcyhhbGwpIGZ1biBtdXN0Q2FsbCgKICAgIF8gY29hOiBhdXRoKEVWTS5DYWxsKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQsCiAgICBfIGNvbnRyYWN0QWRkcjogRVZNLkVWTUFkZHJlc3MsCiAgICBmdW5jdGlvblNpZzogU3RyaW5nLAogICAgYXJnczogW0FueVN0cnVjdF0KKTogRVZNLlJlc3VsdCB7CiAgICBsZXQgcmVzID0gY29hLmNhbGwoCiAgICAgICAgdG86IGNvbnRyYWN0QWRkciwKICAgICAgICBkYXRhOiBFVk0uZW5jb2RlQUJJV2l0aFNpZ25hdHVyZShmdW5jdGlvblNpZywgYXJncyksCiAgICAgICAgZ2FzTGltaXQ6IDRfMDAwXzAwMCwKICAgICAgICB2YWx1ZTogRVZNLkJhbGFuY2UoYXR0b2Zsb3c6IDApCiAgICApCgogICAgYXNzZXJ0KHJlcy5zdGF0dXMgPT0gRVZNLlN0YXR1cy5zdWNjZXNzZnVsLAogICAgICAgIG1lc3NhZ2U6ICJGYWlsZWQgdG8gY2FsbCAnIi5jb25jYXQoZnVuY3Rpb25TaWcpCiAgICAgICAgICAgIC5jb25jYXQoIlxuXHQgZXJyb3IgY29kZTogIikuY29uY2F0KHJlcy5lcnJvckNvZGUudG9TdHJpbmcoKSkKICAgICAgICAgICAgLmNvbmNhdCgiXG5cdCBlcnJvciBtZXNzYWdlOiAiKS5jb25jYXQocmVzLmVycm9yTWVzc2FnZSkKICAgICAgICAgICAgLmNvbmNhdCgiXG5cdCBnYXMgdXNlZDogIikuY29uY2F0KHJlcy5nYXNVc2VkLnRvU3RyaW5nKCkpCiAgICAgICAgICAgIC5jb25jYXQoIlxuXHQgY2FsbGVyIGFkZHJlc3M6IDB4IikuY29uY2F0KGNvYS5hZGRyZXNzKCkudG9TdHJpbmcoKSkKICAgICAgICAgICAgLmNvbmNhdCgiXG5cdCBjb250cmFjdCBhZGRyZXNzOiAweCIpLmNvbmNhdChjb250cmFjdEFkZHIudG9TdHJpbmcoKSkKICAgICkKCiAgICByZXR1cm4gcmVzCn0K",
          "batchBridgeNFTToEvm": "",
          "batchBridgeNFTToEvmAddress": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgYmF0Y2hCcmlkZ2VORlRUb0V2bUFkZHJlc3MgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweGYyMzNkY2VlODhmZTBhYmUKCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweDE2NTQ2NTMzOTkwNDBhNjEKCmltcG9ydCBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cyBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHgxZTRhYTBiODdkMTBiMTQxCgppbXBvcnQgRVZNIGZyb20gMHhlNDY3YjlkZDExZmEwMGRmCgppbXBvcnQgRmxvd0VWTUJyaWRnZVV0aWxzIGZyb20gMHgxZTRhYTBiODdkMTBiMTQxCgppbXBvcnQgRmxvd0VWTUJyaWRnZSBmcm9tIDB4MWU0YWEwYjg3ZDEwYjE0MQoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweDFlNGFhMGI4N2QxMGIxNDEKCmltcG9ydCBDcm9zc1ZNTWV0YWRhdGFWaWV3cyBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKCi8vLyBCcmlkZ2VzIGFuIE5GVCBmcm9tIHRoZSBzaWduZXIncyBjb2xsZWN0aW9uIGluIENhZGVuY2UgdG8gdGhlIHNpZ25lcidzIENPQSBpbiBGbG93RVZNCi8vLwovLy8gTk9URTogVGhpcyB0cmFuc2FjdGlvbiBhbHNvIG9uYm9hcmRzIHRoZSBORlQgdG8gdGhlIGJyaWRnZSBpZiBuZWNlc3Nhcnkgd2hpY2ggbWF5IGluY3VyIGFkZGl0aW9uYWwgZmVlcwovLy8gICAgIHRoYW4gYnJpZGdpbmcgYW4gYXNzZXQgdGhhdCBoYXMgYWxyZWFkeSBiZWVuIG9uYm9hcmRlZC4KLy8vCi8vLyBAcGFyYW0gbmZ0SWRlbnRpZmllcjogVGhlIENhZGVuY2UgdHlwZSBpZGVudGlmaWVyIG9mIHRoZSBORlQgdG8gYnJpZGdlIC0gZS5nLiBuZnQuZ2V0VHlwZSgpLmlkZW50aWZpZXIKLy8vIEBwYXJhbSBpZDogVGhlIENhZGVuY2UgTkZULmlkIG9mIHRoZSBORlQgdG8gYnJpZGdlIHRvIEVWTQovLy8KdHJhbnNhY3Rpb24obmZ0SWRlbnRpZmllcjogU3RyaW5nLCBpZHM6IFtVSW50NjRdLCByZWNpcGllbnQ6IFN0cmluZykgewogICAgbGV0IG5mdDogQHtOb25GdW5naWJsZVRva2VuLk5GVH0KICAgIGxldCByZXF1aXJlc09uYm9hcmRpbmc6IEJvb2wKICAgIGxldCBzY29wZWRQcm92aWRlcjogQFNjb3BlZEZUUHJvdmlkZXJzLlNjb3BlZEZUUHJvdmlkZXIKICAgIGxldCBjb2xsZWN0aW9uOiBhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufQogICAgbGV0IG5mdFR5cGU6IFR5cGUKICAgIGxldCBjb2E6IGF1dGgoRVZNLkNhbGwpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudAogICAgbGV0IHZpZXdSZXNvbHZlcjogJntWaWV3UmVzb2x2ZXJ9CgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQ29weVZhbHVlLCBCb3Jyb3dWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgLy8gUmV0cmlldmUgb3IgY3JlYXRlIENPQQogICAgICAgIGlmIGxldCBjb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uQ2FsbCkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50Pihmcm9tOiAvc3RvcmFnZS9ldm0pIHsKICAgICAgICAgICAgc2VsZi5jb2EgPSBjb2EKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlPEBFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oPC0gRVZNLmNyZWF0ZUNhZGVuY2VPd25lZEFjY291bnQoKSwgdG86IC9zdG9yYWdlL2V2bSkKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy5wdWJsaXNoKAogICAgICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oL3N0b3JhZ2UvZXZtKSwKICAgICAgICAgICAgICAgIGF0OiAvcHVibGljL2V2bQogICAgICAgICAgICApCiAgICAgICAgICAgIHNlbGYuY29hID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRVZNLkNhbGwpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oZnJvbTogL3N0b3JhZ2UvZXZtKSEKICAgICAgICB9CgogICAgICAgIC8qIC0tLSBDb25zdHJ1Y3QgdGhlIE5GVCB0eXBlIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQ29uc3RydWN0IHRoZSBORlQgdHlwZSBmcm9tIHRoZSBwcm92aWRlZCBpZGVudGlmaWVyCiAgICAgICAgc2VsZi5uZnRUeXBlID0gQ29tcG9zaXRlVHlwZShuZnRJZGVudGlmaWVyKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGNvbnN0cnVjdCBORlQgdHlwZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQogICAgICAgIC8vIFBhcnNlIHRoZSBORlQgaWRlbnRpZmllciBpbnRvIGl0cyBjb21wb25lbnRzCiAgICAgICAgbGV0IG5mdENvbnRyYWN0QWRkcmVzcyA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdEFkZHJlc3MoZnJvbVR5cGU6IHNlbGYubmZ0VHlwZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgYWRkcmVzcyBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQogICAgICAgIGxldCBuZnRDb250cmFjdE5hbWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3ROYW1lKGZyb21UeXBlOiBzZWxmLm5mdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IG5hbWUgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdChuZnRJZGVudGlmaWVyKSkKCiAgICAgICAgLyogLS0tIFJldHJpZXZlIHRoZSBORlQgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIE5GVCBjb2xsZWN0aW9uLCBjb25maWd1cmluZyBpZiBuZWNlc3NhcnkKICAgICAgICBzZWxmLnZpZXdSZXNvbHZlciA9IGdldEFjY291bnQobmZ0Q29udHJhY3RBZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogbmZ0Q29udHJhY3ROYW1lKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBWaWV3UmVzb2x2ZXIgZnJvbSBORlQgY29udHJhY3QiKQogICAgICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IHNlbGYudmlld1Jlc29sdmVyLnJlc29sdmVDb250cmFjdFZpZXcoCiAgICAgICAgICAgICAgICByZXNvdXJjZVR5cGU6IG5pbCwKICAgICAgICAgICAgICAgIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkKICAgICAgICAgICAgKSBhcyEgTWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT8gPz8gcGFuaWMoIkNvdWxkIG5vdCByZXNvbHZlIE5GVENvbGxlY3Rpb25EYXRhIHZpZXciKQogICAgICAgIHNlbGYuY29sbGVjdGlvbiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufT4oCiAgICAgICAgICAgICAgICBmcm9tOiBjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYWNjZXNzIHNpZ25lcidzIE5GVCBDb2xsZWN0aW9uIikKCiAgICAgICAgLy8gV2l0aGRyYXcgdGhlIHJlcXVlc3RlZCBORlQgJiBjYWxjdWxhdGUgdGhlIGFwcHJveGltYXRlIGJyaWRnZSBmZWUgYmFzZWQgb24gTkZUIHN0b3JhZ2UgdXNhZ2UKICAgICAgICBsZXQgY3VycmVudFN0b3JhZ2VVc2FnZSA9IHNpZ25lci5zdG9yYWdlLnVzZWQKICAgICAgICBzZWxmLm5mdCA8LSBzZWxmLmNvbGxlY3Rpb24ud2l0aGRyYXcod2l0aGRyYXdJRDogaWRzWzBdKQogICAgICAgIGxldCB3aXRoZHJhd25TdG9yYWdlVXNhZ2UgPSBzaWduZXIuc3RvcmFnZS51c2VkCiAgICAgICAgdmFyIGFwcHJveEZlZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5jYWxjdWxhdGVCcmlkZ2VGZWUoYnl0ZXM6IDQwMF8wMDApICsgKEZsb3dFVk1CcmlkZ2VDb25maWcuYmFzZUZlZSAqIFVGaXg2NChpZHMubGVuZ3RoKSkKCiAgICAgICAgLy8gRGV0ZXJtaW5lIGlmIHRoZSBORlQgcmVxdWlyZXMgb25ib2FyZGluZyAtIHRoaXMgaW1wYWN0cyB0aGUgZmVlIHJlcXVpcmVkCiAgICAgICAgc2VsZi5yZXF1aXJlc09uYm9hcmRpbmcgPSBGbG93RVZNQnJpZGdlLnR5cGVSZXF1aXJlc09uYm9hcmRpbmcoc2VsZi5uZnQuZ2V0VHlwZSgpKQogICAgICAgICAgICA/PyBwYW5pYygiQnJpZGdlIGRvZXMgbm90IHN1cHBvcnQgdGhpcyBhc3NldCB0eXBlIikKICAgICAgICBpZiBzZWxmLnJlcXVpcmVzT25ib2FyZGluZyB7CiAgICAgICAgICAgIGFwcHJveEZlZSA9IGFwcHJveEZlZSArIEZsb3dFVk1CcmlkZ2VDb25maWcub25ib2FyZEZlZQogICAgICAgIH0KCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApCiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICAgIH0KICAgICAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkludmFsaWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBmb3VuZCBpbiBzdG9yYWdlLiIpCiAgICAgICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKGFwcHJveEZlZSkKICAgICAgICBzZWxmLnNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICAgICAgICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgICAgICkKICAgIH0KCiAgICBwcmUgewogICAgICAgIHNlbGYubmZ0LmdldFR5cGUoKS5pZGVudGlmaWVyID09IG5mdElkZW50aWZpZXI6CiAgICAgICAgICAgICJBdHRlbXB0aW5nIHRvIHNlbmQgaW52YWxpZCBuZnQgdHlwZSAtIHJlcXVlc3RlZDogIi5jb25jYXQobmZ0SWRlbnRpZmllcikKICAgICAgICAgICAgLmNvbmNhdCgiLCBzZW5kaW5nOiAiKS5jb25jYXQoc2VsZi5uZnQuZ2V0VHlwZSgpLmlkZW50aWZpZXIpCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgaWYgc2VsZi5yZXF1aXJlc09uYm9hcmRpbmcgewogICAgICAgICAgICAvLyBPbmJvYXJkIHRoZSBORlQgdG8gdGhlIGJyaWRnZQogICAgICAgICAgICBGbG93RVZNQnJpZGdlLm9uYm9hcmRCeVR5cGUoCiAgICAgICAgICAgICAgICBzZWxmLm5mdC5nZXRUeXBlKCksCiAgICAgICAgICAgICAgICBmZWVQcm92aWRlcjogJnNlbGYuc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgICAgICkKICAgICAgICB9CiAgICAgICAgLy8gRXhlY3V0ZSB0aGUgYnJpZGdlIHRyYW5zYWN0aW9uCiAgICAgICAgc2VsZi5jb2EuZGVwb3NpdE5GVCgKICAgICAgICAgICAgbmZ0OiA8LSBzZWxmLm5mdCwKICAgICAgICAgICAgZmVlUHJvdmlkZXI6ICZzZWxmLnNjb3BlZFByb3ZpZGVyIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfQogICAgICAgICkKCiAgICAgICAgdmFyIGlkeCA9IDAKICAgICAgICBmb3IgaWQgaW4gaWRzIHsKICAgICAgICAgICAgaWYgaWR4ID09IDAgewogICAgICAgICAgICAgICAgaWR4ID0gaWR4ICsgMQogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgfQoKICAgICAgICAgICAgc2VsZi5jb2EuZGVwb3NpdE5GVCgKICAgICAgICAgICAgICAgIG5mdDogPC0gc2VsZi5jb2xsZWN0aW9uLndpdGhkcmF3KHdpdGhkcmF3SUQ6IGlkKSwKICAgICAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICAgICAgKQogICAgICAgIH0KCiAgICAgICAgLy8gRGVzdHJveSB0aGUgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGRlc3Ryb3kgc2VsZi5zY29wZWRQcm92aWRlcgoKICAgICAgICAvLyBXcmFwIE5GVHMgaWYgYXBwbGljYWJsZQogICAgICAgIHdyYXBBbmRUcmFuc2Zlck5GVHNJZkFwcGxpY2FibGUoc2VsZi5jb2EsCiAgICAgICAgICAgIG5mdElEczogaWRzLAogICAgICAgICAgICBuZnRUeXBlOiBzZWxmLm5mdFR5cGUsCiAgICAgICAgICAgIHZpZXdSZXNvbHZlcjogc2VsZi52aWV3UmVzb2x2ZXIsCiAgICAgICAgICAgIHJlY2lwaWVudElmTm90Q29hOiBFVk0uYWRkcmVzc0Zyb21TdHJpbmcocmVjaXBpZW50KQogICAgICAgICkKICAgIH0KfQoKLy8vIFdyYXBzIGFuZCB0cmFuc2ZlcnMgYnJpZGdlZCBORlRzIGludG8gYSBwcm9qZWN0J3MgY3VzdG9tIEVSQzcyMSB3cmFwcGVyIGNvbnRyYWN0IG9uIEVWTSwgaWYgYXBwbGljYWJsZS4KLy8vIEVuYWJsZXMgcHJvamVjdHMgdG8gdXNlIHRoZWlyIG93biBFUkM3MjEgY29udHJhY3Qgd2hpbGUgbGV2ZXJhZ2luZyB0aGUgYnJpZGdlJ3MgdW5kZXJseWluZyBjb250cmFjdCwKLy8vIHVudGlsIGRpcmVjdCBjdXN0b20gY29udHJhY3Qgc3VwcG9ydCBpcyBhZGRlZCB0byB0aGUgYnJpZGdlLgovLy8KLy8vIEBwYXJhbSBjb2E6IFRoZSBDT0Egb2YgdGhlIHNpZ25lcgovLy8gQHBhcmFtIG5mdElEczogVGhlIElEcyBvZiB0aGUgTkZUcyB0byB3cmFwCi8vLyBAcGFyYW0gbmZ0VHlwZTogVGhlIHR5cGUgb2YgdGhlIE5GVHMgdG8gd3JhcAovLy8gQHBhcmFtIHZpZXdSZXNvbHZlcjogVGhlIFZpZXdSZXNvbHZlciBvZiB0aGUgTkZUIGNvbnRyYWN0Ci8vLyBAcGFyYW0gcmVjaXBpZW50SWZOb3RDb2E6IFRoZSBFVk0gYWRkcmVzcyB0byB0cmFuc2ZlciB0aGUgd3JhcHBlZCBORlRzIHRvLCBuaWwgaWYgdGhlIE5GVHMgc2hvdWxkIHN0YXkgaW4gc2lnbmVyJ3MgQ09BCi8vLwphY2Nlc3MoYWxsKSBmdW4gd3JhcEFuZFRyYW5zZmVyTkZUc0lmQXBwbGljYWJsZSgKICAgIF8gY29hOiBhdXRoKEVWTS5DYWxsKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQsCiAgICBuZnRJRHM6IFtVSW50NjRdLAogICAgbmZ0VHlwZTogVHlwZSwKICAgIHZpZXdSZXNvbHZlcjogJntWaWV3UmVzb2x2ZXJ9LAogICAgcmVjaXBpZW50SWZOb3RDb2E6IEVWTS5FVk1BZGRyZXNzPwopIHsKICAgIC8vIEdldCB0aGUgcHJvamVjdC1kZWZpbmVkIEVSQzcyMSBhZGRyZXNzIGlmIGl0IGV4aXN0cwogICAgaWYgbGV0IGNyb3NzVk1Qb2ludGVyID0gdmlld1Jlc29sdmVyLnJlc29sdmVDb250cmFjdFZpZXcoCiAgICAgICAgICAgIHJlc291cmNlVHlwZTogbmZ0VHlwZSwKICAgICAgICAgICAgdmlld1R5cGU6IFR5cGU8Q3Jvc3NWTU1ldGFkYXRhVmlld3MuRVZNUG9pbnRlcj4oKQogICAgKSBhcyEgQ3Jvc3NWTU1ldGFkYXRhVmlld3MuRVZNUG9pbnRlcj8gewogICAgICAgIC8vIEdldCB0aGUgdW5kZXJseWluZyBFUkM3MjEgYWRkcmVzcyBpZiBpdCBleGlzdHMKICAgICAgICBpZiBsZXQgdW5kZXJseWluZ0FkZHJlc3MgPSBnZXRVbmRlcmx5aW5nRVJDNzIxQWRkcmVzcyhjb2EsIGNyb3NzVk1Qb2ludGVyLmV2bUNvbnRyYWN0QWRkcmVzcykgewogICAgICAgICAgICAvLyBXcmFwIE5GVHMgaWYgdW5kZXJseWluZyBFUkM3MjEgYWRkcmVzcyBtYXRjaGVzIGJyaWRnZSdzIGFzc29jaWF0ZWQgYWRkcmVzcyBmb3IgTkZUIHR5cGUKCiAgICAgICAgICAgIGlmIHVuZGVybHlpbmdBZGRyZXNzLmVxdWFscyhGbG93RVZNQnJpZGdlQ29uZmlnLmdldEVWTUFkZHJlc3NBc3NvY2lhdGVkKHdpdGg6IG5mdFR5cGUpISkgewogICAgICAgICAgICAgICAgLy8gQXBwcm92ZSBjb250cmFjdCB0byB3aXRoZHJhdyB1bmRlcmx5aW5nIE5GVHMgZnJvbSBzaWduZXIncyBjb2EKICAgICAgICAgICAgICAgIG11c3RDYWxsKGNvYSwgdW5kZXJseWluZ0FkZHJlc3MsCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb25TaWc6ICJzZXRBcHByb3ZhbEZvckFsbChhZGRyZXNzLGJvb2wpIiwKICAgICAgICAgICAgICAgICAgICBhcmdzOiBbY3Jvc3NWTVBvaW50ZXIuZXZtQ29udHJhY3RBZGRyZXNzLCB0cnVlXQogICAgICAgICAgICAgICAgKQoKICAgICAgICAgICAgICAgIC8vIFdyYXAgTkZUcyB3aXRoIHByb3ZpZGVkIElEcywgYW5kIGNoZWNrIGlmIHRoZSBjYWxsIHdhcyBzdWNjZXNzZnVsCiAgICAgICAgICAgICAgICBsZXQgcmVzID0gbXVzdENhbGwoY29hLCBjcm9zc1ZNUG9pbnRlci5ldm1Db250cmFjdEFkZHJlc3MsCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb25TaWc6ICJkZXBvc2l0Rm9yKGFkZHJlc3MsdWludDI1NltdKSIsCiAgICAgICAgICAgICAgICAgICAgYXJnczogW2NvYS5hZGRyZXNzKCksIG5mdElEc10KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIGxldCBkZWNvZGVkUmVzID0gRVZNLmRlY29kZUFCSSh0eXBlczogW1R5cGU8Qm9vbD4oKV0sIGRhdGE6IHJlcy5kYXRhKQogICAgICAgICAgICAgICAgYXNzZXJ0KGRlY29kZWRSZXMubGVuZ3RoID09IDEsIG1lc3NhZ2U6ICJJbnZhbGlkIHJlc3BvbnNlIGxlbmd0aCIpCiAgICAgICAgICAgICAgICBhc3NlcnQoZGVjb2RlZFJlc1swXSBhcyEgQm9vbCwgbWVzc2FnZTogIkZhaWxlZCB0byB3cmFwIE5GVHMiKQoKICAgICAgICAgICAgICAgIC8vIFRyYW5zZmVyIE5GVHMgdG8gcmVjaXBpZW50IGlmIHByb3ZpZGVkCiAgICAgICAgICAgICAgICBpZiBsZXQgdG8gPSByZWNpcGllbnRJZk5vdENvYSB7CiAgICAgICAgICAgICAgICAgICAgbXVzdFRyYW5zZmVyTkZUcyhjb2EsIGNyb3NzVk1Qb2ludGVyLmV2bUNvbnRyYWN0QWRkcmVzcywgbmZ0SURzOiBuZnRJRHMsIHRvOiB0bykKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBSZXZva2UgYXBwcm92YWwgZm9yIGNvbnRyYWN0IHRvIHdpdGhkcmF3IHVuZGVybHlpbmcgTkZUcyBmcm9tIHNpZ25lcidzIGNvYQogICAgICAgICAgICAgICAgbXVzdENhbGwoY29hLCB1bmRlcmx5aW5nQWRkcmVzcywKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvblNpZzogInNldEFwcHJvdmFsRm9yQWxsKGFkZHJlc3MsYm9vbCkiLAogICAgICAgICAgICAgICAgICAgIGFyZ3M6IFtjcm9zc1ZNUG9pbnRlci5ldm1Db250cmFjdEFkZHJlc3MsIGZhbHNlXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgovLy8gR2V0cyB0aGUgdW5kZXJseWluZyBFUkM3MjEgYWRkcmVzcyBpZiBpdCBleGlzdHMgKGkuZS4gaWYgdGhlIEVSQzcyMSBpcyBhIHdyYXBwZXIpCi8vLwphY2Nlc3MoYWxsKSBmdW4gZ2V0VW5kZXJseWluZ0VSQzcyMUFkZHJlc3MoCiAgICBfIGNvYTogYXV0aChFVk0uQ2FsbCkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50LAogICAgXyB3cmFwcGVyQWRkcmVzczogRVZNLkVWTUFkZHJlc3MKKTogRVZNLkVWTUFkZHJlc3M/IHsKICAgIGxldCByZXMgPSBjb2EuY2FsbCgKICAgICAgICB0bzogd3JhcHBlckFkZHJlc3MsCiAgICAgICAgZGF0YTogRVZNLmVuY29kZUFCSVdpdGhTaWduYXR1cmUoInVuZGVybHlpbmcoKSIsIFtdKSwKICAgICAgICBnYXNMaW1pdDogMTAwXzAwMCwKICAgICAgICB2YWx1ZTogRVZNLkJhbGFuY2UoYXR0b2Zsb3c6IDApCiAgICApCgogICAgLy8gSWYgdGhlIGNhbGwgZmFpbHMsIHJldHVybiBuaWwKICAgIGlmIHJlcy5zdGF0dXMgIT0gRVZNLlN0YXR1cy5zdWNjZXNzZnVsIHx8IHJlcy5kYXRhLmxlbmd0aCA9PSAwIHsKICAgICAgICByZXR1cm4gbmlsCiAgICB9CgogICAgLy8gRGVjb2RlIGFuZCByZXR1cm4gdGhlIHVuZGVybHlpbmcgRVJDNzIxIGFkZHJlc3MKICAgIGxldCBkZWNvZGVkUmVzdWx0ID0gRVZNLmRlY29kZUFCSSgKICAgICAgICB0eXBlczogW1R5cGU8RVZNLkVWTUFkZHJlc3M+KCldLAogICAgICAgIGRhdGE6IHJlcy5kYXRhCiAgICApCiAgICBhc3NlcnQoZGVjb2RlZFJlc3VsdC5sZW5ndGggPT0gMSwgbWVzc2FnZTogIkludmFsaWQgcmVzcG9uc2UgbGVuZ3RoIikKICAgIHJldHVybiBkZWNvZGVkUmVzdWx0WzBdIGFzISBFVk0uRVZNQWRkcmVzcwp9CgovLy8gQ2hlY2tzIGlmIHRoZSBwcm92aWRlZCBORlQgaXMgb3duZWQgYnkgdGhlIHByb3ZpZGVkIEVWTSBhZGRyZXNzCi8vLwphY2Nlc3MoYWxsKSBmdW4gaXNPd25lcigKICAgIF8gY29hOiBhdXRoKEVWTS5DYWxsKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQsCiAgICBfIGVyYzcyMUFkZHJlc3M6IEVWTS5FVk1BZGRyZXNzLAogICAgXyBuZnRJRDogVUludDY0LAogICAgXyBvd25lclRvQ2hlY2s6IEVWTS5FVk1BZGRyZXNzCik6IEJvb2wgewogICAgbGV0IHJlcyA9IGNvYS5jYWxsKAogICAgICAgIHRvOiBlcmM3MjFBZGRyZXNzLAogICAgICAgIGRhdGE6IEVWTS5lbmNvZGVBQklXaXRoU2lnbmF0dXJlKCJvd25lck9mKHVpbnQyNTYpIiwgW25mdElEXSksCiAgICAgICAgZ2FzTGltaXQ6IDEwMF8wMDAsCiAgICAgICAgdmFsdWU6IEVWTS5CYWxhbmNlKGF0dG9mbG93OiAwKQogICAgKQogICAgYXNzZXJ0KHJlcy5zdGF0dXMgPT0gRVZNLlN0YXR1cy5zdWNjZXNzZnVsLCBtZXNzYWdlOiAiQ2FsbCB0byBFUkM3MjEub3duZXJPZih1aW50MjU2KSBmYWlsZWQiKQogICAgbGV0IGRlY29kZWRSZXMgPSBFVk0uZGVjb2RlQUJJKHR5cGVzOiBbVHlwZTxFVk0uRVZNQWRkcmVzcz4oKV0sIGRhdGE6IHJlcy5kYXRhKQogICAgaWYgZGVjb2RlZFJlcy5sZW5ndGggPT0gMSB7CiAgICAgICAgbGV0IGFjdHVhbE93bmVyID0gZGVjb2RlZFJlc1swXSBhcyEgRVZNLkVWTUFkZHJlc3MKICAgICAgICByZXR1cm4gYWN0dWFsT3duZXIuZXF1YWxzKG93bmVyVG9DaGVjaykKICAgIH0KICAgIHJldHVybiBmYWxzZQp9CgovLy8gVHJhbnNmZXJzIE5GVHMgZnJvbSB0aGUgcHJvdmlkZWQgQ09BIHRvIHRoZSBwcm92aWRlZCBFVk0gYWRkcmVzcwovLy8KYWNjZXNzKGFsbCkgZnVuIG11c3RUcmFuc2Zlck5GVHMoCiAgICBfIGNvYTogYXV0aChFVk0uQ2FsbCkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50LAogICAgXyBlcmM3MjFBZGRyZXNzOiBFVk0uRVZNQWRkcmVzcywKICAgIG5mdElEczogW1VJbnQ2NF0sCiAgICB0bzogRVZNLkVWTUFkZHJlc3MKKSB7CiAgICBmb3IgaWQgaW4gbmZ0SURzIHsKICAgICAgICBhc3NlcnQoaXNPd25lcihjb2EsIGVyYzcyMUFkZHJlc3MsIGlkLCBjb2EuYWRkcmVzcygpKSwgbWVzc2FnZTogIk5GVCBub3Qgb3duZWQgYnkgc2lnbmVyJ3MgQ09BIikKICAgICAgICBtdXN0Q2FsbChjb2EsIGVyYzcyMUFkZHJlc3MsCiAgICAgICAgICAgIGZ1bmN0aW9uU2lnOiAic2FmZVRyYW5zZmVyRnJvbShhZGRyZXNzLGFkZHJlc3MsdWludDI1NikiLAogICAgICAgICAgICBhcmdzOiBbY29hLmFkZHJlc3MoKSwgdG8sIGlkXQogICAgICAgICkKICAgICAgICBhc3NlcnQoaXNPd25lcihjb2EsIGVyYzcyMUFkZHJlc3MsIGlkLCB0byksIG1lc3NhZ2U6ICJORlQgbm90IHRyYW5zZmVycmVkIHRvIHJlY2lwaWVudCIpCiAgICB9Cn0KCi8vLyBDYWxscyBhIGZ1bmN0aW9uIG9uIGFuIEVWTSBjb250cmFjdCBmcm9tIHByb3ZpZGVkIGNvYQovLy8KYWNjZXNzKGFsbCkgZnVuIG11c3RDYWxsKAogICAgXyBjb2E6IGF1dGgoRVZNLkNhbGwpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudCwKICAgIF8gY29udHJhY3RBZGRyOiBFVk0uRVZNQWRkcmVzcywKICAgIGZ1bmN0aW9uU2lnOiBTdHJpbmcsCiAgICBhcmdzOiBbQW55U3RydWN0XQopOiBFVk0uUmVzdWx0IHsKICAgIGxldCByZXMgPSBjb2EuY2FsbCgKICAgICAgICB0bzogY29udHJhY3RBZGRyLAogICAgICAgIGRhdGE6IEVWTS5lbmNvZGVBQklXaXRoU2lnbmF0dXJlKGZ1bmN0aW9uU2lnLCBhcmdzKSwKICAgICAgICBnYXNMaW1pdDogNF8wMDBfMDAwLAogICAgICAgIHZhbHVlOiBFVk0uQmFsYW5jZShhdHRvZmxvdzogMCkKICAgICkKCiAgICBhc3NlcnQocmVzLnN0YXR1cyA9PSBFVk0uU3RhdHVzLnN1Y2Nlc3NmdWwsCiAgICAgICAgbWVzc2FnZTogIkZhaWxlZCB0byBjYWxsICciLmNvbmNhdChmdW5jdGlvblNpZykKICAgICAgICAgICAgLmNvbmNhdCgiXG5cdCBlcnJvciBjb2RlOiAiKS5jb25jYXQocmVzLmVycm9yQ29kZS50b1N0cmluZygpKQogICAgICAgICAgICAuY29uY2F0KCJcblx0IGVycm9yIG1lc3NhZ2U6ICIpLmNvbmNhdChyZXMuZXJyb3JNZXNzYWdlKQogICAgICAgICAgICAuY29uY2F0KCJcblx0IGdhcyB1c2VkOiAiKS5jb25jYXQocmVzLmdhc1VzZWQudG9TdHJpbmcoKSkKICAgICAgICAgICAgLmNvbmNhdCgiXG5cdCBjYWxsZXIgYWRkcmVzczogMHgiKS5jb25jYXQoY29hLmFkZHJlc3MoKS50b1N0cmluZygpKQogICAgICAgICAgICAuY29uY2F0KCJcblx0IGNvbnRyYWN0IGFkZHJlc3M6IDB4IikuY29uY2F0KGNvbnRyYWN0QWRkci50b1N0cmluZygpKQogICAgKQoKICAgIHJldHVybiByZXMKfQo=",
          "batchBridgeNFTToEvmAddressWithPayer": "",
          "batchBridgeNFTToEvmV2": "",
          "batchBridgeNFTToEvmWithPayer": "",
          "batchEvmAddressRequiresOnboarding": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgYmF0Y2hFdm1BZGRyZXNzUmVxdWlyZXNPbmJvYXJkaW5nIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRVZNVXRpbHMgZnJvbSAweDFlNGFhMGI4N2QxMGIxNDEKCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHgxZTRhYTBiODdkMTBiMTQxCgoKLy8vIFJldHVybnMgd2hldGhlciBhIEVWTSBjb250cmFjdCBuZWVkcyB0byBiZSBvbmJvYXJkZWQgdG8gdGhlIEZsb3dFVk1CcmlkZ2UKLy8vCi8vLyBAcGFyYW0gZXZtQWRkcmVzc2VzOiBBcnJheSBvZiBoZXgtZW5jb2RlZCBhZGRyZXNzIG9mIHRoZSBFVk0gY29udHJhY3QgYXMgYSBTdHJpbmcgd2l0aG91dCAweCBwcmVmaXggdG8gY2hlY2sgZm9yCi8vLyAgICAgb25ib2FyZGluZyBzdGF0dXMKLy8vCi8vLyBAcmV0dXJuIFdoZXRoZXIgdGhlIGNvbnRyYWN0IHJlcXVpcmVzIG9uYm9hcmRpbmcgdG8gdGhlIEZsb3dFVk1CcmlkZ2UgaWYgdGhlIHR5cGUgaXMgYnJpZGdlYWJsZSwgb3RoZXJ3aXNlIG5pbAovLy8gICAgIGluZGV4ZWQgb24gdGhlIGhleC1lbmNvZGVkIGFkZHJlc3Mgb2YgdGhlIEVWTSBjb250cmFjdCB3aXRob3V0IDB4IHByZWZpeAovLy8KYWNjZXNzKGFsbCkgZnVuIG1haW4oZXZtQWRkcmVzc2VzOiBbU3RyaW5nXSk6IHtTdHJpbmc6IEJvb2w/fSB7CiAgICBsZXQgcmVzdWx0czoge1N0cmluZzogQm9vbD99ID0ge30KICAgIGZvciBhZGRyZXNzSGV4IGluIGV2bUFkZHJlc3NlcyB7CiAgICAgICAgaWYgcmVzdWx0c1thZGRyZXNzSGV4XSAhPSBuaWwgewogICAgICAgICAgICBjb250aW51ZQogICAgICAgIH0KICAgICAgICBpZiBsZXQgYWRkcmVzcyA9IEVWTVV0aWxzLmdldEVWTUFkZHJlc3NGcm9tSGV4U3RyaW5nKGFkZHJlc3M6IGFkZHJlc3NIZXgpIHsKICAgICAgICAgICAgbGV0IHJlcXVpcmVzT25ib2FyZGluZyA9IEZsb3dFVk1CcmlkZ2UuZXZtQWRkcmVzc1JlcXVpcmVzT25ib2FyZGluZyhhZGRyZXNzKQogICAgICAgICAgICByZXN1bHRzLmluc2VydChrZXk6IGFkZHJlc3NIZXgsIHJlcXVpcmVzT25ib2FyZGluZykKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gcmVzdWx0cwp9Cg==",
          "batchIdentifierRequiresOnboarding": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgYmF0Y2hJZGVudGlmaWVyUmVxdWlyZXNPbmJvYXJkaW5nIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRmxvd0VWTUJyaWRnZSBmcm9tIDB4MWU0YWEwYjg3ZDEwYjE0MQoKCi8vLyBSZXR1cm5zIHdoZXRoZXIgYSB0eXBlIG5lZWRzIHRvIGJlIG9uYm9hcmRlZCB0byB0aGUgRmxvd0VWTUJyaWRnZQovLy8KLy8vIEBwYXJhbSBUeXBlczogVGhlIGFycmF5IG9mIHR5cGVzIHRvIGNoZWNrIGZvciBvbmJvYXJkaW5nIHN0YXR1cwovLy8KLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHlwZSByZXF1aXJlcyBvbmJvYXJkaW5nIHRvIHRoZSBGbG93RVZNQnJpZGdlIGlmIHRoZSB0eXBlIGlzIGJyaWRnZWFibGUsIG90aGVyd2lzZSBuaWwgaW5kZXhlZAovLy8gICAgIG9uIHRoZSB0eXBlCi8vLwphY2Nlc3MoYWxsKSBmdW4gbWFpbihpZGVudGlmaWVyczogW1N0cmluZ10pOiB7U3RyaW5nOiBCb29sP30gewogICAgbGV0IHJlc3VsdHM6IHtTdHJpbmc6IEJvb2w/fSA9IHt9CgogICAgZm9yIGlkZW50aWZpZXIgaW4gaWRlbnRpZmllcnMgewogICAgICAgIGlmIHJlc3VsdHNbaWRlbnRpZmllcl0gIT0gbmlsIHsKICAgICAgICAgICAgY29udGludWUKICAgICAgICB9CiAgICAgICAgbGV0IHR5cGU6IFR5cGUgPSBDb21wb3NpdGVUeXBlKGlkZW50aWZpZXIpID8/IHBhbmljKCJJbnZhbGlkIHR5cGUgaWRlbnRpZmllciIpCiAgICAgICAgcmVzdWx0cy5pbnNlcnQoa2V5OiBpZGVudGlmaWVyLCBGbG93RVZNQnJpZGdlLnR5cGVSZXF1aXJlc09uYm9hcmRpbmcodHlwZSkpCiAgICB9CiAgICByZXR1cm4gcmVzdWx0cwp9Cg==",
          "batchOnboardByEvmAddress": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgYmF0Y2hPbmJvYXJkQnlFdm1BZGRyZXNzIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQoKaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4MTY1NDY1MzM5OTA0MGE2MQoKCmltcG9ydCBTY29wZWRGVFByb3ZpZGVycyBmcm9tIDB4MWU0YWEwYjg3ZDEwYjE0MQoKCmltcG9ydCBFVk0gZnJvbSAweGU0NjdiOWRkMTFmYTAwZGYKCgppbXBvcnQgRVZNVXRpbHMgZnJvbSAweDFlNGFhMGI4N2QxMGIxNDEKCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHgxZTRhYTBiODdkMTBiMTQxCgppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4MWU0YWEwYjg3ZDEwYjE0MQoKCi8vLyBUaGlzIHRyYW5zYWN0aW9uIG9uYm9hcmRzIHRoZSBORlQgdHlwZSB0byB0aGUgYnJpZGdlLCBjb25maWd1cmluZyB0aGUgYnJpZGdlIHRvIG1vdmUgTkZUcyBiZXR3ZWVuIGVudmlyb25tZW50cwovLy8gTk9URTogVGhpcyBtdXN0IGJlIGRvbmUgYmVmb3JlIGJyaWRnaW5nIGEgQ2FkZW5jZS1uYXRpdmUgTkZUIHRvIEVWTQovLy8KLy8vIEBwYXJhbSBhZGRyZXNzZXNBc0hleDogQXJyYXkgb2YgRVZNIGNvbnRyYWN0IGFkZHJlc3NlcyAoYXMgaGV4IHN0cmluZyB3aXRob3V0IDB4IHByZWZpeCkgZGVmaW5pbmcgdGhlIAovLy8gICAgIGJyaWRnZWFibGUgYXNzZXQgdG8gYmUgb25ib2FyZGVkCi8vLwp0cmFuc2FjdGlvbihhZGRyZXNzZXNBc0hleDogW1N0cmluZ10pIHsKCiAgICBsZXQgc2NvcGVkUHJvdmlkZXI6IEBTY29wZWRGVFByb3ZpZGVycy5TY29wZWRGVFByb3ZpZGVyCiAgICAKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKENvcHlWYWx1ZSwgQm9ycm93VmFsdWUsIElzc3VlU3RvcmFnZUNhcGFiaWxpdHlDb250cm9sbGVyLCBQdWJsaXNoQ2FwYWJpbGl0eSwgU2F2ZVZhbHVlKSAmQWNjb3VudCkgewoKICAgICAgICAvKiAtLS0gQ29uZmlndXJlIGEgU2NvcGVkRlRQcm92aWRlciAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIElzc3VlIGFuZCBzdG9yZSBicmlkZ2UtZGVkaWNhdGVkIFByb3ZpZGVyIENhcGFiaWxpdHkgaW4gc3RvcmFnZSBpZiBuZWNlc3NhcnkKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS50eXBlKGF0OiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigKICAgICAgICAgICAgICAgIC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICAgICAgICkKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZShwcm92aWRlckNhcCwgdG86IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpCiAgICAgICAgfQogICAgICAgIC8vIENvcHkgdGhlIHN0b3JlZCBQcm92aWRlciBjYXBhYmlsaXR5IGFuZCBjcmVhdGUgYSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgbGV0IHByb3ZpZGVyQ2FwQ29weSA9IHNpZ25lci5zdG9yYWdlLmNvcHk8Q2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+PigKICAgICAgICAgICAgICAgIGZyb206IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiSW52YWxpZCBQcm92aWRlciBDYXBhYmlsaXR5IGZvdW5kIGluIHN0b3JhZ2UuIikKICAgICAgICAvLyBTZXQgYSB3aXRoZHJhd2FsIGxpbWl0IGZvciB0aGUgcHJvdmlkZXIKICAgICAgICBsZXQgcHJvdmlkZXJMaW1pdCA9IEZsb3dFVk1CcmlkZ2VDb25maWcub25ib2FyZEZlZSAqIFVGaXg2NChhZGRyZXNzZXNBc0hleC5sZW5ndGgpCiAgICAgICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKHByb3ZpZGVyTGltaXQpCiAgICAgICAgLy8gQ3JlYXRlIFNjb3BlZEZUUHJvdmlkZXIgdG8gZXhwaXJlIGp1c3QgYWZ0ZXIgdGhpcyB0cmFuc2FjdGlvbgogICAgICAgIHNlbGYuc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgICAgICAgICBmaWx0ZXJzOiBbIHByb3ZpZGVyRmlsdGVyIF0sCiAgICAgICAgICAgICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICAgICAgICAgKQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIC8vIEl0ZXJhdGUgb3ZlciBwcm92aWRlZCBhcnJheQogICAgICAgIGZvciBhZGRyZXNzSGV4IGluIGFkZHJlc3Nlc0FzSGV4IHsKICAgICAgICAgICAgLy8gQ29udmVydCBoZXggc3RyaW5nIHRvIEVWTUFkZHJlc3MKICAgICAgICAgICAgbGV0IGFkZHJlc3MgPSBFVk1VdGlscy5nZXRFVk1BZGRyZXNzRnJvbUhleFN0cmluZyhhZGRyZXNzOiBhZGRyZXNzSGV4KQogICAgICAgICAgICAvLyBDb250aW51ZSBpZiB0aGUgaGV4IGlzIG5vdCBhIHZhbGlkIEVWTSBhZGRyZXNzIG9yIGlmIHRoZSBhZGRyZXNzIGlzIGFscmVhZHkgb25ib2FyZGVkCiAgICAgICAgICAgIGlmIGFkZHJlc3MgPT0gbmlsIHx8IEZsb3dFVk1CcmlkZ2UuZXZtQWRkcmVzc1JlcXVpcmVzT25ib2FyZGluZyhhZGRyZXNzISkgIT0gdHJ1ZSB7CiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICB9CgogICAgICAgICAgICBGbG93RVZNQnJpZGdlLm9uYm9hcmRCeUVWTUFkZHJlc3MoCiAgICAgICAgICAgICAgICBhZGRyZXNzISwKICAgICAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICAgICAgKQogICAgICAgIH0KICAgICAgICBkZXN0cm95IHNlbGYuc2NvcGVkUHJvdmlkZXIKICAgIH0KfQo=",
          "batchOnboardByIdentifier": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgYmF0Y2hPbmJvYXJkQnlJZGVudGlmaWVyIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQoKaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4MTY1NDY1MzM5OTA0MGE2MQoKCmltcG9ydCBTY29wZWRGVFByb3ZpZGVycyBmcm9tIDB4MWU0YWEwYjg3ZDEwYjE0MQoKCmltcG9ydCBFVk0gZnJvbSAweGU0NjdiOWRkMTFmYTAwZGYKCgppbXBvcnQgRmxvd0VWTUJyaWRnZSBmcm9tIDB4MWU0YWEwYjg3ZDEwYjE0MQoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweDFlNGFhMGI4N2QxMGIxNDEKCgovLy8gVGhpcyB0cmFuc2FjdGlvbiBvbmJvYXJkcyB0aGUgYXNzZXQgdHlwZSB0byB0aGUgYnJpZGdlLCBjb25maWd1cmluZyB0aGUgYnJpZGdlIHRvIG1vdmUgYXNzZXRzIGJldHdlZW4gZW52aXJvbm1lbnRzCi8vLyBOT1RFOiBUaGlzIG11c3QgYmUgZG9uZSBiZWZvcmUgYnJpZGdpbmcgYSBDYWRlbmNlLW5hdGl2ZSBhc3NldCB0byBFVk0KLy8vCi8vLyBAcGFyYW0gdHlwZXM6IFRoZSBDYWRlbmNlIHR5cGVzIG9mIHRoZSBicmlkZ2VhYmxlIGFzc2V0IHRvIG9uYm9hcmQgdG8gdGhlIGJyaWRnZQovLy8KdHJhbnNhY3Rpb24oaWRlbnRpZmllcnM6IFtTdHJpbmddKSB7CgogICAgbGV0IHNjb3BlZFByb3ZpZGVyOiBAU2NvcGVkRlRQcm92aWRlcnMuU2NvcGVkRlRQcm92aWRlcgogICAgCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChDb3B5VmFsdWUsIEJvcnJvd1ZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsKCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApCiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICAgIH0KICAgICAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkludmFsaWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBmb3VuZCBpbiBzdG9yYWdlLiIpCiAgICAgICAgLy8gU2V0IGEgd2l0aGRyYXdhbCBsaW1pdCBmb3IgdGhlIHByb3ZpZGVyCiAgICAgICAgbGV0IHByb3ZpZGVyTGltaXQgPSBGbG93RVZNQnJpZGdlQ29uZmlnLm9uYm9hcmRGZWUgKiBVRml4NjQodHlwZXMubGVuZ3RoKQogICAgICAgIGxldCBwcm92aWRlckZpbHRlciA9IFNjb3BlZEZUUHJvdmlkZXJzLkFsbG93YW5jZUZpbHRlcihwcm92aWRlckxpbWl0KQogICAgICAgIC8vIENyZWF0ZSBTY29wZWRGVFByb3ZpZGVyIHRvIGV4cGlyZSBqdXN0IGFmdGVyIHRoaXMgdHJhbnNhY3Rpb24KICAgICAgICBzZWxmLnNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICAgICAgICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgICAgICkKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICBmb3IgaWRlbnRpZmllcnMgaW4gaWRlbnRpZmllcnMgeyAKICAgICAgICAgICAgbGV0IHR5cGUgPSBDb21wb3NpdGVUeXBlKGlkZW50aWZpZXIpID8/IHBhbmljKCJJbnZhbGlkIHR5cGUgaWRlbnRpZmllciIpCiAgICAgICAgICAgIC8vIENvbnRpbnVlIG9uIGlmIHRoZSB0eXBlIGRvZXMgbm90IHJlcXVpcmUgb25ib2FyZGluZwogICAgICAgICAgICBpZiBGbG93RVZNQnJpZGdlLnR5cGVSZXF1aXJlc09uYm9hcmRpbmcodHlwZSkgIT0gdHJ1ZSB7CiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIE9uYm9hcmQgdGhlIGFzc2V0IFR5cGUKICAgICAgICAgICAgRmxvd0VWTUJyaWRnZS5vbmJvYXJkQnlUeXBlKAogICAgICAgICAgICAgICAgdHlwZSwKICAgICAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICAgICAgKQogICAgICAgIH0KICAgICAgICBkZXN0cm95IHNlbGYuc2NvcGVkUHJvdmlkZXIKICAgIH0KfQo=",
          "batchOnboardByType": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgYmF0Y2hPbmJvYXJkQnlUeXBlIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQoKaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4MTY1NDY1MzM5OTA0MGE2MQoKCmltcG9ydCBTY29wZWRGVFByb3ZpZGVycyBmcm9tIDB4MWU0YWEwYjg3ZDEwYjE0MQoKCmltcG9ydCBFVk0gZnJvbSAweGU0NjdiOWRkMTFmYTAwZGYKCgppbXBvcnQgRmxvd0VWTUJyaWRnZSBmcm9tIDB4MWU0YWEwYjg3ZDEwYjE0MQoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweDFlNGFhMGI4N2QxMGIxNDEKCgovLy8gVGhpcyB0cmFuc2FjdGlvbiBvbmJvYXJkcyB0aGUgYXNzZXQgdHlwZSB0byB0aGUgYnJpZGdlLCBjb25maWd1cmluZyB0aGUgYnJpZGdlIHRvIG1vdmUgYXNzZXRzIGJldHdlZW4gZW52aXJvbm1lbnRzCi8vLyBOT1RFOiBUaGlzIG11c3QgYmUgZG9uZSBiZWZvcmUgYnJpZGdpbmcgYSBDYWRlbmNlLW5hdGl2ZSBhc3NldCB0byBFVk0KLy8vCi8vLyBAcGFyYW0gdHlwZXM6IFRoZSBDYWRlbmNlIHR5cGVzIG9mIHRoZSBicmlkZ2VhYmxlIGFzc2V0IHRvIG9uYm9hcmQgdG8gdGhlIGJyaWRnZQovLy8KdHJhbnNhY3Rpb24odHlwZXM6IFtUeXBlXSkgewoKICAgIGxldCBzY29wZWRQcm92aWRlcjogQFNjb3BlZEZUUHJvdmlkZXJzLlNjb3BlZEZUUHJvdmlkZXIKICAgIAogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQ29weVZhbHVlLCBCb3Jyb3dWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUpICZBY2NvdW50KSB7CgogICAgICAgIC8qIC0tLSBDb25maWd1cmUgYSBTY29wZWRGVFByb3ZpZGVyIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gSXNzdWUgYW5kIHN0b3JlIGJyaWRnZS1kZWRpY2F0ZWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBpbiBzdG9yYWdlIGlmIG5lY2Vzc2FyeQogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLnR5cGUoYXQ6IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIGxldCBwcm92aWRlckNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KAogICAgICAgICAgICAgICAgL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgICAgICAgKQogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKHByb3ZpZGVyQ2FwLCB0bzogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkKICAgICAgICB9CiAgICAgICAgLy8gQ29weSB0aGUgc3RvcmVkIFByb3ZpZGVyIGNhcGFiaWxpdHkgYW5kIGNyZWF0ZSBhIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBsZXQgcHJvdmlkZXJDYXBDb3B5ID0gc2lnbmVyLnN0b3JhZ2UuY29weTxDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4+KAogICAgICAgICAgICAgICAgZnJvbTogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJJbnZhbGlkIFByb3ZpZGVyIENhcGFiaWxpdHkgZm91bmQgaW4gc3RvcmFnZS4iKQogICAgICAgIC8vIFNldCBhIHdpdGhkcmF3YWwgbGltaXQgZm9yIHRoZSBwcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckxpbWl0ID0gRmxvd0VWTUJyaWRnZUNvbmZpZy5vbmJvYXJkRmVlICogVUZpeDY0KHR5cGVzLmxlbmd0aCkKICAgICAgICBsZXQgcHJvdmlkZXJGaWx0ZXIgPSBTY29wZWRGVFByb3ZpZGVycy5BbGxvd2FuY2VGaWx0ZXIocHJvdmlkZXJMaW1pdCkKICAgICAgICAvLyBDcmVhdGUgU2NvcGVkRlRQcm92aWRlciB0byBleHBpcmUganVzdCBhZnRlciB0aGlzIHRyYW5zYWN0aW9uCiAgICAgICAgc2VsZi5zY29wZWRQcm92aWRlciA8LSBTY29wZWRGVFByb3ZpZGVycy5jcmVhdGVTY29wZWRGVFByb3ZpZGVyKAogICAgICAgICAgICAgICAgcHJvdmlkZXI6IHByb3ZpZGVyQ2FwQ29weSwKICAgICAgICAgICAgICAgIGZpbHRlcnM6IFsgcHJvdmlkZXJGaWx0ZXIgXSwKICAgICAgICAgICAgICAgIGV4cGlyYXRpb246IGdldEN1cnJlbnRCbG9jaygpLnRpbWVzdGFtcCArIDEuMAogICAgICAgICAgICApCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgZm9yIHR5cGUgaW4gdHlwZXMgeyAKICAgICAgICAgICAgLy8gQ29udGludWUgb24gaWYgdGhlIHR5cGUgZG9lcyBub3QgcmVxdWlyZSBvbmJvYXJkaW5nCiAgICAgICAgICAgIGlmIEZsb3dFVk1CcmlkZ2UudHlwZVJlcXVpcmVzT25ib2FyZGluZyh0eXBlKSAhPSB0cnVlIHsKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8gT25ib2FyZCB0aGUgYXNzZXQgVHlwZQogICAgICAgICAgICBGbG93RVZNQnJpZGdlLm9uYm9hcmRCeVR5cGUoCiAgICAgICAgICAgICAgICB0eXBlLAogICAgICAgICAgICAgICAgZmVlUHJvdmlkZXI6ICZzZWxmLnNjb3BlZFByb3ZpZGVyIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfQogICAgICAgICAgICApCiAgICAgICAgfQogICAgICAgIGRlc3Ryb3kgc2VsZi5zY29wZWRQcm92aWRlcgogICAgfQp9Cg==",
          "batchTypeRequiresOnboarding": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgYmF0Y2hUeXBlUmVxdWlyZXNPbmJvYXJkaW5nIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRmxvd0VWTUJyaWRnZSBmcm9tIDB4MWU0YWEwYjg3ZDEwYjE0MQoKCi8vLyBSZXR1cm5zIHdoZXRoZXIgYSB0eXBlIG5lZWRzIHRvIGJlIG9uYm9hcmRlZCB0byB0aGUgRmxvd0VWTUJyaWRnZQovLy8KLy8vIEBwYXJhbSBUeXBlczogVGhlIGFycmF5IG9mIHR5cGVzIHRvIGNoZWNrIGZvciBvbmJvYXJkaW5nIHN0YXR1cwovLy8KLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHlwZSByZXF1aXJlcyBvbmJvYXJkaW5nIHRvIHRoZSBGbG93RVZNQnJpZGdlIGlmIHRoZSB0eXBlIGlzIGJyaWRnZWFibGUsIG90aGVyd2lzZSBuaWwgaW5kZXhlZAovLy8gICAgIG9uIHRoZSB0eXBlCi8vLwphY2Nlc3MoYWxsKSBmdW4gbWFpbih0eXBlczogW1R5cGVdKToge1R5cGU6IEJvb2w/fSB7CiAgICBsZXQgcmVzdWx0czoge1R5cGU6IEJvb2w/fSA9IHt9CiAgICBmb3IgdHlwZSBpbiB0eXBlcyB7CiAgICAgICAgaWYgcmVzdWx0c1t0eXBlXSAhPSBuaWwgewogICAgICAgICAgICBjb250aW51ZQogICAgICAgIH0KICAgICAgICByZXN1bHRzLmluc2VydChrZXk6IHR5cGUsIEZsb3dFVk1CcmlkZ2UudHlwZVJlcXVpcmVzT25ib2FyZGluZyh0eXBlKSkKICAgIH0KICAgIHJldHVybiByZXN1bHRzCn0K",
          "bridgeNFTFromEvm": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgYnJpZGdlTkZURnJvbUV2bSAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweGYyMzNkY2VlODhmZTBhYmUKCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweDE2NTQ2NTMzOTkwNDBhNjEKCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHgxZTRhYTBiODdkMTBiMTQxCgoKaW1wb3J0IEVWTSBmcm9tIDB4ZTQ2N2I5ZGQxMWZhMDBkZgoKCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweDFlNGFhMGI4N2QxMGIxNDEKCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHgxZTRhYTBiODdkMTBiMTQxCgppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4MWU0YWEwYjg3ZDEwYjE0MQoKCi8vLyBUaGlzIHRyYW5zYWN0aW9uIGJyaWRnZXMgYW4gTkZUIGZyb20gRVZNIHRvIENhZGVuY2UgYXNzdW1pbmcgaXQgaGFzIGFscmVhZHkgYmVlbiBvbmJvYXJkZWQgdG8gdGhlIEZsb3dFVk1CcmlkZ2UKLy8vIE5PVEU6IFRoZSBFUkM3MjEgbXVzdCBoYXZlIGZpcnN0IGJlZW4gb25ib2FyZGVkIHRvIHRoZSBicmlkZ2UuIFRoaXMgY2FuIGJlIGNoZWNrZWQgdmlhIHRoZSBtZXRob2QKLy8vICAgICBGbG93RVZNQnJpZGdlLmV2bUFkZHJlc3NSZXF1aXJlc09uYm9hcmRpbmcoYWRkcmVzczogc2VsZi5ldm1Db250cmFjdEFkZHJlc3MpCi8vLwovLy8gQHBhcmFtIG5mdENvbnRyYWN0QWRkcmVzczogVGhlIEZsb3cgYWNjb3VudCBhZGRyZXNzIGhvc3RpbmcgdGhlIE5GVC1kZWZpbmluZyBDYWRlbmNlIGNvbnRyYWN0Ci8vLyBAcGFyYW0gbmZ0Q29udHJhY3ROYW1lOiBUaGUgbmFtZSBvZiB0aGUgTkZULWRlZmluaW5nIENhZGVuY2UgY29udHJhY3QKLy8vIEBwYXJhbSBpZDogVGhlIEVSQzcyMSBpZCBvZiB0aGUgTkZUIHRvIGJyaWRnZSB0byBDYWRlbmNlIGZyb20gRVZNCi8vLwp0cmFuc2FjdGlvbihuZnRDb250cmFjdEFkZHJlc3M6IEFkZHJlc3MsIG5mdENvbnRyYWN0TmFtZTogU3RyaW5nLCBpZDogVUludDI1NikgewoKICAgIGxldCBuZnRUeXBlOiBUeXBlCiAgICBsZXQgY29sbGVjdGlvbjogJntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259CiAgICBsZXQgc2NvcGVkUHJvdmlkZXI6IEBTY29wZWRGVFByb3ZpZGVycy5TY29wZWRGVFByb3ZpZGVyCiAgICBsZXQgY29hOiBhdXRoKEVWTS5CcmlkZ2UpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudAogICAgCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChCb3Jyb3dWYWx1ZSwgQ29weVZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSwgVW5wdWJsaXNoQ2FwYWJpbGl0eSkgJkFjY291bnQpIHsKICAgICAgICAvKiAtLS0gUmVmZXJlbmNlIHRoZSBzaWduZXIncyBDYWRlbmNlT3duZWRBY2NvdW50IC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBDT0EKICAgICAgICBzZWxmLmNvYSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEVWTS5CcmlkZ2UpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oZnJvbTogL3N0b3JhZ2UvZXZtKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBDT0EgZnJvbSBwcm92aWRlZCBnYXRld2F5IGFkZHJlc3MiKQoKICAgICAgICAvLyBHZXQgdGhlIEVSQzcyMSBjb250cmFjdCBhZGRyZXNzIGZvciB0aGUgZ2l2ZW4gTkZUIHR5cGUKICAgICAgICBzZWxmLm5mdFR5cGUgPSBGbG93RVZNQnJpZGdlVXRpbHMuYnVpbGRDb21wb3NpdGVUeXBlKAogICAgICAgICAgICAgICAgYWRkcmVzczogbmZ0Q29udHJhY3RBZGRyZXNzLAogICAgICAgICAgICAgICAgY29udHJhY3ROYW1lOiBuZnRDb250cmFjdE5hbWUsCiAgICAgICAgICAgICAgICByZXNvdXJjZU5hbWU6ICJORlQiCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkNvdWxkIG5vdCBjb25zdHJ1Y3QgTkZUIHR5cGUiKQoKICAgICAgICAvKiAtLS0gUmVmZXJlbmNlIHRoZSBzaWduZXIncyBORlQgQ29sbGVjdGlvbiAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgTkZUIGNvbGxlY3Rpb24sIGNvbmZpZ3VyaW5nIGlmIG5lY2Vzc2FyeQogICAgICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KG5mdENvbnRyYWN0QWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IG5mdENvbnRyYWN0TmFtZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gTkZUIGNvbnRyYWN0IikKICAgICAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgICAgIHJlc291cmNlVHlwZTogc2VsZi5uZnRUeXBlLAogICAgICAgICAgICAgICAgdmlld1R5cGU6IFR5cGU8TWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT4oKQogICAgICAgICAgICApIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgTkZUQ29sbGVjdGlvbkRhdGEgdmlldyIpCiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UuYm9ycm93PCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufT4oZnJvbTogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUoPC1jb2xsZWN0aW9uRGF0YS5jcmVhdGVFbXB0eUNvbGxlY3Rpb24oKSwgdG86IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgICAgICBzaWduZXIuY2FwYWJpbGl0aWVzLnVucHVibGlzaChjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKQogICAgICAgICAgICBsZXQgY29sbGVjdGlvbkNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgICAgICBzaWduZXIuY2FwYWJpbGl0aWVzLnB1Ymxpc2goY29sbGVjdGlvbkNhcCwgYXQ6IGNvbGxlY3Rpb25EYXRhLnB1YmxpY1BhdGgpCiAgICAgICAgfQogICAgICAgIHNlbGYuY29sbGVjdGlvbiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KGZyb206IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBjb2xsZWN0aW9uIGZyb20gc3RvcmFnZSBwYXRoIikKCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGJyaWRnZSBmZWUgLSBicmlkZ2luZyBmcm9tIEVWTSBjb25zdW1lcyBubyBzdG9yYWdlLCBzbyBmbGF0IGZlZQogICAgICAgIGxldCBhcHByb3hGZWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuY2FsY3VsYXRlQnJpZGdlRmVlKGJ5dGVzOiA0MDBfMDAwKQogICAgICAgIC8vIElzc3VlIGFuZCBzdG9yZSBicmlkZ2UtZGVkaWNhdGVkIFByb3ZpZGVyIENhcGFiaWxpdHkgaW4gc3RvcmFnZSBpZiBuZWNlc3NhcnkKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS50eXBlKGF0OiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigKICAgICAgICAgICAgICAgIC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICAgICAgICkKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZShwcm92aWRlckNhcCwgdG86IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpCiAgICAgICAgfQogICAgICAgIC8vIENvcHkgdGhlIHN0b3JlZCBQcm92aWRlciBjYXBhYmlsaXR5IGFuZCBjcmVhdGUgYSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgbGV0IHByb3ZpZGVyQ2FwQ29weSA9IHNpZ25lci5zdG9yYWdlLmNvcHk8Q2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+PigKICAgICAgICAgICAgICAgIGZyb206IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiSW52YWxpZCBQcm92aWRlciBDYXBhYmlsaXR5IGZvdW5kIGluIHN0b3JhZ2UuIikKICAgICAgICBsZXQgcHJvdmlkZXJGaWx0ZXIgPSBTY29wZWRGVFByb3ZpZGVycy5BbGxvd2FuY2VGaWx0ZXIoYXBwcm94RmVlKQogICAgICAgIHNlbGYuc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgICAgICAgICBmaWx0ZXJzOiBbIHByb3ZpZGVyRmlsdGVyIF0sCiAgICAgICAgICAgICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICAgICAgICAgKQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIC8vIEV4ZWN1dGUgdGhlIGJyaWRnZQogICAgICAgIGxldCBuZnQ6IEB7Tm9uRnVuZ2libGVUb2tlbi5ORlR9IDwtIHNlbGYuY29hLndpdGhkcmF3TkZUKAogICAgICAgICAgICB0eXBlOiBzZWxmLm5mdFR5cGUsCiAgICAgICAgICAgIGlkOiBpZCwKICAgICAgICAgICAgZmVlUHJvdmlkZXI6ICZzZWxmLnNjb3BlZFByb3ZpZGVyIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfQogICAgICAgICkKICAgICAgICAvLyBEZXBvc2l0IHRoZSBicmlkZ2VkIE5GVCBpbnRvIHRoZSBzaWduZXIncyBjb2xsZWN0aW9uCiAgICAgICAgc2VsZi5jb2xsZWN0aW9uLmRlcG9zaXQodG9rZW46IDwtbmZ0KQogICAgICAgIC8vIERlc3Ryb3kgdGhlIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBkZXN0cm95IHNlbGYuc2NvcGVkUHJvdmlkZXIKICAgIH0KfQo=",
          "bridgeNFTFromEvmToFlow": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgYnJpZGdlTkZURnJvbUV2bVRvRmxvdyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweGYyMzNkY2VlODhmZTBhYmUKCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweDE2NTQ2NTMzOTkwNDBhNjEKCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHgxZTRhYTBiODdkMTBiMTQxCgoKaW1wb3J0IEVWTSBmcm9tIDB4ZTQ2N2I5ZGQxMWZhMDBkZgoKCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweDFlNGFhMGI4N2QxMGIxNDEKCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHgxZTRhYTBiODdkMTBiMTQxCgppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4MWU0YWEwYjg3ZDEwYjE0MQoKCi8vLyBUaGlzIHRyYW5zYWN0aW9uIGJyaWRnZXMgYW4gTkZUIGZyb20gRVZNIHRvIENhZGVuY2UgYXNzdW1pbmcgaXQgaGFzIGFscmVhZHkgYmVlbiBvbmJvYXJkZWQgdG8gdGhlIEZsb3dFVk1CcmlkZ2UKLy8vIE5PVEU6IFRoZSBFUkM3MjEgbXVzdCBoYXZlIGZpcnN0IGJlZW4gb25ib2FyZGVkIHRvIHRoZSBicmlkZ2UuIFRoaXMgY2FuIGJlIGNoZWNrZWQgdmlhIHRoZSBtZXRob2QKLy8vICAgICBGbG93RVZNQnJpZGdlLmV2bUFkZHJlc3NSZXF1aXJlc09uYm9hcmRpbmcoYWRkcmVzczogc2VsZi5ldm1Db250cmFjdEFkZHJlc3MpCi8vLwovLy8gQHBhcmFtIG5mdENvbnRyYWN0QWRkcmVzczogVGhlIEZsb3cgYWNjb3VudCBhZGRyZXNzIGhvc3RpbmcgdGhlIE5GVC1kZWZpbmluZyBDYWRlbmNlIGNvbnRyYWN0Ci8vLyBAcGFyYW0gbmZ0Q29udHJhY3ROYW1lOiBUaGUgbmFtZSBvZiB0aGUgTkZULWRlZmluaW5nIENhZGVuY2UgY29udHJhY3QKLy8vIEBwYXJhbSBpZDogVGhlIEVSQzcyMSBpZCBvZiB0aGUgTkZUIHRvIGJyaWRnZSB0byBDYWRlbmNlIGZyb20gRVZNCi8vLwp0cmFuc2FjdGlvbihuZnRDb250cmFjdEFkZHJlc3M6IEFkZHJlc3MsIG5mdENvbnRyYWN0TmFtZTogU3RyaW5nLCBpZDogVUludDI1NiwgcmVjZWl2ZXI6IEFkZHJlc3MpIHsKCiAgICBsZXQgbmZ0VHlwZTogVHlwZQogICAgbGV0IGNvbGxlY3Rpb246ICZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufQogICAgbGV0IHNjb3BlZFByb3ZpZGVyOiBAU2NvcGVkRlRQcm92aWRlcnMuU2NvcGVkRlRQcm92aWRlcgogICAgbGV0IGNvYTogYXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQKICAgIAogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQm9ycm93VmFsdWUsIENvcHlWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUsIFVucHVibGlzaENhcGFiaWxpdHkpICZBY2NvdW50KSB7CiAgICAgICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgQ2FkZW5jZU93bmVkQWNjb3VudCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3MgQ09BCiAgICAgICAgc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgQ09BIGZyb20gcHJvdmlkZWQgZ2F0ZXdheSBhZGRyZXNzIikKCiAgICAgICAgLy8gR2V0IHRoZSBFUkM3MjEgY29udHJhY3QgYWRkcmVzcyBmb3IgdGhlIGdpdmVuIE5GVCB0eXBlCiAgICAgICAgc2VsZi5uZnRUeXBlID0gRmxvd0VWTUJyaWRnZVV0aWxzLmJ1aWxkQ29tcG9zaXRlVHlwZSgKICAgICAgICAgICAgICAgIGFkZHJlc3M6IG5mdENvbnRyYWN0QWRkcmVzcywKICAgICAgICAgICAgICAgIGNvbnRyYWN0TmFtZTogbmZ0Q29udHJhY3ROYW1lLAogICAgICAgICAgICAgICAgcmVzb3VyY2VOYW1lOiAiTkZUIgogICAgICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgY29uc3RydWN0IE5GVCB0eXBlIikKCiAgICAgICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgTkZUIENvbGxlY3Rpb24gLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIE5GVCBjb2xsZWN0aW9uLCBjb25maWd1cmluZyBpZiBuZWNlc3NhcnkKICAgICAgICBsZXQgdmlld1Jlc29sdmVyID0gZ2V0QWNjb3VudChuZnRDb250cmFjdEFkZHJlc3MpLmNvbnRyYWN0cy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXJ9PihuYW1lOiBuZnRDb250cmFjdE5hbWUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZpZXdSZXNvbHZlciBmcm9tIE5GVCBjb250cmFjdCIpCiAgICAgICAgbGV0IGNvbGxlY3Rpb25EYXRhID0gdmlld1Jlc29sdmVyLnJlc29sdmVDb250cmFjdFZpZXcoCiAgICAgICAgICAgICAgICByZXNvdXJjZVR5cGU6IHNlbGYubmZ0VHlwZSwKICAgICAgICAgICAgICAgIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkKICAgICAgICAgICAgKSBhcyEgTWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT8gPz8gcGFuaWMoIkNvdWxkIG5vdCByZXNvbHZlIE5GVENvbGxlY3Rpb25EYXRhIHZpZXciKQogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KGZyb206IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKDwtY29sbGVjdGlvbkRhdGEuY3JlYXRlRW1wdHlDb2xsZWN0aW9uKCksIHRvOiBjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy51bnB1Ymxpc2goY29sbGVjdGlvbkRhdGEucHVibGljUGF0aCkKICAgICAgICAgICAgbGV0IGNvbGxlY3Rpb25DYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259Pihjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy5wdWJsaXNoKGNvbGxlY3Rpb25DYXAsIGF0OiBjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKQogICAgICAgIH0KCiAgICAgICAgbGV0IHJlY2VpdmVyQWNjdCA9IGdldEFjY291bnQocmVjZWl2ZXIpCiAgICAgICAgc2VsZi5jb2xsZWN0aW9uID0gcmVjZWl2ZXJBY2N0LmNhcGFiaWxpdGllcy5ib3Jyb3c8JntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259Pihjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBjb2xsZWN0aW9uIGNhcGFiaWxpdGllcyBmcm9tIHB1YmxpYyBwYXRoIikKCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGJyaWRnZSBmZWUgLSBicmlkZ2luZyBmcm9tIEVWTSBjb25zdW1lcyBubyBzdG9yYWdlLCBzbyBmbGF0IGZlZQogICAgICAgIGxldCBhcHByb3hGZWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuY2FsY3VsYXRlQnJpZGdlRmVlKGJ5dGVzOiA0MDBfMDAwKQogICAgICAgIC8vIElzc3VlIGFuZCBzdG9yZSBicmlkZ2UtZGVkaWNhdGVkIFByb3ZpZGVyIENhcGFiaWxpdHkgaW4gc3RvcmFnZSBpZiBuZWNlc3NhcnkKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS50eXBlKGF0OiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigKICAgICAgICAgICAgICAgIC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICAgICAgICkKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZShwcm92aWRlckNhcCwgdG86IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpCiAgICAgICAgfQogICAgICAgIC8vIENvcHkgdGhlIHN0b3JlZCBQcm92aWRlciBjYXBhYmlsaXR5IGFuZCBjcmVhdGUgYSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgbGV0IHByb3ZpZGVyQ2FwQ29weSA9IHNpZ25lci5zdG9yYWdlLmNvcHk8Q2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+PigKICAgICAgICAgICAgICAgIGZyb206IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiSW52YWxpZCBQcm92aWRlciBDYXBhYmlsaXR5IGZvdW5kIGluIHN0b3JhZ2UuIikKICAgICAgICBsZXQgcHJvdmlkZXJGaWx0ZXIgPSBTY29wZWRGVFByb3ZpZGVycy5BbGxvd2FuY2VGaWx0ZXIoYXBwcm94RmVlKQogICAgICAgIHNlbGYuc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgICAgICAgICBmaWx0ZXJzOiBbIHByb3ZpZGVyRmlsdGVyIF0sCiAgICAgICAgICAgICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICAgICAgICAgKQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIC8vIEV4ZWN1dGUgdGhlIGJyaWRnZQogICAgICAgIGxldCBuZnQ6IEB7Tm9uRnVuZ2libGVUb2tlbi5ORlR9IDwtIHNlbGYuY29hLndpdGhkcmF3TkZUKAogICAgICAgICAgICB0eXBlOiBzZWxmLm5mdFR5cGUsCiAgICAgICAgICAgIGlkOiBpZCwKICAgICAgICAgICAgZmVlUHJvdmlkZXI6ICZzZWxmLnNjb3BlZFByb3ZpZGVyIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfQogICAgICAgICkKICAgICAgICAvLyBEZXBvc2l0IHRoZSBicmlkZ2VkIE5GVCBpbnRvIHRoZSBzaWduZXIncyBjb2xsZWN0aW9uCiAgICAgICAgc2VsZi5jb2xsZWN0aW9uLmRlcG9zaXQodG9rZW46IDwtbmZ0KQogICAgICAgIC8vIERlc3Ryb3kgdGhlIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBkZXN0cm95IHNlbGYuc2NvcGVkUHJvdmlkZXIKICAgIH0KfQo=",
          "bridgeNFTFromEvmToFlowV2": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgYnJpZGdlTkZURnJvbUV2bVRvRmxvd1YyIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhmMjMzZGNlZTg4ZmUwYWJlCgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHgxNjU0NjUzMzk5MDQwYTYxCgppbXBvcnQgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MgZnJvbSAweGYyMzNkY2VlODhmZTBhYmUKCmltcG9ydCBTY29wZWRGVFByb3ZpZGVycyBmcm9tIDB4MWU0YWEwYjg3ZDEwYjE0MQoKaW1wb3J0IEVWTSBmcm9tIDB4ZTQ2N2I5ZGQxMWZhMDBkZgoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VVdGlscyBmcm9tIDB4MWU0YWEwYjg3ZDEwYjE0MQoKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweDFlNGFhMGI4N2QxMGIxNDEKCmltcG9ydCBGbG93RVZNQnJpZGdlQ29uZmlnIGZyb20gMHgxZTRhYTBiODdkMTBiMTQxCgppbXBvcnQgQ3Jvc3NWTU1ldGFkYXRhVmlld3MgZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCgovLy8gVGhpcyB0cmFuc2FjdGlvbiBicmlkZ2VzIGFuIE5GVCBmcm9tIEVWTSB0byBDYWRlbmNlIGFzc3VtaW5nIGl0IGhhcyBhbHJlYWR5IGJlZW4gb25ib2FyZGVkIHRvIHRoZSBGbG93RVZNQnJpZGdlLgovLy8gQWxzbyBrbm93IHRoYXQgdGhlIHJlY2lwaWVudCBGbG93IGFjY291bnQgbXVzdCBoYXZlIGEgUmVjZWl2ZXIgY2FwYWJsZSBvZiByZWNlaXZpbmcgdGhlIHRoaXMgYnJpZGdlZCBORlQgYWNjZXNzaWJsZQovLy8gdmlhIHB1Ymxpc2hlZCBDYXBhYmlsaXR5IGF0IHRoZSB0b2tlbidzIHN0YW5kYXJkIHBhdGguCi8vLyBOT1RFOiBUaGUgRVJDNzIxIG11c3QgaGF2ZSBmaXJzdCBiZWVuIG9uYm9hcmRlZCB0byB0aGUgYnJpZGdlLiBUaGlzIGNhbiBiZSBjaGVja2VkIHZpYSB0aGUgbWV0aG9kCi8vLyAgICAgRmxvd0VWTUJyaWRnZS5ldm1BZGRyZXNzUmVxdWlyZXNPbmJvYXJkaW5nKGFkZHJlc3M6IHNlbGYuZXZtQ29udHJhY3RBZGRyZXNzKQovLy8KLy8vIEBwYXJhbSBuZnRJZGVudGlmaWVyOiBUaGUgQ2FkZW5jZSB0eXBlIGlkZW50aWZpZXIgb2YgdGhlIE5GVCB0byBicmlkZ2UgLSBlLmcuIG5mdC5nZXRUeXBlKCkuaWRlbnRpZmllcgovLy8gQHBhcmFtIGlkOiBUaGUgRVJDNzIxIGlkIG9mIHRoZSBORlQgdG8gYnJpZGdlIHRvIENhZGVuY2UgZnJvbSBFVk0KLy8vIEBwYXJhbSByZWNpcGllbnQ6IFRoZSBGbG93IGFjY291bnQgYWRkcmVzcyB0byByZWNlaXZlIHRoZSBicmlkZ2VkIE5GVAovLy8KdHJhbnNhY3Rpb24obmZ0SWRlbnRpZmllcjogU3RyaW5nLCBpZDogVUludDI1NiwgcmVjaXBpZW50OiBBZGRyZXNzKSB7CiAgICBsZXQgbmZ0VHlwZTogVHlwZQogICAgbGV0IHJlY2VpdmVyOiAme05vbkZ1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9CiAgICBsZXQgc2NvcGVkUHJvdmlkZXI6IEBTY29wZWRGVFByb3ZpZGVycy5TY29wZWRGVFByb3ZpZGVyCiAgICBsZXQgY29hOiBhdXRoKEVWTS5DYWxsLCBFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQKICAgIGxldCB2aWV3UmVzb2x2ZXI6ICZ7Vmlld1Jlc29sdmVyfQogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQm9ycm93VmFsdWUsIENvcHlWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUsIFVucHVibGlzaENhcGFiaWxpdHkpICZBY2NvdW50KSB7CiAgICAgICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgQ2FkZW5jZU93bmVkQWNjb3VudCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3MgQ09BCiAgICAgICAgc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uQ2FsbCwgRVZNLkJyaWRnZSkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50Pihmcm9tOiAvc3RvcmFnZS9ldm0pCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IENPQSBmcm9tIHByb3ZpZGVkIGdhdGV3YXkgYWRkcmVzcyIpCgogICAgICAgIC8qIC0tLSBDb25zdHJ1Y3QgdGhlIE5GVCB0eXBlIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQ29uc3RydWN0IHRoZSBORlQgdHlwZSBmcm9tIHRoZSBwcm92aWRlZCBpZGVudGlmaWVyCiAgICAgICAgc2VsZi5uZnRUeXBlID0gQ29tcG9zaXRlVHlwZShuZnRJZGVudGlmaWVyKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGNvbnN0cnVjdCBORlQgdHlwZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQogICAgICAgIC8vIFBhcnNlIHRoZSBORlQgaWRlbnRpZmllciBpbnRvIGl0cyBjb21wb25lbnRzCiAgICAgICAgbGV0IG5mdENvbnRyYWN0QWRkcmVzcyA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdEFkZHJlc3MoZnJvbVR5cGU6IHNlbGYubmZ0VHlwZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgYWRkcmVzcyBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQogICAgICAgIGxldCBuZnRDb250cmFjdE5hbWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3ROYW1lKGZyb21UeXBlOiBzZWxmLm5mdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IG5hbWUgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdChuZnRJZGVudGlmaWVyKSkKCiAgICAgICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgcmVjaXBpZW50J3MgTkZUIFJlY2VpdmVyIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBORlQgY29sbGVjdGlvbiwgY29uZmlndXJpbmcgaWYgbmVjZXNzYXJ5CiAgICAgICAgc2VsZi52aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KG5mdENvbnRyYWN0QWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IG5mdENvbnRyYWN0TmFtZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gTkZUIGNvbnRyYWN0IikKICAgICAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSBzZWxmLnZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBzZWxmLm5mdFR5cGUsCiAgICAgICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPigpCiAgICAgICAgICAgICkgYXMhIE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE/ID8/IHBhbmljKCJDb3VsZCBub3QgcmVzb2x2ZSBORlRDb2xsZWN0aW9uRGF0YSB2aWV3IikKICAgICAgICAvLyBDb25maWd1cmUgdGhlIHNpZ25lcidzIGFjY291bnQgZm9yIHRoaXMgTkZUCiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UuYm9ycm93PCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufT4oZnJvbTogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUoPC1jb2xsZWN0aW9uRGF0YS5jcmVhdGVFbXB0eUNvbGxlY3Rpb24oKSwgdG86IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgICAgICBzaWduZXIuY2FwYWJpbGl0aWVzLnVucHVibGlzaChjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKQogICAgICAgICAgICBsZXQgY29sbGVjdGlvbkNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgICAgICBzaWduZXIuY2FwYWJpbGl0aWVzLnB1Ymxpc2goY29sbGVjdGlvbkNhcCwgYXQ6IGNvbGxlY3Rpb25EYXRhLnB1YmxpY1BhdGgpCiAgICAgICAgfQogICAgICAgIHNlbGYucmVjZWl2ZXIgPSBnZXRBY2NvdW50KHJlY2lwaWVudCkuY2FwYWJpbGl0aWVzLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9Pihjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBSZWNlaXZlciBmcm9tIHJlY2lwaWVudCdzIHB1YmxpYyBjYXBhYmlsaXR5IHBhdGgiKQoKICAgICAgICAvKiAtLS0gQ29uZmlndXJlIGEgU2NvcGVkRlRQcm92aWRlciAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgYnJpZGdlIGZlZSAtIGJyaWRnaW5nIGZyb20gRVZNIGNvbnN1bWVzIG5vIHN0b3JhZ2UsIHNvIGZsYXQgZmVlCiAgICAgICAgbGV0IGFwcHJveEZlZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5jYWxjdWxhdGVCcmlkZ2VGZWUoYnl0ZXM6IDQwMF8wMDApCiAgICAgICAgLy8gSXNzdWUgYW5kIHN0b3JlIGJyaWRnZS1kZWRpY2F0ZWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBpbiBzdG9yYWdlIGlmIG5lY2Vzc2FyeQogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLnR5cGUoYXQ6IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIGxldCBwcm92aWRlckNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KAogICAgICAgICAgICAgICAgL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgICAgICAgKQogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKHByb3ZpZGVyQ2FwLCB0bzogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkKICAgICAgICB9CiAgICAgICAgLy8gQ29weSB0aGUgc3RvcmVkIFByb3ZpZGVyIGNhcGFiaWxpdHkgYW5kIGNyZWF0ZSBhIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBsZXQgcHJvdmlkZXJDYXBDb3B5ID0gc2lnbmVyLnN0b3JhZ2UuY29weTxDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4+KAogICAgICAgICAgICAgICAgZnJvbTogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJJbnZhbGlkIFByb3ZpZGVyIENhcGFiaWxpdHkgZm91bmQgaW4gc3RvcmFnZS4iKQogICAgICAgIGxldCBwcm92aWRlckZpbHRlciA9IFNjb3BlZEZUUHJvdmlkZXJzLkFsbG93YW5jZUZpbHRlcihhcHByb3hGZWUpCiAgICAgICAgc2VsZi5zY29wZWRQcm92aWRlciA8LSBTY29wZWRGVFByb3ZpZGVycy5jcmVhdGVTY29wZWRGVFByb3ZpZGVyKAogICAgICAgICAgICAgICAgcHJvdmlkZXI6IHByb3ZpZGVyQ2FwQ29weSwKICAgICAgICAgICAgICAgIGZpbHRlcnM6IFsgcHJvdmlkZXJGaWx0ZXIgXSwKICAgICAgICAgICAgICAgIGV4cGlyYXRpb246IGdldEN1cnJlbnRCbG9jaygpLnRpbWVzdGFtcCArIDEuMAogICAgICAgICAgICApCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgLy8gVW53cmFwIE5GVHMgZnJvbSBwcm9qZWN0LWRlZmluZWQgRVJDNzIxIHdyYXBwZXIgY29udHJhY3QgaWYgYXBwbGljYWJsZQogICAgICAgIHVud3JhcE5GVHNJZkFwcGxpY2FibGUoc2VsZi5jb2EsIG5mdElEczogW2lkXSwgbmZ0VHlwZTogc2VsZi5uZnRUeXBlLCB2aWV3UmVzb2x2ZXI6IHNlbGYudmlld1Jlc29sdmVyKQoKICAgICAgICAvLyBFeGVjdXRlIHRoZSBicmlkZ2UKICAgICAgICBsZXQgbmZ0OiBAe05vbkZ1bmdpYmxlVG9rZW4uTkZUfSA8LSBzZWxmLmNvYS53aXRoZHJhd05GVCgKICAgICAgICAgICAgdHlwZTogc2VsZi5uZnRUeXBlLAogICAgICAgICAgICBpZDogaWQsCiAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICApCiAgICAgICAgLy8gRW5zdXJlIHRoZSBicmlkZ2VkIG5mdCBpcyB0aGUgY29ycmVjdCB0eXBlCiAgICAgICAgYXNzZXJ0KAogICAgICAgICAgICBuZnQuZ2V0VHlwZSgpID09IHNlbGYubmZ0VHlwZSwKICAgICAgICAgICAgbWVzc2FnZTogIkJyaWRnZWQgbmZ0IHR5cGUgbWlzbWF0Y2ggLSByZXF1ZXN3dGVkOiAiLmNvbmNhdChzZWxmLm5mdFR5cGUuaWRlbnRpZmllcikKICAgICAgICAgICAgICAgIC5jb25jYXQoIiwgcmVjZWl2ZWQ6ICIpLmNvbmNhdChuZnQuZ2V0VHlwZSgpLmlkZW50aWZpZXIpCiAgICAgICAgKQogICAgICAgIC8vIERlcG9zaXQgdGhlIGJyaWRnZWQgTkZUIGludG8gdGhlIHNpZ25lcidzIGNvbGxlY3Rpb24KICAgICAgICBzZWxmLnJlY2VpdmVyLmRlcG9zaXQodG9rZW46IDwtbmZ0KQogICAgICAgIC8vIERlc3Ryb3kgdGhlIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBkZXN0cm95IHNlbGYuc2NvcGVkUHJvdmlkZXIKCiAgICB9Cn0KCi8vLyBVbndyYXBzIE5GVHMgZnJvbSBhIHByb2plY3QncyBjdXN0b20gRVJDNzIxIHdyYXBwZXIgY29udHJhY3QgdG8gYnJpZGdlZCBORlRzIG9uIEVWTSwgaWYgYXBwbGljYWJsZS4KLy8vIEVuYWJsZXMgcHJvamVjdHMgdG8gdXNlIHRoZWlyIG93biBFUkM3MjEgY29udHJhY3Qgd2hpbGUgbGV2ZXJhZ2luZyB0aGUgYnJpZGdlJ3MgdW5kZXJseWluZyBjb250cmFjdCwKLy8vIHVudGlsIGRpcmVjdCBjdXN0b20gY29udHJhY3Qgc3VwcG9ydCBpcyBhZGRlZCB0byB0aGUgYnJpZGdlLgovLy8KLy8vIEBwYXJhbSBjb2E6IFRoZSBDT0Egb2YgdGhlIHNpZ25lcgovLy8gQHBhcmFtIG5mdElEczogVGhlIElEcyBvZiB0aGUgTkZUcyB0byB3cmFwCi8vLyBAcGFyYW0gbmZ0VHlwZTogVGhlIHR5cGUgb2YgdGhlIE5GVHMgdG8gd3JhcAovLy8gQHBhcmFtIHZpZXdSZXNvbHZlcjogVGhlIFZpZXdSZXNvbHZlciBvZiB0aGUgTkZUIGNvbnRyYWN0Ci8vLwphY2Nlc3MoYWxsKSBmdW4gdW53cmFwTkZUc0lmQXBwbGljYWJsZSgKICAgIF8gY29hOiBhdXRoKEVWTS5DYWxsKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQsCiAgICBuZnRJRHM6IFtVSW50MjU2XSwKICAgIG5mdFR5cGU6IFR5cGUsCiAgICB2aWV3UmVzb2x2ZXI6ICZ7Vmlld1Jlc29sdmVyfQopIHsKICAgIC8vIEdldCB0aGUgcHJvamVjdC1kZWZpbmVkIEVSQzcyMSBhZGRyZXNzIGlmIGl0IGV4aXN0cwogICAgaWYgbGV0IGNyb3NzVk1Qb2ludGVyID0gdmlld1Jlc29sdmVyLnJlc29sdmVDb250cmFjdFZpZXcoCiAgICAgICAgICAgIHJlc291cmNlVHlwZTogbmZ0VHlwZSwKICAgICAgICAgICAgdmlld1R5cGU6IFR5cGU8Q3Jvc3NWTU1ldGFkYXRhVmlld3MuRVZNUG9pbnRlcj4oKQogICAgKSBhcyEgQ3Jvc3NWTU1ldGFkYXRhVmlld3MuRVZNUG9pbnRlcj8gewogICAgICAgIC8vIEdldCB0aGUgdW5kZXJseWluZyBFUkM3MjEgYWRkcmVzcyBpZiBpdCBleGlzdHMKICAgICAgICBpZiBsZXQgdW5kZXJseWluZ0FkZHJlc3MgPSBnZXRVbmRlcmx5aW5nRVJDNzIxQWRkcmVzcyhjb2EsIGNyb3NzVk1Qb2ludGVyLmV2bUNvbnRyYWN0QWRkcmVzcykgewogICAgICAgICAgICBmb3IgaWQgaW4gbmZ0SURzIHsKICAgICAgICAgICAgICAgIC8vIFVud3JhcCBORlQgaWYgaXQgaXMgd3JhcHBlZAogICAgICAgICAgICAgICAgaWYgaXNORlRXcmFwcGVkKGNvYSwKICAgICAgICAgICAgICAgICAgICBuZnRJRDogaWQsCiAgICAgICAgICAgICAgICAgICAgdW5kZXJseWluZzogdW5kZXJseWluZ0FkZHJlc3MsCiAgICAgICAgICAgICAgICAgICAgd3JhcHBlcjogY3Jvc3NWTVBvaW50ZXIuZXZtQ29udHJhY3RBZGRyZXNzCiAgICAgICAgICAgICAgICApIHsKICAgICAgICAgICAgICAgICAgICBsZXQgcmVzID0gbXVzdENhbGwoY29hLCBjcm9zc1ZNUG9pbnRlci5ldm1Db250cmFjdEFkZHJlc3MsCiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uU2lnOiAid2l0aGRyYXdUbyhhZGRyZXNzLHVpbnQyNTZbXSkiLAogICAgICAgICAgICAgICAgICAgICAgICBhcmdzOiBbY29hLmFkZHJlc3MoKSwgW2lkXV0KICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgbGV0IGRlY29kZWRSZXMgPSBFVk0uZGVjb2RlQUJJKHR5cGVzOiBbVHlwZTxCb29sPigpXSwgZGF0YTogcmVzLmRhdGEpCiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0KGRlY29kZWRSZXMubGVuZ3RoID09IDEsIG1lc3NhZ2U6ICJJbnZhbGlkIHJlc3BvbnNlIGxlbmd0aCIpCiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0KGRlY29kZWRSZXNbMF0gYXMhIEJvb2wsIG1lc3NhZ2U6ICJGYWlsZWQgdG8gdW53cmFwIE5GVCIpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KCi8vLyBHZXRzIHRoZSB1bmRlcmx5aW5nIEVSQzcyMSBhZGRyZXNzIGlmIGl0IGV4aXN0cyAoaS5lLiBpZiB0aGUgRVJDNzIxIGlzIGEgd3JhcHBlcikKLy8vCmFjY2VzcyhhbGwpIGZ1biBnZXRVbmRlcmx5aW5nRVJDNzIxQWRkcmVzcygKICAgIF8gY29hOiBhdXRoKEVWTS5DYWxsKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQsCiAgICBfIHdyYXBwZXJBZGRyZXNzOiBFVk0uRVZNQWRkcmVzcwopOiBFVk0uRVZNQWRkcmVzcz8gewogICAgbGV0IHJlcyA9IGNvYS5jYWxsKAogICAgICAgIHRvOiB3cmFwcGVyQWRkcmVzcywKICAgICAgICBkYXRhOiBFVk0uZW5jb2RlQUJJV2l0aFNpZ25hdHVyZSgidW5kZXJseWluZygpIiwgW10pLAogICAgICAgIGdhc0xpbWl0OiAxMDBfMDAwLAogICAgICAgIHZhbHVlOiBFVk0uQmFsYW5jZShhdHRvZmxvdzogMCkKICAgICkKCiAgICAvLyBJZiB0aGUgY2FsbCBmYWlscywgcmV0dXJuIG5pbAogICAgaWYgcmVzLnN0YXR1cyAhPSBFVk0uU3RhdHVzLnN1Y2Nlc3NmdWwgfHwgcmVzLmRhdGEubGVuZ3RoID09IDAgewogICAgICAgIHJldHVybiBuaWwKICAgIH0KCiAgICAvLyBEZWNvZGUgYW5kIHJldHVybiB0aGUgdW5kZXJseWluZyBFUkM3MjEgYWRkcmVzcwogICAgbGV0IGRlY29kZWRSZXN1bHQgPSBFVk0uZGVjb2RlQUJJKAogICAgICAgIHR5cGVzOiBbVHlwZTxFVk0uRVZNQWRkcmVzcz4oKV0sCiAgICAgICAgZGF0YTogcmVzLmRhdGEKICAgICkKICAgIGFzc2VydChkZWNvZGVkUmVzdWx0Lmxlbmd0aCA9PSAxLCBtZXNzYWdlOiAiSW52YWxpZCByZXNwb25zZSBsZW5ndGgiKQogICAgcmV0dXJuIGRlY29kZWRSZXN1bHRbMF0gYXMhIEVWTS5FVk1BZGRyZXNzCn0KCi8vLyBDaGVja3MgaWYgdGhlIHByb3ZpZGVkIE5GVCBpcyB3cmFwcGVkIGluIHRoZSB1bmRlcmx5aW5nIEVSQzcyMSBjb250cmFjdAovLy8KYWNjZXNzKGFsbCkgZnVuIGlzTkZUV3JhcHBlZCgKICAgIF8gY29hOiBhdXRoKEVWTS5DYWxsKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQsCiAgICBuZnRJRDogVUludDI1NiwKICAgIHVuZGVybHlpbmc6IEVWTS5FVk1BZGRyZXNzLAogICAgd3JhcHBlcjogRVZNLkVWTUFkZHJlc3MKKTogQm9vbCB7CiAgICBsZXQgcmVzID0gY29hLmNhbGwoCiAgICAgICAgdG86IHVuZGVybHlpbmcsCiAgICAgICAgZGF0YTogRVZNLmVuY29kZUFCSVdpdGhTaWduYXR1cmUoIm93bmVyT2YodWludDI1NikiLCBbbmZ0SURdKSwKICAgICAgICBnYXNMaW1pdDogMTAwXzAwMCwKICAgICAgICB2YWx1ZTogRVZNLkJhbGFuY2UoYXR0b2Zsb3c6IDApCiAgICApCgogICAgLy8gSWYgdGhlIGNhbGwgZmFpbHMsIHJldHVybiBmYWxzZQogICAgaWYgcmVzLnN0YXR1cyAhPSBFVk0uU3RhdHVzLnN1Y2Nlc3NmdWwgfHwgcmVzLmRhdGEubGVuZ3RoID09IDB7CiAgICAgICAgcmV0dXJuIGZhbHNlCiAgICB9CgogICAgLy8gRGVjb2RlIGFuZCBjb21wYXJlIHRoZSBhZGRyZXNzZXMKICAgIGxldCBkZWNvZGVkUmVzdWx0ID0gRVZNLmRlY29kZUFCSSgKICAgICAgICB0eXBlczogW1R5cGU8RVZNLkVWTUFkZHJlc3M+KCldLAogICAgICAgIGRhdGE6IHJlcy5kYXRhCiAgICApCiAgICBhc3NlcnQoZGVjb2RlZFJlc3VsdC5sZW5ndGggPT0gMSwgbWVzc2FnZTogIkludmFsaWQgcmVzcG9uc2UgbGVuZ3RoIikKCiAgICBsZXQgb3duZXIgPSBkZWNvZGVkUmVzdWx0WzBdIGFzISBFVk0uRVZNQWRkcmVzcwogICAgcmV0dXJuIG93bmVyLnRvU3RyaW5nKCkgPT0gd3JhcHBlci50b1N0cmluZygpCn0KCi8vLyBDYWxscyBhIGZ1bmN0aW9uIG9uIGFuIEVWTSBjb250cmFjdCBmcm9tIHByb3ZpZGVkIGNvYQovLy8KYWNjZXNzKGFsbCkgZnVuIG11c3RDYWxsKAogICAgXyBjb2E6IGF1dGgoRVZNLkNhbGwpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudCwKICAgIF8gY29udHJhY3RBZGRyOiBFVk0uRVZNQWRkcmVzcywKICAgIGZ1bmN0aW9uU2lnOiBTdHJpbmcsCiAgICBhcmdzOiBbQW55U3RydWN0XQopOiBFVk0uUmVzdWx0IHsKICAgIGxldCByZXMgPSBjb2EuY2FsbCgKICAgICAgICB0bzogY29udHJhY3RBZGRyLAogICAgICAgIGRhdGE6IEVWTS5lbmNvZGVBQklXaXRoU2lnbmF0dXJlKGZ1bmN0aW9uU2lnLCBhcmdzKSwKICAgICAgICBnYXNMaW1pdDogNF8wMDBfMDAwLAogICAgICAgIHZhbHVlOiBFVk0uQmFsYW5jZShhdHRvZmxvdzogMCkKICAgICkKCiAgICBhc3NlcnQocmVzLnN0YXR1cyA9PSBFVk0uU3RhdHVzLnN1Y2Nlc3NmdWwsCiAgICAgICAgbWVzc2FnZTogIkZhaWxlZCB0byBjYWxsICciLmNvbmNhdChmdW5jdGlvblNpZykKICAgICAgICAgICAgLmNvbmNhdCgiXG5cdCBlcnJvciBjb2RlOiAiKS5jb25jYXQocmVzLmVycm9yQ29kZS50b1N0cmluZygpKQogICAgICAgICAgICAuY29uY2F0KCJcblx0IGVycm9yIG1lc3NhZ2U6ICIpLmNvbmNhdChyZXMuZXJyb3JNZXNzYWdlKQogICAgICAgICAgICAuY29uY2F0KCJcblx0IGdhcyB1c2VkOiAiKS5jb25jYXQocmVzLmdhc1VzZWQudG9TdHJpbmcoKSkKICAgICAgICAgICAgLmNvbmNhdCgiXG5cdCBjYWxsZXIgYWRkcmVzczogMHgiKS5jb25jYXQoY29hLmFkZHJlc3MoKS50b1N0cmluZygpKQogICAgICAgICAgICAuY29uY2F0KCJcblx0IGNvbnRyYWN0IGFkZHJlc3M6IDB4IikuY29uY2F0KGNvbnRyYWN0QWRkci50b1N0cmluZygpKQogICAgKQoKICAgIHJldHVybiByZXMKfQo=",
          "bridgeNFTFromEvmToFlowV3": "",
          "bridgeNFTFromEvmToFlowWithPayer": "",
          "bridgeNFTFromEvmV2": "",
          "bridgeNFTFromEvmWithPayer": "",
          "bridgeNFTToEvm": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgYnJpZGdlTkZUVG9Fdm0gLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhmMjMzZGNlZTg4ZmUwYWJlCgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHgxNjU0NjUzMzk5MDQwYTYxCgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCgppbXBvcnQgU2NvcGVkRlRQcm92aWRlcnMgZnJvbSAweDFlNGFhMGI4N2QxMGIxNDEKCgppbXBvcnQgRVZNIGZyb20gMHhlNDY3YjlkZDExZmEwMGRmCgoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VVdGlscyBmcm9tIDB4MWU0YWEwYjg3ZDEwYjE0MQoKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweDFlNGFhMGI4N2QxMGIxNDEKCmltcG9ydCBGbG93RVZNQnJpZGdlQ29uZmlnIGZyb20gMHgxZTRhYTBiODdkMTBiMTQxCgoKCnRyYW5zYWN0aW9uKG5mdENvbnRyYWN0QWRkcmVzczogQWRkcmVzcywgbmZ0Q29udHJhY3ROYW1lOiBTdHJpbmcsIGlkOiBVSW50NjQpIHsKICAgIAogICAgbGV0IG5mdDogQHtOb25GdW5naWJsZVRva2VuLk5GVH0KICAgIGxldCBjb2E6IGF1dGgoRVZNLkJyaWRnZSkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50CiAgICBsZXQgc2NvcGVkUHJvdmlkZXI6IEBTY29wZWRGVFByb3ZpZGVycy5TY29wZWRGVFByb3ZpZGVyCiAgICAKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKENvcHlWYWx1ZSwgQm9ycm93VmFsdWUsIElzc3VlU3RvcmFnZUNhcGFiaWxpdHlDb250cm9sbGVyLCBQdWJsaXNoQ2FwYWJpbGl0eSwgU2F2ZVZhbHVlKSAmQWNjb3VudCkgewogICAgICAgIC8qIC0tLSBSZWZlcmVuY2UgdGhlIHNpZ25lcidzIENhZGVuY2VPd25lZEFjY291bnQgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIHNpZ25lcidzIENPQQogICAgICAgIHNlbGYuY29hID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRVZNLkJyaWRnZSkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50Pihmcm9tOiAvc3RvcmFnZS9ldm0pCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IENPQSBmcm9tIHByb3ZpZGVkIGdhdGV3YXkgYWRkcmVzcyIpCiAgICAgICAgCiAgICAgICAgLyogLS0tIFJldHJpZXZlIHRoZSBORlQgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIE5GVCBjb2xsZWN0aW9uLCBjb25maWd1cmluZyBpZiBuZWNlc3NhcnkKICAgICAgICBsZXQgdmlld1Jlc29sdmVyID0gZ2V0QWNjb3VudChuZnRDb250cmFjdEFkZHJlc3MpLmNvbnRyYWN0cy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXJ9PihuYW1lOiBuZnRDb250cmFjdE5hbWUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZpZXdSZXNvbHZlciBmcm9tIE5GVCBjb250cmFjdCIpCiAgICAgICAgbGV0IGNvbGxlY3Rpb25EYXRhID0gdmlld1Jlc29sdmVyLnJlc29sdmVDb250cmFjdFZpZXcoCiAgICAgICAgICAgICAgICByZXNvdXJjZVR5cGU6IG5pbCwKICAgICAgICAgICAgICAgIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkKICAgICAgICAgICAgKSBhcyEgTWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT8gPz8gcGFuaWMoIkNvdWxkIG5vdCByZXNvbHZlIE5GVENvbGxlY3Rpb25EYXRhIHZpZXciKQogICAgICAgIGxldCBjb2xsZWN0aW9uID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259PigKICAgICAgICAgICAgICAgIGZyb206IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkNvdWxkIG5vdCBhY2Nlc3Mgc2lnbmVyJ3MgTkZUIENvbGxlY3Rpb24iKQoKICAgICAgICAvLyBXaXRoZHJhdyB0aGUgcmVxdWVzdGVkIE5GVCAmIGNhbGN1bGF0ZSB0aGUgYXBwcm94aW1hdGUgYnJpZGdlIGZlZSBiYXNlZCBvbiBORlQgc3RvcmFnZSB1c2FnZQogICAgICAgIGxldCBjdXJyZW50U3RvcmFnZVVzYWdlID0gc2lnbmVyLnN0b3JhZ2UudXNlZAogICAgICAgIHNlbGYubmZ0IDwtIGNvbGxlY3Rpb24ud2l0aGRyYXcod2l0aGRyYXdJRDogaWQpCiAgICAgICAgbGV0IHdpdGhkcmF3blN0b3JhZ2VVc2FnZSA9IHNpZ25lci5zdG9yYWdlLnVzZWQKICAgICAgICBsZXQgYXBwcm94RmVlID0gRmxvd0VWTUJyaWRnZVV0aWxzLmNhbGN1bGF0ZUJyaWRnZUZlZSgKICAgICAgICAgICAgICAgIGJ5dGVzOiBjdXJyZW50U3RvcmFnZVVzYWdlIC0gd2l0aGRyYXduU3RvcmFnZVVzYWdlCiAgICAgICAgICAgICkgKiAxLjEwCgogICAgICAgIC8qIC0tLSBDb25maWd1cmUgYSBTY29wZWRGVFByb3ZpZGVyIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gSXNzdWUgYW5kIHN0b3JlIGJyaWRnZS1kZWRpY2F0ZWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBpbiBzdG9yYWdlIGlmIG5lY2Vzc2FyeQogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLnR5cGUoYXQ6IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIGxldCBwcm92aWRlckNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KAogICAgICAgICAgICAgICAgL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgICAgICAgKQogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKHByb3ZpZGVyQ2FwLCB0bzogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkKICAgICAgICB9CiAgICAgICAgLy8gQ29weSB0aGUgc3RvcmVkIFByb3ZpZGVyIGNhcGFiaWxpdHkgYW5kIGNyZWF0ZSBhIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBsZXQgcHJvdmlkZXJDYXBDb3B5ID0gc2lnbmVyLnN0b3JhZ2UuY29weTxDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4+KAogICAgICAgICAgICAgICAgZnJvbTogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJJbnZhbGlkIFByb3ZpZGVyIENhcGFiaWxpdHkgZm91bmQgaW4gc3RvcmFnZS4iKQogICAgICAgIGxldCBwcm92aWRlckZpbHRlciA9IFNjb3BlZEZUUHJvdmlkZXJzLkFsbG93YW5jZUZpbHRlcihhcHByb3hGZWUpCiAgICAgICAgc2VsZi5zY29wZWRQcm92aWRlciA8LSBTY29wZWRGVFByb3ZpZGVycy5jcmVhdGVTY29wZWRGVFByb3ZpZGVyKAogICAgICAgICAgICAgICAgcHJvdmlkZXI6IHByb3ZpZGVyQ2FwQ29weSwKICAgICAgICAgICAgICAgIGZpbHRlcnM6IFsgcHJvdmlkZXJGaWx0ZXIgXSwKICAgICAgICAgICAgICAgIGV4cGlyYXRpb246IGdldEN1cnJlbnRCbG9jaygpLnRpbWVzdGFtcCArIDEuMAogICAgICAgICAgICApCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgLy8gRXhlY3V0ZSB0aGUgYnJpZGdlCiAgICAgICAgc2VsZi5jb2EuZGVwb3NpdE5GVCgKICAgICAgICAgICAgbmZ0OiA8LXNlbGYubmZ0LAogICAgICAgICAgICBmZWVQcm92aWRlcjogJnNlbGYuc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgKQogICAgICAgIC8vIERlc3Ryb3kgdGhlIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBkZXN0cm95IHNlbGYuc2NvcGVkUHJvdmlkZXIKICAgIH0KfQo=",
          "bridgeNFTToEvmAddress": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgYnJpZGdlTkZUVG9Fdm1BZGRyZXNzIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQoKaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4MTY1NDY1MzM5OTA0MGE2MQoKaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHgxZTRhYTBiODdkMTBiMTQxCgoKaW1wb3J0IEVWTSBmcm9tIDB4ZTQ2N2I5ZGQxMWZhMDBkZgoKCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweDFlNGFhMGI4N2QxMGIxNDEKCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHgxZTRhYTBiODdkMTBiMTQxCgppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4MWU0YWEwYjg3ZDEwYjE0MQoKCgp0cmFuc2FjdGlvbihuZnRDb250cmFjdEFkZHJlc3M6IEFkZHJlc3MsIG5mdENvbnRyYWN0TmFtZTogU3RyaW5nLCBpZDogVUludDY0LCBjb250cmFjdEVWTUFkZHJlc3M6IFN0cmluZywgZGF0YTogW1VJbnQ4XSwgZ2FzTGltaXQ6IFVJbnQ2NCkgewogICAgCiAgICBsZXQgbmZ0OiBAe05vbkZ1bmdpYmxlVG9rZW4uTkZUfQogICAgbGV0IGNvYTogYXV0aChFVk0uQnJpZGdlLCBFVk0uQ2FsbCwgRVZNLk93bmVyKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQKICAgIGxldCBzY29wZWRQcm92aWRlcjogQFNjb3BlZEZUUHJvdmlkZXJzLlNjb3BlZEZUUHJvdmlkZXIKICAgIAogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQ29weVZhbHVlLCBCb3Jyb3dWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgQ2FkZW5jZU93bmVkQWNjb3VudCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3MgQ09BCiAgICAgICAgc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uQnJpZGdlLCBFVk0uQ2FsbCwgRVZNLk93bmVyKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgQ09BIGZyb20gcHJvdmlkZWQgZ2F0ZXdheSBhZGRyZXNzIikKICAgICAgICAKICAgICAgICAvKiAtLS0gUmV0cmlldmUgdGhlIE5GVCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgTkZUIGNvbGxlY3Rpb24sIGNvbmZpZ3VyaW5nIGlmIG5lY2Vzc2FyeQogICAgICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KG5mdENvbnRyYWN0QWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IG5mdENvbnRyYWN0TmFtZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gTkZUIGNvbnRyYWN0IikKICAgICAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgICAgIHJlc291cmNlVHlwZTogbmlsLAogICAgICAgICAgICAgICAgdmlld1R5cGU6IFR5cGU8TWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT4oKQogICAgICAgICAgICApIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgTkZUQ29sbGVjdGlvbkRhdGEgdmlldyIpCiAgICAgICAgbGV0IGNvbGxlY3Rpb24gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KAogICAgICAgICAgICAgICAgZnJvbTogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGFjY2VzcyBzaWduZXIncyBORlQgQ29sbGVjdGlvbiIpCgogICAgICAgIC8vIFdpdGhkcmF3IHRoZSByZXF1ZXN0ZWQgTkZUICYgY2FsY3VsYXRlIHRoZSBhcHByb3hpbWF0ZSBicmlkZ2UgZmVlIGJhc2VkIG9uIE5GVCBzdG9yYWdlIHVzYWdlCiAgICAgICAgbGV0IGN1cnJlbnRTdG9yYWdlVXNhZ2UgPSBzaWduZXIuc3RvcmFnZS51c2VkCiAgICAgICAgc2VsZi5uZnQgPC0gY29sbGVjdGlvbi53aXRoZHJhdyh3aXRoZHJhd0lEOiBpZCkKICAgICAgICBsZXQgd2l0aGRyYXduU3RvcmFnZVVzYWdlID0gc2lnbmVyLnN0b3JhZ2UudXNlZAogICAgICAgIGxldCBhcHByb3hGZWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuY2FsY3VsYXRlQnJpZGdlRmVlKAogICAgICAgICAgICAgICAgYnl0ZXM6IGN1cnJlbnRTdG9yYWdlVXNhZ2UgLSB3aXRoZHJhd25TdG9yYWdlVXNhZ2UKICAgICAgICAgICAgKSAqIDEuMTAKCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApCiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICAgIH0KICAgICAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkludmFsaWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBmb3VuZCBpbiBzdG9yYWdlLiIpCiAgICAgICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKGFwcHJveEZlZSkKICAgICAgICBzZWxmLnNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICAgICAgICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgICAgICkKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICAvLyBFeGVjdXRlIHRoZSBicmlkZ2UKICAgICAgICBzZWxmLmNvYS5kZXBvc2l0TkZUKAogICAgICAgICAgICBuZnQ6IDwtc2VsZi5uZnQsCiAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICApCiAgICAgICAgdmFyIGFkZHJlc3NCeXRlczogW1VJbnQ4XSA9IGNvbnRyYWN0RVZNQWRkcmVzcy5kZWNvZGVIZXgoKQogICAgICAgIGxldCBldm1Ub2tlbkFkZHIgPSBFVk0uRVZNQWRkcmVzcyhieXRlczogWwogICAgICAgICAgICBhZGRyZXNzQnl0ZXNbMF0sIGFkZHJlc3NCeXRlc1sxXSwgYWRkcmVzc0J5dGVzWzJdLCBhZGRyZXNzQnl0ZXNbM10sCiAgICAgICAgICAgIGFkZHJlc3NCeXRlc1s0XSwgYWRkcmVzc0J5dGVzWzVdLCBhZGRyZXNzQnl0ZXNbNl0sIGFkZHJlc3NCeXRlc1s3XSwKICAgICAgICAgICAgYWRkcmVzc0J5dGVzWzhdLCBhZGRyZXNzQnl0ZXNbOV0sIGFkZHJlc3NCeXRlc1sxMF0sIGFkZHJlc3NCeXRlc1sxMV0sCiAgICAgICAgICAgIGFkZHJlc3NCeXRlc1sxMl0sIGFkZHJlc3NCeXRlc1sxM10sIGFkZHJlc3NCeXRlc1sxNF0sIGFkZHJlc3NCeXRlc1sxNV0sCiAgICAgICAgICAgIGFkZHJlc3NCeXRlc1sxNl0sIGFkZHJlc3NCeXRlc1sxN10sIGFkZHJlc3NCeXRlc1sxOF0sIGFkZHJlc3NCeXRlc1sxOV0KICAgICAgICBdKQogICAgICAgIGxldCB2YWx1ZUJhbGFuY2UgPSBFVk0uQmFsYW5jZShhdHRvZmxvdzogMCkKICAgICAgICAvLyBsZXQgZGF0YSA9IGRhdGFTdHIuZGVjb2RlSGV4KCkKCiAgICAgICAgbGV0IHR4UmVzdWx0ID0gc2VsZi5jb2EuY2FsbCgKICAgICAgICAgICAgdG86IGV2bVRva2VuQWRkciwKICAgICAgICAgICAgZGF0YTogZGF0YSwKICAgICAgICAgICAgZ2FzTGltaXQ6IGdhc0xpbWl0LAogICAgICAgICAgICB2YWx1ZTogdmFsdWVCYWxhbmNlCiAgICAgICAgKQoKICAgICAgICBhc3NlcnQoCiAgICAgICAgICAgIHR4UmVzdWx0LnN0YXR1cyA9PSBFVk0uU3RhdHVzLmZhaWxlZCB8fCB0eFJlc3VsdC5zdGF0dXMgPT0gRVZNLlN0YXR1cy5zdWNjZXNzZnVsLAogICAgICAgICAgICBtZXNzYWdlOiAiZXZtX2Vycm9yPSIuY29uY2F0KHR4UmVzdWx0LmVycm9yTWVzc2FnZSkuY29uY2F0KCJcbiIpCiAgICAgICAgKQogICAgICAgIC8vIERlc3Ryb3kgdGhlIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBkZXN0cm95IHNlbGYuc2NvcGVkUHJvdmlkZXIKICAgIH0KfQo=",
          "bridgeNFTToEvmAddressV2": "",
          "bridgeNFTToEvmAddressWithPayer": "",
          "bridgeNFTToEvmV2": "",
          "bridgeNFTToEvmWithPayer": "",
          "bridgeTokensFromEvm": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgYnJpZGdlVG9rZW5zRnJvbUV2bSAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweGYyMzNkY2VlODhmZTBhYmUKCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweDE2NTQ2NTMzOTkwNDBhNjEKCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKaW1wb3J0IEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzIGZyb20gMHhmMjMzZGNlZTg4ZmUwYWJlCgoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHgxZTRhYTBiODdkMTBiMTQxCgoKaW1wb3J0IEVWTSBmcm9tIDB4ZTQ2N2I5ZGQxMWZhMDBkZgoKCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweDFlNGFhMGI4N2QxMGIxNDEKCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHgxZTRhYTBiODdkMTBiMTQxCgppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4MWU0YWEwYjg3ZDEwYjE0MQoKCi8vLy8gVGhpcyB0cmFuc2FjdGlvbiBicmlkZ2VzIGZ1bmdpYmxlIHRva2VucyBmcm9tIEVWTSB0byBDYWRlbmNlIGFzc3VtaW5nIGl0IGhhcyBhbHJlYWR5IGJlZW4gb25ib2FyZGVkIHRvIHRoZQovLy8gRmxvd0VWTUJyaWRnZS4KLy8vCi8vLyBOT1RFOiBUaGUgRVJDNzIxIG11c3QgaGF2ZSBmaXJzdCBiZWVuIG9uYm9hcmRlZCB0byB0aGUgYnJpZGdlLiBUaGlzIGNhbiBiZSBjaGVja2VkIHZpYSB0aGUgbWV0aG9kCi8vLyAgICAgRmxvd0VWTUJyaWRnZS5ldm1BZGRyZXNzUmVxdWlyZXNPbmJvYXJkaW5nKGFkZHJlc3M6IHNlbGYuZXZtQ29udHJhY3RBZGRyZXNzKQovLy8KLy8vIEBwYXJhbSB0b2tlbkNvbnRyYWN0QWRkcmVzczogVGhlIEZsb3cgYWNjb3VudCBhZGRyZXNzIGhvc3RpbmcgdGhlIEZULWRlZmluaW5nIENhZGVuY2UgY29udHJhY3QKLy8vIEBwYXJhbSB0b2tlbkNvbnRyYWN0TmFtZTogVGhlIG5hbWUgb2YgdGhlIFZhdWx0LWRlZmluaW5nIENhZGVuY2UgY29udHJhY3QKLy8vIEBwYXJhbSBhbW91bnQ6IFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJyaWRnZSBmcm9tIEVWTQovLy8KdHJhbnNhY3Rpb24odG9rZW5Db250cmFjdEFkZHJlc3M6IEFkZHJlc3MsIHRva2VuQ29udHJhY3ROYW1lOiBTdHJpbmcsIGFtb3VudDogVUludDI1NikgewoKICAgIGxldCB2YXVsdFR5cGU6IFR5cGUKICAgIGxldCByZWNlaXZlcjogJntGdW5naWJsZVRva2VuLlZhdWx0fQogICAgbGV0IHNjb3BlZFByb3ZpZGVyOiBAU2NvcGVkRlRQcm92aWRlcnMuU2NvcGVkRlRQcm92aWRlcgogICAgbGV0IGNvYTogYXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQKCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChCb3Jyb3dWYWx1ZSwgQ29weVZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSwgVW5wdWJsaXNoQ2FwYWJpbGl0eSkgJkFjY291bnQpIHsKICAgICAgICAvKiAtLS0gUmVmZXJlbmNlIHRoZSBzaWduZXIncyBDYWRlbmNlT3duZWRBY2NvdW50IC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBDT0EKICAgICAgICBzZWxmLmNvYSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEVWTS5CcmlkZ2UpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oZnJvbTogL3N0b3JhZ2UvZXZtKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBDT0EgZnJvbSBwcm92aWRlZCBnYXRld2F5IGFkZHJlc3MiKQoKICAgICAgICAvLyBHZXQgdGhlIEVSQzIwIGNvbnRyYWN0IGFkZHJlc3MgZm9yIHRoZSBnaXZlbiBGdW5naWJsZVRva2VuIFZhdWx0IHR5cGUKICAgICAgICBzZWxmLnZhdWx0VHlwZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5idWlsZENvbXBvc2l0ZVR5cGUoCiAgICAgICAgICAgICAgICBhZGRyZXNzOiB0b2tlbkNvbnRyYWN0QWRkcmVzcywKICAgICAgICAgICAgICAgIGNvbnRyYWN0TmFtZTogdG9rZW5Db250cmFjdE5hbWUsCiAgICAgICAgICAgICAgICByZXNvdXJjZU5hbWU6ICJWYXVsdCIKICAgICAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGNvbnN0cnVjdCBWYXVsdCB0eXBlIG9mOiAiIC5jb25jYXQodG9rZW5Db250cmFjdEFkZHJlc3MudG9TdHJpbmcoKSkuY29uY2F0KCIuIikuY29uY2F0KHRva2VuQ29udHJhY3ROYW1lKS5jb25jYXQoIi5WYXVsdCIpKQoKICAgICAgICAvKiAtLS0gUmVmZXJlbmNlIHRoZSBzaWduZXIncyBWYXVsdCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgRnVuZ2libGVUb2tlbiBWYXVsdCwgY29uZmlndXJpbmcgaWYgbmVjZXNzYXJ5CiAgICAgICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQodG9rZW5Db250cmFjdEFkZHJlc3MpLmNvbnRyYWN0cy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXJ9PihuYW1lOiB0b2tlbkNvbnRyYWN0TmFtZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gRnVuZ2libGVUb2tlbiBjb250cmFjdCIpCiAgICAgICAgbGV0IHZhdWx0RGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBzZWxmLnZhdWx0VHlwZSwKICAgICAgICAgICAgICAgIHZpZXdUeXBlOiBUeXBlPEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPigpCiAgICAgICAgICAgICkgYXMhIEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgRlRWYXVsdERhdGEgdmlldyIpCiAgICAgICAgLy8gSWYgdGhlIHZhdWx0IGRvZXMgbm90IGV4aXN0LCBjcmVhdGUgaXQgYW5kIHB1Ymxpc2ggYWNjb3JkaW5nIHRvIHRoZSBjb250cmFjdCdzIGRlZmluZWQgY29uZmlndXJhdGlvbgogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLmJvcnJvdzwme0Z1bmdpYmxlVG9rZW4uVmF1bHR9Pihmcm9tOiB2YXVsdERhdGEuc3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUoPC12YXVsdERhdGEuY3JlYXRlRW1wdHlWYXVsdCgpLCB0bzogdmF1bHREYXRhLnN0b3JhZ2VQYXRoKQoKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy51bnB1Ymxpc2godmF1bHREYXRhLnJlY2VpdmVyUGF0aCkKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy51bnB1Ymxpc2godmF1bHREYXRhLm1ldGFkYXRhUGF0aCkKCiAgICAgICAgICAgIGxldCByZWNlaXZlckNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwme0Z1bmdpYmxlVG9rZW4uVmF1bHR9Pih2YXVsdERhdGEuc3RvcmFnZVBhdGgpCiAgICAgICAgICAgIGxldCBtZXRhZGF0YUNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwme0Z1bmdpYmxlVG9rZW4uVmF1bHR9Pih2YXVsdERhdGEuc3RvcmFnZVBhdGgpCgogICAgICAgICAgICBzaWduZXIuY2FwYWJpbGl0aWVzLnB1Ymxpc2gocmVjZWl2ZXJDYXAsIGF0OiB2YXVsdERhdGEucmVjZWl2ZXJQYXRoKQogICAgICAgICAgICBzaWduZXIuY2FwYWJpbGl0aWVzLnB1Ymxpc2gobWV0YWRhdGFDYXAsIGF0OiB2YXVsdERhdGEubWV0YWRhdGFQYXRoKQogICAgICAgIH0KICAgICAgICBzZWxmLnJlY2VpdmVyID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PCZ7RnVuZ2libGVUb2tlbi5WYXVsdH0+KGZyb206IHZhdWx0RGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmF1bHQgZnJvbSBzdG9yYWdlIHBhdGgiKQoKICAgICAgICAvKiAtLS0gQ29uZmlndXJlIGEgU2NvcGVkRlRQcm92aWRlciAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgYnJpZGdlIGZlZSAtIGJyaWRnaW5nIGZyb20gRVZNIGNvbnN1bWVzIG5vIHN0b3JhZ2UsIHNvIGZsYXQgZmVlCiAgICAgICAgbGV0IGFwcHJveEZlZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5jYWxjdWxhdGVCcmlkZ2VGZWUoYnl0ZXM6IDQwMF8wMDApCiAgICAgICAgLy8gSXNzdWUgYW5kIHN0b3JlIGJyaWRnZS1kZWRpY2F0ZWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBpbiBzdG9yYWdlIGlmIG5lY2Vzc2FyeQogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLnR5cGUoYXQ6IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIGxldCBwcm92aWRlckNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KAogICAgICAgICAgICAgICAgL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgICAgICAgKQogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKHByb3ZpZGVyQ2FwLCB0bzogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkKICAgICAgICB9CiAgICAgICAgLy8gQ29weSB0aGUgc3RvcmVkIFByb3ZpZGVyIGNhcGFiaWxpdHkgYW5kIGNyZWF0ZSBhIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBsZXQgcHJvdmlkZXJDYXBDb3B5ID0gc2lnbmVyLnN0b3JhZ2UuY29weTxDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4+KAogICAgICAgICAgICAgICAgZnJvbTogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJJbnZhbGlkIFByb3ZpZGVyIENhcGFiaWxpdHkgZm91bmQgaW4gc3RvcmFnZS4iKQogICAgICAgIGxldCBwcm92aWRlckZpbHRlciA9IFNjb3BlZEZUUHJvdmlkZXJzLkFsbG93YW5jZUZpbHRlcihhcHByb3hGZWUpCiAgICAgICAgc2VsZi5zY29wZWRQcm92aWRlciA8LSBTY29wZWRGVFByb3ZpZGVycy5jcmVhdGVTY29wZWRGVFByb3ZpZGVyKAogICAgICAgICAgICAgICAgcHJvdmlkZXI6IHByb3ZpZGVyQ2FwQ29weSwKICAgICAgICAgICAgICAgIGZpbHRlcnM6IFsgcHJvdmlkZXJGaWx0ZXIgXSwKICAgICAgICAgICAgICAgIGV4cGlyYXRpb246IGdldEN1cnJlbnRCbG9jaygpLnRpbWVzdGFtcCArIDEuMAogICAgICAgICAgICApCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgLy8gRXhlY3V0ZSB0aGUgYnJpZGdlIHJlcXVlc3QKICAgICAgICBsZXQgdmF1bHQ6IEB7RnVuZ2libGVUb2tlbi5WYXVsdH0gPC0gc2VsZi5jb2Eud2l0aGRyYXdUb2tlbnMoCiAgICAgICAgICAgIHR5cGU6IHNlbGYudmF1bHRUeXBlLAogICAgICAgICAgICBhbW91bnQ6IGFtb3VudCwKICAgICAgICAgICAgZmVlUHJvdmlkZXI6ICZzZWxmLnNjb3BlZFByb3ZpZGVyIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfQogICAgICAgICkKICAgICAgICAvLyBEZXBvc2l0IHRoZSBicmlkZ2VkIHRva2VuIGludG8gdGhlIHNpZ25lcidzIHZhdWx0CiAgICAgICAgc2VsZi5yZWNlaXZlci5kZXBvc2l0KGZyb206IDwtdmF1bHQpCiAgICAgICAgLy8gRGVzdHJveSB0aGUgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGRlc3Ryb3kgc2VsZi5zY29wZWRQcm92aWRlcgogICAgfQp9Cg==",
          "bridgeTokensFromEvmToFlow": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgYnJpZGdlVG9rZW5zRnJvbUV2bVRvRmxvdyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweGYyMzNkY2VlODhmZTBhYmUKCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweDE2NTQ2NTMzOTkwNDBhNjEKCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKaW1wb3J0IEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzIGZyb20gMHhmMjMzZGNlZTg4ZmUwYWJlCgoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHgxZTRhYTBiODdkMTBiMTQxCgoKaW1wb3J0IEVWTSBmcm9tIDB4ZTQ2N2I5ZGQxMWZhMDBkZgoKCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweDFlNGFhMGI4N2QxMGIxNDEKCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHgxZTRhYTBiODdkMTBiMTQxCgppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4MWU0YWEwYjg3ZDEwYjE0MQoKCi8vLy8gVGhpcyB0cmFuc2FjdGlvbiBicmlkZ2VzIGZ1bmdpYmxlIHRva2VucyBmcm9tIEVWTSB0byBDYWRlbmNlIGFzc3VtaW5nIGl0IGhhcyBhbHJlYWR5IGJlZW4gb25ib2FyZGVkIHRvIHRoZQovLy8gRmxvd0VWTUJyaWRnZS4KLy8vCi8vLyBOT1RFOiBUaGUgRVJDNzIxIG11c3QgaGF2ZSBmaXJzdCBiZWVuIG9uYm9hcmRlZCB0byB0aGUgYnJpZGdlLiBUaGlzIGNhbiBiZSBjaGVja2VkIHZpYSB0aGUgbWV0aG9kCi8vLyAgICAgRmxvd0VWTUJyaWRnZS5ldm1BZGRyZXNzUmVxdWlyZXNPbmJvYXJkaW5nKGFkZHJlc3M6IHNlbGYuZXZtQ29udHJhY3RBZGRyZXNzKQovLy8KLy8vIEBwYXJhbSB0b2tlbkNvbnRyYWN0QWRkcmVzczogVGhlIEZsb3cgYWNjb3VudCBhZGRyZXNzIGhvc3RpbmcgdGhlIEZULWRlZmluaW5nIENhZGVuY2UgY29udHJhY3QKLy8vIEBwYXJhbSB0b2tlbkNvbnRyYWN0TmFtZTogVGhlIG5hbWUgb2YgdGhlIFZhdWx0LWRlZmluaW5nIENhZGVuY2UgY29udHJhY3QKLy8vIEBwYXJhbSBhbW91bnQ6IFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJyaWRnZSBmcm9tIEVWTQovLy8KdHJhbnNhY3Rpb24odG9rZW5Db250cmFjdEFkZHJlc3M6IEFkZHJlc3MsIHRva2VuQ29udHJhY3ROYW1lOiBTdHJpbmcsIGFtb3VudDogVUludDI1NiwgcmVjZWl2ZXI6IEFkZHJlc3MpIHsKCiAgICBsZXQgdmF1bHRUeXBlOiBUeXBlCiAgICBsZXQgcmVjZWl2ZXI6ICZ7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0KICAgIGxldCBzY29wZWRQcm92aWRlcjogQFNjb3BlZEZUUHJvdmlkZXJzLlNjb3BlZEZUUHJvdmlkZXIKICAgIGxldCBjb2E6IGF1dGgoRVZNLkJyaWRnZSkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50CgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQm9ycm93VmFsdWUsIENvcHlWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUsIFVucHVibGlzaENhcGFiaWxpdHkpICZBY2NvdW50KSB7CiAgICAgICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgQ2FkZW5jZU93bmVkQWNjb3VudCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3MgQ09BCiAgICAgICAgc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgQ09BIGZyb20gcHJvdmlkZWQgZ2F0ZXdheSBhZGRyZXNzIikKCiAgICAgICAgLy8gR2V0IHRoZSBFUkMyMCBjb250cmFjdCBhZGRyZXNzIGZvciB0aGUgZ2l2ZW4gRnVuZ2libGVUb2tlbiBWYXVsdCB0eXBlCiAgICAgICAgc2VsZi52YXVsdFR5cGUgPSBGbG93RVZNQnJpZGdlVXRpbHMuYnVpbGRDb21wb3NpdGVUeXBlKAogICAgICAgICAgICAgICAgYWRkcmVzczogdG9rZW5Db250cmFjdEFkZHJlc3MsCiAgICAgICAgICAgICAgICBjb250cmFjdE5hbWU6IHRva2VuQ29udHJhY3ROYW1lLAogICAgICAgICAgICAgICAgcmVzb3VyY2VOYW1lOiAiVmF1bHQiCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkNvdWxkIG5vdCBjb25zdHJ1Y3QgVmF1bHQgdHlwZSBvZjogIiAuY29uY2F0KHRva2VuQ29udHJhY3RBZGRyZXNzLnRvU3RyaW5nKCkpLmNvbmNhdCgiLiIpLmNvbmNhdCh0b2tlbkNvbnRyYWN0TmFtZSkuY29uY2F0KCIuVmF1bHQiKSkKCiAgICAgICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgVmF1bHQgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIEZ1bmdpYmxlVG9rZW4gVmF1bHQsIGNvbmZpZ3VyaW5nIGlmIG5lY2Vzc2FyeQogICAgICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KHRva2VuQ29udHJhY3RBZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogdG9rZW5Db250cmFjdE5hbWUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZpZXdSZXNvbHZlciBmcm9tIEZ1bmdpYmxlVG9rZW4gY29udHJhY3QiKQogICAgICAgIGxldCB2YXVsdERhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgICAgIHJlc291cmNlVHlwZTogc2VsZi52YXVsdFR5cGUsCiAgICAgICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT4oKQogICAgICAgICAgICApIGFzISBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT8gPz8gcGFuaWMoIkNvdWxkIG5vdCByZXNvbHZlIEZUVmF1bHREYXRhIHZpZXciKQogICAgICAgIC8vIElmIHRoZSB2YXVsdCBkb2VzIG5vdCBleGlzdCwgY3JlYXRlIGl0IGFuZCBwdWJsaXNoIGFjY29yZGluZyB0byB0aGUgY29udHJhY3QncyBkZWZpbmVkIGNvbmZpZ3VyYXRpb24KICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8JntGdW5naWJsZVRva2VuLlZhdWx0fT4oZnJvbTogdmF1bHREYXRhLnN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKDwtdmF1bHREYXRhLmNyZWF0ZUVtcHR5VmF1bHQoKSwgdG86IHZhdWx0RGF0YS5zdG9yYWdlUGF0aCkKCiAgICAgICAgICAgIHNpZ25lci5jYXBhYmlsaXRpZXMudW5wdWJsaXNoKHZhdWx0RGF0YS5yZWNlaXZlclBhdGgpCiAgICAgICAgICAgIHNpZ25lci5jYXBhYmlsaXRpZXMudW5wdWJsaXNoKHZhdWx0RGF0YS5tZXRhZGF0YVBhdGgpCgogICAgICAgICAgICBsZXQgcmVjZWl2ZXJDYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JntGdW5naWJsZVRva2VuLlZhdWx0fT4odmF1bHREYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgICAgICBsZXQgbWV0YWRhdGFDYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JntGdW5naWJsZVRva2VuLlZhdWx0fT4odmF1bHREYXRhLnN0b3JhZ2VQYXRoKQoKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy5wdWJsaXNoKHJlY2VpdmVyQ2FwLCBhdDogdmF1bHREYXRhLnJlY2VpdmVyUGF0aCkKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy5wdWJsaXNoKG1ldGFkYXRhQ2FwLCBhdDogdmF1bHREYXRhLm1ldGFkYXRhUGF0aCkKICAgICAgICB9CiAgICAgICAgbGV0IHJlY2VpdmVyQWNjdCA9IGdldEFjY291bnQocmVjZWl2ZXIpCiAgICAgICAgc2VsZi5yZWNlaXZlciA9IHJlY2VpdmVyQWNjdC5jYXBhYmlsaXRpZXMuYm9ycm93PCZ7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KHZhdWx0RGF0YS5yZWNlaXZlclBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZhdWx0IHJlY2VpdmVyIGNhcGFiaWxpdGllcyBmcm9tIHB1YmxpYyBwYXRoIikKCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGJyaWRnZSBmZWUgLSBicmlkZ2luZyBmcm9tIEVWTSBjb25zdW1lcyBubyBzdG9yYWdlLCBzbyBmbGF0IGZlZQogICAgICAgIGxldCBhcHByb3hGZWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuY2FsY3VsYXRlQnJpZGdlRmVlKGJ5dGVzOiA0MDBfMDAwKQogICAgICAgIC8vIElzc3VlIGFuZCBzdG9yZSBicmlkZ2UtZGVkaWNhdGVkIFByb3ZpZGVyIENhcGFiaWxpdHkgaW4gc3RvcmFnZSBpZiBuZWNlc3NhcnkKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS50eXBlKGF0OiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigKICAgICAgICAgICAgICAgIC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICAgICAgICkKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZShwcm92aWRlckNhcCwgdG86IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpCiAgICAgICAgfQogICAgICAgIC8vIENvcHkgdGhlIHN0b3JlZCBQcm92aWRlciBjYXBhYmlsaXR5IGFuZCBjcmVhdGUgYSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgbGV0IHByb3ZpZGVyQ2FwQ29weSA9IHNpZ25lci5zdG9yYWdlLmNvcHk8Q2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+PigKICAgICAgICAgICAgICAgIGZyb206IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiSW52YWxpZCBQcm92aWRlciBDYXBhYmlsaXR5IGZvdW5kIGluIHN0b3JhZ2UuIikKICAgICAgICBsZXQgcHJvdmlkZXJGaWx0ZXIgPSBTY29wZWRGVFByb3ZpZGVycy5BbGxvd2FuY2VGaWx0ZXIoYXBwcm94RmVlKQogICAgICAgIHNlbGYuc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgICAgICAgICBmaWx0ZXJzOiBbIHByb3ZpZGVyRmlsdGVyIF0sCiAgICAgICAgICAgICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICAgICAgICAgKQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIC8vIEV4ZWN1dGUgdGhlIGJyaWRnZSByZXF1ZXN0CiAgICAgICAgbGV0IHZhdWx0OiBAe0Z1bmdpYmxlVG9rZW4uVmF1bHR9IDwtIHNlbGYuY29hLndpdGhkcmF3VG9rZW5zKAogICAgICAgICAgICB0eXBlOiBzZWxmLnZhdWx0VHlwZSwKICAgICAgICAgICAgYW1vdW50OiBhbW91bnQsCiAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICApCiAgICAgICAgLy8gRGVwb3NpdCB0aGUgYnJpZGdlZCB0b2tlbiBpbnRvIHRoZSBzaWduZXIncyB2YXVsdAogICAgICAgIHNlbGYucmVjZWl2ZXIuZGVwb3NpdChmcm9tOiA8LXZhdWx0KQogICAgICAgIC8vIERlc3Ryb3kgdGhlIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBkZXN0cm95IHNlbGYuc2NvcGVkUHJvdmlkZXIKICAgIH0KfQo=",
          "bridgeTokensFromEvmToFlowV2": "",
          "bridgeTokensFromEvmToFlowV3": "",
          "bridgeTokensFromEvmV2": "",
          "bridgeTokensToEvm": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgYnJpZGdlVG9rZW5zVG9Fdm0gLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhmMjMzZGNlZTg4ZmUwYWJlCgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHgxNjU0NjUzMzk5MDQwYTYxCgppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKaW1wb3J0IEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzIGZyb20gMHhmMjMzZGNlZTg4ZmUwYWJlCgoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHgxZTRhYTBiODdkMTBiMTQxCgoKaW1wb3J0IEVWTSBmcm9tIDB4ZTQ2N2I5ZGQxMWZhMDBkZgoKCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweDFlNGFhMGI4N2QxMGIxNDEKCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHgxZTRhYTBiODdkMTBiMTQxCgppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4MWU0YWEwYjg3ZDEwYjE0MQoKCgp0cmFuc2FjdGlvbih0b2tlbkNvbnRyYWN0QWRkcmVzczogQWRkcmVzcywgdG9rZW5Db250cmFjdE5hbWU6IFN0cmluZywgYW1vdW50OiBVRml4NjQpIHsKCiAgICBsZXQgc2VudFZhdWx0OiBAe0Z1bmdpYmxlVG9rZW4uVmF1bHR9CiAgICBsZXQgY29hOiBhdXRoKEVWTS5CcmlkZ2UpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudAogICAgbGV0IHNjb3BlZFByb3ZpZGVyOiBAU2NvcGVkRlRQcm92aWRlcnMuU2NvcGVkRlRQcm92aWRlcgoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKENvcHlWYWx1ZSwgQm9ycm93VmFsdWUsIElzc3VlU3RvcmFnZUNhcGFiaWxpdHlDb250cm9sbGVyLCBQdWJsaXNoQ2FwYWJpbGl0eSwgU2F2ZVZhbHVlKSAmQWNjb3VudCkgewogICAgICAgIC8qIC0tLSBSZWZlcmVuY2UgdGhlIHNpZ25lcidzIENhZGVuY2VPd25lZEFjY291bnQgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIHNpZ25lcidzIENPQQogICAgICAgIHNlbGYuY29hID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRVZNLkJyaWRnZSkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50Pihmcm9tOiAvc3RvcmFnZS9ldm0pCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IENPQSBmcm9tIHByb3ZpZGVkIGdhdGV3YXkgYWRkcmVzcyIpCgogICAgICAgIC8qIC0tLSBSZXRyaWV2ZSB0aGUgZnVuZHMgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIEZ1bmdpYmxlVG9rZW4gVmF1bHQKICAgICAgICBsZXQgdmlld1Jlc29sdmVyID0gZ2V0QWNjb3VudCh0b2tlbkNvbnRyYWN0QWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IHRva2VuQ29udHJhY3ROYW1lKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBWaWV3UmVzb2x2ZXIgZnJvbSBGdW5naWJsZVRva2VuIGNvbnRyYWN0IikKICAgICAgICBsZXQgdmF1bHREYXRhID0gdmlld1Jlc29sdmVyLnJlc29sdmVDb250cmFjdFZpZXcoCiAgICAgICAgICAgICAgICByZXNvdXJjZVR5cGU6IG5pbCwKICAgICAgICAgICAgICAgIHZpZXdUeXBlOiBUeXBlPEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPigpCiAgICAgICAgICAgICkgYXMhIEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgRlRWYXVsdERhdGEgdmlldyIpCiAgICAgICAgbGV0IHZhdWx0ID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlZhdWx0fT4oCiAgICAgICAgICAgICAgICBmcm9tOiB2YXVsdERhdGEuc3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGFjY2VzcyBzaWduZXIncyBGdW5naWJsZVRva2VuIFZhdWx0IikKCiAgICAgICAgLy8gV2l0aGRyYXcgdGhlIHJlcXVlc3RlZCBiYWxhbmNlICYgY2FsY3VsYXRlIHRoZSBhcHByb3hpbWF0ZSBicmlkZ2UgZmVlIGJhc2VkIG9uIHN0b3JhZ2UgdXNhZ2UKICAgICAgICBsZXQgY3VycmVudFN0b3JhZ2VVc2FnZSA9IHNpZ25lci5zdG9yYWdlLnVzZWQKICAgICAgICBzZWxmLnNlbnRWYXVsdCA8LSB2YXVsdC53aXRoZHJhdyhhbW91bnQ6IGFtb3VudCkKICAgICAgICBsZXQgd2l0aGRyYXduU3RvcmFnZVVzYWdlID0gc2lnbmVyLnN0b3JhZ2UudXNlZAogICAgICAgIC8vIEFwcHJveGltYXRlIHRoZSBicmlkZ2UgZmVlIGJhc2VkIG9uIHRoZSBkaWZmZXJlbmNlIGluIHN0b3JhZ2UgdXNhZ2Ugd2l0aCBzb21lIGJ1ZmZlcgogICAgICAgIGxldCBhcHByb3hGZWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuY2FsY3VsYXRlQnJpZGdlRmVlKAogICAgICAgICAgICAgICAgYnl0ZXM6IGN1cnJlbnRTdG9yYWdlVXNhZ2UgLSB3aXRoZHJhd25TdG9yYWdlVXNhZ2UKICAgICAgICAgICAgKSAqIDEuMTAKCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApCiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICAgIH0KICAgICAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkludmFsaWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBmb3VuZCBpbiBzdG9yYWdlLiIpCiAgICAgICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKGFwcHJveEZlZSkKICAgICAgICBzZWxmLnNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICAgICAgICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgICAgICkKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICAvLyBFeGVjdXRlIHRoZSBicmlkZ2UKICAgICAgICBzZWxmLmNvYS5kZXBvc2l0VG9rZW5zKAogICAgICAgICAgICB2YXVsdDogPC1zZWxmLnNlbnRWYXVsdCwKICAgICAgICAgICAgZmVlUHJvdmlkZXI6ICZzZWxmLnNjb3BlZFByb3ZpZGVyIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfQogICAgICAgICkKICAgICAgICAvLyBEZXN0cm95IHRoZSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgZGVzdHJveSBzZWxmLnNjb3BlZFByb3ZpZGVyCiAgICB9Cn0K",
          "bridgeTokensToEvmAddress": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgYnJpZGdlVG9rZW5zVG9Fdm1BZGRyZXNzIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQoKaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4MTY1NDY1MzM5OTA0MGE2MQoKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCmltcG9ydCBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cyBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQoKCmltcG9ydCBTY29wZWRGVFByb3ZpZGVycyBmcm9tIDB4MWU0YWEwYjg3ZDEwYjE0MQoKCmltcG9ydCBFVk0gZnJvbSAweGU0NjdiOWRkMTFmYTAwZGYKCgppbXBvcnQgRmxvd0VWTUJyaWRnZVV0aWxzIGZyb20gMHgxZTRhYTBiODdkMTBiMTQxCgppbXBvcnQgRmxvd0VWTUJyaWRnZSBmcm9tIDB4MWU0YWEwYjg3ZDEwYjE0MQoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweDFlNGFhMGI4N2QxMGIxNDEKCgoKdHJhbnNhY3Rpb24odG9rZW5Db250cmFjdEFkZHJlc3M6IEFkZHJlc3MsIHRva2VuQ29udHJhY3ROYW1lOiBTdHJpbmcsIGFtb3VudDogVUZpeDY0LCBjb250cmFjdEVWTUFkZHJlc3M6IFN0cmluZywgZGF0YTogW1VJbnQ4XSwgZ2FzTGltaXQ6IFVJbnQ2NCkgewoKICAgIGxldCBzZW50VmF1bHQ6IEB7RnVuZ2libGVUb2tlbi5WYXVsdH0KICAgIGxldCBjb2E6IGF1dGgoRVZNLkJyaWRnZSwgRVZNLkNhbGwsIEVWTS5Pd25lcikgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50CiAgICBsZXQgc2NvcGVkUHJvdmlkZXI6IEBTY29wZWRGVFByb3ZpZGVycy5TY29wZWRGVFByb3ZpZGVyCgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQ29weVZhbHVlLCBCb3Jyb3dWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgQ2FkZW5jZU93bmVkQWNjb3VudCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3MgQ09BCiAgICAgICAgc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uQnJpZGdlLCBFVk0uQ2FsbCwgRVZNLk93bmVyKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgQ09BIGZyb20gcHJvdmlkZWQgZ2F0ZXdheSBhZGRyZXNzIikKCiAgICAgICAgLyogLS0tIFJldHJpZXZlIHRoZSBmdW5kcyAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgRnVuZ2libGVUb2tlbiBWYXVsdAogICAgICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KHRva2VuQ29udHJhY3RBZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogdG9rZW5Db250cmFjdE5hbWUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZpZXdSZXNvbHZlciBmcm9tIEZ1bmdpYmxlVG9rZW4gY29udHJhY3QiKQogICAgICAgIGxldCB2YXVsdERhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgICAgIHJlc291cmNlVHlwZTogbmlsLAogICAgICAgICAgICAgICAgdmlld1R5cGU6IFR5cGU8RnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE+KCkKICAgICAgICAgICAgKSBhcyEgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE/ID8/IHBhbmljKCJDb3VsZCBub3QgcmVzb2x2ZSBGVFZhdWx0RGF0YSB2aWV3IikKICAgICAgICBsZXQgdmF1bHQgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uVmF1bHR9PigKICAgICAgICAgICAgICAgIGZyb206IHZhdWx0RGF0YS5zdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYWNjZXNzIHNpZ25lcidzIEZ1bmdpYmxlVG9rZW4gVmF1bHQiKQoKICAgICAgICAvLyBXaXRoZHJhdyB0aGUgcmVxdWVzdGVkIGJhbGFuY2UgJiBjYWxjdWxhdGUgdGhlIGFwcHJveGltYXRlIGJyaWRnZSBmZWUgYmFzZWQgb24gc3RvcmFnZSB1c2FnZQogICAgICAgIGxldCBjdXJyZW50U3RvcmFnZVVzYWdlID0gc2lnbmVyLnN0b3JhZ2UudXNlZAogICAgICAgIHNlbGYuc2VudFZhdWx0IDwtIHZhdWx0LndpdGhkcmF3KGFtb3VudDogYW1vdW50KQogICAgICAgIGxldCB3aXRoZHJhd25TdG9yYWdlVXNhZ2UgPSBzaWduZXIuc3RvcmFnZS51c2VkCiAgICAgICAgLy8gQXBwcm94aW1hdGUgdGhlIGJyaWRnZSBmZWUgYmFzZWQgb24gdGhlIGRpZmZlcmVuY2UgaW4gc3RvcmFnZSB1c2FnZSB3aXRoIHNvbWUgYnVmZmVyCiAgICAgICAgbGV0IGFwcHJveEZlZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5jYWxjdWxhdGVCcmlkZ2VGZWUoCiAgICAgICAgICAgICAgICBieXRlczogY3VycmVudFN0b3JhZ2VVc2FnZSAtIHdpdGhkcmF3blN0b3JhZ2VVc2FnZQogICAgICAgICAgICApICogMS4xMAoKICAgICAgICAvKiAtLS0gQ29uZmlndXJlIGEgU2NvcGVkRlRQcm92aWRlciAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIElzc3VlIGFuZCBzdG9yZSBicmlkZ2UtZGVkaWNhdGVkIFByb3ZpZGVyIENhcGFiaWxpdHkgaW4gc3RvcmFnZSBpZiBuZWNlc3NhcnkKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS50eXBlKGF0OiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigKICAgICAgICAgICAgICAgIC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICAgICAgICkKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZShwcm92aWRlckNhcCwgdG86IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpCiAgICAgICAgfQogICAgICAgIC8vIENvcHkgdGhlIHN0b3JlZCBQcm92aWRlciBjYXBhYmlsaXR5IGFuZCBjcmVhdGUgYSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgbGV0IHByb3ZpZGVyQ2FwQ29weSA9IHNpZ25lci5zdG9yYWdlLmNvcHk8Q2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+PigKICAgICAgICAgICAgICAgIGZyb206IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiSW52YWxpZCBQcm92aWRlciBDYXBhYmlsaXR5IGZvdW5kIGluIHN0b3JhZ2UuIikKICAgICAgICBsZXQgcHJvdmlkZXJGaWx0ZXIgPSBTY29wZWRGVFByb3ZpZGVycy5BbGxvd2FuY2VGaWx0ZXIoYXBwcm94RmVlKQogICAgICAgIHNlbGYuc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgICAgICAgICBmaWx0ZXJzOiBbIHByb3ZpZGVyRmlsdGVyIF0sCiAgICAgICAgICAgICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICAgICAgICAgKQogICAgfQoKICAgIGV4ZWN1dGUgewoKICAgICAgICBsZXQgdmF1bHRUeXBlID0gRmxvd0VWTUJyaWRnZVV0aWxzLmJ1aWxkQ29tcG9zaXRlVHlwZSgKICAgICAgICAgICAgYWRkcmVzczogdG9rZW5Db250cmFjdEFkZHJlc3MsCiAgICAgICAgICAgIGNvbnRyYWN0TmFtZTogdG9rZW5Db250cmFjdE5hbWUsCiAgICAgICAgICAgIHJlc291cmNlTmFtZTogIlZhdWx0IgogICAgICAgICkgPz8gcGFuaWMoIkNvdWxkIG5vdCBjb25zdHJ1Y3QgVmF1bHQgdHlwZSBvZjogIiAuY29uY2F0KHRva2VuQ29udHJhY3RBZGRyZXNzLnRvU3RyaW5nKCkpLmNvbmNhdCgiLiIpLmNvbmNhdCh0b2tlbkNvbnRyYWN0TmFtZSkuY29uY2F0KCIuVmF1bHQiKSkKCiAgICAgICAgc2VsZi5jb2EuZGVwb3NpdFRva2VucygKICAgICAgICAgICAgdmF1bHQ6IDwtc2VsZi5zZW50VmF1bHQsCiAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICApCgogICAgICAgIHZhciBhZGRyZXNzQnl0ZXM6IFtVSW50OF0gPSBjb250cmFjdEVWTUFkZHJlc3MuZGVjb2RlSGV4KCkKICAgICAgICBsZXQgZXZtVG9rZW5BZGRyID0gRVZNLkVWTUFkZHJlc3MoYnl0ZXM6IFsKICAgICAgICAgICAgYWRkcmVzc0J5dGVzWzBdLCBhZGRyZXNzQnl0ZXNbMV0sIGFkZHJlc3NCeXRlc1syXSwgYWRkcmVzc0J5dGVzWzNdLAogICAgICAgICAgICBhZGRyZXNzQnl0ZXNbNF0sIGFkZHJlc3NCeXRlc1s1XSwgYWRkcmVzc0J5dGVzWzZdLCBhZGRyZXNzQnl0ZXNbN10sCiAgICAgICAgICAgIGFkZHJlc3NCeXRlc1s4XSwgYWRkcmVzc0J5dGVzWzldLCBhZGRyZXNzQnl0ZXNbMTBdLCBhZGRyZXNzQnl0ZXNbMTFdLAogICAgICAgICAgICBhZGRyZXNzQnl0ZXNbMTJdLCBhZGRyZXNzQnl0ZXNbMTNdLCBhZGRyZXNzQnl0ZXNbMTRdLCBhZGRyZXNzQnl0ZXNbMTVdLAogICAgICAgICAgICBhZGRyZXNzQnl0ZXNbMTZdLCBhZGRyZXNzQnl0ZXNbMTddLCBhZGRyZXNzQnl0ZXNbMThdLCBhZGRyZXNzQnl0ZXNbMTldCiAgICAgICAgXSkKICAgICAgICBsZXQgdmFsdWVCYWxhbmNlID0gRVZNLkJhbGFuY2UoYXR0b2Zsb3c6IDApCiAgICAgICAgLy8gbGV0IGRhdGEgPSBkYXRhU3RyLmRlY29kZUhleCgpCiAgICAgICAgIGxldCB0eFJlc3VsdCA9IHNlbGYuY29hLmNhbGwoCiAgICAgICAgICAgIHRvOiBldm1Ub2tlbkFkZHIsCiAgICAgICAgICAgIGRhdGE6IGRhdGEsCiAgICAgICAgICAgIGdhc0xpbWl0OiBnYXNMaW1pdCwKICAgICAgICAgICAgdmFsdWU6IHZhbHVlQmFsYW5jZQogICAgICAgICkKCiAgICAgICAgYXNzZXJ0KAogICAgICAgICAgICB0eFJlc3VsdC5zdGF0dXMgPT0gRVZNLlN0YXR1cy5mYWlsZWQgfHwgdHhSZXN1bHQuc3RhdHVzID09IEVWTS5TdGF0dXMuc3VjY2Vzc2Z1bCwKICAgICAgICAgICAgbWVzc2FnZTogImV2bV9lcnJvcj0iLmNvbmNhdCh0eFJlc3VsdC5lcnJvck1lc3NhZ2UpLmNvbmNhdCgiXG4iKQogICAgICAgICkKICAgICAgICAvLyBEZXN0cm95IHRoZSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgZGVzdHJveSBzZWxmLnNjb3BlZFByb3ZpZGVyCiAgICB9Cn0K",
          "bridgeTokensToEvmAddressV2": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgYnJpZGdlVG9rZW5zVG9Fdm1BZGRyZXNzVjIgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhmMjMzZGNlZTg4ZmUwYWJlCgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHgxNjU0NjUzMzk5MDQwYTYxCgppbXBvcnQgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MgZnJvbSAweGYyMzNkY2VlODhmZTBhYmUKCgppbXBvcnQgU2NvcGVkRlRQcm92aWRlcnMgZnJvbSAweDFlNGFhMGI4N2QxMGIxNDEKCgppbXBvcnQgRVZNIGZyb20gMHhlNDY3YjlkZDExZmEwMGRmCgoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VVdGlscyBmcm9tIDB4MWU0YWEwYjg3ZDEwYjE0MQoKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweDFlNGFhMGI4N2QxMGIxNDEKCmltcG9ydCBGbG93RVZNQnJpZGdlQ29uZmlnIGZyb20gMHgxZTRhYTBiODdkMTBiMTQxCgoKCnRyYW5zYWN0aW9uKHZhdWx0SWRlbnRpZmllcjogU3RyaW5nLCBhbW91bnQ6IFVGaXg2NCwgcmVjaXBpZW50OiBTdHJpbmcpIHsKICAgIGxldCBzZW50VmF1bHQ6IEB7RnVuZ2libGVUb2tlbi5WYXVsdH0KICAgIGxldCByZXF1aXJlc09uYm9hcmRpbmc6IEJvb2wKICAgIGxldCBzY29wZWRQcm92aWRlcjogQFNjb3BlZEZUUHJvdmlkZXJzLlNjb3BlZEZUUHJvdmlkZXIKCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChDb3B5VmFsdWUsIEJvcnJvd1ZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICAvKiAtLS0gQ29uc3RydWN0IHRoZSBWYXVsdCB0eXBlIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQ29uc3RydWN0IHRoZSBWYXVsdCB0eXBlIGZyb20gdGhlIHByb3ZpZGVkIGlkZW50aWZpZXIKICAgICAgICBsZXQgdmF1bHRUeXBlID0gQ29tcG9zaXRlVHlwZSh2YXVsdElkZW50aWZpZXIpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgY29uc3RydWN0IFZhdWx0IHR5cGUgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdCh2YXVsdElkZW50aWZpZXIpKQogICAgICAgIC8vIFBhcnNlIHRoZSBWYXVsdCBpZGVudGlmaWVyIGludG8gaXRzIGNvbXBvbmVudHMKICAgICAgICBsZXQgdG9rZW5Db250cmFjdEFkZHJlc3MgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3RBZGRyZXNzKGZyb21UeXBlOiB2YXVsdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IGFkZHJlc3MgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdCh2YXVsdElkZW50aWZpZXIpKQogICAgICAgIGxldCB0b2tlbkNvbnRyYWN0TmFtZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdE5hbWUoZnJvbVR5cGU6IHZhdWx0VHlwZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgbmFtZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KHZhdWx0SWRlbnRpZmllcikpCiAgICAgICAgCiAgICAgICAgLyogLS0tIFJldHJpZXZlIHRoZSBmdW5kcyAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgRnVuZ2libGVUb2tlbiBWYXVsdAogICAgICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KHRva2VuQ29udHJhY3RBZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogdG9rZW5Db250cmFjdE5hbWUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZpZXdSZXNvbHZlciBmcm9tIEZ1bmdpYmxlVG9rZW4gY29udHJhY3QiKQogICAgICAgIGxldCB2YXVsdERhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgICAgIHJlc291cmNlVHlwZTogbmlsLAogICAgICAgICAgICAgICAgdmlld1R5cGU6IFR5cGU8RnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE+KCkKICAgICAgICAgICAgKSBhcyEgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE/ID8/IHBhbmljKCJDb3VsZCBub3QgcmVzb2x2ZSBGVFZhdWx0RGF0YSB2aWV3IikKICAgICAgICBsZXQgdmF1bHQgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uVmF1bHR9PigKICAgICAgICAgICAgICAgIGZyb206IHZhdWx0RGF0YS5zdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYWNjZXNzIHNpZ25lcidzIEZ1bmdpYmxlVG9rZW4gVmF1bHQiKQoKICAgICAgICAvLyBXaXRoZHJhdyB0aGUgcmVxdWVzdGVkIGJhbGFuY2UgJiBjYWxjdWxhdGUgdGhlIGFwcHJveGltYXRlIGJyaWRnZSBmZWUgYmFzZWQgb24gc3RvcmFnZSB1c2FnZQogICAgICAgIGxldCBjdXJyZW50U3RvcmFnZVVzYWdlID0gc2lnbmVyLnN0b3JhZ2UudXNlZAogICAgICAgIHNlbGYuc2VudFZhdWx0IDwtIHZhdWx0LndpdGhkcmF3KGFtb3VudDogYW1vdW50KQogICAgICAgIGxldCB3aXRoZHJhd25TdG9yYWdlVXNhZ2UgPSBzaWduZXIuc3RvcmFnZS51c2VkCiAgICAgICAgLy8gQXBwcm94aW1hdGUgdGhlIGJyaWRnZSBmZWUgYmFzZWQgb24gdGhlIGRpZmZlcmVuY2UgaW4gc3RvcmFnZSB1c2FnZSB3aXRoIHNvbWUgYnVmZmVyCiAgICAgICAgdmFyIGFwcHJveEZlZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5jYWxjdWxhdGVCcmlkZ2VGZWUoCiAgICAgICAgICAgICAgICBieXRlczogY3VycmVudFN0b3JhZ2VVc2FnZSAtIHdpdGhkcmF3blN0b3JhZ2VVc2FnZQogICAgICAgICAgICApICogMS4xMAogICAgICAgIC8vIERldGVybWluZSBpZiB0aGUgVmF1bHQgcmVxdWlyZXMgb25ib2FyZGluZyAtIHRoaXMgaW1wYWN0cyB0aGUgZmVlIHJlcXVpcmVkCiAgICAgICAgc2VsZi5yZXF1aXJlc09uYm9hcmRpbmcgPSBGbG93RVZNQnJpZGdlLnR5cGVSZXF1aXJlc09uYm9hcmRpbmcoc2VsZi5zZW50VmF1bHQuZ2V0VHlwZSgpKQogICAgICAgICAgICA/PyBwYW5pYygiQnJpZGdlIGRvZXMgbm90IHN1cHBvcnQgdGhpcyBhc3NldCB0eXBlIikKICAgICAgICBpZiBzZWxmLnJlcXVpcmVzT25ib2FyZGluZyB7CiAgICAgICAgICAgIGFwcHJveEZlZSA9IGFwcHJveEZlZSArIEZsb3dFVk1CcmlkZ2VDb25maWcub25ib2FyZEZlZQogICAgICAgIH0KCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApCiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICAgIH0KICAgICAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkludmFsaWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBmb3VuZCBpbiBzdG9yYWdlLiIpCiAgICAgICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKGFwcHJveEZlZSkKICAgICAgICBzZWxmLnNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICAgICAgICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgICAgICkKICAgIH0KCiAgICBwcmUgewogICAgICAgIHNlbGYuc2VudFZhdWx0LmdldFR5cGUoKS5pZGVudGlmaWVyID09IHZhdWx0SWRlbnRpZmllcjoKICAgICAgICAgICAgIkF0dGVtcHRpbmcgdG8gc2VuZCBpbnZhbGlkIHZhdWx0IHR5cGUgLSByZXF1ZXN0ZWQ6ICIuY29uY2F0KHZhdWx0SWRlbnRpZmllcikKICAgICAgICAgICAgLmNvbmNhdCgiLCBzZW5kaW5nOiAiKS5jb25jYXQoc2VsZi5zZW50VmF1bHQuZ2V0VHlwZSgpLmlkZW50aWZpZXIpCiAgICAgICAgc2VsZi5zZW50VmF1bHQuYmFsYW5jZSA9PSBhbW91bnQ6ICJBbW91bnQgdG8gYmUgdHJhbnNmZXJyZWQgZG9lcyBub3QgbWF0Y2ggdGhlIHJlcXVlc3RlZCBhbW91bnQiCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgaWYgc2VsZi5yZXF1aXJlc09uYm9hcmRpbmcgewogICAgICAgICAgICAvLyBPbmJvYXJkIHRoZSBWYXVsdCB0byB0aGUgYnJpZGdlCiAgICAgICAgICAgIEZsb3dFVk1CcmlkZ2Uub25ib2FyZEJ5VHlwZSgKICAgICAgICAgICAgICAgIHNlbGYuc2VudFZhdWx0LmdldFR5cGUoKSwKICAgICAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICAgICAgKQogICAgICAgIH0KICAgICAgICAvLyBFeGVjdXRlIHRoZSBicmlkZ2UgdHJhbnNhY3Rpb24KICAgICAgICBsZXQgcmVjaXBpZW50RVZNQWRkcmVzcyA9IEVWTS5hZGRyZXNzRnJvbVN0cmluZyhyZWNpcGllbnQpCiAgICAgICAgRmxvd0VWTUJyaWRnZS5icmlkZ2VUb2tlbnNUb0VWTSgKICAgICAgICAgICAgdmF1bHQ6IDwtc2VsZi5zZW50VmF1bHQsCiAgICAgICAgICAgIHRvOiByZWNpcGllbnRFVk1BZGRyZXNzLAogICAgICAgICAgICBmZWVQcm92aWRlcjogJnNlbGYuc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgKQogICAgICAgIC8vIERlc3Ryb3kgdGhlIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBkZXN0cm95IHNlbGYuc2NvcGVkUHJvdmlkZXIKICAgIH0KfQ==",
          "bridgeTokensToEvmV2": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgYnJpZGdlVG9rZW5zVG9Fdm1WMiAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweGYyMzNkY2VlODhmZTBhYmUKCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweDE2NTQ2NTMzOTkwNDBhNjEKCmltcG9ydCBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cyBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQoKCmltcG9ydCBTY29wZWRGVFByb3ZpZGVycyBmcm9tIDB4MWU0YWEwYjg3ZDEwYjE0MQoKCmltcG9ydCBFVk0gZnJvbSAweGU0NjdiOWRkMTFmYTAwZGYKCgppbXBvcnQgRmxvd0VWTUJyaWRnZVV0aWxzIGZyb20gMHgxZTRhYTBiODdkMTBiMTQxCgppbXBvcnQgRmxvd0VWTUJyaWRnZSBmcm9tIDB4MWU0YWEwYjg3ZDEwYjE0MQoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweDFlNGFhMGI4N2QxMGIxNDEKCi8vLyBCcmlkZ2VzIGEgVmF1bHQgZnJvbSB0aGUgc2lnbmVyJ3Mgc3RvcmFnZSB0byB0aGUgc2lnbmVyJ3MgQ09BIGluIEVWTS5BY2NvdW50LgovLy8KLy8vIE5PVEU6IFRoaXMgdHJhbnNhY3Rpb24gYWxzbyBvbmJvYXJkcyB0aGUgVmF1bHQgdG8gdGhlIGJyaWRnZSBpZiBuZWNlc3Nhcnkgd2hpY2ggbWF5IGluY3VyIGFkZGl0aW9uYWwgZmVlcwovLy8gICAgIHRoYW4gYnJpZGdpbmcgYW4gYXNzZXQgdGhhdCBoYXMgYWxyZWFkeSBiZWVuIG9uYm9hcmRlZC4KLy8vCi8vLyBAcGFyYW0gdmF1bHRJZGVudGlmaWVyOiBUaGUgQ2FkZW5jZSB0eXBlIGlkZW50aWZpZXIgb2YgdGhlIEZ1bmdpYmxlVG9rZW4gVmF1bHQgdG8gYnJpZGdlCi8vLyAgICAgLSBlLmcuIHZhdWx0LmdldFR5cGUoKS5pZGVudGlmaWVyCi8vLyBAcGFyYW0gYW1vdW50OiBUaGUgYW1vdW50IG9mIHRva2VucyB0byBicmlkZ2UgZnJvbSBFVk0KLy8vCnRyYW5zYWN0aW9uKHZhdWx0SWRlbnRpZmllcjogU3RyaW5nLCBhbW91bnQ6IFVGaXg2NCkgewogICAgbGV0IHNlbnRWYXVsdDogQHtGdW5naWJsZVRva2VuLlZhdWx0fQogICAgbGV0IGNvYTogYXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQKICAgIGxldCByZXF1aXJlc09uYm9hcmRpbmc6IEJvb2wKICAgIGxldCBzY29wZWRQcm92aWRlcjogQFNjb3BlZEZUUHJvdmlkZXJzLlNjb3BlZEZUUHJvdmlkZXIKCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChDb3B5VmFsdWUsIEJvcnJvd1ZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICAvKiAtLS0gUmVmZXJlbmNlIHRoZSBzaWduZXIncyBDYWRlbmNlT3duZWRBY2NvdW50IC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBDT0EKICAgICAgICBzZWxmLmNvYSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEVWTS5CcmlkZ2UpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oZnJvbTogL3N0b3JhZ2UvZXZtKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBDT0EgZnJvbSBwcm92aWRlZCBnYXRld2F5IGFkZHJlc3MiKQoKICAgICAgICAvKiAtLS0gQ29uc3RydWN0IHRoZSBWYXVsdCB0eXBlIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQ29uc3RydWN0IHRoZSBWYXVsdCB0eXBlIGZyb20gdGhlIHByb3ZpZGVkIGlkZW50aWZpZXIKICAgICAgICBsZXQgdmF1bHRUeXBlID0gQ29tcG9zaXRlVHlwZSh2YXVsdElkZW50aWZpZXIpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgY29uc3RydWN0IFZhdWx0IHR5cGUgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdCh2YXVsdElkZW50aWZpZXIpKQogICAgICAgIC8vIFBhcnNlIHRoZSBWYXVsdCBpZGVudGlmaWVyIGludG8gaXRzIGNvbXBvbmVudHMKICAgICAgICBsZXQgdG9rZW5Db250cmFjdEFkZHJlc3MgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3RBZGRyZXNzKGZyb21UeXBlOiB2YXVsdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IGFkZHJlc3MgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdCh2YXVsdElkZW50aWZpZXIpKQogICAgICAgIGxldCB0b2tlbkNvbnRyYWN0TmFtZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdE5hbWUoZnJvbVR5cGU6IHZhdWx0VHlwZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgbmFtZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KHZhdWx0SWRlbnRpZmllcikpCgogICAgICAgIC8qIC0tLSBSZXRyaWV2ZSB0aGUgZnVuZHMgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIEZ1bmdpYmxlVG9rZW4gVmF1bHQKICAgICAgICBsZXQgdmlld1Jlc29sdmVyID0gZ2V0QWNjb3VudCh0b2tlbkNvbnRyYWN0QWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IHRva2VuQ29udHJhY3ROYW1lKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBWaWV3UmVzb2x2ZXIgZnJvbSBGdW5naWJsZVRva2VuIGNvbnRyYWN0IikKICAgICAgICBsZXQgdmF1bHREYXRhID0gdmlld1Jlc29sdmVyLnJlc29sdmVDb250cmFjdFZpZXcoCiAgICAgICAgICAgICAgICByZXNvdXJjZVR5cGU6IHZhdWx0VHlwZSwKICAgICAgICAgICAgICAgIHZpZXdUeXBlOiBUeXBlPEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPigpCiAgICAgICAgICAgICkgYXMhIEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgRlRWYXVsdERhdGEgdmlldyIpCiAgICAgICAgbGV0IHZhdWx0ID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlZhdWx0fT4oCiAgICAgICAgICAgICAgICBmcm9tOiB2YXVsdERhdGEuc3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGFjY2VzcyBzaWduZXIncyBGdW5naWJsZVRva2VuIFZhdWx0IikKCiAgICAgICAgLy8gV2l0aGRyYXcgdGhlIHJlcXVlc3RlZCBiYWxhbmNlICYgY2FsY3VsYXRlIHRoZSBhcHByb3hpbWF0ZSBicmlkZ2UgZmVlIGJhc2VkIG9uIHN0b3JhZ2UgdXNhZ2UKICAgICAgICBsZXQgY3VycmVudFN0b3JhZ2VVc2FnZSA9IHNpZ25lci5zdG9yYWdlLnVzZWQKICAgICAgICBzZWxmLnNlbnRWYXVsdCA8LSB2YXVsdC53aXRoZHJhdyhhbW91bnQ6IGFtb3VudCkKICAgICAgICBsZXQgd2l0aGRyYXduU3RvcmFnZVVzYWdlID0gc2lnbmVyLnN0b3JhZ2UudXNlZAogICAgICAgIC8vIEFwcHJveGltYXRlIHRoZSBicmlkZ2UgZmVlIGJhc2VkIG9uIHRoZSBkaWZmZXJlbmNlIGluIHN0b3JhZ2UgdXNhZ2Ugd2l0aCBzb21lIGJ1ZmZlcgogICAgICAgIHZhciBhcHByb3hGZWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuY2FsY3VsYXRlQnJpZGdlRmVlKAogICAgICAgICAgICAgICAgYnl0ZXM6IGN1cnJlbnRTdG9yYWdlVXNhZ2UgLSB3aXRoZHJhd25TdG9yYWdlVXNhZ2UKICAgICAgICAgICAgKSAqIDEuMTAKICAgICAgICAvLyBEZXRlcm1pbmUgaWYgdGhlIFZhdWx0IHJlcXVpcmVzIG9uYm9hcmRpbmcgLSB0aGlzIGltcGFjdHMgdGhlIGZlZSByZXF1aXJlZAogICAgICAgIHNlbGYucmVxdWlyZXNPbmJvYXJkaW5nID0gRmxvd0VWTUJyaWRnZS50eXBlUmVxdWlyZXNPbmJvYXJkaW5nKHNlbGYuc2VudFZhdWx0LmdldFR5cGUoKSkKICAgICAgICAgICAgPz8gcGFuaWMoIkJyaWRnZSBkb2VzIG5vdCBzdXBwb3J0IHRoaXMgYXNzZXQgdHlwZSIpCiAgICAgICAgaWYgc2VsZi5yZXF1aXJlc09uYm9hcmRpbmcgewogICAgICAgICAgICBhcHByb3hGZWUgPSBhcHByb3hGZWUgKyBGbG93RVZNQnJpZGdlQ29uZmlnLm9uYm9hcmRGZWUKICAgICAgICB9CgogICAgICAgIC8qIC0tLSBDb25maWd1cmUgYSBTY29wZWRGVFByb3ZpZGVyIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gSXNzdWUgYW5kIHN0b3JlIGJyaWRnZS1kZWRpY2F0ZWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBpbiBzdG9yYWdlIGlmIG5lY2Vzc2FyeQogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLnR5cGUoYXQ6IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIGxldCBwcm92aWRlckNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KAogICAgICAgICAgICAgICAgL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgICAgICAgKQogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKHByb3ZpZGVyQ2FwLCB0bzogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkKICAgICAgICB9CiAgICAgICAgLy8gQ29weSB0aGUgc3RvcmVkIFByb3ZpZGVyIGNhcGFiaWxpdHkgYW5kIGNyZWF0ZSBhIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBsZXQgcHJvdmlkZXJDYXBDb3B5ID0gc2lnbmVyLnN0b3JhZ2UuY29weTxDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4+KAogICAgICAgICAgICAgICAgZnJvbTogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJJbnZhbGlkIFByb3ZpZGVyIENhcGFiaWxpdHkgZm91bmQgaW4gc3RvcmFnZS4iKQogICAgICAgIGxldCBwcm92aWRlckZpbHRlciA9IFNjb3BlZEZUUHJvdmlkZXJzLkFsbG93YW5jZUZpbHRlcihhcHByb3hGZWUpCiAgICAgICAgc2VsZi5zY29wZWRQcm92aWRlciA8LSBTY29wZWRGVFByb3ZpZGVycy5jcmVhdGVTY29wZWRGVFByb3ZpZGVyKAogICAgICAgICAgICAgICAgcHJvdmlkZXI6IHByb3ZpZGVyQ2FwQ29weSwKICAgICAgICAgICAgICAgIGZpbHRlcnM6IFsgcHJvdmlkZXJGaWx0ZXIgXSwKICAgICAgICAgICAgICAgIGV4cGlyYXRpb246IGdldEN1cnJlbnRCbG9jaygpLnRpbWVzdGFtcCArIDEuMAogICAgICAgICAgICApCiAgICB9CgogICAgcHJlIHsKICAgICAgICBzZWxmLnNlbnRWYXVsdC5nZXRUeXBlKCkuaWRlbnRpZmllciA9PSB2YXVsdElkZW50aWZpZXI6CiAgICAgICAgICAgICJBdHRlbXB0aW5nIHRvIHNlbmQgaW52YWxpZCB2YXVsdCB0eXBlIC0gcmVxdWVzdGVkOiAiLmNvbmNhdCh2YXVsdElkZW50aWZpZXIpCiAgICAgICAgICAgIC5jb25jYXQoIiwgc2VuZGluZzogIikuY29uY2F0KHNlbGYuc2VudFZhdWx0LmdldFR5cGUoKS5pZGVudGlmaWVyKQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIGlmIHNlbGYucmVxdWlyZXNPbmJvYXJkaW5nIHsKICAgICAgICAgICAgLy8gT25ib2FyZCB0aGUgVmF1bHQgdG8gdGhlIGJyaWRnZQogICAgICAgICAgICBGbG93RVZNQnJpZGdlLm9uYm9hcmRCeVR5cGUoCiAgICAgICAgICAgICAgICBzZWxmLnNlbnRWYXVsdC5nZXRUeXBlKCksCiAgICAgICAgICAgICAgICBmZWVQcm92aWRlcjogJnNlbGYuc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgICAgICkKICAgICAgICB9CiAgICAgICAgLy8gRXhlY3V0ZSB0aGUgYnJpZGdlCiAgICAgICAgc2VsZi5jb2EuZGVwb3NpdFRva2VucygKICAgICAgICAgICAgdmF1bHQ6IDwtc2VsZi5zZW50VmF1bHQsCiAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICApCiAgICAgICAgLy8gRGVzdHJveSB0aGUgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGRlc3Ryb3kgc2VsZi5zY29wZWRQcm92aWRlcgogICAgfQp9",
          "calculateBridgeFee": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgY2FsY3VsYXRlQnJpZGdlRmVlIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRmxvd0VWTUJyaWRnZVV0aWxzIGZyb20gMHgxZTRhYTBiODdkMTBiMTQxCgoKLy8vIFJldHVybnMgdGhlIGNhbGN1bGF0ZWQgZmVlIGJhc2VkIG9uIHRoZSBudW1iZXIgb2YgYnl0ZXMgdXNlZCB0byBlc2Nyb3cgYW4gYXNzZXQgcGx1cyB0aGUgYmFzZSBmZWUuCi8vLwovLy8gQHBhcmFtIGJ5dGVzOiBUaGUgbnVtYmVyIG9mIGJ5dGVzIHVzZWQgdG8gZXNjcm93IGFuIGFzc2V0LgovLy8KLy8vIEByZXR1cm4gVGhlIGNhbGN1bGF0ZWQgZmVlIHRvIGJlIHBhaWQgaW4gRmxvd1Rva2VuCi8vLwphY2Nlc3MoYWxsKQpmdW4gbWFpbihieXRlcyB1c2VkOiBVSW50NjQpOiBVRml4NjQgewogICAgcmV0dXJuIEZsb3dFVk1CcmlkZ2VVdGlscy5jYWxjdWxhdGVCcmlkZ2VGZWUoYnl0ZXM6IHVzZWQpCn0K",
          "evmAddressRequiresOnboarding": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZXZtQWRkcmVzc1JlcXVpcmVzT25ib2FyZGluZyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEVWTVV0aWxzIGZyb20gMHgxZTRhYTBiODdkMTBiMTQxCgppbXBvcnQgRmxvd0VWTUJyaWRnZSBmcm9tIDB4MWU0YWEwYjg3ZDEwYjE0MQoKCi8vLyBSZXR1cm5zIHdoZXRoZXIgYSBFVk0gY29udHJhY3QgbmVlZHMgdG8gYmUgb25ib2FyZGVkIHRvIHRoZSBGbG93RVZNQnJpZGdlCi8vLwovLy8gQHBhcmFtIGV2bUFkZHJlc3NIZXg6IFRoZSBoZXgtZW5jb2RlZCBhZGRyZXNzIG9mIHRoZSBFVk0gY29udHJhY3QgYXMgYSBTdHJpbmcgd2l0aG91dCAweCBwcmVmaXgKLy8vCi8vLyBAcmV0dXJuIFdoZXRoZXIgdGhlIGNvbnRyYWN0IHJlcXVpcmVzIG9uYm9hcmRpbmcgdG8gdGhlIEZsb3dFVk1CcmlkZ2UgaWYgdGhlIHR5cGUgaXMgYnJpZGdlYWJsZSwgb3RoZXJ3aXNlIG5pbAovLy8KYWNjZXNzKGFsbCkgZnVuIG1haW4oZXZtQWRkcmVzc0hleDogU3RyaW5nKTogQm9vbD8gewogICAgaWYgbGV0IGFkZHJlc3MgPSBFVk1VdGlscy5nZXRFVk1BZGRyZXNzRnJvbUhleFN0cmluZyhhZGRyZXNzOiBldm1BZGRyZXNzSGV4KSB7CiAgICAgICAgcmV0dXJuIEZsb3dFVk1CcmlkZ2UuZXZtQWRkcmVzc1JlcXVpcmVzT25ib2FyZGluZyhhZGRyZXNzKQogICAgfQogICAgcmV0dXJuIG5pbAp9Cg==",
          "getAssociatedEvmAddress": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0QXNzb2NpYXRlZEV2bUFkZHJlc3MgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBFVk0gZnJvbSAweGU0NjdiOWRkMTFmYTAwZGYKCgppbXBvcnQgRVZNVXRpbHMgZnJvbSAweDFlNGFhMGI4N2QxMGIxNDEKCmltcG9ydCBGbG93RVZNQnJpZGdlQ29uZmlnIGZyb20gMHgxZTRhYTBiODdkMTBiMTQxCgoKLy8vIFJldHVybnMgdGhlIEVWTSBhZGRyZXNzIGFzc29jaWF0ZWQgd2l0aCB0aGUgZ2l2ZW4gQ2FkZW5jZSB0eXBlIChhcyBpdHMgaWRlbnRpZmllciBTdHJpbmcpCi8vLwovLy8gQHBhcmFtIHR5cGVJZGVudGlmaWVyIFRoZSBDYWRlbmNlIHR5cGUgaWRlbnRpZmllciBTdHJpbmcKLy8vCi8vLyBAcmV0dXJuIFRoZSBFVk0gYWRkcmVzcyBhcyBhIGhleCBzdHJpbmcgaWYgdGhlIHR5cGUgaGFzIGFuIGFzc29jaWF0ZWQgRVZNQWRkcmVzcywgb3RoZXJ3aXNlIG5pbAovLy8KYWNjZXNzKGFsbCkKZnVuIG1haW4oaWRlbnRpZmllcjogU3RyaW5nKTogU3RyaW5nPyB7CiAgICBpZiBsZXQgdHlwZSA9IENvbXBvc2l0ZVR5cGUoaWRlbnRpZmllcikgewogICAgICAgIGlmIGxldCBhZGRyZXNzID0gRmxvd0VWTUJyaWRnZUNvbmZpZy5nZXRFVk1BZGRyZXNzQXNzb2NpYXRlZCh3aXRoOiB0eXBlKSB7CiAgICAgICAgICAgIHJldHVybiBFVk1VdGlscy5nZXRFVk1BZGRyZXNzQXNIZXhTdHJpbmcoYWRkcmVzczogYWRkcmVzcykKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gbmlsCn0=",
          "getAssociatedFlowIdentifier": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0QXNzb2NpYXRlZEZsb3dJZGVudGlmaWVyIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRVZNIGZyb20gMHhlNDY3YjlkZDExZmEwMGRmCgppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4MWU0YWEwYjg3ZDEwYjE0MQoKCmFjY2VzcyhhbGwpCmZ1biBtYWluKGFkZHJlc3M6IFN0cmluZyk6IFN0cmluZz8gewogICAgaWYgbGV0IHR5cGVJbmZvID0gRmxvd0VWTUJyaWRnZUNvbmZpZy5nZXRUeXBlQXNzb2NpYXRlZCh3aXRoOiBFVk0uYWRkcmVzc0Zyb21TdHJpbmcoYWRkcmVzcykpIHsKICAgICAgICByZXR1cm4gdHlwZUluZm8uaWRlbnRpZmllcgogICAgfQogICAgcmV0dXJuIG5pbAp9",
          "getBridgeCoaAddress": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0QnJpZGdlQ29hQWRkcmVzcyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEVWTSBmcm9tIDB4ZTQ2N2I5ZGQxMWZhMDBkZgoKCmltcG9ydCBFVk1VdGlscyBmcm9tIDB4MWU0YWEwYjg3ZDEwYjE0MQoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweDFlNGFhMGI4N2QxMGIxNDEKCgovLy8gUmV0dXJucyB0aGUgRVZNIGFkZHJlc3MgYXNzb2NpYXRlZCB3aXRoIHRoZSBGbG93RVZNQnJpZGdlCi8vLwovLy8gQHJldHVybiBUaGUgRVZNIGFkZHJlc3MgYXNzb2NpYXRlZCB3aXRoIHRoZSBGbG93RVZNQnJpZGdlJ3MgY29vcmRpbmF0aW5nIENhZGVuY2VPd25lZEFjY291bnQKLy8vCmFjY2VzcyhhbGwpIGZ1biBtYWluKCk6IFN0cmluZyB7CiAgICBsZXQgYWRkcmVzczogRVZNLkVWTUFkZHJlc3MgPSBGbG93RVZNQnJpZGdlLmdldEJyaWRnZUNPQUVWTUFkZHJlc3MoKQogICAgcmV0dXJuIEVWTVV0aWxzLmdldEVWTUFkZHJlc3NBc0hleFN0cmluZyhhZGRyZXNzOiBhZGRyZXNzKQp9",
          "onboardByEvmAddress": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgb25ib2FyZEJ5RXZtQWRkcmVzcyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweGYyMzNkY2VlODhmZTBhYmUKCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweDE2NTQ2NTMzOTkwNDBhNjEKCgppbXBvcnQgU2NvcGVkRlRQcm92aWRlcnMgZnJvbSAweDFlNGFhMGI4N2QxMGIxNDEKCgppbXBvcnQgRVZNIGZyb20gMHhlNDY3YjlkZDExZmEwMGRmCgoKaW1wb3J0IEVWTVV0aWxzIGZyb20gMHgxZTRhYTBiODdkMTBiMTQxCgppbXBvcnQgRmxvd0VWTUJyaWRnZSBmcm9tIDB4MWU0YWEwYjg3ZDEwYjE0MQoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweDFlNGFhMGI4N2QxMGIxNDEKCgovLy8gVGhpcyB0cmFuc2FjdGlvbiBvbmJvYXJkcyB0aGUgTkZUIHR5cGUgdG8gdGhlIGJyaWRnZSwgY29uZmlndXJpbmcgdGhlIGJyaWRnZSB0byBtb3ZlIE5GVHMgYmV0d2VlbiBlbnZpcm9ubWVudHMKLy8vIE5PVEU6IFRoaXMgbXVzdCBiZSBkb25lIGJlZm9yZSBicmlkZ2luZyBhIENhZGVuY2UtbmF0aXZlIE5GVCB0byBFVk0KLy8vCi8vLyBAcGFyYW0gY29udHJhY3RBZGRyZXNzSGV4OiBUaGUgRVZNIGFkZHJlc3Mgb2YgdGhlIGNvbnRyYWN0IChhcyBoZXggc3RyaW5nIHdpdGhvdXQgMHggcHJlZml4KSBkZWZpbmluZyB0aGUgCi8vLyAgICAgYnJpZGdlYWJsZSBhc3NldCB0byBiZSBvbmJvYXJkZWQKLy8vCnRyYW5zYWN0aW9uKGNvbnRyYWN0QWRkcmVzc0hleDogU3RyaW5nKSB7CgogICAgbGV0IGNvbnRyYWN0QWRkcmVzczogRVZNLkVWTUFkZHJlc3MKICAgIGxldCBzY29wZWRQcm92aWRlcjogQFNjb3BlZEZUUHJvdmlkZXJzLlNjb3BlZEZUUHJvdmlkZXIKICAgIAogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQ29weVZhbHVlLCBCb3Jyb3dWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgLyogLS0tIENvbnN0cnVjdCBFVk1BZGRyZXNzIGZyb20gaGV4IHN0cmluZyAobm8gbGVhZGluZyBgIjB4ImApIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgc2VsZi5jb250cmFjdEFkZHJlc3MgPSBFVk1VdGlscy5nZXRFVk1BZGRyZXNzRnJvbUhleFN0cmluZyhhZGRyZXNzOiBjb250cmFjdEFkZHJlc3NIZXgpCiAgICAgICAgICAgID8/IHBhbmljKCJJbnZhbGlkIEVWTSBhZGRyZXNzIHN0cmluZyBwcm92aWRlZCIpCgogICAgICAgIC8qIC0tLSBDb25maWd1cmUgYSBTY29wZWRGVFByb3ZpZGVyIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gSXNzdWUgYW5kIHN0b3JlIGJyaWRnZS1kZWRpY2F0ZWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBpbiBzdG9yYWdlIGlmIG5lY2Vzc2FyeQogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLnR5cGUoYXQ6IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIGxldCBwcm92aWRlckNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KAogICAgICAgICAgICAgICAgL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgICAgICAgKQogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKHByb3ZpZGVyQ2FwLCB0bzogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkKICAgICAgICB9CiAgICAgICAgLy8gQ29weSB0aGUgc3RvcmVkIFByb3ZpZGVyIGNhcGFiaWxpdHkgYW5kIGNyZWF0ZSBhIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBsZXQgcHJvdmlkZXJDYXBDb3B5ID0gc2lnbmVyLnN0b3JhZ2UuY29weTxDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4+KAogICAgICAgICAgICAgICAgZnJvbTogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJJbnZhbGlkIFByb3ZpZGVyIENhcGFiaWxpdHkgZm91bmQgaW4gc3RvcmFnZS4iKQogICAgICAgIGxldCBwcm92aWRlckZpbHRlciA9IFNjb3BlZEZUUHJvdmlkZXJzLkFsbG93YW5jZUZpbHRlcihGbG93RVZNQnJpZGdlQ29uZmlnLm9uYm9hcmRGZWUpCiAgICAgICAgc2VsZi5zY29wZWRQcm92aWRlciA8LSBTY29wZWRGVFByb3ZpZGVycy5jcmVhdGVTY29wZWRGVFByb3ZpZGVyKAogICAgICAgICAgICAgICAgcHJvdmlkZXI6IHByb3ZpZGVyQ2FwQ29weSwKICAgICAgICAgICAgICAgIGZpbHRlcnM6IFsgcHJvdmlkZXJGaWx0ZXIgXSwKICAgICAgICAgICAgICAgIGV4cGlyYXRpb246IGdldEN1cnJlbnRCbG9jaygpLnRpbWVzdGFtcCArIDEuMAogICAgICAgICAgICApCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgLy8gT25ib2FyZCB0aGUgRVZNIGNvbnRyYWN0CiAgICAgICAgRmxvd0VWTUJyaWRnZS5vbmJvYXJkQnlFVk1BZGRyZXNzKAogICAgICAgICAgICBzZWxmLmNvbnRyYWN0QWRkcmVzcywKICAgICAgICAgICAgZmVlUHJvdmlkZXI6ICZzZWxmLnNjb3BlZFByb3ZpZGVyIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfQogICAgICAgICkKICAgICAgICBkZXN0cm95IHNlbGYuc2NvcGVkUHJvdmlkZXIKICAgIH0KfQo=",
          "onboardByType": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgb25ib2FyZEJ5VHlwZSAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweGYyMzNkY2VlODhmZTBhYmUKCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweDE2NTQ2NTMzOTkwNDBhNjEKCgppbXBvcnQgU2NvcGVkRlRQcm92aWRlcnMgZnJvbSAweDFlNGFhMGI4N2QxMGIxNDEKCgppbXBvcnQgRVZNIGZyb20gMHhlNDY3YjlkZDExZmEwMGRmCgoKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweDFlNGFhMGI4N2QxMGIxNDEKCmltcG9ydCBGbG93RVZNQnJpZGdlQ29uZmlnIGZyb20gMHgxZTRhYTBiODdkMTBiMTQxCgoKLy8vIFRoaXMgdHJhbnNhY3Rpb24gb25ib2FyZHMgdGhlIGFzc2V0IHR5cGUgdG8gdGhlIGJyaWRnZSwgY29uZmlndXJpbmcgdGhlIGJyaWRnZSB0byBtb3ZlIGFzc2V0cyBiZXR3ZWVuIGVudmlyb25tZW50cwovLy8gTk9URTogVGhpcyBtdXN0IGJlIGRvbmUgYmVmb3JlIGJyaWRnaW5nIGEgQ2FkZW5jZS1uYXRpdmUgYXNzZXQgdG8gRVZNCi8vLwovLy8gQHBhcmFtIHR5cGU6IFRoZSBDYWRlbmNlIHR5cGUgb2YgdGhlIGJyaWRnZWFibGUgYXNzZXQgdG8gb25ib2FyZCB0byB0aGUgYnJpZGdlCi8vLwp0cmFuc2FjdGlvbih0eXBlOiBUeXBlKSB7CgogICAgbGV0IHNjb3BlZFByb3ZpZGVyOiBAU2NvcGVkRlRQcm92aWRlcnMuU2NvcGVkRlRQcm92aWRlcgogICAgCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChDb3B5VmFsdWUsIEJvcnJvd1ZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsKCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApCiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICAgIH0KICAgICAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkludmFsaWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBmb3VuZCBpbiBzdG9yYWdlLiIpCiAgICAgICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKEZsb3dFVk1CcmlkZ2VDb25maWcub25ib2FyZEZlZSkKICAgICAgICBzZWxmLnNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICAgICAgICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgICAgICkKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICAvLyBPbmJvYXJkIHRoZSBhc3NldCBUeXBlCiAgICAgICAgRmxvd0VWTUJyaWRnZS5vbmJvYXJkQnlUeXBlKAogICAgICAgICAgICB0eXBlLAogICAgICAgICAgICBmZWVQcm92aWRlcjogJnNlbGYuc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgKQogICAgICAgIGRlc3Ryb3kgc2VsZi5zY29wZWRQcm92aWRlcgogICAgfQp9Cg==",
          "onboardByTypeIdentifier": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgb25ib2FyZEJ5VHlwZUlkZW50aWZpZXIgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhmMjMzZGNlZTg4ZmUwYWJlCgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHgxNjU0NjUzMzk5MDQwYTYxCgoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHgxZTRhYTBiODdkMTBiMTQxCgoKaW1wb3J0IEVWTSBmcm9tIDB4ZTQ2N2I5ZGQxMWZhMDBkZgoKCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHgxZTRhYTBiODdkMTBiMTQxCgppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4MWU0YWEwYjg3ZDEwYjE0MQoKCi8vLyBUaGlzIHRyYW5zYWN0aW9uIG9uYm9hcmRzIHRoZSBhc3NldCB0eXBlIHRvIHRoZSBicmlkZ2UsIGNvbmZpZ3VyaW5nIHRoZSBicmlkZ2UgdG8gbW92ZSBhc3NldHMgYmV0d2VlbiBlbnZpcm9ubWVudHMKLy8vIE5PVEU6IFRoaXMgbXVzdCBiZSBkb25lIGJlZm9yZSBicmlkZ2luZyBhIENhZGVuY2UtbmF0aXZlIGFzc2V0IHRvIEVWTQovLy8KLy8vIEBwYXJhbSBpZGVudGlmZXI6IFRoZSBDYWRlbmNlIHR5cGUgaWRlbnRpZmllciBvZiB0aGUgYnJpZGdlYWJsZSBhc3NldCB0byBvbmJvYXJkZWQgdG8gdGhlIGJyaWRnZQovLy8KdHJhbnNhY3Rpb24oaWRlbnRpZmllcjogU3RyaW5nKSB7CgogICAgbGV0IHR5cGU6IFR5cGUKICAgIGxldCBzY29wZWRQcm92aWRlcjogQFNjb3BlZEZUUHJvdmlkZXJzLlNjb3BlZEZUUHJvdmlkZXIKICAgIAogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQ29weVZhbHVlLCBCb3Jyb3dWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgLyogLS0tIENvbnN0cnVjdCB0aGUgdHlwZSBmcm9tIGlkZW50aWZpZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICBzZWxmLnR5cGUgPSBDb21wb3NpdGVUeXBlKGlkZW50aWZpZXIpID8/IHBhbmljKCJJbnZhbGlkIHR5cGUgaWRlbnRpZmllciIpCgogICAgICAgIC8qIC0tLSBDb25maWd1cmUgYSBTY29wZWRGVFByb3ZpZGVyIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gSXNzdWUgYW5kIHN0b3JlIGJyaWRnZS1kZWRpY2F0ZWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBpbiBzdG9yYWdlIGlmIG5lY2Vzc2FyeQogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLnR5cGUoYXQ6IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIGxldCBwcm92aWRlckNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KAogICAgICAgICAgICAgICAgL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgICAgICAgKQogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKHByb3ZpZGVyQ2FwLCB0bzogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkKICAgICAgICB9CiAgICAgICAgLy8gQ29weSB0aGUgc3RvcmVkIFByb3ZpZGVyIGNhcGFiaWxpdHkgYW5kIGNyZWF0ZSBhIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBsZXQgcHJvdmlkZXJDYXBDb3B5ID0gc2lnbmVyLnN0b3JhZ2UuY29weTxDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4+KAogICAgICAgICAgICAgICAgZnJvbTogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJJbnZhbGlkIFByb3ZpZGVyIENhcGFiaWxpdHkgZm91bmQgaW4gc3RvcmFnZS4iKQogICAgICAgIGxldCBwcm92aWRlckZpbHRlciA9IFNjb3BlZEZUUHJvdmlkZXJzLkFsbG93YW5jZUZpbHRlcihGbG93RVZNQnJpZGdlQ29uZmlnLm9uYm9hcmRGZWUpCiAgICAgICAgc2VsZi5zY29wZWRQcm92aWRlciA8LSBTY29wZWRGVFByb3ZpZGVycy5jcmVhdGVTY29wZWRGVFByb3ZpZGVyKAogICAgICAgICAgICAgICAgcHJvdmlkZXI6IHByb3ZpZGVyQ2FwQ29weSwKICAgICAgICAgICAgICAgIGZpbHRlcnM6IFsgcHJvdmlkZXJGaWx0ZXIgXSwKICAgICAgICAgICAgICAgIGV4cGlyYXRpb246IGdldEN1cnJlbnRCbG9jaygpLnRpbWVzdGFtcCArIDEuMAogICAgICAgICAgICApCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgLy8gT25ib2FyZCB0aGUgYXNzZXQgVHlwZQogICAgICAgIEZsb3dFVk1CcmlkZ2Uub25ib2FyZEJ5VHlwZSgKICAgICAgICAgICAgc2VsZi50eXBlLAogICAgICAgICAgICBmZWVQcm92aWRlcjogJnNlbGYuc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgKQogICAgICAgIGRlc3Ryb3kgc2VsZi5zY29wZWRQcm92aWRlcgogICAgfQp9Cg==",
          "typeRequiresOnboarding": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgdHlwZVJlcXVpcmVzT25ib2FyZGluZyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweDFlNGFhMGI4N2QxMGIxNDEKCgovLy8gUmV0dXJucyB3aGV0aGVyIGEgdHlwZSBuZWVkcyB0byBiZSBvbmJvYXJkZWQgdG8gdGhlIEZsb3dFVk1CcmlkZ2UKLy8vCi8vLyBAcGFyYW0gdHlwZTogVGhlIENhZGVuY2UgVHlwZSBpbiBxdWVzdGlvbgovLy8KLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHlwZSByZXF1aXJlcyBvbmJvYXJkaW5nIHRvIHRoZSBGbG93RVZNQnJpZGdlIGlmIHRoZSB0eXBlIGlzIGJyaWRnZWFibGUsIG90aGVyd2lzZSBuaWwKLy8vCmFjY2VzcyhhbGwpIGZ1biBtYWluKHR5cGU6IFR5cGUpOiBCb29sPyB7CiAgICByZXR1cm4gRmxvd0VWTUJyaWRnZS50eXBlUmVxdWlyZXNPbmJvYXJkaW5nKHR5cGUpCn0K",
          "typeRequiresOnboardingByIdentifier": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgdHlwZVJlcXVpcmVzT25ib2FyZGluZ0J5SWRlbnRpZmllciAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweDFlNGFhMGI4N2QxMGIxNDEKCgovLy8gUmV0dXJucyB3aGV0aGVyIGEgdHlwZSBuZWVkcyB0byBiZSBvbmJvYXJkZWQgdG8gdGhlIEZsb3dFVk1CcmlkZ2UKLy8vCi8vLyBAcGFyYW0gaWRlbnRpZmllcjogVGhlIGlkZW50aWZpZXIgb2YgdGhlIENhZGVuY2UgVHlwZSBpbiBxdWVzdGlvbgovLy8KLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHlwZSByZXF1aXJlcyBvbmJvYXJkaW5nIHRvIHRoZSBGbG93RVZNQnJpZGdlIGlmIHRoZSB0eXBlIGlzIGJyaWRnZWFibGUsIG90aGVyd2lzZSBuaWwKLy8vCmFjY2VzcyhhbGwpIGZ1biBtYWluKGlkZW50aWZpZXI6IFN0cmluZyk6IEJvb2w/IHsKICAgIGlmIGxldCB0eXBlID0gQ29tcG9zaXRlVHlwZShpZGVudGlmaWVyKSB7CiAgICAgICAgcmV0dXJuIEZsb3dFVk1CcmlkZ2UudHlwZVJlcXVpcmVzT25ib2FyZGluZyh0eXBlKQogICAgfQogICAgcmV0dXJuIG5pbAp9Cg=="
        },
        "collection": {
          "checkNFTCollection": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgY2hlY2tORlRDb2xsZWN0aW9uIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgogICAgaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCiAgICBpbXBvcnQgPE5GVD4gZnJvbSA8TkZUQWRkcmVzcz4KCiAgICAvLyBUaGlzIHRyYW5zYWN0aW9uIGlzIGZvciB0cmFuc2ZlcnJpbmcgYW5kIE5GVCBmcm9tCiAgICAvLyBvbmUgYWNjb3VudCB0byBhbm90aGVyCgogICAgYWNjZXNzKGFsbCkgZnVuIGNoZWNrPFRva2VuPlZhdWx0KGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgICAgICAgbGV0IHZhdWx0UmVmID0gYWNjb3VudC5jYXBhYmlsaXRpZXMuZXhpc3QoPFRva2VuQ29sbGVjdGlvblB1YmxpY1BhdGg+KQogICAgICAgIHJldHVybiB2YXVsdFJlZgogICAgfQoKICAgIGFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgICAgcmV0dXJuIGNoZWNrPFRva2VuPlZhdWx0KGFkZHJlc3M6IGFkZHJlc3MpCiAgICB9",
          "enableNFTStorage": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZW5hYmxlTkZUU3RvcmFnZSAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgppbXBvcnQgPE5GVD4gZnJvbSA8TkZUQWRkcmVzcz4KCnRyYW5zYWN0aW9uIHsKCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChDYXBhYmlsaXRpZXMsIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICBpZiBzaWduZXIuY2FwYWJpbGl0aWVzLmJvcnJvdzwmPE5GVD4uQ29sbGVjdGlvbj4oPENvbGxlY3Rpb25QdWJsaWNQYXRoPikgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IGNvbGxlY3Rpb24gPC0gPE5GVD4uY3JlYXRlRW1wdHlDb2xsZWN0aW9uKG5mdFR5cGU6IFR5cGU8QDxORlQ+Lk5GVD4oKSkKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZSg8LWNvbGxlY3Rpb24sIHRvOiA8Q29sbGVjdGlvblN0b3JhZ2VQYXRoPikKICAgICAgICB9CiAgICAgICAgaWYgKHNpZ25lci5jYXBhYmlsaXRpZXMuYm9ycm93PCY8TkZUPi5Db2xsZWN0aW9uPig8Q29sbGVjdGlvblB1YmxpY1BhdGg+KSA9PSBuaWwpIHsKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy51bnB1Ymxpc2goPENvbGxlY3Rpb25QdWJsaWNQYXRoPikKICAgICAgICAgICAgbGV0IGNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwmPE5GVD4uQ29sbGVjdGlvbj4oPENvbGxlY3Rpb25TdG9yYWdlUGF0aD4pICAgICAgICAgICAgCiAgICAgICAgICAgIHNpZ25lci5jYXBhYmlsaXRpZXMucHVibGlzaChjYXAsIGF0OiA8Q29sbGVjdGlvblB1YmxpY1BhdGg+KQoKICAgICAgICB9CiAgICB9Cn0=",
          "getCatalogTypeData": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0Q2F0YWxvZ1R5cGVEYXRhIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgTkZUQ2F0YWxvZyBmcm9tIDB4TkZUQ2F0YWxvZwoKYWNjZXNzKGFsbCkgZnVuIG1haW4oKToge1N0cmluZyA6IHtTdHJpbmcgOiBCb29sfX0gewogIGxldCBjYXRhbG9nID0gTkZUQ2F0YWxvZy5nZXRDYXRhbG9nVHlwZURhdGEoKQogIHJldHVybiBjYXRhbG9nCn0=",
          "getNFT": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0TkZUIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCgoKYWNjZXNzKGFsbCkgc3RydWN0IFZpZXdJbmZvIHsKICBhY2Nlc3MoYWxsKSBsZXQgbmFtZTogU3RyaW5nCiAgYWNjZXNzKGFsbCkgbGV0IGRlc2NyaXB0aW9uOiBTdHJpbmcKICBhY2Nlc3MoYWxsKSBsZXQgdGh1bWJuYWlsOiB7TWV0YWRhdGFWaWV3cy5GaWxlfQogIGFjY2VzcyhhbGwpIGxldCByYXJpdHk6IFN0cmluZz8KCiAgaW5pdChuYW1lOiBTdHJpbmcsIGRlc2NyaXB0aW9uOiBTdHJpbmcsIHRodW1ibmFpbDoge01ldGFkYXRhVmlld3MuRmlsZX0sIHJhcml0eTogU3RyaW5nPykgewogICAgc2VsZi5uYW1lID0gbmFtZQogICAgc2VsZi5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uCiAgICBzZWxmLnRodW1ibmFpbCA9IHRodW1ibmFpbAogICAgc2VsZi5yYXJpdHkgPSByYXJpdHkKICB9Cn0KCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MsIHBhdGhJZDogU3RyaW5nLCB0b2tlbklEczogW1VJbnQ2NF0pOiB7VUludDY0OiBWaWV3SW5mb30gewogIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogIGxldCByZXM6IHtVSW50NjQ6IFZpZXdJbmZvfSA9IHt9CiAgdmFyIGNvbGxlY3Rpb25EaXNwbGF5RmV0Y2hlZCA9IGZhbHNlCgogIGlmIHRva2VuSURzLmxlbmd0aCA9PSAwIHsKICAgIHJldHVybiByZXMKICB9CgogIGxldCBzdG9yYWdlUGF0aCA9IFN0b3JhZ2VQYXRoKGlkZW50aWZpZXI6IHBhdGhJZCkhCiAgbGV0IHB1YmxpY1BhdGggPSBQdWJsaWNQYXRoKGlkZW50aWZpZXI6IHBhdGhJZCkhCiAgbGV0IHR5cGUgPSBhY2NvdW50LnN0b3JhZ2UudHlwZShhdDogc3RvcmFnZVBhdGgpCiAgaWYgdHlwZSA9PSBuaWwgewogICAgcmV0dXJuIHJlcwogIH0KCiAgbGV0IG1ldGFkYXRhVmlld1R5cGUgPSBUeXBlPEB7Vmlld1Jlc29sdmVyLlJlc29sdmVyQ29sbGVjdGlvbn0+KCkKCiAgbGV0IGNvbmZvcm1lZE1ldGFkYXRhVmlld3MgPSB0eXBlIS5pc1N1YnR5cGUob2Y6IG1ldGFkYXRhVmlld1R5cGUpCiAgaWYgIWNvbmZvcm1lZE1ldGFkYXRhVmlld3MgewogICAgZm9yIHRva2VuSUQgaW4gdG9rZW5JRHMgewogICAgICByZXNbdG9rZW5JRF0gPSBWaWV3SW5mbygKICAgICAgICBuYW1lOiBwYXRoSWQsCiAgICAgICAgZGVzY3JpcHRpb246ICIiLAogICAgICAgIHRodW1ibmFpbDogTWV0YWRhdGFWaWV3cy5IVFRQRmlsZSh1cmw6ICIiKSwKICAgICAgICByYXJpdHk6IG5pbAogICAgICApCiAgICB9CiAgICByZXR1cm4gcmVzCiAgfQoKICBsZXQgY29sbGVjdGlvblJlZiA9IGFjY291bnQuY2FwYWJpbGl0aWVzLmJvcnJvdzwme1ZpZXdSZXNvbHZlci5SZXNvbHZlckNvbGxlY3Rpb24sIE5vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KHB1YmxpY1BhdGgpCiAgZm9yIHRva2VuSUQgaW4gdG9rZW5JRHMgewogICAgbGV0IHJlc29sdmVyID0gY29sbGVjdGlvblJlZiEuYm9ycm93Vmlld1Jlc29sdmVyKGlkOiB0b2tlbklEKQogICAgaWYgcmVzb2x2ZXIgIT0gbmlsIHsKICAgICAgIGlmIGxldCBkaXNwbGF5ID0gTWV0YWRhdGFWaWV3cy5nZXREaXNwbGF5KHJlc29sdmVyISkgewogICAgICAgIHZhciByYXJpdHlEZXNjOiBTdHJpbmc/ID0gbmlsCiAgICAgICAgaWYgbGV0IHJhcml0eVZpZXcgPSBNZXRhZGF0YVZpZXdzLmdldFJhcml0eShyZXNvbHZlciEpIHsKICAgICAgICAgIHJhcml0eURlc2MgPSByYXJpdHlWaWV3LmRlc2NyaXB0aW9uCiAgICAgICAgfQoKICAgICAgICByZXNbdG9rZW5JRF0gPSBWaWV3SW5mbygKICAgICAgICAgIG5hbWU6IGRpc3BsYXkubmFtZSwKICAgICAgICAgIGRlc2NyaXB0aW9uOiBkaXNwbGF5LmRlc2NyaXB0aW9uLAogICAgICAgICAgdGh1bWJuYWlsOiBkaXNwbGF5LnRodW1ibmFpbCwKICAgICAgICAgIHJhcml0eTogcmFyaXR5RGVzYwogICAgICAgICkKICAgICAgfSAKICAgIH0KICAgZWxzZSB7CiAgICAgIHJlc1t0b2tlbklEXSA9IFZpZXdJbmZvKAogICAgICAgIG5hbWU6IHBhdGhJZCwKICAgICAgICBkZXNjcmlwdGlvbjogIiIsCiAgICAgICAgdGh1bWJuYWlsOiBNZXRhZGF0YVZpZXdzLkhUVFBGaWxlKHVybDogIiIpLAogICAgICAgIHJhcml0eTogbmlsCiAgICAgICkKICAgIH0KICB9CiAgcmV0dXJuIHJlcwp9",
          "getNFTBalanceStorage": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0TkZUQmFsYW5jZVN0b3JhZ2UgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgoKLy8vIEhlbHBlciBmdW5jdGlvbiB0aGF0IHJldHJpZXZlcyBkYXRhIGFib3V0IGFsbCBwdWJsaWNseSBhY2Nlc3NpYmxlIE5GVHMgY291bnQgIGFuIGFjY291bnQKLy8vCmFjY2VzcyhhbGwpIGZ1biBtYWluKF8gYWRkcmVzczogQWRkcmVzcyk6IHtTdHJpbmc6IEludH0gewogICAgbGV0IGFjY291bnQgPSBnZXRBdXRoQWNjb3VudDxhdXRoKEJvcnJvd1ZhbHVlKSAmQWNjb3VudD4oYWRkcmVzcykKICAgIGxldCBkYXRhOiB7U3RyaW5nOiBJbnR9ID0ge30KICAgIGxldCBjb2xsZWN0aW9uVHlwZTogVHlwZSA9IFR5cGU8QHtOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259PigpCgogICAgLy8gSXRlcmF0ZSBvdmVyIGVhY2ggcHVibGljIHBhdGgKICAgIGFjY291bnQuc3RvcmFnZS5mb3JFYWNoU3RvcmVkKGZ1biAocGF0aDogU3RvcmFnZVBhdGgsIHR5cGU6IFR5cGUpOiBCb29sIHsKICAgICAgICAvLyBSZXR1cm4gZWFybHkgaWYgdGhlIGNvbGxlY3Rpb24gaXMgYnJva2VuIG9yIGlzIG5vdCB0aGUgdHlwZSB3ZSdyZSBsb29raW5nIGZvcgogICAgICAgIGlmIHR5cGUuaXNSZWNvdmVyZWQgfHwgKCF0eXBlLmlzSW5zdGFuY2UoY29sbGVjdGlvblR5cGUpICYmICF0eXBlLmlzU3VidHlwZShvZjogY29sbGVjdGlvblR5cGUpKSB7CiAgICAgICAgICAgIHJldHVybiB0cnVlCiAgICAgICAgfQogICAgICAgIGlmIGxldCBjb2xsZWN0aW9uUmVmID0gYWNjb3VudC5zdG9yYWdlLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KGZyb206IHBhdGgpIHsKICAgICAgICAgICAgLy8gUmV0dXJuIGVhcmx5IGlmIG5vIFJlc29sdmVyIGZvdW5kIGluIHRoZSBDb2xsZWN0aW9uCiAgICAgICAgICAgIGxldCBpZHM6IFtVSW50NjRdPSBjb2xsZWN0aW9uUmVmLmdldElEcygpCiAgICAgICAgICAgIGRhdGEuaW5zZXJ0KGtleTogdHlwZS5pZGVudGlmaWVyLCBpZHMubGVuZ3RoKQogICAgICAgIH0KICAgICAgICByZXR1cm4gdHJ1ZQogICAgfSkKICAgIHJldHVybiBkYXRhCn0=",
          "getNFTCollection": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0TkZUQ29sbGVjdGlvbiAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCQppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKCgphY2Nlc3MoYWxsKSBzdHJ1Y3QgQ29sbGVjdGlvbkRpc3BsYXkgewogIGFjY2VzcyhhbGwpIGxldCBuYW1lOiBTdHJpbmcKICBhY2Nlc3MoYWxsKSBsZXQgc3F1YXJlSW1hZ2U6IFN0cmluZwogIGFjY2VzcyhhbGwpIGxldCBtZWRpYVR5cGU6IFN0cmluZwoKICBpbml0KG5hbWU6IFN0cmluZywgc3F1YXJlSW1hZ2U6IFN0cmluZywgbWVkaWFUeXBlOiBTdHJpbmcpIHsKICAgIHNlbGYubmFtZSA9IG5hbWUKICAgIHNlbGYuc3F1YXJlSW1hZ2UgPSBzcXVhcmVJbWFnZQogICAgc2VsZi5tZWRpYVR5cGUgPSBtZWRpYVR5cGUKICB9Cn0KCmFjY2VzcyhhbGwpIHN0cnVjdCBORlRDb2xsZWN0aW9uIHsKICBhY2Nlc3MoYWxsKSBsZXQgaWQ6IFN0cmluZwogIGFjY2VzcyhhbGwpIGxldCBwYXRoOiBTdHJpbmcKICBhY2Nlc3MoYWxsKSBsZXQgZGlzcGxheTogQ29sbGVjdGlvbkRpc3BsYXk/CiAgYWNjZXNzKGFsbCkgbGV0IGlkTGlzdDogW1VJbnQ2NF0KCiAgaW5pdChpZDpTdHJpbmcsIHBhdGg6IFN0cmluZywgZGlzcGxheTogQ29sbGVjdGlvbkRpc3BsYXk/LCBpZExpc3Q6IFtVSW50NjRdKSB7CiAgICBzZWxmLmlkID0gaWQKICAgIHNlbGYucGF0aCA9IHBhdGgKICAgIHNlbGYuZGlzcGxheSA9IGRpc3BsYXkKICAgIHNlbGYuaWRMaXN0ID0gaWRMaXN0CiAgfQp9CgphY2Nlc3MoYWxsKSBmdW4gZ2V0RGlzcGxheShhZGRyZXNzOiBBZGRyZXNzLCBzdG9yYWdlUGF0aDogU3RvcmFnZVBhdGgsIHB1YmxpY1BhdGg6IFB1YmxpY1BhdGgpOiBDb2xsZWN0aW9uRGlzcGxheT8gewogIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogIGxldCByZXNvdXJjZVR5cGUgPSBUeXBlPEBBbnlSZXNvdXJjZT4oKQogIGxldCBjb2xsZWN0aW9uVHlwZSA9IFR5cGU8QHtOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259PigpCiAgbGV0IG1ldGFkYXRhVmlld1R5cGUgPSBUeXBlPEB7Vmlld1Jlc29sdmVyLlJlc29sdmVyQ29sbGVjdGlvbn0+KCkKICB2YXIgaXRlbTogQ29sbGVjdGlvbkRpc3BsYXk/ID0gIG5pbAoKICAgIGlmIGxldCB0eXBlID0gYWNjb3VudC5zdG9yYWdlLnR5cGUoYXQ6IHN0b3JhZ2VQYXRoKSB7CiAgICAgIGxldCBpc1Jlc291cmNlID0gdHlwZS5pc1N1YnR5cGUob2Y6IHJlc291cmNlVHlwZSkKICAgICAgbGV0IGlzTkZUQ29sbGVjdGlvbiA9IHR5cGUuaXNTdWJ0eXBlKG9mOiBjb2xsZWN0aW9uVHlwZSkKICAgICAgbGV0IGNvbmZvcm1lZE1ldGFkYXRhVmlld3MgPSB0eXBlLmlzU3VidHlwZShvZjogbWV0YWRhdGFWaWV3VHlwZSkKCiAgICAgIHZhciB0b2tlbklEczogW1VJbnQ2NF0gPSBbXQogICAgICBpZiBpc05GVENvbGxlY3Rpb24gJiYgY29uZm9ybWVkTWV0YWRhdGFWaWV3cyB7CiAgICAgICAgaWYgbGV0IGNvbGxlY3Rpb25SZWYgPSBhY2NvdW50LmNhcGFiaWxpdGllcy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXIuUmVzb2x2ZXJDb2xsZWN0aW9uLCBOb25GdW5naWJsZVRva2VuLlJlY2VpdmVyfT4ocHVibGljUGF0aCkgewogICAgICAgICAgdG9rZW5JRHMgPSBjb2xsZWN0aW9uUmVmLmdldElEcygpCgogICAgICAgICAgLy8gVE9ETzogbW92ZSB0byBhIGxpc3QKICAgICAgICAgIGlmIHRva2VuSURzLmxlbmd0aCA+IDAgewogICAgICAgICAgICBsZXQgcmVzb2x2ZXIgPSBjb2xsZWN0aW9uUmVmLmJvcnJvd1ZpZXdSZXNvbHZlcihpZDogdG9rZW5JRHNbMF0pCiAgICAgICAgICAgIGlmIHJlc29sdmVyICE9IG5pbCB7CiAgICAgICAgICAgICAgICBpZiBsZXQgZGlzcGxheSA9IE1ldGFkYXRhVmlld3MuZ2V0TkZUQ29sbGVjdGlvbkRpc3BsYXkocmVzb2x2ZXIhKSB7CiAgICAgICAgICAgICAgICBpdGVtID0gQ29sbGVjdGlvbkRpc3BsYXkoCiAgICAgICAgICAgICAgICAgIG5hbWU6IGRpc3BsYXkubmFtZSwKICAgICAgICAgICAgICAgICAgc3F1YXJlSW1hZ2U6IGRpc3BsYXkuc3F1YXJlSW1hZ2UuZmlsZS51cmkoKSwKICAgICAgICAgICAgICAgICAgbWVkaWFUeXBlOiBkaXNwbGF5LnNxdWFyZUltYWdlLm1lZGlhVHlwZQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgcmV0dXJuIGl0ZW0KfQoKCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MsIHBhdGhJRDogU3RyaW5nKTogTkZUQ29sbGVjdGlvbiB7CiAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgbGV0IHN0b3JhZ2VQYXRoID0gU3RvcmFnZVBhdGgoaWRlbnRpZmllcjogcGF0aElEKSEKICBsZXQgcHVibGljUGF0aCA9IFB1YmxpY1BhdGgoaWRlbnRpZmllcjogcGF0aElEKSEKICBsZXQgY29sbGVjdGlvbiA9IGFjY291bnQuY2FwYWJpbGl0aWVzLmJvcnJvdzwme1ZpZXdSZXNvbHZlci5SZXNvbHZlckNvbGxlY3Rpb259PihwdWJsaWNQYXRoKSEKICByZXR1cm4gTkZUQ29sbGVjdGlvbigKICAgIGlkOiBhY2NvdW50LnN0b3JhZ2UudHlwZShhdDogc3RvcmFnZVBhdGgpIS5pZGVudGlmaWVyLAogICAgcGF0aDogc3RvcmFnZVBhdGgudG9TdHJpbmcoKSwKICAgIGRpc3BsYXk6IGdldERpc3BsYXkoYWRkcmVzczogYWRkcmVzcywgc3RvcmFnZVBhdGg6IHN0b3JhZ2VQYXRoLCBwdWJsaWNQYXRoOiBwdWJsaWNQYXRoKSwKICAgIGlkTGlzdDogY29sbGVjdGlvbi5nZXRJRHMoKQogICkKfQ==",
          "getNFTDisplays": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0TkZURGlzcGxheXMgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKCmFjY2VzcyhhbGwpIHN0cnVjdCBWaWV3SW5mbyB7CmFjY2VzcyhhbGwpIGxldCBuYW1lOiBTdHJpbmcKYWNjZXNzKGFsbCkgbGV0IGRlc2NyaXB0aW9uOiBTdHJpbmcKYWNjZXNzKGFsbCkgbGV0IHRodW1ibmFpbDoge01ldGFkYXRhVmlld3MuRmlsZX0KYWNjZXNzKGFsbCkgbGV0IHJhcml0eTogU3RyaW5nPwphY2Nlc3MoYWxsKSBsZXQgY29sbGVjdGlvbkRpc3BsYXk6IE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRpc3BsYXk/Cgppbml0KG5hbWU6IFN0cmluZywgZGVzY3JpcHRpb246IFN0cmluZywgdGh1bWJuYWlsOiB7TWV0YWRhdGFWaWV3cy5GaWxlfSwgcmFyaXR5OiBTdHJpbmc/LCBjb2xsZWN0aW9uRGlzcGxheTogTWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGlzcGxheT8pIHsKICAgIHNlbGYubmFtZSA9IG5hbWUKICAgIHNlbGYuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbgogICAgc2VsZi50aHVtYm5haWwgPSB0aHVtYm5haWwKICAgIHNlbGYucmFyaXR5ID0gcmFyaXR5CiAgICBzZWxmLmNvbGxlY3Rpb25EaXNwbGF5ID0gY29sbGVjdGlvbkRpc3BsYXkKICB9Cn0KCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MsIHBhdGhJRDogU3RyaW5nLCB0b2tlbklEczogW1VJbnQ2NF0pOiB7VUludDY0OiBWaWV3SW5mb30gewogIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogIGxldCByZXM6IHtVSW50NjQ6IFZpZXdJbmZvfSA9IHt9CiAgdmFyIGNvbGxlY3Rpb25EaXNwbGF5RmV0Y2hlZCA9IGZhbHNlCgogIGlmIHRva2VuSURzLmxlbmd0aCA9PSAwIHsKICAgIHJldHVybiByZXMKICB9CgogIGxldCBzdG9yYWdlUGF0aCA9IFN0b3JhZ2VQYXRoKGlkZW50aWZpZXI6IHBhdGhJRCkhCiAgbGV0IHB1YmxpY1BhdGggPSBQdWJsaWNQYXRoKGlkZW50aWZpZXI6IHBhdGhJRCkhCiAgbGV0IHR5cGUgPSBhY2NvdW50LnN0b3JhZ2UudHlwZShhdDogc3RvcmFnZVBhdGgpCiAgaWYgdHlwZSA9PSBuaWwgewogICAgcmV0dXJuIHJlcwogIH0KCiAgbGV0IG1ldGFkYXRhVmlld1R5cGUgPSBUeXBlPEB7Vmlld1Jlc29sdmVyLlJlc29sdmVyQ29sbGVjdGlvbn0+KCkKCiAgbGV0IGNvbmZvcm1lZE1ldGFkYXRhVmlld3MgPSB0eXBlIS5pc1N1YnR5cGUob2Y6IG1ldGFkYXRhVmlld1R5cGUpCiAgaWYgIWNvbmZvcm1lZE1ldGFkYXRhVmlld3MgewogICAgZm9yIHRva2VuSUQgaW4gdG9rZW5JRHMgewogICAgICByZXNbdG9rZW5JRF0gPSBWaWV3SW5mbygKICAgICAgICBuYW1lOiBwYXRoSUQsCiAgICAgICAgZGVzY3JpcHRpb246ICIiLAogICAgICAgIHRodW1ibmFpbDogTWV0YWRhdGFWaWV3cy5IVFRQRmlsZSh1cmw6ICIiKSwKICAgICAgICByYXJpdHk6IG5pbCwKICAgICAgICBjb2xsZWN0aW9uRGlzcGxheTogbmlsCiAgICAgICkKICAgIH0KICAgIHJldHVybiByZXMKICB9CgogIGxldCBjb2xsZWN0aW9uUmVmID0gYWNjb3VudC5jYXBhYmlsaXRpZXMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyLlJlc29sdmVyQ29sbGVjdGlvbiwgTm9uRnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KHB1YmxpY1BhdGgpCiAgZm9yIHRva2VuSUQgaW4gdG9rZW5JRHMgewogICAgbGV0IHJlc29sdmVyID0gY29sbGVjdGlvblJlZiEuYm9ycm93Vmlld1Jlc29sdmVyKGlkOiB0b2tlbklEKQogICAgaWYgcmVzb2x2ZXIgIT0gbmlsIHsKICAgICAgaWYgbGV0IGRpc3BsYXkgPSBNZXRhZGF0YVZpZXdzLmdldERpc3BsYXkocmVzb2x2ZXIhKSB7CiAgICAgIHZhciByYXJpdHlEZXNjOiBTdHJpbmc/ID0gbmlsCiAgICAgIGlmIGxldCByYXJpdHlWaWV3ID0gTWV0YWRhdGFWaWV3cy5nZXRSYXJpdHkocmVzb2x2ZXIhKSB7CiAgICAgICAgICByYXJpdHlEZXNjID0gcmFyaXR5Vmlldy5kZXNjcmlwdGlvbgogICAgICAgIH0KCiAgICAgICAgdmFyIGNvbGxlY3Rpb25EaXNwbGF5OiBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EaXNwbGF5PyA9IG5pbAogICAgICAgIGlmICghY29sbGVjdGlvbkRpc3BsYXlGZXRjaGVkKSB7CiAgICAgICAgICBpZiBsZXQgY0Rpc3BsYXkgPSBNZXRhZGF0YVZpZXdzLmdldE5GVENvbGxlY3Rpb25EaXNwbGF5KHJlc29sdmVyISkgewogICAgICAgICAgICBjb2xsZWN0aW9uRGlzcGxheSA9IGNEaXNwbGF5CiAgICAgICAgICAgIGNvbGxlY3Rpb25EaXNwbGF5RmV0Y2hlZCA9IHRydWUKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJlc1t0b2tlbklEXSA9IFZpZXdJbmZvKAogICAgICAgICAgbmFtZTogZGlzcGxheS5uYW1lLAogICAgICAgICAgZGVzY3JpcHRpb246IGRpc3BsYXkuZGVzY3JpcHRpb24sCiAgICAgICAgICB0aHVtYm5haWw6IGRpc3BsYXkudGh1bWJuYWlsLAogICAgICAgICAgcmFyaXR5OiByYXJpdHlEZXNjLAogICAgICAgICAgY29sbGVjdGlvbkRpc3BsYXk6IGNvbGxlY3Rpb25EaXNwbGF5CiAgICAgICAgKQogICAgICB9CiAgICB9IGVsc2UgewogICAgICByZXNbdG9rZW5JRF0gPSBWaWV3SW5mbygKICAgICAgICBuYW1lOiBwYXRoSUQsCiAgICAgICAgZGVzY3JpcHRpb246ICIiLAogICAgICAgIHRodW1ibmFpbDogTWV0YWRhdGFWaWV3cy5IVFRQRmlsZSh1cmw6ICIiKSwKICAgICAgICByYXJpdHk6IG5pbCwKICAgICAgICBjb2xsZWN0aW9uRGlzcGxheTogbmlsCiAgICAgICkKICAgIH0KICB9CiAgcmV0dXJuIHJlcwp9",
          "getNFTMetadataViews": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0TkZUTWV0YWRhdGFWaWV3cyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgoKCmFjY2VzcyhhbGwpIHN0cnVjdCBDb2xsZWN0aW9uRGF0YSB7CiAgYWNjZXNzKGFsbCkgbGV0IHN0b3JhZ2VQYXRoOiBTdG9yYWdlUGF0aAogIGFjY2VzcyhhbGwpIGxldCBwdWJsaWNQYXRoOiBQdWJsaWNQYXRoCiAgYWNjZXNzKGFsbCkgbGV0IHByb3ZpZGVyUGF0aDogUHJpdmF0ZVBhdGgKICBhY2Nlc3MoYWxsKSBsZXQgcHVibGljQ29sbGVjdGlvbjogVHlwZQogIGFjY2VzcyhhbGwpIGxldCBwdWJsaWNMaW5rZWRUeXBlOiBUeXBlCiAgYWNjZXNzKGFsbCkgbGV0IHByb3ZpZGVyTGlua2VkVHlwZTogVHlwZQoKICBpbml0KAogICAgc3RvcmFnZVBhdGg6IFN0b3JhZ2VQYXRoLAogICAgcHVibGljUGF0aDogUHVibGljUGF0aCwKICAgIHByb3ZpZGVyUGF0aDogUHJpdmF0ZVBhdGgsCiAgICBwdWJsaWNDb2xsZWN0aW9uOiBUeXBlLAogICAgcHVibGljTGlua2VkVHlwZTogVHlwZSwKICAgIHByb3ZpZGVyTGlua2VkVHlwZTogVHlwZQogICkgewogICAgc2VsZi5zdG9yYWdlUGF0aCA9IHN0b3JhZ2VQYXRoCiAgICBzZWxmLnB1YmxpY1BhdGggPSBwdWJsaWNQYXRoCiAgICBzZWxmLnByb3ZpZGVyUGF0aCA9IHByb3ZpZGVyUGF0aAogICAgc2VsZi5wdWJsaWNDb2xsZWN0aW9uID0gcHVibGljQ29sbGVjdGlvbgogICAgc2VsZi5wdWJsaWNMaW5rZWRUeXBlID0gcHVibGljTGlua2VkVHlwZQogICAgc2VsZi5wcm92aWRlckxpbmtlZFR5cGUgPSBwcm92aWRlckxpbmtlZFR5cGUKICB9Cn0KCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MsIHBhdGhJZDogU3RyaW5nLCB0b2tlbklEOiBVSW50NjQpOiB7U3RyaW5nOiBBbnlTdHJ1Y3R9IHsKICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICBsZXQgcmVzOiB7U3RyaW5nOiBBbnlTdHJ1Y3R9ID0ge30KCiAgbGV0IHN0b3JhZ2VQYXRoID0gU3RvcmFnZVBhdGgoaWRlbnRpZmllcjogcGF0aElkKSEKICBsZXQgcHVibGljUGF0aCA9IFB1YmxpY1BhdGgoaWRlbnRpZmllcjogcGF0aElkKSEKICBsZXQgY29sbGVjdGlvblJlZiA9IGFjY291bnQuY2FwYWJpbGl0aWVzLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbiwgVmlld1Jlc29sdmVyLlJlc29sdmVyQ29sbGVjdGlvbn0+KHB1YmxpY1BhdGgpCiAgaWYgY29sbGVjdGlvblJlZiA9PSBuaWwgewogICAgcGFuaWMoIkdldCBDb2xsZWN0aW9uIEZhaWxlZCIpCiAgfQoKICBsZXQgdHlwZSA9IGFjY291bnQuc3RvcmFnZS50eXBlKGF0OiBzdG9yYWdlUGF0aCkKICBpZiB0eXBlID09IG5pbCB7CiAgICByZXR1cm4gcmVzCiAgfQoKICBsZXQgbWV0YWRhdGFWaWV3VHlwZSA9IFR5cGU8QHtWaWV3UmVzb2x2ZXIuUmVzb2x2ZXJDb2xsZWN0aW9ufT4oKQogIGxldCBjb25mb3JtZWRNZXRhZGF0YVZpZXdzID0gdHlwZSEuaXNTdWJ0eXBlKG9mOiBtZXRhZGF0YVZpZXdUeXBlKQoKICBpZiAoIWNvbmZvcm1lZE1ldGFkYXRhVmlld3MpIHsKICAgIHJldHVybiByZXMKICB9CgogIGNvbGxlY3Rpb25SZWYhLmJvcnJvd05GVCh0b2tlbklEKQoKICBsZXQgcmVzb2x2ZXIgPSBjb2xsZWN0aW9uUmVmIS5ib3Jyb3dWaWV3UmVzb2x2ZXIoaWQ6IHRva2VuSUQpIQogIGlmIHJlc29sdmVyICE9IG5pbCB7CiAgICBpZiBsZXQgcmFyaXR5ID0gTWV0YWRhdGFWaWV3cy5nZXRSYXJpdHkocmVzb2x2ZXIpIHsKICAgICAgcmVzWyJyYXJpdHkiXSA9IHJhcml0eQogICAgfQoKICAgIGlmIGxldCBkaXNwbGF5ID0gTWV0YWRhdGFWaWV3cy5nZXREaXNwbGF5KHJlc29sdmVyKSB7CiAgICAgIHJlc1siZGlzcGxheSJdID0gZGlzcGxheQogICAgfQoKICAgIGlmIGxldCBlZGl0aW9ucyA9IE1ldGFkYXRhVmlld3MuZ2V0RWRpdGlvbnMocmVzb2x2ZXIpIHsKICAgICAgcmVzWyJlZGl0aW9ucyJdID0gZWRpdGlvbnMKICAgIH0KCiAgICBpZiBsZXQgc2VyaWFsID0gTWV0YWRhdGFWaWV3cy5nZXRTZXJpYWwocmVzb2x2ZXIpIHsKICAgICAgcmVzWyJzZXJpYWwiXSA9IHNlcmlhbAogICAgfQoKICAgIGlmIGxldCByb3lhbHRpZXMgPSBNZXRhZGF0YVZpZXdzLmdldFJveWFsdGllcyhyZXNvbHZlcikgewogICAgICByZXNbInJveWFsdGllcyJdID0gcm95YWx0aWVzCiAgICB9CgogICAgaWYgbGV0IGxpY2Vuc2UgPSBNZXRhZGF0YVZpZXdzLmdldExpY2Vuc2UocmVzb2x2ZXIpIHsKICAgICAgcmVzWyJsaWNlbnNlIl0gPSBsaWNlbnNlCiAgICB9CgogICAgaWYgbGV0IG1lZGlhcyA9IE1ldGFkYXRhVmlld3MuZ2V0TWVkaWFzKHJlc29sdmVyKSB7CiAgICAgIHJlc1sibWVkaWFzIl0gPSBtZWRpYXMKICAgIH0KCiAgICBpZiBsZXQgZXh0ZXJuYWxVUkwgPSBNZXRhZGF0YVZpZXdzLmdldEV4dGVybmFsVVJMKHJlc29sdmVyKSB7CiAgICAgIHJlc1siZXh0ZXJuYWxVUkwiXSA9IGV4dGVybmFsVVJMCiAgICB9CgogICAgaWYgbGV0IHRyYWl0cyA9IE1ldGFkYXRhVmlld3MuZ2V0VHJhaXRzKHJlc29sdmVyKSB7CiAgICAgIHJlc1sidHJhaXRzIl0gPSB0cmFpdHMKICAgIH0KCiAgICBpZiBsZXQgY29sbGVjdGlvbkRpc3BsYXkgPSBNZXRhZGF0YVZpZXdzLmdldE5GVENvbGxlY3Rpb25EaXNwbGF5KHJlc29sdmVyKSB7CiAgICAgIHJlc1siY29sbGVjdGlvbkRpc3BsYXkiXSA9IGNvbGxlY3Rpb25EaXNwbGF5CiAgICB9CgogICAgaWYgbGV0IGNvbGxlY3Rpb25EYXRhID0gTWV0YWRhdGFWaWV3cy5nZXRORlRDb2xsZWN0aW9uRGF0YShyZXNvbHZlcikgewogICAgICBsZXQgZGF0YSA9IENvbGxlY3Rpb25EYXRhKAogICAgICAgIHN0b3JhZ2VQYXRoOiBjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aCwKICAgICAgICBwdWJsaWNQYXRoOiBjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoLAogICAgICAgIHByb3ZpZGVyUGF0aDogY29sbGVjdGlvbkRhdGEucHJvdmlkZXJQYXRoLAogICAgICAgIHB1YmxpY0NvbGxlY3Rpb246IGNvbGxlY3Rpb25EYXRhLnB1YmxpY0NvbGxlY3Rpb24sCiAgICAgICAgcHVibGljTGlua2VkVHlwZTogY29sbGVjdGlvbkRhdGEucHVibGljTGlua2VkVHlwZSwKICAgICAgICBwcm92aWRlckxpbmtlZFR5cGU6IGNvbGxlY3Rpb25EYXRhLnByb3ZpZGVyTGlua2VkVHlwZQogICAgICApCiAgICAgIHJlc1siY29sbGVjdGlvbkRhdGEiXSA9IGRhdGEKICAgIH0KICB9CiAgcmVzWyJ0b2tlbklkIl0gPSB0b2tlbklECgogIHJldHVybiByZXMKfQ==",
          "getUserCollections": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0VXNlckNvbGxlY3Rpb25zIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCgphY2Nlc3MoYWxsKSBzdHJ1Y3QgQ29sbGVjdGlvbkRpc3BsYXkgewogIGFjY2VzcyhhbGwpIGxldCBuYW1lOiBTdHJpbmcKICBhY2Nlc3MoYWxsKSBsZXQgc3F1YXJlSW1hZ2U6IFN0cmluZwogIGFjY2VzcyhhbGwpIGxldCBtZWRpYVR5cGU6IFN0cmluZwoKICBpbml0KG5hbWU6IFN0cmluZywgc3F1YXJlSW1hZ2U6IFN0cmluZywgbWVkaWFUeXBlOiBTdHJpbmcpIHsKICAgIHNlbGYubmFtZSA9IG5hbWUKICAgIHNlbGYuc3F1YXJlSW1hZ2UgPSBzcXVhcmVJbWFnZQogICAgc2VsZi5tZWRpYVR5cGUgPSBtZWRpYVR5cGUKICB9Cn0KCmFjY2VzcyhhbGwpIHN0cnVjdCBORlRDb2xsZWN0aW9uIHsKICBhY2Nlc3MoYWxsKSBsZXQgaWQ6IFN0cmluZwogIGFjY2VzcyhhbGwpIGxldCBwYXRoOiBTdHJpbmcKICBhY2Nlc3MoYWxsKSBsZXQgZGlzcGxheTogQ29sbGVjdGlvbkRpc3BsYXk/CiAgYWNjZXNzKGFsbCkgbGV0IGlkTGlzdDogW1VJbnQ2NF0KCiAgaW5pdChpZDpTdHJpbmcsIHBhdGg6IFN0cmluZywgZGlzcGxheTogQ29sbGVjdGlvbkRpc3BsYXk/LCBpZExpc3Q6IFtVSW50NjRdKSB7CiAgICBzZWxmLmlkID0gaWQKICAgIHNlbGYucGF0aCA9IHBhdGgKICAgIHNlbGYuZGlzcGxheSA9IGRpc3BsYXkKICAgIHNlbGYuaWRMaXN0ID0gaWRMaXN0CiAgfQp9CgphY2Nlc3MoYWxsKSBmdW4gZ2V0RGlzcGxheShhZGRyZXNzOiBBZGRyZXNzLCBzdG9yYWdlUGF0aDogU3RvcmFnZVBhdGgsIHB1YmxpY1BhdGg6IFB1YmxpY1BhdGgpOiBDb2xsZWN0aW9uRGlzcGxheT8gewogIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogIGxldCByZXNvdXJjZVR5cGUgPSBUeXBlPEBBbnlSZXNvdXJjZT4oKQogIGxldCBjb2xsZWN0aW9uVHlwZSA9IFR5cGU8QHtOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259PigpCiAgbGV0IG1ldGFkYXRhVmlld1R5cGUgPSBUeXBlPEB7Vmlld1Jlc29sdmVyLlJlc29sdmVyQ29sbGVjdGlvbn0+KCkKICB2YXIgaXRlbTogQ29sbGVjdGlvbkRpc3BsYXk/ID0gIG5pbAoKICAgIGlmIGxldCB0eXBlID0gYWNjb3VudC5zdG9yYWdlLnR5cGUoYXQ6IHN0b3JhZ2VQYXRoKSB7CiAgICAgIGxldCBpc1Jlc291cmNlID0gdHlwZS5pc1N1YnR5cGUob2Y6IHJlc291cmNlVHlwZSkKICAgICAgbGV0IGlzTkZUQ29sbGVjdGlvbiA9IHR5cGUuaXNTdWJ0eXBlKG9mOiBjb2xsZWN0aW9uVHlwZSkKICAgICAgbGV0IGNvbmZvcm1lZE1ldGFkYXRhVmlld3MgPSB0eXBlLmlzU3VidHlwZShvZjogbWV0YWRhdGFWaWV3VHlwZSkKCiAgICAgIHZhciB0b2tlbklEczogW1VJbnQ2NF0gPSBbXQogICAgICBpZiBpc05GVENvbGxlY3Rpb24gJiYgY29uZm9ybWVkTWV0YWRhdGFWaWV3cyB7CiAgICAgICAgaWYgbGV0IGNvbGxlY3Rpb25SZWYgPSBhY2NvdW50LmNhcGFiaWxpdGllcy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXIuUmVzb2x2ZXJDb2xsZWN0aW9uLCBOb25GdW5naWJsZVRva2VuLlJlY2VpdmVyfT4ocHVibGljUGF0aCkgewogICAgICAgICAgdG9rZW5JRHMgPSBjb2xsZWN0aW9uUmVmLmdldElEcygpCgogICAgICAgICAgLy8gVE9ETzogbW92ZSB0byBhIGxpc3QKICAgICAgICAgIGlmIHRva2VuSURzLmxlbmd0aCA+IDAgCiAgICAgICAgICAmJiBzdG9yYWdlUGF0aCAhPSAvc3RvcmFnZS9SYXJpYmxlTkZUQ29sbGVjdGlvbiAKICAgICAgICAgICYmIHN0b3JhZ2VQYXRoICE9IC9zdG9yYWdlL0FSVElGQUNUUGFja1YzQ29sbGVjdGlvbgogICAgICAgICAgJiYgc3RvcmFnZVBhdGggIT0gL3N0b3JhZ2UvQXJsZWVTY2VuZSB7CiAgICAgICAgICAgIGxldCByZXNvbHZlciA9IGNvbGxlY3Rpb25SZWYuYm9ycm93Vmlld1Jlc29sdmVyKGlkOiB0b2tlbklEc1swXSkKICAgICAgICAgICAgaWYgcmVzb2x2ZXIgIT0gbmlsIHsKICAgICAgICAgICAgICAgIGlmIGxldCBkaXNwbGF5ID0gTWV0YWRhdGFWaWV3cy5nZXRORlRDb2xsZWN0aW9uRGlzcGxheShyZXNvbHZlciEpIHsKICAgICAgICAgICAgICAgIGl0ZW0gPSBDb2xsZWN0aW9uRGlzcGxheSgKICAgICAgICAgICAgICAgICAgbmFtZTogZGlzcGxheS5uYW1lLAogICAgICAgICAgICAgICAgICBzcXVhcmVJbWFnZTogZGlzcGxheS5zcXVhcmVJbWFnZS5maWxlLnVyaSgpLAogICAgICAgICAgICAgICAgICBtZWRpYVR5cGU6IGRpc3BsYXkuc3F1YXJlSW1hZ2UubWVkaWFUeXBlCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQoKICByZXR1cm4gaXRlbQp9CgphY2Nlc3MoYWxsKWZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MpOiBbTkZUQ29sbGVjdGlvbl0gewogIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogIGxldCBjb2xsZWN0aW9uVHlwZSA9IFR5cGU8QHtOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259PigpCiAgbGV0IGNvbGxlY3Rpb25QYXRoczogW1N0b3JhZ2VQYXRoXSA9IFtdCiAgbGV0IGNvbGxlY3Rpb25zOiBbTkZUQ29sbGVjdGlvbl0gPSBbXQoKICBmdW4gZWFjaFBhdGgocGF0aDogU3RvcmFnZVBhdGgsIFR5cGU6IFR5cGUpOiBCb29sIHsKICAgCiAgICBpZiBUeXBlICE9IG5pbCB7CiAgICAgIGlmIFR5cGUuaXNTdWJ0eXBlKG9mOiBjb2xsZWN0aW9uVHlwZSkgewogICAgICAgIGNvbGxlY3Rpb25QYXRocy5hcHBlbmQocGF0aCkKICAgICAgfQogICAgICAKICAgIH0KICAgCiAgICByZXR1cm4gdHJ1ZQogIH0KCiAgYWNjb3VudC5zdG9yYWdlLmZvckVhY2hTdG9yZWQoZWFjaFBhdGgpCgogIGZvciBwYXRoIGluIGNvbGxlY3Rpb25QYXRocyB7CiAgICBsZXQgcGF0aFN0ciA9IHBhdGgudG9TdHJpbmcoKQogICAgbGV0IHNwbGl0QXJyID0gcGF0aFN0ci5zcGxpdChzZXBhcmF0b3I6ICIvIikKICAgIGxldCBpZGVudGlmaWVyID0gc3BsaXRBcnJbMl0KICAgIGxldCBwdWJQYXRoID0gUHVibGljUGF0aChpZGVudGlmaWVyOiBpZGVudGlmaWVyKSEKICAgIGxldCBjb2xsZWN0aW9uID0gIGFjY291bnQuY2FwYWJpbGl0aWVzLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+KHB1YlBhdGgpIQoKICAgIGNvbGxlY3Rpb25zLmFwcGVuZCgKICAgICAgTkZUQ29sbGVjdGlvbigKICAgICAgaWQ6IGlkZW50aWZpZXIsCiAgICAgIHBhdGg6IHB1YlBhdGgudG9TdHJpbmcoKSwKICAgICAgZGlzcGxheTogZ2V0RGlzcGxheShhZGRyZXNzOiBhZGRyZXNzLCBzdG9yYWdlUGF0aDogcGF0aCwgcHVibGljUGF0aDogcHViUGF0aCksCiAgICAgIGlkTGlzdDogY29sbGVjdGlvbi5nZXRJRHMoKQogICAgICApCiAgICApCiAgfQoKCiAgcmV0dXJuIGNvbGxlY3Rpb25zCn0=",
          "getUserCollectionsPage": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0VXNlckNvbGxlY3Rpb25zUGFnZSAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKIGltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgogIGltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCiAgaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCiAgCiAgYWNjZXNzKGFsbCkgc3RydWN0IENvbGxlY3Rpb25EaXNwbGF5IHsKICAgIGFjY2VzcyhhbGwpIGxldCBuYW1lOiBTdHJpbmcKICAgIGFjY2VzcyhhbGwpIGxldCBzcXVhcmVJbWFnZTogU3RyaW5nCiAgICBhY2Nlc3MoYWxsKSBsZXQgbWVkaWFUeXBlOiBTdHJpbmcKICAKICAgIGluaXQobmFtZTogU3RyaW5nLCBzcXVhcmVJbWFnZTogU3RyaW5nLCBtZWRpYVR5cGU6IFN0cmluZykgewogICAgICBzZWxmLm5hbWUgPSBuYW1lCiAgICAgIHNlbGYuc3F1YXJlSW1hZ2UgPSBzcXVhcmVJbWFnZQogICAgICBzZWxmLm1lZGlhVHlwZSA9IG1lZGlhVHlwZQogICAgfQogIH0KICAKICBhY2Nlc3MoYWxsKSBzdHJ1Y3QgTkZUQ29sbGVjdGlvbiB7CiAgICBhY2Nlc3MoYWxsKSBsZXQgaWQ6IFN0cmluZwogICAgYWNjZXNzKGFsbCkgbGV0IHBhdGg6IFN0cmluZwogICAgYWNjZXNzKGFsbCkgbGV0IGRpc3BsYXk6IENvbGxlY3Rpb25EaXNwbGF5PwogICAgYWNjZXNzKGFsbCkgbGV0IGlkTGlzdDogW1VJbnQ2NF0KICAKICAgIGluaXQoaWQ6U3RyaW5nLCBwYXRoOiBTdHJpbmcsIGRpc3BsYXk6IENvbGxlY3Rpb25EaXNwbGF5PywgaWRMaXN0OiBbVUludDY0XSkgewogICAgICBzZWxmLmlkID0gaWQKICAgICAgc2VsZi5wYXRoID0gcGF0aAogICAgICBzZWxmLmRpc3BsYXkgPSBkaXNwbGF5CiAgICAgIHNlbGYuaWRMaXN0ID0gaWRMaXN0CiAgICB9CiAgfQogIAogIGFjY2VzcyhhbGwpIGZ1biBnZXREaXNwbGF5KGFkZHJlc3M6IEFkZHJlc3MsIHN0b3JhZ2VQYXRoOiBTdG9yYWdlUGF0aCwgcHVibGljUGF0aDogUHVibGljUGF0aCk6IENvbGxlY3Rpb25EaXNwbGF5PyB7CiAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICAgIGxldCByZXNvdXJjZVR5cGUgPSBUeXBlPEBBbnlSZXNvdXJjZT4oKQogICAgbGV0IGNvbGxlY3Rpb25UeXBlID0gVHlwZTxAe05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KCkKICAgIGxldCBtZXRhZGF0YVZpZXdUeXBlID0gVHlwZTxAe1ZpZXdSZXNvbHZlci5SZXNvbHZlckNvbGxlY3Rpb259PigpCiAgICB2YXIgaXRlbTogQ29sbGVjdGlvbkRpc3BsYXk/ID0gIG5pbAogIAogICAgICBpZiBsZXQgdHlwZSA9IGFjY291bnQuc3RvcmFnZS50eXBlKGF0OiBzdG9yYWdlUGF0aCkgewogICAgICAgIGxldCBpc1Jlc291cmNlID0gdHlwZS5pc1N1YnR5cGUob2Y6IHJlc291cmNlVHlwZSkKICAgICAgICBsZXQgaXNORlRDb2xsZWN0aW9uID0gdHlwZS5pc1N1YnR5cGUob2Y6IGNvbGxlY3Rpb25UeXBlKQogICAgICAgIGxldCBjb25mb3JtZWRNZXRhZGF0YVZpZXdzID0gdHlwZS5pc1N1YnR5cGUob2Y6IG1ldGFkYXRhVmlld1R5cGUpCiAgCiAgICAgICAgdmFyIHRva2VuSURzOiBbVUludDY0XSA9IFtdCiAgICAgICAgaWYgaXNORlRDb2xsZWN0aW9uICYmIGNvbmZvcm1lZE1ldGFkYXRhVmlld3MgewogICAgICAgICAgaWYgbGV0IGNvbGxlY3Rpb25SZWYgPSBhY2NvdW50LmNhcGFiaWxpdGllcy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXIuUmVzb2x2ZXJDb2xsZWN0aW9uLCBOb25GdW5naWJsZVRva2VuLlJlY2VpdmVyfT4ocHVibGljUGF0aCkgewogICAgICAgICAgICB0b2tlbklEcyA9IGNvbGxlY3Rpb25SZWYuZ2V0SURzKCkKICAKICAgICAgICAgICAgLy8gVE9ETzogbW92ZSB0byBhIGxpc3QKICAgICAgICAgICAgaWYgdG9rZW5JRHMubGVuZ3RoID4gMCAKICAgICAgICAgICAgJiYgc3RvcmFnZVBhdGggIT0gL3N0b3JhZ2UvUmFyaWJsZU5GVENvbGxlY3Rpb24gCiAgICAgICAgICAgICYmIHN0b3JhZ2VQYXRoICE9IC9zdG9yYWdlL0FSVElGQUNUUGFja1YzQ29sbGVjdGlvbgogICAgICAgICAgICAmJiBzdG9yYWdlUGF0aCAhPSAvc3RvcmFnZS9BcmxlZVNjZW5lIHsKICAgICAgICAgICAgICBsZXQgcmVzb2x2ZXIgPSBjb2xsZWN0aW9uUmVmLmJvcnJvd1ZpZXdSZXNvbHZlcihpZDogdG9rZW5JRHNbMF0pCiAgICAgICAgICAgICAgaWYgcmVzb2x2ZXIgIT0gbmlsIHsKICAgICAgICAgICAgICAgICAgaWYgbGV0IGRpc3BsYXkgPSBNZXRhZGF0YVZpZXdzLmdldE5GVENvbGxlY3Rpb25EaXNwbGF5KHJlc29sdmVyISkgewogICAgICAgICAgICAgICAgICBpdGVtID0gQ29sbGVjdGlvbkRpc3BsYXkoCiAgICAgICAgICAgICAgICAgICAgbmFtZTogZGlzcGxheS5uYW1lLAogICAgICAgICAgICAgICAgICAgIHNxdWFyZUltYWdlOiBkaXNwbGF5LnNxdWFyZUltYWdlLmZpbGUudXJpKCksCiAgICAgICAgICAgICAgICAgICAgbWVkaWFUeXBlOiBkaXNwbGF5LnNxdWFyZUltYWdlLm1lZGlhVHlwZQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIAogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgCiAgICByZXR1cm4gaXRlbQogIH0KICAKICBhY2Nlc3MoYWxsKWZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MsIHN0YXJ0OiBJbnQsIGVuZDogSW50KTogW05GVENvbGxlY3Rpb25dIHsKICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgbGV0IGNvbGxlY3Rpb25UeXBlID0gVHlwZTxAe05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KCkKICAgIGxldCBjb2xsZWN0aW9uUGF0aHM6IFtTdG9yYWdlUGF0aF0gPSBbXQogICAgbGV0IGNvbGxlY3Rpb25zOiBbTkZUQ29sbGVjdGlvbl0gPSBbXQogIAogICAgZnVuIGVhY2hQYXRoKHBhdGg6IFN0b3JhZ2VQYXRoLCBUeXBlOiBUeXBlKTogQm9vbCB7CiAgICAgCiAgICAgIGlmIFR5cGUgIT0gbmlsIHsKICAgICAgICBpZiBUeXBlLmlzU3VidHlwZShvZjogY29sbGVjdGlvblR5cGUpIHsKICAgICAgICAgIGNvbGxlY3Rpb25QYXRocy5hcHBlbmQocGF0aCkKICAgICAgICB9CiAgICAgICAgCiAgICAgIH0KICAgICAKICAgICAgcmV0dXJuIHRydWUKICAgIH0KICAKICAgIGFjY291bnQuc3RvcmFnZS5mb3JFYWNoU3RvcmVkKGVhY2hQYXRoKQogIAogICAgZm9yIHBhdGggaW4gY29sbGVjdGlvblBhdGhzIHsKICAgICAgbGV0IHBhdGhTdHIgPSBwYXRoLnRvU3RyaW5nKCkKICAgICAgbGV0IHNwbGl0QXJyID0gcGF0aFN0ci5zcGxpdChzZXBhcmF0b3I6ICIvIikKICAgICAgbGV0IGlkZW50aWZpZXIgPSBzcGxpdEFyclsyXQogICAgICBsZXQgcHViUGF0aCA9IFB1YmxpY1BhdGgoaWRlbnRpZmllcjogaWRlbnRpZmllcikhCiAgICAgIGxldCBjb2xsZWN0aW9uID0gIGFjY291bnQuY2FwYWJpbGl0aWVzLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+KHB1YlBhdGgpIQogIAogICAgICBjb2xsZWN0aW9ucy5hcHBlbmQoCiAgICAgICAgTkZUQ29sbGVjdGlvbigKICAgICAgICBpZDogaWRlbnRpZmllciwKICAgICAgICBwYXRoOiBwdWJQYXRoLnRvU3RyaW5nKCksCiAgICAgICAgZGlzcGxheTogZ2V0RGlzcGxheShhZGRyZXNzOiBhZGRyZXNzLCBzdG9yYWdlUGF0aDogcGF0aCwgcHVibGljUGF0aDogcHViUGF0aCksCiAgICAgICAgaWRMaXN0OiBjb2xsZWN0aW9uLmdldElEcygpCiAgICAgICAgKQogICAgICApCiAgICAgIAogICAgfQoKICAgIGxldCBsZW4gPSBjb2xsZWN0aW9ucy5sZW5ndGgKICAgIHZhciBlbmROdW4gPSBlbmQKICAgIGlmIGxlbiA8IHN0YXJ0IHsKICAgICAgcmV0dXJuIFtdCiAgICB9IGVsc2UgewogICAgICBpZiBsZW4gPCBlbmQgewogICAgICAgIGVuZE51biA9IGxlbgogICAgICB9CiAgICB9CiAgICAKICAgIHJldHVybiBjb2xsZWN0aW9ucy5zbGljZShmcm9tOiBzdGFydCwgdXBUbzogZW5kTnVuICkKICB9",
          "sendNbaNFT": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgc2VuZE5iYU5GVCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCgppbXBvcnQgPE5GVD4gZnJvbSA8TkZUQWRkcmVzcz4KCnRyYW5zYWN0aW9uKHJlY2lwaWVudEFkZHI6IEFkZHJlc3MsIHdpdGhkcmF3SUQ6IFVJbnQ2NCkgewogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSwgQm9ycm93VmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgLy8gZ2V0IHRoZSByZWNpcGllbnRzIHB1YmxpYyBhY2NvdW50IG9iamVjdAogICAgICAgIGxldCByZWNpcGllbnQgPSBnZXRBY2NvdW50KHJlY2lwaWVudEFkZHIpCiAgICAgICAgLy8gYm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXInJ3MgTkZUIGNvbGxlY3Rpb24KICAgICAgICBsZXQgY29sbGVjdGlvblJlZiA9IHNpZ25lci5zdG9yYWdlCiAgICAgICAgLmJvcnJvdzxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufT4oZnJvbTogL3N0b3JhZ2UvTW9tZW50Q29sbGVjdGlvbikKICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgb3duZXInJ3MgY29sbGVjdGlvbiIpCiAgICAgICAgbGV0IHNlbmRlclJlZiA9IHNpZ25lcgogICAgICAgIC5jYXBhYmlsaXRpZXMKICAgICAgICAuYm9ycm93PCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uUHVibGljfT4oL3B1YmxpYy9Nb21lbnRDb2xsZWN0aW9uKQogICAgICAgIC8vIGJvcnJvdyBhIHB1YmxpYyByZWZlcmVuY2UgdG8gdGhlIHJlY2VpdmVycyBjb2xsZWN0aW9uCiAgICAgICAgbGV0IHJlY2lwaWVudFJlZiA9IHJlY2lwaWVudAogICAgICAgIC5jYXBhYmlsaXRpZXMKICAgICAgICAuYm9ycm93PCZ7VG9wU2hvdC5Nb21lbnRDb2xsZWN0aW9uUHVibGljfT4oL3B1YmxpYy9Nb21lbnRDb2xsZWN0aW9uKSA/PyBwYW5pYygiVW5hYmxlIHRvIGJvcnJvdyByZWNlaXZlciByZWZlcmVuY2UiKQogICAgICAgIAogICAgICAgIC8vIHdpdGhkcmF3IHRoZSBORlQgZnJvbSB0aGUgb3duZXInJ3MgY29sbGVjdGlvbgogICAgICAgIGxldCBuZnQgPC0gY29sbGVjdGlvblJlZi53aXRoZHJhdyh3aXRoZHJhd0lEOiB3aXRoZHJhd0lEKQogICAgICAgIC8vIERlcG9zaXQgdGhlIE5GVCBpbiB0aGUgcmVjaXBpZW50JydzIGNvbGxlY3Rpb24KICAgICAgICByZWNpcGllbnRSZWYhLmRlcG9zaXQodG9rZW46IDwtbmZ0KQogICAgfQp9",
          "sendNbaNFTV3": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgc2VuZE5iYU5GVFYzIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKaW1wb3J0IFN0b3JhZ2VSZW50IGZyb20gMHg3MDdhZGJhZDE0MjhjNjI0CgoKaW1wb3J0IDxORlQ+IGZyb20gPE5GVEFkZHJlc3M+Cgp0cmFuc2FjdGlvbihyZWNpcGllbnRBZGRyOiBBZGRyZXNzLCB3aXRoZHJhd0lEOiBVSW50NjQpIHsKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UsIEJvcnJvd1ZhbHVlKSAmQWNjb3VudCkgewogICAgICAgIC8vIGdldCB0aGUgcmVjaXBpZW50cyBwdWJsaWMgYWNjb3VudCBvYmplY3QKICAgICAgICBsZXQgcmVjaXBpZW50ID0gZ2V0QWNjb3VudChyZWNpcGllbnRBZGRyKQogICAgICAgIC8vIGJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJydzIE5GVCBjb2xsZWN0aW9uCiAgICAgICAgbGV0IGNvbGxlY3Rpb25SZWYgPSBzaWduZXIuc3RvcmFnZQogICAgICAgIC5ib3Jyb3c8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KGZyb206IC9zdG9yYWdlL01vbWVudENvbGxlY3Rpb24pCiAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIG93bmVyJydzIGNvbGxlY3Rpb24iKQogICAgICAgIGxldCBzZW5kZXJSZWYgPSBzaWduZXIKICAgICAgICAuY2FwYWJpbGl0aWVzCiAgICAgICAgLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+KC9wdWJsaWMvTW9tZW50Q29sbGVjdGlvbikKICAgICAgICAvLyBib3Jyb3cgYSBwdWJsaWMgcmVmZXJlbmNlIHRvIHRoZSByZWNlaXZlcnMgY29sbGVjdGlvbgogICAgICAgIGxldCByZWNpcGllbnRSZWYgPSByZWNpcGllbnQKICAgICAgICAuY2FwYWJpbGl0aWVzCiAgICAgICAgLmJvcnJvdzwme1RvcFNob3QuTW9tZW50Q29sbGVjdGlvblB1YmxpY30+KC9wdWJsaWMvTW9tZW50Q29sbGVjdGlvbikgPz8gcGFuaWMoIlVuYWJsZSB0byBib3Jyb3cgcmVjZWl2ZXIgcmVmZXJlbmNlIikKICAgICAgICAKICAgICAgICAvLyB3aXRoZHJhdyB0aGUgTkZUIGZyb20gdGhlIG93bmVyJydzIGNvbGxlY3Rpb24KICAgICAgICBsZXQgbmZ0IDwtIGNvbGxlY3Rpb25SZWYud2l0aGRyYXcod2l0aGRyYXdJRDogd2l0aGRyYXdJRCkKICAgICAgICAvLyBEZXBvc2l0IHRoZSBORlQgaW4gdGhlIHJlY2lwaWVudCcncyBjb2xsZWN0aW9uCiAgICAgICAgcmVjaXBpZW50UmVmIS5kZXBvc2l0KHRva2VuOiA8LW5mdCkKICAgICAgICBTdG9yYWdlUmVudC50cnlSZWZpbGwocmVjaXBpZW50QWRkcikKICAgIH0KfQ==",
          "sendNFT": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgc2VuZE5GVCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCmltcG9ydCA8TkZUPiBmcm9tIDxORlRBZGRyZXNzPgoKLy8gVGhpcyB0cmFuc2FjdGlvbiBpcyBmb3IgdHJhbnNmZXJyaW5nIGFuZCBORlQgZnJvbQovLyBvbmUgYWNjb3VudCB0byBhbm90aGVyCgp0cmFuc2FjdGlvbihyZWNpcGllbnRBZGRyOiBBZGRyZXNzLCB3aXRoZHJhd0lEOiBVSW50NjQpIHsKCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChTdG9yYWdlLCBCb3Jyb3dWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICAvLyBnZXQgdGhlIHJlY2lwaWVudHMgcHVibGljIGFjY291bnQgb2JqZWN0CiAgICAgICAgbGV0IHJlY2lwaWVudCA9IGdldEFjY291bnQocmVjaXBpZW50QWRkcikKCiAgICAgICAgLy8gYm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBORlQgY29sbGVjdGlvbgogICAgICAgIGxldCBjb2xsZWN0aW9uUmVmID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oZnJvbTogPENvbGxlY3Rpb25TdG9yYWdlUGF0aD4pCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBvd25lcidzIGNvbGxlY3Rpb24iKQoKICAgICAgICAvLyBib3Jyb3cgYSBwdWJsaWMgcmVmZXJlbmNlIHRvIHRoZSByZWNlaXZlcnMgY29sbGVjdGlvbgogICAgICAgIGxldCBkZXBvc2l0UmVmID0gcmVjaXBpZW50CiAgICAgICAgICAgIC5jYXBhYmlsaXRpZXMKICAgICAgICAgICAgLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KDxDb2xsZWN0aW9uUHVibGljUGF0aD4pCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSByZWNlaXZlcidzIGNvbGxlY3Rpb24iKQoKICAgICAgICAvLyB3aXRoZHJhdyB0aGUgTkZUIGZyb20gdGhlIG93bmVyJ3MgY29sbGVjdGlvbgogICAgICAgIGxldCBuZnQgPC0gY29sbGVjdGlvblJlZi53aXRoZHJhdyh3aXRoZHJhd0lEOiB3aXRoZHJhd0lEKQoKICAgICAgICAvLyBEZXBvc2l0IHRoZSBORlQgaW4gdGhlIHJlY2lwaWVudCdzIGNvbGxlY3Rpb24KICAgICAgICBkZXBvc2l0UmVmLmRlcG9zaXQodG9rZW46IDwtbmZ0KQoKICAgIH0KfQ==",
          "sendNFTV3": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgc2VuZE5GVFYzIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKaW1wb3J0IFN0b3JhZ2VSZW50IGZyb20gMHg3MDdhZGJhZDE0MjhjNjI0CgppbXBvcnQgPE5GVD4gZnJvbSA8TkZUQWRkcmVzcz4KCi8vIFRoaXMgdHJhbnNhY3Rpb24gaXMgZm9yIHRyYW5zZmVycmluZyBhbmQgTkZUIGZyb20KLy8gb25lIGFjY291bnQgdG8gYW5vdGhlcgoKdHJhbnNhY3Rpb24ocmVjaXBpZW50QWRkcjogQWRkcmVzcywgd2l0aGRyYXdJRDogVUludDY0KSB7CgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSwgQm9ycm93VmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgLy8gZ2V0IHRoZSByZWNpcGllbnRzIHB1YmxpYyBhY2NvdW50IG9iamVjdAogICAgICAgIGxldCByZWNpcGllbnQgPSBnZXRBY2NvdW50KHJlY2lwaWVudEFkZHIpCgogICAgICAgIC8vIGJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3MgTkZUIGNvbGxlY3Rpb24KICAgICAgICBsZXQgY29sbGVjdGlvblJlZiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KGZyb206IDxDb2xsZWN0aW9uU3RvcmFnZVBhdGg+KQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgb3duZXIncyBjb2xsZWN0aW9uIikKCiAgICAgICAgLy8gYm9ycm93IGEgcHVibGljIHJlZmVyZW5jZSB0byB0aGUgcmVjZWl2ZXJzIGNvbGxlY3Rpb24KICAgICAgICBsZXQgZGVwb3NpdFJlZiA9IHJlY2lwaWVudAogICAgICAgICAgICAuY2FwYWJpbGl0aWVzCiAgICAgICAgICAgIC5ib3Jyb3c8JntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259Pig8Q29sbGVjdGlvblB1YmxpY1BhdGg+KQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgcmVjZWl2ZXIncyBjb2xsZWN0aW9uIikKCiAgICAgICAgLy8gd2l0aGRyYXcgdGhlIE5GVCBmcm9tIHRoZSBvd25lcidzIGNvbGxlY3Rpb24KICAgICAgICBsZXQgbmZ0IDwtIGNvbGxlY3Rpb25SZWYud2l0aGRyYXcod2l0aGRyYXdJRDogd2l0aGRyYXdJRCkKCiAgICAgICAgLy8gRGVwb3NpdCB0aGUgTkZUIGluIHRoZSByZWNpcGllbnQncyBjb2xsZWN0aW9uCiAgICAgICAgZGVwb3NpdFJlZi5kZXBvc2l0KHRva2VuOiA8LW5mdCkKICAgICAgICBTdG9yYWdlUmVudC50cnlSZWZpbGwocmVjaXBpZW50QWRkcikKCiAgICB9Cn0="
        },
        "contract": {
          "getContractByName": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0Q29udHJhY3RCeU5hbWUgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MsIGNvbnRyYWN0TmFtZTogU3RyaW5nKTogU3RyaW5nPyB7CiAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgbGV0IGRlcGxveWVkQ29udHJhY3QgPSBhY2NvdW50LmNvbnRyYWN0cy5nZXQobmFtZTogY29udHJhY3ROYW1lKQoKICByZXR1cm4gU3RyaW5nLmZyb21VVEY4KGRlcGxveWVkQ29udHJhY3Q/LmNvZGUhKQp9",
          "getContractNames": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0Q29udHJhY3ROYW1lcyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKYWNjZXNzKGFsbCkgZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcyk6ICZbU3RyaW5nXSB7CiAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgcmV0dXJuIGFjY291bnQuY29udHJhY3RzLm5hbWVzCn0="
        },
        "evm": {
          "call": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgY2FsbCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEVWTSBmcm9tIDB4ZTQ2N2I5ZGQxMWZhMDBkZgoKCmFjY2VzcyhhbGwpCmZ1biBtYWluKGhleEVuY29kZWREYXRhOiBTdHJpbmcsIGhleEVuY29kZWRBZGRyZXNzOiBTdHJpbmcpOiBTdHJpbmcgewogICAgbGV0IGFjY291bnQgPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UpICZBY2NvdW50PihBZGRyZXNzKDB4Q09BKSkKCiAgICBsZXQgY29hID0gYWNjb3VudC5zdG9yYWdlLmJvcnJvdzxhdXRoKEVWTS5DYWxsKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KAogICAgICAgIGZyb206IC9zdG9yYWdlL2V2bQogICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyByZWZlcmVuY2UgdG8gdGhlIENPQSEiKQogICAgbGV0IGFkZHJlc3NCeXRlcyA9IGhleEVuY29kZWRBZGRyZXNzLmRlY29kZUhleCgpLnRvQ29uc3RhbnRTaXplZDxbVUludDg7IDIwXT4oKSEKCiAgICBsZXQgdHhSZXN1bHQgPSBjb2EuY2FsbCgKICAgICAgICB0bzogRVZNLkVWTUFkZHJlc3MoYnl0ZXM6IGFkZHJlc3NCeXRlcyksCiAgICAgICAgZGF0YTogaGV4RW5jb2RlZERhdGEuZGVjb2RlSGV4KCksCiAgICAgICAgZ2FzTGltaXQ6IDE1MDAwMDAwLCAvLyB0b2RvIG1ha2UgaXQgY29uZmlndXJhYmxlLCBtYXggZm9yIG5vdwogICAgICAgIHZhbHVlOiBFVk0uQmFsYW5jZShhdHRvZmxvdzogMCkKICAgICkKCiAgICBhc3NlcnQoCiAgICAgICAgdHhSZXN1bHQuc3RhdHVzID09IEVWTS5TdGF0dXMuZmFpbGVkIHx8IHR4UmVzdWx0LnN0YXR1cyA9PSBFVk0uU3RhdHVzLnN1Y2Nlc3NmdWwsCiAgICAgICAgbWVzc2FnZTogImV2bV9lcnJvcj0iLmNvbmNhdCh0eFJlc3VsdC5lcnJvck1lc3NhZ2UpLmNvbmNhdCgiXG4iKQogICAgKQoKICAgIHJldHVybiBTdHJpbmcuZW5jb2RlSGV4KGNhbGxSZXN1bHQuZGF0YSkKfQo=",
          "callContract": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgY2FsbENvbnRyYWN0IC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQoKaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4MTY1NDY1MzM5OTA0MGE2MQoKaW1wb3J0IEVWTSBmcm9tIDB4ZTQ2N2I5ZGQxMWZhMDBkZgoKCi8vLyBUcmFuc2ZlcnMgJEZMT1cgZnJvbSB0aGUgc2lnbmVyJ3MgYWNjb3VudCBDYWRlbmNlIEZsb3cgYmFsYW5jZSB0byB0aGUgcmVjaXBpZW50J3MgaGV4LWVuY29kZWQgRVZNIGFkZHJlc3MuCi8vLyBOb3RlIHRoYXQgYSBDT0EgbXVzdCBoYXZlIGEgJEZMT1cgYmFsYW5jZSBpbiBFVk0gYmVmb3JlIHRyYW5zZmVycmluZyB2YWx1ZSB0byBhbm90aGVyIEVWTSBhZGRyZXNzLgovLy8KdHJhbnNhY3Rpb24odG9FVk1BZGRyZXNzSGV4OiBTdHJpbmcsIGFtb3VudDogVUZpeDY0LCBkYXRhOiBbVUludDhdLCBnYXNMaW1pdDogVUludDY0KSB7CgogICAgbGV0IGNvYTogYXV0aChFVk0uV2l0aGRyYXcsIEVWTS5DYWxsKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQKICAgIGxldCByZWNpcGllbnRFVk1BZGRyZXNzOiBFVk0uRVZNQWRkcmVzcwoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKEJvcnJvd1ZhbHVlLCBTYXZlVmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogL3N0b3JhZ2UvZXZtKSA9PSBuaWwgewogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKDwtRVZNLmNyZWF0ZUNhZGVuY2VPd25lZEFjY291bnQoKSwgdG86IC9zdG9yYWdlL2V2bSkKICAgICAgICB9CiAgICAgICAgc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uV2l0aGRyYXcsIEVWTS5DYWxsKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBicmlkZ2VkIGFjY291bnQiKQoKICAgICAgICBzZWxmLnJlY2lwaWVudEVWTUFkZHJlc3MgPSBFVk0uYWRkcmVzc0Zyb21TdHJpbmcodG9FVk1BZGRyZXNzSGV4KQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIGlmIHNlbGYucmVjaXBpZW50RVZNQWRkcmVzcy5ieXRlcyA9PSBzZWxmLmNvYS5hZGRyZXNzKCkuYnl0ZXMgewogICAgICAgICAgICByZXR1cm4KICAgICAgICB9CiAgICAgICAgbGV0IHZhbHVlQmFsYW5jZSA9IEVWTS5CYWxhbmNlKGF0dG9mbG93OiAwKQogICAgICAgIHZhbHVlQmFsYW5jZS5zZXRGTE9XKGZsb3c6IGFtb3VudCkKICAgICAgICBsZXQgdHhSZXN1bHQgPSBzZWxmLmNvYS5jYWxsKAogICAgICAgICAgICB0bzogc2VsZi5yZWNpcGllbnRFVk1BZGRyZXNzLAogICAgICAgICAgICBkYXRhOiBkYXRhLAogICAgICAgICAgICBnYXNMaW1pdDogZ2FzTGltaXQsCiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZUJhbGFuY2UKICAgICAgICApCiAgICAgICAgYXNzZXJ0KAogICAgICAgICAgICB0eFJlc3VsdC5zdGF0dXMgPT0gRVZNLlN0YXR1cy5mYWlsZWQgfHwgdHhSZXN1bHQuc3RhdHVzID09IEVWTS5TdGF0dXMuc3VjY2Vzc2Z1bCwKICAgICAgICAgICAgbWVzc2FnZTogImV2bV9lcnJvcj0iLmNvbmNhdCh0eFJlc3VsdC5lcnJvck1lc3NhZ2UpLmNvbmNhdCgiXG4iKQogICAgICAgICkKICAgIH0KfQ==",
          "callContractV2": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgY2FsbENvbnRyYWN0VjIgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhmMjMzZGNlZTg4ZmUwYWJlCgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHgxNjU0NjUzMzk5MDQwYTYxCgppbXBvcnQgRVZNIGZyb20gMHhlNDY3YjlkZDExZmEwMGRmCgoKLy8vIFRyYW5zZmVycyAkRkxPVyBmcm9tIHRoZSBzaWduZXIncyBhY2NvdW50IENhZGVuY2UgRmxvdyBiYWxhbmNlIHRvIHRoZSByZWNpcGllbnQncyBoZXgtZW5jb2RlZCBFVk0gYWRkcmVzcy4KLy8vIE5vdGUgdGhhdCBhIENPQSBtdXN0IGhhdmUgYSAkRkxPVyBiYWxhbmNlIGluIEVWTSBiZWZvcmUgdHJhbnNmZXJyaW5nIHZhbHVlIHRvIGFub3RoZXIgRVZNIGFkZHJlc3MuCi8vLwp0cmFuc2FjdGlvbih0b0VWTUFkZHJlc3NIZXg6IFN0cmluZywgYW1vdW50OiBVSW50MjU2LCBkYXRhOiBbVUludDhdLCBnYXNMaW1pdDogVUludDY0KSB7CgogICAgbGV0IGNvYTogYXV0aChFVk0uV2l0aGRyYXcsIEVWTS5DYWxsKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQKICAgIGxldCByZWNpcGllbnRFVk1BZGRyZXNzOiBFVk0uRVZNQWRkcmVzcwoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKEJvcnJvd1ZhbHVlLCBTYXZlVmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogL3N0b3JhZ2UvZXZtKSA9PSBuaWwgewogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKDwtRVZNLmNyZWF0ZUNhZGVuY2VPd25lZEFjY291bnQoKSwgdG86IC9zdG9yYWdlL2V2bSkKICAgICAgICB9CiAgICAgICAgc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uV2l0aGRyYXcsIEVWTS5DYWxsKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBicmlkZ2VkIGFjY291bnQiKQoKICAgICAgICBzZWxmLnJlY2lwaWVudEVWTUFkZHJlc3MgPSBFVk0uYWRkcmVzc0Zyb21TdHJpbmcodG9FVk1BZGRyZXNzSGV4KQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIGlmIHNlbGYucmVjaXBpZW50RVZNQWRkcmVzcy5ieXRlcyA9PSBzZWxmLmNvYS5hZGRyZXNzKCkuYnl0ZXMgewogICAgICAgICAgICByZXR1cm4KICAgICAgICB9CiAgICAgICAgbGV0IHZhbHVlQmFsYW5jZSA9IEVWTS5CYWxhbmNlKGF0dG9mbG93OiBVSW50KGFtb3VudCkpCgogICAgICAgIGxldCB0eFJlc3VsdCA9IHNlbGYuY29hLmNhbGwoCiAgICAgICAgICAgIHRvOiBzZWxmLnJlY2lwaWVudEVWTUFkZHJlc3MsCiAgICAgICAgICAgIGRhdGE6IGRhdGEsCiAgICAgICAgICAgIGdhc0xpbWl0OiBnYXNMaW1pdCwKICAgICAgICAgICAgdmFsdWU6IHZhbHVlQmFsYW5jZQogICAgICAgICkKICAgICAgICBhc3NlcnQoCiAgICAgICAgICAgIHR4UmVzdWx0LnN0YXR1cyA9PSBFVk0uU3RhdHVzLmZhaWxlZCB8fCB0eFJlc3VsdC5zdGF0dXMgPT0gRVZNLlN0YXR1cy5zdWNjZXNzZnVsLAogICAgICAgICAgICBtZXNzYWdlOiAiZXZtX2Vycm9yPSIuY29uY2F0KHR4UmVzdWx0LmVycm9yTWVzc2FnZSkuY29uY2F0KCJcbiIpCiAgICAgICAgKQogICAgfQp9",
          "checkCoaLink": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgY2hlY2tDb2FMaW5rIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRVZNIGZyb20gMHhlNDY3YjlkZDExZmEwMGRmCgoKLy8vIFJldHVybnMgd2hldGhlciBhIENPQSBpcyBzdG9yZWQgYW5kIGl0cyBwdWJsaWMgY2FwYWJpbGl0eSBpcyBwdWJsaXNoZWQKLy8vCi8vLyBAcGFyYW0gZmxvd0FkZHJlc3M6IFRoZSBGbG93IGFkZHJlc3MgdG8gY2hlY2sgZm9yIGEgQ09BCi8vLwovLy8gQHJldHVybiBCb29sOiBXaGV0aGVyIGEgQ09BIGlzIHN0b3JlZCBhbmQgaXRzIHB1YmxpYyBjYXBhYmlsaXR5IGlzIHB1Ymxpc2hlZCwgbmlsIGlmIG5vIENPQSBpcyBzdG9yZWQKLy8vCmFjY2VzcyhhbGwpIGZ1biBtYWluKGZsb3dBZGRyZXNzOiBBZGRyZXNzKTogQm9vbD8gewogICAgLy8gQm9ycm93IHRoZSBDT0EgdG8gY2hlY2sgaWYgb25lIGlzIHN0b3JlZAogICAgaWYgbGV0IGFkZHJlc3M6IEVWTS5FVk1BZGRyZXNzID0gZ2V0QXV0aEFjY291bnQ8YXV0aChCb3Jyb3dWYWx1ZSkgJkFjY291bnQ+KGZsb3dBZGRyZXNzKQogICAgICAgIC5zdG9yYWdlLmJvcnJvdzwmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSk/LmFkZHJlc3MoKSB7CiAgICAgICAgLy8gQ09BIGZvdW5kIC0gY2hlY2sgaWYgdGhlIHB1YmxpYyBjYXBhYmlsaXR5IGlzIHB1Ymxpc2hlZAogICAgICAgIHJldHVybiBnZXRBY2NvdW50KGZsb3dBZGRyZXNzKS5jYXBhYmlsaXRpZXMuYm9ycm93PCZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oL3B1YmxpYy9ldm0pICE9IG5pbAogICAgfQogICAgLy8gTm8gQ09BIGZvdW5kIC0gcmV0dXJuIG5pbAogICAgcmV0dXJuIG5pbAp9",
          "coaLink": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgY29hTGluayAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IENyeXB0bwppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQoKaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4MTY1NDY1MzM5OTA0MGE2MQoKaW1wb3J0IEVWTSBmcm9tIDB4ZTQ2N2I5ZGQxMWZhMDBkZgoKCi8vLyBUaGlzIHRyYW5zYWN0aW9uIHB1Ymxpc2hlcyBhIHB1YmxpYyAqKnVuZW50aXRsZWQqKiBjYXBhYmlsaXR5IGZvciB0aGUgQ09BIHN0b3JlZCBpbiB0aGUgc2lnbmluZyBhY2NvdW50J3Mgc3RvcmFnZQovLy8gd2hlcmUgYSBDT0EgaGFzIGFscmVhZHkgYmVlbiBzdG9yZWQuCi8vLwp0cmFuc2FjdGlvbiB7CgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQm9ycm93VmFsdWUsIFN0b3JhZ2VDYXBhYmlsaXRpZXMsIFB1Ymxpc2hDYXBhYmlsaXR5LCBVbnB1Ymxpc2hDYXBhYmlsaXR5KSAmQWNjb3VudCkgewogICAgICAgIC8vIEVuc3VyZSBhIENPQSBpcyBzdG9yZWQKICAgICAgICBsZXQgY29hUGF0aCA9IC9zdG9yYWdlL2V2bQogICAgICAgIGxldCBjb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uQ2FsbCkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50Pihmcm9tOiAvc3RvcmFnZS9ldm0pCiAgICAgICAgICAgID8/IHBhbmljKAogICAgICAgICAgICAgICAgIkNvdWxkIG5vdCBmaW5kIENPQSBpbiBzdG9yYWdlIGF0IHBhdGggIi5jb25jYXQoY29hUGF0aC50b1N0cmluZygpKQogICAgICAgICAgICAgICAgLmNvbmNhdCgiLiBNYWtlIHN1cmUgdGhlIHNpZ25pbmcgYWNjb3VudCBoYXMgaW5pdGlhbGl6ZWQgYSBDT0EgYXQgdGhlIGV4cGVjdGVkIHBhdGguIikKICAgICAgICAgICAgKQoKICAgICAgICAvLyBQdWJsaXNoIGEgcHVibGljICoqdW5lbnRpdGxlZCoqIGNhcGFiaWxpdHkKICAgICAgICBsZXQgY29hUHVibGljUGF0aCA9IC9wdWJsaWMvZXZtCiAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy51bnB1Ymxpc2goY29hUHVibGljUGF0aCkKICAgICAgICBsZXQgY29hQ2FwYWJpbGl0eSA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGNvYVBhdGgpCiAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy5wdWJsaXNoKGNvYUNhcGFiaWxpdHksIGF0OiBjb2FQdWJsaWNQYXRoKQogICAgfQp9",
          "createCoa": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgY3JlYXRlQ29hIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQoKaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4MTY1NDY1MzM5OTA0MGE2MQoKaW1wb3J0IEVWTSBmcm9tIDB4ZTQ2N2I5ZGQxMWZhMDBkZgoKCgovLy8gQ3JlYXRlcyBhIENPQSBhbmQgc2F2ZXMgaXQgaW4gdGhlIHNpZ25lcidzIEZsb3cgYWNjb3VudCAmIHBhc3NpbmcgdGhlIGdpdmVuIHZhbHVlIG9mIEZsb3cgaW50byBGbG93RVZNCnRyYW5zYWN0aW9uKGFtb3VudDogVUZpeDY0KSB7CiAgICBsZXQgc2VudFZhdWx0OiBARmxvd1Rva2VuLlZhdWx0CiAgICBsZXQgYXV0aDogYXV0aChJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUsIFVucHVibGlzaENhcGFiaWxpdHkpICZBY2NvdW50CgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQm9ycm93VmFsdWUsIElzc3VlU3RvcmFnZUNhcGFiaWxpdHlDb250cm9sbGVyLCBQdWJsaXNoQ2FwYWJpbGl0eSwgU2F2ZVZhbHVlLCBVbnB1Ymxpc2hDYXBhYmlsaXR5KSAmQWNjb3VudCkgewogICAgICAgIGxldCB2YXVsdFJlZiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZGbG93VG9rZW4uVmF1bHQ+KAogICAgICAgICAgICAgICAgZnJvbTogL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyByZWZlcmVuY2UgdG8gdGhlIG93bmVyJ3MgVmF1bHQhIikKCiAgICAgICAgc2VsZi5zZW50VmF1bHQgPC0gdmF1bHRSZWYud2l0aGRyYXcoYW1vdW50OiBhbW91bnQpIGFzISBARmxvd1Rva2VuLlZhdWx0CiAgICAgICAgc2VsZi5hdXRoID0gc2lnbmVyCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgbGV0IGNvYSA8LSBFVk0uY3JlYXRlQ2FkZW5jZU93bmVkQWNjb3VudCgpCiAgICAgICAgY29hLmRlcG9zaXQoZnJvbTogPC1zZWxmLnNlbnRWYXVsdCkKCiAgICAgICAgbG9nKGNvYS5iYWxhbmNlKCkuaW5GTE9XKCkpCiAgICAgICAgbGV0IHN0b3JhZ2VQYXRoID0gU3RvcmFnZVBhdGgoaWRlbnRpZmllcjogImV2bSIpIQogICAgICAgIGxldCBwdWJsaWNQYXRoID0gUHVibGljUGF0aChpZGVudGlmaWVyOiAiZXZtIikhCiAgICAgICAgc2VsZi5hdXRoLnN0b3JhZ2Uuc2F2ZTxARVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KDwtY29hLCB0bzogc3RvcmFnZVBhdGgpCiAgICAgICAgbGV0IGFkZHJlc3NhYmxlQ2FwID0gc2VsZi5hdXRoLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oc3RvcmFnZVBhdGgpCiAgICAgICAgc2VsZi5hdXRoLmNhcGFiaWxpdGllcy51bnB1Ymxpc2gocHVibGljUGF0aCkKICAgICAgICBzZWxmLmF1dGguY2FwYWJpbGl0aWVzLnB1Ymxpc2goYWRkcmVzc2FibGVDYXAsIGF0OiBwdWJsaWNQYXRoKQogICAgfQp9",
          "createCoaEmpty": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgY3JlYXRlQ29hRW1wdHkgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhmMjMzZGNlZTg4ZmUwYWJlCgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHgxNjU0NjUzMzk5MDQwYTYxCgppbXBvcnQgRVZNIGZyb20gMHhlNDY3YjlkZDExZmEwMGRmCgoKCi8vLyBDcmVhdGVzIGEgQ09BIGFuZCBzYXZlcyBpdCBpbiB0aGUgc2lnbmVyJ3MgRmxvdyBhY2NvdW50ICYgcGFzc2luZyB0aGUgZ2l2ZW4gdmFsdWUgb2YgRmxvdyBpbnRvIEZsb3dFVk0KdHJhbnNhY3Rpb24oKSB7CiAgICBsZXQgYXV0aDogYXV0aChJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUsIFVucHVibGlzaENhcGFiaWxpdHkpICZBY2NvdW50CgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQm9ycm93VmFsdWUsIElzc3VlU3RvcmFnZUNhcGFiaWxpdHlDb250cm9sbGVyLCBQdWJsaXNoQ2FwYWJpbGl0eSwgU2F2ZVZhbHVlLCBVbnB1Ymxpc2hDYXBhYmlsaXR5KSAmQWNjb3VudCkgewogICAgICAgIGxldCB2YXVsdFJlZiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZGbG93VG9rZW4uVmF1bHQ+KAogICAgICAgICAgICAgICAgZnJvbTogL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyByZWZlcmVuY2UgdG8gdGhlIG93bmVyJ3MgVmF1bHQhIikKICAgICAgICBzZWxmLmF1dGggPSBzaWduZXIKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICBsZXQgY29hIDwtIEVWTS5jcmVhdGVDYWRlbmNlT3duZWRBY2NvdW50KCkKICAgICAgICBsZXQgc3RvcmFnZVBhdGggPSBTdG9yYWdlUGF0aChpZGVudGlmaWVyOiAiZXZtIikhCiAgICAgICAgbGV0IHB1YmxpY1BhdGggPSBQdWJsaWNQYXRoKGlkZW50aWZpZXI6ICJldm0iKSEKICAgICAgICBzZWxmLmF1dGguc3RvcmFnZS5zYXZlPEBFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oPC1jb2EsIHRvOiBzdG9yYWdlUGF0aCkKICAgICAgICBsZXQgYWRkcmVzc2FibGVDYXAgPSBzZWxmLmF1dGguY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JkVWTS5DYWRlbmNlT3duZWRBY2NvdW50PihzdG9yYWdlUGF0aCkKICAgICAgICBzZWxmLmF1dGguY2FwYWJpbGl0aWVzLnVucHVibGlzaChwdWJsaWNQYXRoKQogICAgICAgIHNlbGYuYXV0aC5jYXBhYmlsaXRpZXMucHVibGlzaChhZGRyZXNzYWJsZUNhcCwgYXQ6IHB1YmxpY1BhdGgpCiAgICB9Cn0=",
          "deployContract": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZGVwbG95Q29udHJhY3QgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBFVk0gZnJvbSAweGU0NjdiOWRkMTFmYTAwZGYKCgoKdHJhbnNhY3Rpb24oY29kZTogU3RyaW5nKSB7CiAgICBsZXQgY29hOiBhdXRoKEVWTS5EZXBsb3kpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudAoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UpICZBY2NvdW50KSB7CiAgICAgICAgc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uRGVwbG95KSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KAogICAgICAgIGZyb206IC9zdG9yYWdlL2V2bSkgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVmZXJlbmNlIHRvIHRoZSBDT0EhIikKCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgIHNlbGYuY29hLmRlcGxveShjb2RlOiBjb2RlLmRlY29kZUhleCgpLCAgZ2FzTGltaXQ6IDE1MDAwMDAwLCB2YWx1ZTogRVZNLkJhbGFuY2UoYXR0b2Zsb3c6IDApKQogICAgfQp9Cg==",
          "estimateGas": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZXN0aW1hdGVHYXMgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBFVk0gZnJvbSAweGU0NjdiOWRkMTFmYTAwZGYKCgphY2Nlc3MoYWxsKQpmdW4gbWFpbihoZXhFbmNvZGVkVHg6IFN0cmluZywgYWRkcmVzczogQWRkcmVzcyk6IFtVSW50NjQ7IDJdIHsKICAgIGxldCBhY2NvdW50ID0gZ2V0QXV0aEFjY291bnQ8YXV0aChTdG9yYWdlKSAmQWNjb3VudD4oYWRkcmVzcykKCiAgICBsZXQgY29hID0gYWNjb3VudC5zdG9yYWdlLmJvcnJvdzwmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KAogICAgICAgIGZyb206IC9zdG9yYWdlL2V2bQogICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyByZWZlcmVuY2UgdG8gdGhlIENPQSEiKQogICAgbGV0IHR4UmVzdWx0ID0gRVZNLnJ1bih0eDogaGV4RW5jb2RlZFR4LmRlY29kZUhleCgpLCBjb2luYmFzZTogY29hLmFkZHJlc3MoKSkKCiAgICBhc3NlcnQoCiAgICAgICAgdHhSZXN1bHQuc3RhdHVzID09IEVWTS5TdGF0dXMuZmFpbGVkIHx8IHR4UmVzdWx0LnN0YXR1cyA9PSBFVk0uU3RhdHVzLnN1Y2Nlc3NmdWwsCiAgICAgICAgbWVzc2FnZTogImV2bV9lcnJvcj0iLmNvbmNhdCh0eFJlc3VsdC5lcnJvck1lc3NhZ2UpLmNvbmNhdCgiXG4iKQogICAgKQoKICAgIHJldHVybiBbdHhSZXN1bHQuZXJyb3JDb2RlLCB0eFJlc3VsdC5nYXNVc2VkXQp9Cg==",
          "fundCoa": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZnVuZENvYSAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweGYyMzNkY2VlODhmZTBhYmUKCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweDE2NTQ2NTMzOTkwNDBhNjEKCmltcG9ydCBFVk0gZnJvbSAweGU0NjdiOWRkMTFmYTAwZGYKCgp0cmFuc2FjdGlvbihhbW91bnQ6IFVGaXg2NCkgewogICAgbGV0IHNlbnRWYXVsdDogQEZsb3dUb2tlbi5WYXVsdAogICAgbGV0IGF1dGg6IGF1dGgoU3RvcmFnZSkgJkFjY291bnQKICAgIGxldCBjb2E6ICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudAoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UpICZBY2NvdW50KSB7CiAgICAgICAgbGV0IHZhdWx0UmVmID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJkZsb3dUb2tlbi5WYXVsdD4oCiAgICAgICAgICAgIGZyb206IC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyByZWZlcmVuY2UgdG8gdGhlIG93bmVyJ3MgVmF1bHQhIikKCgogICAgICAgIGxldCBjb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8JkVWTS5DYWRlbmNlT3duZWRBY2NvdW50PigKICAgICAgICAgICAgZnJvbTogL3N0b3JhZ2UvZXZtCiAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyByZWZlcmVuY2UgdG8gdGhlIENPQSEiKQoKICAgICAgICBzZWxmLnNlbnRWYXVsdCA8LSB2YXVsdFJlZi53aXRoZHJhdyhhbW91bnQ6IGFtb3VudCkgYXMhIEBGbG93VG9rZW4uVmF1bHQKICAgICAgICBzZWxmLmF1dGggPSBzaWduZXIKICAgICAgICBzZWxmLmNvYSA9IGNvYQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIHNlbGYuY29hLmRlcG9zaXQoZnJvbTogPC1zZWxmLnNlbnRWYXVsdCkKICAgIH0KfQo=",
          "fundEvmAddr": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZnVuZEV2bUFkZHIgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhmMjMzZGNlZTg4ZmUwYWJlCgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHgxNjU0NjUzMzk5MDQwYTYxCgppbXBvcnQgRVZNIGZyb20gMHhlNDY3YjlkZDExZmEwMGRmCgoKdHJhbnNhY3Rpb24oZXZtQWRkcjogU3RyaW5nLCBhbW91bnQ6IFVGaXg2NCkgewoKICAgIC8vIFRoZSBWYXVsdCByZXNvdXJjZSB0aGF0IGhvbGRzIHRoZSB0b2tlbnMgdGhhdCBhcmUgYmVpbmcgdHJhbnNmZXJlZAogICAgbGV0IHNlbnRWYXVsdDogQHtGdW5naWJsZVRva2VuLlZhdWx0fQoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UsIEJvcnJvd1ZhbHVlKSAmQWNjb3VudCkgewogICAgICAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIHNpZ25lcidzIHN0b3JlZCB2YXVsdAogICAgICAgIGxldCB2YXVsdFJlZiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICY8VG9rZW4+LlZhdWx0Pihmcm9tOiA8VG9rZW5TdG9yYWdlUGF0aD4pCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlZmVyZW5jZSB0byB0aGUgb3duZXIncyBWYXVsdCEiKQoKICAgICAgICAvLyBXaXRoZHJhdyB0b2tlbnMgZnJvbSB0aGUgc2lnbmVyJ3Mgc3RvcmVkIHZhdWx0CiAgICAgICAgc2VsZi5zZW50VmF1bHQgPC0gdmF1bHRSZWYud2l0aGRyYXcoYW1vdW50OiBhbW91bnQpCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgLy8gR2V0IHRoZSByZWNpcGllbnQncyBwdWJsaWMgYWNjb3VudCBvYmplY3QKICAgICAgICBsZXQgcmVjaXBpZW50QWNjb3VudCA9IGdldEFjY291bnQocmVjaXBpZW50KQoKICAgICAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIHJlY2lwaWVudCdzIFJlY2VpdmVyCiAgICAgICAgbGV0IHJlY2VpdmVyUmVmID0gcmVjaXBpZW50QWNjb3VudC5jYXBhYmlsaXRpZXMuYm9ycm93PCZ7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KDxUb2tlblJlY2VpdmVyUGF0aD4pIQogICAgICAgICAgICAKICAgICAgICAvLyBEZXBvc2l0IHRoZSB3aXRoZHJhd24gdG9rZW5zIGluIHRoZSByZWNpcGllbnQncyByZWNlaXZlcgogICAgICAgIHJlY2VpdmVyUmVmLmRlcG9zaXQoZnJvbTogPC1zZWxmLnNlbnRWYXVsdCkKICAgIH0KfQ==",
          "getAddr": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0QWRkciAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEVWTSBmcm9tIDB4ZTQ2N2I5ZGQxMWZhMDBkZgoKCmFjY2VzcyhhbGwpIGZ1biBtYWluKGZsb3dBZGRyZXNzOiBBZGRyZXNzKTogU3RyaW5nPyB7CiAgICBpZiBsZXQgYWRkcmVzczogRVZNLkVWTUFkZHJlc3MgPSBnZXRBdXRoQWNjb3VudDxhdXRoKEJvcnJvd1ZhbHVlKSAmQWNjb3VudD4oZmxvd0FkZHJlc3MpCiAgICAgICAgLnN0b3JhZ2UuYm9ycm93PCZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oZnJvbTogL3N0b3JhZ2UvZXZtKT8uYWRkcmVzcygpIHsKICAgICAgICBsZXQgYnl0ZXM6IFtVSW50OF0gPSBbXQogICAgICAgIGZvciBieXRlIGluIGFkZHJlc3MuYnl0ZXMgewogICAgICAgICAgICBieXRlcy5hcHBlbmQoYnl0ZSkKICAgICAgICB9CiAgICAgICAgcmV0dXJuIFN0cmluZy5lbmNvZGVIZXgoYnl0ZXMpCiAgICB9CiAgICByZXR1cm4gbmlsCn0=",
          "getBalance": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0QmFsYW5jZSAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEVWTSBmcm9tIDB4ZTQ2N2I5ZGQxMWZhMDBkZgoKCmFjY2VzcyhhbGwpCmZ1biBtYWluKGhleEVuY29kZWRBZGRyZXNzOiBTdHJpbmcpOiBVSW50IHsKICAgIGxldCBhZGRyZXNzQnl0ZXMgPSBoZXhFbmNvZGVkQWRkcmVzcy5kZWNvZGVIZXgoKS50b0NvbnN0YW50U2l6ZWQ8W1VJbnQ4OyAyMF0+KCkhCiAgICBsZXQgYWRkcmVzcyA9IEVWTS5FVk1BZGRyZXNzKGJ5dGVzOiBhZGRyZXNzQnl0ZXMpCgogICAgcmV0dXJuIGFkZHJlc3MuYmFsYW5jZSgpLmluQXR0b0ZMT1coKQp9Cg==",
          "getCoaAddr": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0Q29hQWRkciAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEVWTSBmcm9tIDB4ZTQ2N2I5ZGQxMWZhMDBkZgoKCmFjY2VzcyhhbGwpCmZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MpOiBTdHJpbmcgewogICAgbGV0IGFjY291bnQgPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UpICZBY2NvdW50PihhZGRyZXNzKQoKICAgIGxldCBjb2EgPSBhY2NvdW50LnN0b3JhZ2UuYm9ycm93PCZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oCiAgICAgICAgZnJvbTogL3N0b3JhZ2UvZXZtCiAgICApCgogICAgaWYgY29hID09IG5pbCB7IAogICAgICAgIHJldHVybiAiIgogICAgfSBlbHNlIHsKICAgICAgICBsZXQgY29hQWRkciA9IGNvYT8uYWRkcmVzcygpIAoKICAgICAgICBsZXQgYWRkckJ5dGU6IFtVSW50OF0gPSBbXQoKICAgICAgICBmb3IgYnl0ZSBpbiBjb2FBZGRyPy5ieXRlcyEgewogICAgICAgICAgICBhZGRyQnl0ZS5hcHBlbmQoYnl0ZSkKICAgICAgICB9CgogICAgICAgIHJldHVybiBTdHJpbmcuZW5jb2RlSGV4KGFkZHJCeXRlKQogICAgfQp9Cg==",
          "getCoaBalance": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0Q29hQmFsYW5jZSAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEVWTSBmcm9tIDB4ZTQ2N2I5ZGQxMWZhMDBkZgoKCmFjY2VzcyhhbGwpCmZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MpOiBVRml4NjQgewogICAgIGxldCBhY2NvdW50ID0gZ2V0QXV0aEFjY291bnQ8YXV0aChTdG9yYWdlKSAmQWNjb3VudD4oYWRkcmVzcykKCiAgICBsZXQgY29hID0gYWNjb3VudC5zdG9yYWdlLmJvcnJvdzwmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KAogICAgICAgIGZyb206IC9zdG9yYWdlL2V2bQogICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyByZWZlcmVuY2UgdG8gdGhlIENPQSEiKQogICAgCiAgICByZXR1cm4gY29hLmJhbGFuY2UoKS5pbkZMT1coKQp9Cg==",
          "getCode": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0Q29kZSAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEVWTSBmcm9tIDB4ZTQ2N2I5ZGQxMWZhMDBkZgoKCmFjY2VzcyhhbGwpCmZ1biBtYWluKGhleEVuY29kZWRBZGRyZXNzOiBTdHJpbmcpOiBTdHJpbmcgewogICAgbGV0IGFkZHJlc3NCeXRlcyA9IGhleEVuY29kZWRBZGRyZXNzLmRlY29kZUhleCgpLnRvQ29uc3RhbnRTaXplZDxbVUludDg7IDIwXT4oKSEKICAgIGxldCBhZGRyZXNzID0gRVZNLkVWTUFkZHJlc3MoYnl0ZXM6IGFkZHJlc3NCeXRlcykKCiAgICByZXR1cm4gU3RyaW5nLmVuY29kZUhleChhZGRyZXNzLmNvZGUoKSkKfQo=",
          "getNonce": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0Tm9uY2UgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBFVk0gZnJvbSAweGU0NjdiOWRkMTFmYTAwZGYKCgphY2Nlc3MoYWxsKQpmdW4gbWFpbihoZXhFbmNvZGVkQWRkcmVzczogU3RyaW5nKTogVUludDY0IHsKICAgIGxldCBhZGRyZXNzQnl0ZXMgPSBoZXhFbmNvZGVkQWRkcmVzcy5kZWNvZGVIZXgoKS50b0NvbnN0YW50U2l6ZWQ8W1VJbnQ4OyAyMF0+KCkhCiAgICBsZXQgYWRkcmVzcyA9IEVWTS5FVk1BZGRyZXNzKGJ5dGVzOiBhZGRyZXNzQnl0ZXMpCgogICAgcmV0dXJuIGFkZHJlc3Mubm9uY2UoKQp9Cg==",
          "newAccountAndCoa": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgbmV3QWNjb3VudEFuZENvYSAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IENyeXB0bwppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQoKaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4MTY1NDY1MzM5OTA0MGE2MQoKaW1wb3J0IEVWTSBmcm9tIDB4ZTQ2N2I5ZGQxMWZhMDBkZgoKCnRyYW5zYWN0aW9uKHB1YmxpY0tleTogU3RyaW5nLCBzaWduYXR1cmVBbGdvcml0aG06IFVJbnQ4LCBoYXNoQWxnb3JpdGhtOiBVSW50OCwgd2VpZ2h0OiBVRml4NjQpIHsKICAgIGxldCBzZW50VmF1bHQ6IEBGbG93VG9rZW4uVmF1bHQKICAgIGxldCBhdXRoOiBhdXRoKFN0b3JhZ2UpICZBY2NvdW50CgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSkgJkFjY291bnQpIHsKCiAgICAgICAgbGV0IGFjY291bnQgPSBBY2NvdW50KHBheWVyOiBzaWduZXIpCgogICAgICAgIGxldCBrZXkgPSBQdWJsaWNLZXkoCiAgICAgICAgICAgIHB1YmxpY0tleTogcHVibGljS2V5LmRlY29kZUhleCgpLAogICAgICAgICAgICBzaWduYXR1cmVBbGdvcml0aG06IFNpZ25hdHVyZUFsZ29yaXRobShyYXdWYWx1ZTogc2lnbmF0dXJlQWxnb3JpdGhtKSEKICAgICAgICApCgogICAgICAgIGFjY291bnQua2V5cy5hZGQocHVibGljS2V5OiBrZXksIGhhc2hBbGdvcml0aG06IEhhc2hBbGdvcml0aG0ocmF3VmFsdWU6IGhhc2hBbGdvcml0aG0pISwgd2VpZ2h0OiB3ZWlnaHQpCgkJCiAgICAgICAgbGV0IHZhdWx0UmVmID0gYWNjb3VudC5zdG9yYWdlLmJvcnJvdzxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZGbG93VG9rZW4uVmF1bHQ+KAogICAgICAgICAgICBmcm9tOiAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICkgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVmZXJlbmNlIHRvIHRoZSBvd25lcidzIFZhdWx0ISIpCgogICAgICAgIHNlbGYuc2VudFZhdWx0IDwtIHZhdWx0UmVmLndpdGhkcmF3KGFtb3VudDogMC4wKSBhcyEgQEZsb3dUb2tlbi5WYXVsdAogICAgICAgIHNlbGYuYXV0aCA9IGFjY291bnQKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICBsZXQgYWNjb3VudCA8LSBFVk0uY3JlYXRlQ2FkZW5jZU93bmVkQWNjb3VudCgpCiAgICAgICAgbG9nKGFjY291bnQuYWRkcmVzcygpKQogICAgICAgIGFjY291bnQuZGVwb3NpdChmcm9tOiA8LXNlbGYuc2VudFZhdWx0KQoKICAgICAgICBsb2coYWNjb3VudC5iYWxhbmNlKCkpCiAgICAgICAgc2VsZi5hdXRoLnN0b3JhZ2Uuc2F2ZTxARVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KDwtYWNjb3VudCwgdG86IFN0b3JhZ2VQYXRoKGlkZW50aWZpZXI6ICJldm0iKSEpCiAgICB9Cn0K",
          "run": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgcnVuIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRVZNIGZyb20gMHhlNDY3YjlkZDExZmEwMGRmCgoKdHJhbnNhY3Rpb24oaGV4RW5jb2RlZFR4OiBTdHJpbmcpIHsKICAgIGxldCBjb2E6ICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudAoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UpICZBY2NvdW50KSB7CiAgICAgICAgc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8JkVWTS5DYWRlbmNlT3duZWRBY2NvdW50PigKICAgICAgICAgICAgZnJvbTogL3N0b3JhZ2UvZXZtCiAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyByZWZlcmVuY2UgdG8gdGhlIENPQSEiKQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIGxldCB0eFJlc3VsdCA9IEVWTS5ydW4odHg6IGhleEVuY29kZWRUeC5kZWNvZGVIZXgoKSwgY29pbmJhc2U6IHNlbGYuY29hLmFkZHJlc3MoKSkKICAgICAgICAvLyB0b2RvIG9ubHkgdGVtcG9yYXJ5IHVudGlsIHdlIGNvcnJlY3RseSBoYW5kbGUgZmFpbHVyZSBldmVudHMKICAgICAgICBhc3NlcnQoCiAgICAgICAgICAgIHR4UmVzdWx0LnN0YXR1cyA9PSBFVk0uU3RhdHVzLmZhaWxlZCB8fCB0eFJlc3VsdC5zdGF0dXMgPT0gRVZNLlN0YXR1cy5zdWNjZXNzZnVsLAogICAgICAgICAgICBtZXNzYWdlOiAiZXZtX2Vycm9yPSIuY29uY2F0KHR4UmVzdWx0LmVycm9yTWVzc2FnZSkuY29uY2F0KCJcbiIpCiAgICAgICAgKQogICAgfQp9Cg==",
          "transferCoa": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgdHJhbnNmZXJDb2EgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhmMjMzZGNlZTg4ZmUwYWJlCgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHgxNjU0NjUzMzk5MDQwYTYxCgppbXBvcnQgRVZNIGZyb20gMHhlNDY3YjlkZDExZmEwMGRmCgoKdHJhbnNhY3Rpb24oYW1vdW50OiBVRml4NjQsIGFkZHJlc3M6IEFkZHJlc3MpIHsKICAgIGxldCBzZW50VmF1bHQ6IEBGbG93VG9rZW4uVmF1bHQKCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChTdG9yYWdlLCBFVk0uV2l0aGRyYXcpICZBY2NvdW50KSB7CiAgICAgICAgbGV0IGNvYSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEVWTS5XaXRoZHJhdykgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50PigKICAgICAgICAgICAgZnJvbTogL3N0b3JhZ2UvZXZtCiAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyByZWZlcmVuY2UgdG8gdGhlIENPQSEiKQoKICAgICAgICBzZWxmLnNlbnRWYXVsdCA8LSBjb2Eud2l0aGRyYXcoYmFsYW5jZTogRVZNLkJhbGFuY2UoYXR0b2Zsb3c6IFVJbnQoYW1vdW50KSAqIDEwMDAwMDAwMDAwMDAwMDAwMCkpIGFzISBARmxvd1Rva2VuLlZhdWx0CiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgICAgICAgbGV0IHJlY2VpdmVyID0gYWNjb3VudC5jYXBhYmlsaXRpZXMuYm9ycm93PCZ7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KC9wdWJsaWMvZmxvd1Rva2VuUmVjZWl2ZXIpIQogICAgICAgIHJlY2VpdmVyLmRlcG9zaXQoZnJvbTogPC1zZWxmLnNlbnRWYXVsdCkKICAgIH0KfQo=",
          "transferFlowFromCoaToFlow": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgdHJhbnNmZXJGbG93RnJvbUNvYVRvRmxvdyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweGYyMzNkY2VlODhmZTBhYmUKCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweDE2NTQ2NTMzOTkwNDBhNjEKCmltcG9ydCBFVk0gZnJvbSAweGU0NjdiOWRkMTFmYTAwZGYKCgp0cmFuc2FjdGlvbihhbW91bnQ6IFVGaXg2NCwgYWRkcmVzczogQWRkcmVzcykgewogICAgbGV0IHNlbnRWYXVsdDogQEZsb3dUb2tlbi5WYXVsdAoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UsIEVWTS5XaXRoZHJhdykgJkFjY291bnQpIHsKICAgICAgICBsZXQgY29hID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRVZNLldpdGhkcmF3KSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KAogICAgICAgICAgICBmcm9tOiAvc3RvcmFnZS9ldm0KICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlZmVyZW5jZSB0byB0aGUgQ09BISIpCiAgICAgICAgbGV0IHdpdGhkcmF3QmFsYW5jZSA9IEVWTS5CYWxhbmNlKGF0dG9mbG93OiAwKQogICAgICAgIHdpdGhkcmF3QmFsYW5jZS5zZXRGTE9XKGZsb3c6IGFtb3VudCkKICAgICAgICBzZWxmLnNlbnRWYXVsdCA8LSBjb2Eud2l0aGRyYXcoYmFsYW5jZTogd2l0aGRyYXdCYWxhbmNlKSBhcyEgQEZsb3dUb2tlbi5WYXVsdAogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgICAgIGxldCByZWNlaXZlciA9IGFjY291bnQuY2FwYWJpbGl0aWVzLmJvcnJvdzwme0Z1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9PigvcHVibGljL2Zsb3dUb2tlblJlY2VpdmVyKSEKICAgICAgICByZWNlaXZlci5kZXBvc2l0KGZyb206IDwtc2VsZi5zZW50VmF1bHQpCiAgICB9Cn0K",
          "transferFlowToEvmAddress": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgdHJhbnNmZXJGbG93VG9Fdm1BZGRyZXNzIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQoKaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4MTY1NDY1MzM5OTA0MGE2MQoKaW1wb3J0IEVWTSBmcm9tIDB4ZTQ2N2I5ZGQxMWZhMDBkZgoKCi8vLyBUcmFuc2ZlcnMgJEZMT1cgZnJvbSB0aGUgc2lnbmVyJ3MgYWNjb3VudCBDYWRlbmNlIEZsb3cgYmFsYW5jZSB0byB0aGUgcmVjaXBpZW50J3MgaGV4LWVuY29kZWQgRVZNIGFkZHJlc3MuCi8vLyBOb3RlIHRoYXQgYSBDT0EgbXVzdCBoYXZlIGEgJEZMT1cgYmFsYW5jZSBpbiBFVk0gYmVmb3JlIHRyYW5zZmVycmluZyB2YWx1ZSB0byBhbm90aGVyIEVWTSBhZGRyZXNzLgovLy8KdHJhbnNhY3Rpb24ocmVjaXBpZW50RVZNQWRkcmVzc0hleDogU3RyaW5nLCBhbW91bnQ6IFVGaXg2NCwgZ2FzTGltaXQ6IFVJbnQ2NCkgewoKICAgIGxldCBjb2E6IGF1dGgoRVZNLldpdGhkcmF3LCBFVk0uQ2FsbCkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50CiAgICBsZXQgcmVjaXBpZW50RVZNQWRkcmVzczogRVZNLkVWTUFkZHJlc3MKICAgIHZhciBzZW50VmF1bHQ6IEBGbG93VG9rZW4uVmF1bHQKCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChCb3Jyb3dWYWx1ZSwgU2F2ZVZhbHVlKSAmQWNjb3VudCkgewogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLnR5cGUoYXQ6IC9zdG9yYWdlL2V2bSkgPT0gbmlsIHsKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZSg8LUVWTS5jcmVhdGVDYWRlbmNlT3duZWRBY2NvdW50KCksIHRvOiAvc3RvcmFnZS9ldm0pCiAgICAgICAgfQogICAgICAgIHNlbGYuY29hID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRVZNLldpdGhkcmF3LCBFVk0uQ2FsbCkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50Pihmcm9tOiAvc3RvcmFnZS9ldm0pCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3MgYnJpZGdlZCBhY2NvdW50IikKCiAgICAgICAgbGV0IHZhdWx0UmVmID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJkZsb3dUb2tlbi5WYXVsdD4oCiAgICAgICAgICAgICAgICBmcm9tOiAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlZmVyZW5jZSB0byB0aGUgb3duZXIncyBWYXVsdCEiKQogICAgICAgIHNlbGYuc2VudFZhdWx0IDwtIHZhdWx0UmVmLndpdGhkcmF3KGFtb3VudDogYW1vdW50KSBhcyEgQEZsb3dUb2tlbi5WYXVsdAoKICAgICAgICBzZWxmLnJlY2lwaWVudEVWTUFkZHJlc3MgPSBFVk0uYWRkcmVzc0Zyb21TdHJpbmcocmVjaXBpZW50RVZNQWRkcmVzc0hleCkKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICBzZWxmLmNvYS5kZXBvc2l0KGZyb206IDwtc2VsZi5zZW50VmF1bHQpCiAgICAgICAgCiAgICAgICAgbGV0IHZhbHVlQmFsYW5jZSA9IEVWTS5CYWxhbmNlKGF0dG9mbG93OiAwKQogICAgICAgIHZhbHVlQmFsYW5jZS5zZXRGTE9XKGZsb3c6IGFtb3VudCkKICAgICAgICBsZXQgdHhSZXN1bHQgPSBzZWxmLmNvYS5jYWxsKAogICAgICAgICAgICB0bzogc2VsZi5yZWNpcGllbnRFVk1BZGRyZXNzLAogICAgICAgICAgICBkYXRhOiBbXSwKICAgICAgICAgICAgZ2FzTGltaXQ6IGdhc0xpbWl0LAogICAgICAgICAgICB2YWx1ZTogdmFsdWVCYWxhbmNlCiAgICAgICAgKQogICAgICAgIGFzc2VydCgKICAgICAgICAgICAgdHhSZXN1bHQuc3RhdHVzID09IEVWTS5TdGF0dXMuZmFpbGVkIHx8IHR4UmVzdWx0LnN0YXR1cyA9PSBFVk0uU3RhdHVzLnN1Y2Nlc3NmdWwsCiAgICAgICAgICAgIG1lc3NhZ2U6ICJldm1fZXJyb3I9Ii5jb25jYXQodHhSZXN1bHQuZXJyb3JNZXNzYWdlKS5jb25jYXQoIlxuIikKICAgICAgICApCgogICAgfQp9",
          "withdrawCoa": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgd2l0aGRyYXdDb2EgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhmMjMzZGNlZTg4ZmUwYWJlCgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHgxNjU0NjUzMzk5MDQwYTYxCgppbXBvcnQgRVZNIGZyb20gMHhlNDY3YjlkZDExZmEwMGRmCgoKdHJhbnNhY3Rpb24oYW1vdW50OiBVRml4NjQsIGFkZHJlc3M6IEFkZHJlc3MpIHsKICAgIGxldCBzZW50VmF1bHQ6IEBGbG93VG9rZW4uVmF1bHQKCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChTdG9yYWdlLCBFVk0uV2l0aGRyYXcpICZBY2NvdW50KSB7CiAgICAgICAgbGV0IGNvYSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEVWTS5XaXRoZHJhdykgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50PigKICAgICAgICAgICAgZnJvbTogL3N0b3JhZ2UvZXZtCiAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyByZWZlcmVuY2UgdG8gdGhlIENPQSEiKQogICAgICAgIGxldCB3aXRoZHJhd0JhbGFuY2UgPSBFVk0uQmFsYW5jZShhdHRvZmxvdzogMCkKICAgICAgICB3aXRoZHJhd0JhbGFuY2Uuc2V0RkxPVyhmbG93OiBhbW91bnQpCiAgICAgICAgc2VsZi5zZW50VmF1bHQgPC0gY29hLndpdGhkcmF3KGJhbGFuY2U6IHdpdGhkcmF3QmFsYW5jZSkgYXMhIEBGbG93VG9rZW4uVmF1bHQKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICAgICAgICBsZXQgcmVjZWl2ZXIgPSBhY2NvdW50LmNhcGFiaWxpdGllcy5ib3Jyb3c8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4oL3B1YmxpYy9mbG93VG9rZW5SZWNlaXZlcikhCiAgICAgICAgcmVjZWl2ZXIuZGVwb3NpdChmcm9tOiA8LXNlbGYuc2VudFZhdWx0KQogICAgfQp9Cg=="
        },
        "hybridCustody": {
          "addNFTCollectionToDelegator": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgYWRkTkZUQ29sbGVjdGlvblRvRGVsZWdhdG9yIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4ZDhhN2UwNWE3YWM2NzBjMAoKCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKaW1wb3J0IDxUb2tlbj4gZnJvbSA8VG9rZW5BZGRyZXNzPgoKdHJhbnNhY3Rpb24ocGFyZW50OiBBZGRyZXNzLCBpc1B1YmxpYzogQm9vbCkgewogICAgcHJlcGFyZShhY2N0OiBhdXRoKFN0b3JhZ2UsIENhcGFiaWxpdGllcykgJkFjY291bnQpIHsKICAgICAgICBsZXQgbyA9IGFjY3Quc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk93bmVyKSAmSHlicmlkQ3VzdG9keS5Pd25lZEFjY291bnQ+KGZyb206IEh5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50U3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJvd25lZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAgICAgbGV0IGNoaWxkOiAmSHlicmlkQ3VzdG9keS5DaGlsZEFjY291bnQgPSBvLmJvcnJvd0NoaWxkQWNjb3VudChwYXJlbnQ6IHBhcmVudCkKICAgICAgICAgICAgPz8gcGFuaWMoImNoaWxkIGFjY291bnQgbm90IGZvdW5kIikKCiAgICAgICAgbGV0IGNhcCA9IGFjY3QuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JkV4YW1wbGVORlQuQ29sbGVjdGlvbj4oRXhhbXBsZU5GVC5Db2xsZWN0aW9uU3RvcmFnZVBhdGgpCiAgICAgICAgby5hZGRDYXBhYmlsaXR5VG9EZWxlZ2F0b3IocGFyZW50OiBwYXJlbnQsIGNhcDogY2FwLCBpc1B1YmxpYzogaXNQdWJsaWMpCiAgICB9Cn0=",
          "batchBridgeChildNFTFromEvm": "",
          "batchBridgeChildNFTToEvm": "",
          "batchBridgeChildNFTToEvmAddress": "",
          "batchSendChildNFT": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgYmF0Y2hTZW5kQ2hpbGRORlQgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhkOGE3ZTA1YTdhYzY3MGMwCgppbXBvcnQgQ2FwYWJpbGl0eUZpbHRlciBmcm9tIDB4ZDhhN2UwNWE3YWM2NzBjMAoKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgoKaW1wb3J0IDxORlQ+IGZyb20gPE5GVEFkZHJlc3M+CgoKdHJhbnNhY3Rpb24oY2hpbGRBZGRyOiBBZGRyZXNzLCByZWNlaXZlcjogQWRkcmVzcywgaWRlbnRpZmllcjogU3RyaW5nLCBpZHM6IFtVSW50NjRdKSB7CiAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSkgJkFjY291bnQpIHsKICAgIC8vIHNpZ25lciBpcyB0aGUgcGFyZW50IGFjY291bnQKICAgIC8vIGdldCB0aGUgbWFuYWdlciByZXNvdXJjZSBhbmQgYm9ycm93IGNoaWxkQWNjb3VudAogICAgbGV0IG0gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgbGV0IGNoaWxkQWNjdCA9IG0uYm9ycm93QWNjb3VudChhZGRyOiBjaGlsZEFkZHIpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAKICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IDxORlQ+LnJlc29sdmVDb250cmFjdFZpZXcocmVzb3VyY2VUeXBlOiBuaWwsIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkpIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPwogICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IHRoZSB2YXVsdCBkYXRhIHZpZXcgZm9yIDxORlQ+ICIpCgogICAgLy9nZXQgRnQgY2FwIGZyb20gY2hpbGQgYWNjb3VudAogICAgbGV0IGNhcFR5cGUgPSBUeXBlPGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oKQogICAgbGV0IGNvbnRyb2xsZXJJRCA9IGNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgIAogICAgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogY29udHJvbGxlcklELCB0eXBlOiBjYXBUeXBlKSA/PyBwYW5pYygibm8gY2FwIGZvdW5kIikKICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+CiAgICBhc3NlcnQocHJvdmlkZXJDYXAuY2hlY2soKSwgbWVzc2FnZTogImludmFsaWQgcHJvdmlkZXIgY2FwYWJpbGl0eSIpCiAgICAKICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgY2hpbGQncyBzdG9yZWQgdmF1bHQKICAgIGxldCBjb2xsZWN0aW9uUmVmID0gcHJvdmlkZXJDYXAuYm9ycm93KCkhCgogICAKICAgIGxldCByZWNlaXZlckFjYyA9IGdldEFjY291bnQocmVjZWl2ZXIpCiAgICBsZXQgcmVjZWl2ZXJSZWYgPSAgcmVjZWl2ZXJBY2MuY2FwYWJpbGl0aWVzLmdldDwme05vbkZ1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9Pihjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKSEuYm9ycm93KCkKICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlY2VpdmVyIHJlZmVyZW5jZSB0byB0aGUgcmVjaXBpZW50J3MgVmF1bHQiKQogICAgCiAgICBmb3IgaWQgaW4gaWRzIHsKICAgICAgICAvLyBXaXRoZHJhdyB0b2tlbnMgZnJvbSB0aGUgc2lnbmVyJ3Mgc3RvcmVkIHZhdWx0CiAgICAgICAgbGV0IG5mdCA8LSBjb2xsZWN0aW9uUmVmLndpdGhkcmF3KHdpdGhkcmF3SUQ6IGlkKQogICAgICAgIHJlY2VpdmVyUmVmLmRlcG9zaXQodG9rZW46IDwtIG5mdCkKICAgIH0KICB9Cn0=",
          "batchSendChildNFTToChild": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgYmF0Y2hTZW5kQ2hpbGRORlRUb0NoaWxkIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4ZDhhN2UwNWE3YWM2NzBjMAoKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweGQ4YTdlMDVhN2FjNjcwYzAKCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKaW1wb3J0IDxORlQ+IGZyb20gPE5GVEFkZHJlc3M+CgoKdHJhbnNhY3Rpb24oY2hpbGRBZGRyOiBBZGRyZXNzLCByZWNlaXZlcjogQWRkcmVzcywgaWRlbnRpZmllcjogU3RyaW5nLCBpZHM6IFtVSW50NjRdKSB7CiAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSkgJkFjY291bnQpIHsKICAgIC8vIHNpZ25lciBpcyB0aGUgcGFyZW50IGFjY291bnQKICAgIC8vIGdldCB0aGUgbWFuYWdlciByZXNvdXJjZSBhbmQgYm9ycm93IGNoaWxkQWNjb3VudAogICAgbGV0IG0gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgbGV0IGNoaWxkQWNjdCA9IG0uYm9ycm93QWNjb3VudChhZGRyOiBjaGlsZEFkZHIpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAKICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IDxORlQ+LnJlc29sdmVDb250cmFjdFZpZXcocmVzb3VyY2VUeXBlOiBuaWwsIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkpIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPwogICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IHRoZSB2YXVsdCBkYXRhIHZpZXcgZm9yIDxORlQ+ICIpCgogICAgLy9nZXQgRnQgY2FwIGZyb20gY2hpbGQgYWNjb3VudAogICAgbGV0IGNhcFR5cGUgPSBUeXBlPGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oKQogICAgbGV0IGNvbnRyb2xsZXJJRCA9IGNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgIAogICAgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogY29udHJvbGxlcklELCB0eXBlOiBjYXBUeXBlKSA/PyBwYW5pYygibm8gY2FwIGZvdW5kIikKICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+CiAgICBhc3NlcnQocHJvdmlkZXJDYXAuY2hlY2soKSwgbWVzc2FnZTogImludmFsaWQgcHJvdmlkZXIgY2FwYWJpbGl0eSIpCiAgICBsZXQgY29sbGVjdGlvblJlZiA9IHByb3ZpZGVyQ2FwLmJvcnJvdygpIQoKCiAgICBsZXQgcmVjZWl2ZXJDaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogcmVjZWl2ZXIpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICBsZXQgcmVjZWl2ZXJDb250cm9sbGVySWQgPSByZWNlaXZlckNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgIGxldCByZWNlaXZlckNhcCA9IHJlY2VpdmVyQ2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiByZWNlaXZlckNvbnRyb2xsZXJJZCwgdHlwZTogY2FwVHlwZSkgPz8gcGFuaWMoIm5vIGNhcCBmb3VuZCIpIAogICAgbGV0IHB1YmxpY0NhcCA9IHJlY2VpdmVyQ2FwIGFzISBDYXBhYmlsaXR5PCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uUHVibGljfT4KICAgIGxldCByZWNlaXZlclJlZiA9ICBwdWJsaWNDYXAuYm9ycm93KCkhCgogICAgZm9yIGlkIGluIGlkcyB7CiAgICAgIGxldCBuZnQgPC0gY29sbGVjdGlvblJlZi53aXRoZHJhdyh3aXRoZHJhd0lEOiBpZCkKICAgICAgcmVjZWl2ZXJSZWYuZGVwb3NpdCh0b2tlbjogPC0gbmZ0KQogICAgfQogIH0KfQ==",
          "batchTransferChildNFT": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgYmF0Y2hUcmFuc2ZlckNoaWxkTkZUIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4ZDhhN2UwNWE3YWM2NzBjMAoKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweGQ4YTdlMDVhN2FjNjcwYzAKCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKaW1wb3J0IDxORlQ+IGZyb20gPE5GVEFkZHJlc3M+CgovLy8gVHJhbnNmZXIgbXVsdGlwbGUgTkZUcyBmcm9tIHByb3ZpZGVkIGNoaWxkIGFjY291bnQgYWRkcmVzcyB0byBwYXJlbnQgYWNjb3VudCAoc2lnbmVyKQovLy8KdHJhbnNhY3Rpb24oYWRkcmVzczogQWRkcmVzcywgcGF0aDogU3RyaW5nLCBpZHM6IFtVSW50NjRdKSB7CgogIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UsIENhcGFiaWxpdGllcykgJkFjY291bnQpIHsKICAgIC8vIEdldCB0aGUgbWFuYWdlciByZXNvdXJjZSBhbmQgYm9ycm93IGNoaWxkQWNjb3VudAogICAgbGV0IG0gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgbGV0IGNoaWxkQWNjdCA9IG0uYm9ycm93QWNjb3VudChhZGRyOiBhZGRyZXNzKSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQoKICAgIC8vIEdldCB0aGUgY29sbGVjdGlvbiBkYXRhIHZpZXcgZm9yIHRoZSBORlQKICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IDxORlQ+LnJlc29sdmVDb250cmFjdFZpZXcocmVzb3VyY2VUeXBlOiBuaWwsIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkpIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPwogICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IHRoZSB2YXVsdCBkYXRhIHZpZXcgZm9yIDxORlQ+ICIpCgogICAgLy8gUmV0cmlldmUgYSBwcm92aWRlciBjYXBhYmlsaXR5IGZyb20gdGhlIGNoaWxkIGFjY291bnQgYW5kIGJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgY2hpbGQncyBjb2xsZWN0aW9uCiAgICBsZXQgY2FwVHlwZSA9IFR5cGU8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigpCiAgICBsZXQgY29udHJvbGxlcklEID0gY2hpbGRBY2N0LmdldENvbnRyb2xsZXJJREZvclR5cGUodHlwZTogY2FwVHlwZSwgZm9yUGF0aDogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpCiAgICAgICAgPz8gcGFuaWMoIm5vIGNvbnRyb2xsZXIgZm91bmQgZm9yIGNhcFR5cGUiKQoKICAgIGxldCBjYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGNvbnRyb2xsZXJJRCwgdHlwZTogY2FwVHlwZSkgPz8gcGFuaWMoIm5vIGNhcCBmb3VuZCIpCiAgICBsZXQgcHJvdmlkZXJDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PgogICAgYXNzZXJ0KHByb3ZpZGVyQ2FwLmNoZWNrKCksIG1lc3NhZ2U6ICJpbnZhbGlkIHByb3ZpZGVyIGNhcGFiaWxpdHkiKQogICAgbGV0IGNoaWxkQ29sbGVjdGlvblJlZiA9IHByb3ZpZGVyQ2FwLmJvcnJvdygpIQoKICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3MgY29sbGVjdGlvbiBvciBjcmVhdGUgYSBjb2xsZWN0aW9uIGlmIGl0IGRvZXNuJ3QgZXhpc3QKICAgIHZhciByZWNlaXZlclJlZiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KGZyb206IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgaWYgcmVjZWl2ZXJSZWYgPT0gbmlsIHsKICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZSg8LSA8TkZUPi5jcmVhdGVFbXB0eUNvbGxlY3Rpb24obmZ0VHlwZTogVHlwZTxAPE5GVD4uTkZUPigpKSwgdG86IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICBzaWduZXIuY2FwYWJpbGl0aWVzLnVucHVibGlzaChjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKQogICAgICBsZXQgY29sbGVjdGlvbkNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwmPE5GVD4uQ29sbGVjdGlvbj4oY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpCiAgICAgIHNpZ25lci5jYXBhYmlsaXRpZXMucHVibGlzaChjb2xsZWN0aW9uQ2FwLCBhdDogY29sbGVjdGlvbkRhdGEucHVibGljUGF0aCkKICAgICAgcmVjZWl2ZXJSZWYgPSBjb2xsZWN0aW9uQ2FwLmJvcnJvdygpIQogICAgfQoKICAgIC8vIFRyYW5zZmVyIE5GVHMgZnJvbSBjaGlsZCBhY2NvdW50J3MgY29sbGVjdGlvbiB0byBzaWduZXIncyBjb2xsZWN0aW9uCiAgICBmb3IgaWQgaW4gaWRzIHsKICAgICAgICByZWNlaXZlclJlZiEuZGVwb3NpdCh0b2tlbjogPC0gY2hpbGRDb2xsZWN0aW9uUmVmLndpdGhkcmF3KHdpdGhkcmF3SUQ6IGlkKSkKICAgIH0KICB9Cn0K",
          "batchTransferNFTToChild": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgYmF0Y2hUcmFuc2Zlck5GVFRvQ2hpbGQgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhkOGE3ZTA1YTdhYzY3MGMwCgppbXBvcnQgQ2FwYWJpbGl0eUZpbHRlciBmcm9tIDB4ZDhhN2UwNWE3YWM2NzBjMAoKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgppbXBvcnQgPE5GVD4gZnJvbSA8TkZUQWRkcmVzcz4KCnRyYW5zYWN0aW9uKGNoaWxkQWRkcjogQWRkcmVzcywgaWRlbnRpZmllcjogU3RyaW5nLCBpZHM6IFtVSW50NjRdKSB7CiAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSkgJkFjY291bnQpIHsKICAgIC8vIHNpZ25lciBpcyB0aGUgcGFyZW50IGFjY291bnQKICAgIC8vIGdldCB0aGUgbWFuYWdlciByZXNvdXJjZSBhbmQgYm9ycm93IGNoaWxkQWNjb3VudAogICAgbGV0IG0gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgbGV0IGNoaWxkQWNjdCA9IG0uYm9ycm93QWNjb3VudChhZGRyOiBjaGlsZEFkZHIpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAKICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IDxORlQ+LnJlc29sdmVDb250cmFjdFZpZXcocmVzb3VyY2VUeXBlOiBuaWwsIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkpIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPwogICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IHRoZSB2YXVsdCBkYXRhIHZpZXcgZm9yIDxORlQ+ICIpCgogICAgLy9nZXQgRnQgY2FwIGZyb20gY2hpbGQgYWNjb3VudAogICAgbGV0IGNhcFR5cGUgPSBUeXBlPGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oKQogICAgbGV0IGNvbnRyb2xsZXJJRCA9IGNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgIAogICAgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogY29udHJvbGxlcklELCB0eXBlOiBjYXBUeXBlKSA/PyBwYW5pYygibm8gY2FwIGZvdW5kIikKICAgIGxldCBjaGlsZENhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+CiAgICBhc3NlcnQoY2hpbGRDYXAuY2hlY2soKSwgbWVzc2FnZTogImludmFsaWQgcHJvdmlkZXIgY2FwYWJpbGl0eSIpCiAgICAKICAgIGxldCBwYXJlbnRSZWYgPSAgc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oZnJvbSA6IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKSEKICAgIGxldCBjaGlsZFJlZiA9IGNoaWxkQ2FwLmJvcnJvdygpIQoKICAgIGZvciBpZCBpbiBpZHMgeyAgICAgCiAgICAgICAgLy8gV2l0aGRyYXcgdG9rZW5zIGZyb20gdGhlIHNpZ25lcidzIHN0b3JlZCB2YXVsdAogICAgICAgIGxldCBuZnQgPC0gcGFyZW50UmVmIS53aXRoZHJhdyh3aXRoZHJhd0lEOiBpZCkhCiAgICAgICAgY2hpbGRSZWYuZGVwb3NpdCh0b2tlbjogPC0gbmZ0KQogICAgfQogIH0KfQ==",
          "bridgeChildFTFromEvm": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgYnJpZGdlQ2hpbGRGVEZyb21Fdm0gLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhmMjMzZGNlZTg4ZmUwYWJlCgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHgxNjU0NjUzMzk5MDQwYTYxCgppbXBvcnQgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MgZnJvbSAweGYyMzNkY2VlODhmZTBhYmUKCgppbXBvcnQgU2NvcGVkRlRQcm92aWRlcnMgZnJvbSAweDFlNGFhMGI4N2QxMGIxNDEKCgppbXBvcnQgRVZNIGZyb20gMHhlNDY3YjlkZDExZmEwMGRmCgoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VVdGlscyBmcm9tIDB4MWU0YWEwYjg3ZDEwYjE0MQoKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweDFlNGFhMGI4N2QxMGIxNDEKCmltcG9ydCBGbG93RVZNQnJpZGdlQ29uZmlnIGZyb20gMHgxZTRhYTBiODdkMTBiMTQxCgoKCmltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhkOGE3ZTA1YTdhYzY3MGMwCgppbXBvcnQgQ2FwYWJpbGl0eUZpbHRlciBmcm9tIDB4ZDhhN2UwNWE3YWM2NzBjMAoKCnRyYW5zYWN0aW9uKHZhdWx0SWRlbnRpZmllcjogU3RyaW5nLCBjaGlsZDogQWRkcmVzcywgYW1vdW50OiBVSW50MjU2KSB7CiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChCb3Jyb3dWYWx1ZSwgQ29weVZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSwgVW5wdWJsaXNoQ2FwYWJpbGl0eSkgJkFjY291bnQpIHsKICAgICAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIHNpZ25lcidzIENPQQogICAgICAgIGxldCBjb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgQ09BIGZyb20gcHJvdmlkZWQgZ2F0ZXdheSBhZGRyZXNzIikKICAgICAgICBsZXQgdmF1bHRUeXBlID0gQ29tcG9zaXRlVHlwZSh2YXVsdElkZW50aWZpZXIpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgY29uc3RydWN0IFZhdWx0IHR5cGUgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdCh2YXVsdElkZW50aWZpZXIpKQogICAgICAgIC8vIFBhcnNlIHRoZSBWYXVsdCBpZGVudGlmaWVyIGludG8gaXRzIGNvbXBvbmVudHMKICAgICAgICBsZXQgdG9rZW5Db250cmFjdEFkZHJlc3MgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3RBZGRyZXNzKGZyb21UeXBlOiB2YXVsdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IGFkZHJlc3MgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdCh2YXVsdElkZW50aWZpZXIpKQogICAgICAgIGxldCB0b2tlbkNvbnRyYWN0TmFtZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdE5hbWUoZnJvbVR5cGU6IHZhdWx0VHlwZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgbmFtZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KHZhdWx0SWRlbnRpZmllcikpCgogICAgICAgIC8qIC0tLSBSZXRyaWV2ZSB0aGUgZnVuZHMgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIEZ1bmdpYmxlVG9rZW4gVmF1bHQKICAgICAgICBsZXQgdmlld1Jlc29sdmVyID0gZ2V0QWNjb3VudCh0b2tlbkNvbnRyYWN0QWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IHRva2VuQ29udHJhY3ROYW1lKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBWaWV3UmVzb2x2ZXIgZnJvbSBGdW5naWJsZVRva2VuIGNvbnRyYWN0IikKICAgICAgICBsZXQgdmF1bHREYXRhID0gdmlld1Jlc29sdmVyLnJlc29sdmVDb250cmFjdFZpZXcoCiAgICAgICAgICAgICAgICByZXNvdXJjZVR5cGU6IG5pbCwKICAgICAgICAgICAgICAgIHZpZXdUeXBlOiBUeXBlPEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPigpCiAgICAgICAgICAgICkgYXMhIEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgRlRWYXVsdERhdGEgdmlldyIpCgogICAgICAgIC8vIHNpZ25lciBpcyB0aGUgcGFyZW50IGFjY291bnQKICAgICAgICAvLyBnZXQgdGhlIG1hbmFnZXIgcmVzb3VyY2UgYW5kIGJvcnJvdyBjaGlsZEFjY291bnQKICAgICAgICBsZXQgbSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEh5YnJpZEN1c3RvZHkuTWFuYWdlKSAmSHlicmlkQ3VzdG9keS5NYW5hZ2VyPihmcm9tOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgICAgIGxldCBjaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogY2hpbGQpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAgICAgCiAgICAgCiAgICAgICAgLy9nZXQgRnQgY2FwIGZyb20gY2hpbGQgYWNjb3VudAogICAgICAgIGxldCBjYXBUeXBlID0gVHlwZTwme0Z1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9PigpCiAgICAgICAgbGV0IGNvbnRyb2xsZXJJRCA9IGNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IHZhdWx0RGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIm5vIGNvbnRyb2xsZXIgZm91bmQgZm9yIGNhcFR5cGUiKQogICAgICAgIAogICAgICAgIGxldCBjYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGNvbnRyb2xsZXJJRCwgdHlwZTogY2FwVHlwZSkgPz8gcGFuaWMoIm5vIGNhcCBmb3VuZCIpCiAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gY2FwIGFzISBDYXBhYmlsaXR5PCZ7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+CiAgICAgICAgYXNzZXJ0KHByb3ZpZGVyQ2FwLmNoZWNrKCksIG1lc3NhZ2U6ICJpbnZhbGlkIHByb3ZpZGVyIGNhcGFiaWxpdHkiKQogICAgICAgIAogICAgICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgY2hpbGQncyBzdG9yZWQgdmF1bHQKICAgICAgICBsZXQgdmF1bHRSZWYgPSBwcm92aWRlckNhcC5ib3Jyb3coKSEKCiAgICAgIAogICAgICAgIGxldCBhcHByb3hGZWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuY2FsY3VsYXRlQnJpZGdlRmVlKGJ5dGVzOiA0MDBfMDAwKQogICAgICAgIC8qIC0tLSBDb25maWd1cmUgYSBTY29wZWRGVFByb3ZpZGVyIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gSXNzdWUgYW5kIHN0b3JlIGJyaWRnZS1kZWRpY2F0ZWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBpbiBzdG9yYWdlIGlmIG5lY2Vzc2FyeQogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLnR5cGUoYXQ6IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIGxldCBwcm92aWRlckNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KAogICAgICAgICAgICAgICAgL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgICAgICAgKQogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKHByb3ZpZGVyQ2FwLCB0bzogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkKICAgICAgICB9CiAgICAgICAgLy8gQ29weSB0aGUgc3RvcmVkIFByb3ZpZGVyIGNhcGFiaWxpdHkgYW5kIGNyZWF0ZSBhIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBsZXQgcHJvdmlkZXJDYXBDb3B5ID0gc2lnbmVyLnN0b3JhZ2UuY29weTxDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4+KAogICAgICAgICAgICAgICAgZnJvbTogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJJbnZhbGlkIFByb3ZpZGVyIENhcGFiaWxpdHkgZm91bmQgaW4gc3RvcmFnZS4iKQogICAgICAgIGxldCBwcm92aWRlckZpbHRlciA9IFNjb3BlZEZUUHJvdmlkZXJzLkFsbG93YW5jZUZpbHRlcihhcHByb3hGZWUpCiAgICAgICAgbGV0IHNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgICAgIGZpbHRlcnM6IFsgcHJvdmlkZXJGaWx0ZXIgXSwKICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgKQoKICAgICAgICBsZXQgdmF1bHQ6IEB7RnVuZ2libGVUb2tlbi5WYXVsdH0gPC0gY29hLndpdGhkcmF3VG9rZW5zKAogICAgICAgICAgICB0eXBlOiB2YXVsdFR5cGUsCiAgICAgICAgICAgIGFtb3VudDogYW1vdW50LAogICAgICAgICAgICBmZWVQcm92aWRlcjogJnNjb3BlZFByb3ZpZGVyIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfQogICAgICAgICkKCiAgICAgICAgdmF1bHRSZWYuZGVwb3NpdChmcm9tOiA8LSB2YXVsdCkKICAgICAgICBkZXN0cm95IHNjb3BlZFByb3ZpZGVyCiAgICB9Cgp9CiA=",
          "bridgeChildFTToEvm": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgYnJpZGdlQ2hpbGRGVFRvRXZtIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQoKaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4MTY1NDY1MzM5OTA0MGE2MQoKaW1wb3J0IEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzIGZyb20gMHhmMjMzZGNlZTg4ZmUwYWJlCgoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHgxZTRhYTBiODdkMTBiMTQxCgoKaW1wb3J0IEVWTSBmcm9tIDB4ZTQ2N2I5ZGQxMWZhMDBkZgoKCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweDFlNGFhMGI4N2QxMGIxNDEKCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHgxZTRhYTBiODdkMTBiMTQxCgppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4MWU0YWEwYjg3ZDEwYjE0MQoKCmltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhkOGE3ZTA1YTdhYzY3MGMwCgppbXBvcnQgQ2FwYWJpbGl0eUZpbHRlciBmcm9tIDB4ZDhhN2UwNWE3YWM2NzBjMAoKCgp0cmFuc2FjdGlvbih2YXVsdElkZW50aWZpZXI6IFN0cmluZywgY2hpbGQ6IEFkZHJlc3MsIGFtb3VudDogVUZpeDY0KSB7CgogICAgLy8gVGhlIFZhdWx0IHJlc291cmNlIHRoYXQgaG9sZHMgdGhlIHRva2VucyB0aGF0IGFyZSBiZWluZyB0cmFuc2ZlcnJlZAogICAgbGV0IHBheW1lbnRWYXVsdDogQHtGdW5naWJsZVRva2VuLlZhdWx0fQogICAgbGV0IGNvYTogYXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQKICAgIGxldCBzY29wZWRQcm92aWRlcjogQFNjb3BlZEZUUHJvdmlkZXJzLlNjb3BlZEZUUHJvdmlkZXIKCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChTdG9yYWdlLCBDb3B5VmFsdWUsIEJvcnJvd1ZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICAvKiAtLS0gUmVmZXJlbmNlIHRoZSBzaWduZXIncyBDYWRlbmNlT3duZWRBY2NvdW50IC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBDT0EKICAgICAgICBzZWxmLmNvYSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEVWTS5CcmlkZ2UpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oZnJvbTogL3N0b3JhZ2UvZXZtKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBDT0EgZnJvbSBwcm92aWRlZCBnYXRld2F5IGFkZHJlc3MiKQoKICAgICAgICAvKiAtLS0gUmV0cmlldmUgdGhlIGZ1bmRzIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBGdW5naWJsZVRva2VuIFZhdWx0CiAgICAgICAgbGV0IHZhdWx0VHlwZSA9IENvbXBvc2l0ZVR5cGUodmF1bHRJZGVudGlmaWVyKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGNvbnN0cnVjdCBWYXVsdCB0eXBlIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQodmF1bHRJZGVudGlmaWVyKSkKICAgICAgICAvLyBQYXJzZSB0aGUgVmF1bHQgaWRlbnRpZmllciBpbnRvIGl0cyBjb21wb25lbnRzCiAgICAgICAgbGV0IHRva2VuQ29udHJhY3RBZGRyZXNzID0gRmxvd0VWTUJyaWRnZVV0aWxzLmdldENvbnRyYWN0QWRkcmVzcyhmcm9tVHlwZTogdmF1bHRUeXBlKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCBjb250cmFjdCBhZGRyZXNzIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQodmF1bHRJZGVudGlmaWVyKSkKICAgICAgICBsZXQgdG9rZW5Db250cmFjdE5hbWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3ROYW1lKGZyb21UeXBlOiB2YXVsdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IG5hbWUgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdCh2YXVsdElkZW50aWZpZXIpKQoKICAgICAgICBsZXQgdmlld1Jlc29sdmVyID0gZ2V0QWNjb3VudCh0b2tlbkNvbnRyYWN0QWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IHRva2VuQ29udHJhY3ROYW1lKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBWaWV3UmVzb2x2ZXIgZnJvbSBGdW5naWJsZVRva2VuIGNvbnRyYWN0IikKICAgICAgICBsZXQgdmF1bHREYXRhID0gdmlld1Jlc29sdmVyLnJlc29sdmVDb250cmFjdFZpZXcoCiAgICAgICAgICAgICAgICByZXNvdXJjZVR5cGU6IG5pbCwKICAgICAgICAgICAgICAgIHZpZXdUeXBlOiBUeXBlPEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPigpCiAgICAgICAgICAgICkgYXMhIEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgRlRWYXVsdERhdGEgdmlldyIpCiAgICAgICAgbGV0IHZhdWx0ID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlZhdWx0fT4oCiAgICAgICAgICAgICAgICBmcm9tOiB2YXVsdERhdGEuc3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGFjY2VzcyBzaWduZXIncyBGdW5naWJsZVRva2VuIFZhdWx0IikKCiAgICAgICAgLy8gc2lnbmVyIGlzIHRoZSBwYXJlbnQgYWNjb3VudAogICAgICAgIC8vIGdldCB0aGUgbWFuYWdlciByZXNvdXJjZSBhbmQgYm9ycm93IGNoaWxkQWNjb3VudAogICAgICAgIGxldCBtID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5NYW5hZ2UpICZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygibWFuYWdlciBkb2VzIG5vdCBleGlzdCIpCiAgICAgICAgbGV0IGNoaWxkQWNjdCA9IG0uYm9ycm93QWNjb3VudChhZGRyOiBjaGlsZCkgPz8gcGFuaWMoImNoaWxkIGFjY291bnQgbm90IGZvdW5kIikKICAgICAgICAKICAgICAKICAgICAgICAvL2dldCBGdCBjYXAgZnJvbSBjaGlsZCBhY2NvdW50CiAgICAgICAgbGV0IGNhcFR5cGUgPSBUeXBlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oKQogICAgICAgIGxldCBjb250cm9sbGVySUQgPSBjaGlsZEFjY3QuZ2V0Q29udHJvbGxlcklERm9yVHlwZSh0eXBlOiBjYXBUeXBlLCBmb3JQYXRoOiB2YXVsdERhdGEuc3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgICAgICAKICAgICAgICBsZXQgY2FwID0gY2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiBjb250cm9sbGVySUQsIHR5cGU6IGNhcFR5cGUpID8/IHBhbmljKCJubyBjYXAgZm91bmQiKQogICAgICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+CiAgICAgICAgYXNzZXJ0KHByb3ZpZGVyQ2FwLmNoZWNrKCksIG1lc3NhZ2U6ICJpbnZhbGlkIHByb3ZpZGVyIGNhcGFiaWxpdHkiKQogICAgICAgIAogICAgICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgY2hpbGQncyBzdG9yZWQgdmF1bHQKICAgICAgICBsZXQgdmF1bHRSZWYgPSBwcm92aWRlckNhcC5ib3Jyb3coKSEKCiAgICAgICAgLy8gV2l0aGRyYXcgdG9rZW5zIGZyb20gdGhlIHNpZ25lcidzIHN0b3JlZCB2YXVsdAoKICAgICAgICB2YXVsdC5kZXBvc2l0KGZyb206IDwtIHZhdWx0UmVmLndpdGhkcmF3KGFtb3VudDogYW1vdW50KSkKICAgICAgICAgICAvLyBXaXRoZHJhdyB0aGUgcmVxdWVzdGVkIGJhbGFuY2UgJiBjYWxjdWxhdGUgdGhlIGFwcHJveGltYXRlIGJyaWRnZSBmZWUgYmFzZWQgb24gc3RvcmFnZSB1c2FnZQogICAgICAgIGxldCBjdXJyZW50U3RvcmFnZVVzYWdlID0gc2lnbmVyLnN0b3JhZ2UudXNlZAogICAgICAgIHNlbGYucGF5bWVudFZhdWx0IDwtIHZhdWx0LndpdGhkcmF3KGFtb3VudDogYW1vdW50KQogICAgICAgIGxldCB3aXRoZHJhd25TdG9yYWdlVXNhZ2UgPSBzaWduZXIuc3RvcmFnZS51c2VkCiAgICAgICAgLy8gQXBwcm94aW1hdGUgdGhlIGJyaWRnZSBmZWUgYmFzZWQgb24gdGhlIGRpZmZlcmVuY2UgaW4gc3RvcmFnZSB1c2FnZSB3aXRoIHNvbWUgYnVmZmVyCiAgICAgICAgbGV0IGFwcHJveEZlZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5jYWxjdWxhdGVCcmlkZ2VGZWUoCiAgICAgICAgICAgICAgICBieXRlczogNDAwXzAwMAogICAgICAgICAgICApCgogICAgICAgIC8qIC0tLSBDb25maWd1cmUgYSBTY29wZWRGVFByb3ZpZGVyIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gSXNzdWUgYW5kIHN0b3JlIGJyaWRnZS1kZWRpY2F0ZWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBpbiBzdG9yYWdlIGlmIG5lY2Vzc2FyeQogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLnR5cGUoYXQ6IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIGxldCBwcm92aWRlckNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KAogICAgICAgICAgICAgICAgL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgICAgICAgKQogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKHByb3ZpZGVyQ2FwLCB0bzogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkKICAgICAgICB9CiAgICAgICAgLy8gQ29weSB0aGUgc3RvcmVkIFByb3ZpZGVyIGNhcGFiaWxpdHkgYW5kIGNyZWF0ZSBhIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBsZXQgcHJvdmlkZXJDYXBDb3B5ID0gc2lnbmVyLnN0b3JhZ2UuY29weTxDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4+KAogICAgICAgICAgICAgICAgZnJvbTogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJJbnZhbGlkIFByb3ZpZGVyIENhcGFiaWxpdHkgZm91bmQgaW4gc3RvcmFnZS4iKQogICAgICAgIGxldCBwcm92aWRlckZpbHRlciA9IFNjb3BlZEZUUHJvdmlkZXJzLkFsbG93YW5jZUZpbHRlcihhcHByb3hGZWUpCiAgICAgICAgc2VsZi5zY29wZWRQcm92aWRlciA8LSBTY29wZWRGVFByb3ZpZGVycy5jcmVhdGVTY29wZWRGVFByb3ZpZGVyKAogICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICAgICAgICBmaWx0ZXJzOiBbIHByb3ZpZGVyRmlsdGVyIF0sCiAgICAgICAgICAgIGV4cGlyYXRpb246IGdldEN1cnJlbnRCbG9jaygpLnRpbWVzdGFtcCArIDEuMAogICAgICAgICkKCiAgICB9CgogICAgZXhlY3V0ZSB7CgogICAgICAgICBzZWxmLmNvYS5kZXBvc2l0VG9rZW5zKAogICAgICAgICAgICB2YXVsdDogPC1zZWxmLnBheW1lbnRWYXVsdCwKICAgICAgICAgICAgZmVlUHJvdmlkZXI6ICZzZWxmLnNjb3BlZFByb3ZpZGVyIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfQogICAgICAgICkKICAgICAgICAvLyBEZXN0cm95IHRoZSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgZGVzdHJveSBzZWxmLnNjb3BlZFByb3ZpZGVyCiAgICB9Cn0KIA==",
          "bridgeChildFTToEvmAddress": "",
          "bridgeChildNFTFromEvm": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgYnJpZGdlQ2hpbGRORlRGcm9tRXZtIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhmMjMzZGNlZTg4ZmUwYWJlCgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHgxNjU0NjUzMzk5MDQwYTYxCgppbXBvcnQgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MgZnJvbSAweGYyMzNkY2VlODhmZTBhYmUKCmltcG9ydCBTY29wZWRGVFByb3ZpZGVycyBmcm9tIDB4MWU0YWEwYjg3ZDEwYjE0MQoKaW1wb3J0IEVWTSBmcm9tIDB4ZTQ2N2I5ZGQxMWZhMDBkZgoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VVdGlscyBmcm9tIDB4MWU0YWEwYjg3ZDEwYjE0MQoKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweDFlNGFhMGI4N2QxMGIxNDEKCmltcG9ydCBGbG93RVZNQnJpZGdlQ29uZmlnIGZyb20gMHgxZTRhYTBiODdkMTBiMTQxCgppbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4ZDhhN2UwNWE3YWM2NzBjMAoKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweGQ4YTdlMDVhN2FjNjcwYzAKCmltcG9ydCBDcm9zc1ZNTWV0YWRhdGFWaWV3cyBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKCnRyYW5zYWN0aW9uKG5mdElkZW50aWZpZXI6IFN0cmluZywgY2hpbGQ6IEFkZHJlc3MsIGlkOiBVSW50MjU2KSB7CgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQm9ycm93VmFsdWUsIENvcHlWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUsIFVucHVibGlzaENhcGFiaWxpdHkpICZBY2NvdW50KSB7CiAgICAgICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgQ2FkZW5jZU93bmVkQWNjb3VudCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3MgQ09BCiAgICAgICAgbGV0IGNvYSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEVWTS5DYWxsLCBFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgQ09BIGZyb20gcHJvdmlkZWQgZ2F0ZXdheSBhZGRyZXNzIikKCiAgICAgICAgLy8gQ29uc3RydWN0IHRoZSBORlQgdHlwZSBmcm9tIHRoZSBwcm92aWRlZCBpZGVudGlmaWVyCiAgICAgICAgbGV0IG5mdFR5cGUgPSBDb21wb3NpdGVUeXBlKG5mdElkZW50aWZpZXIpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgY29uc3RydWN0IE5GVCB0eXBlIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQobmZ0SWRlbnRpZmllcikpCiAgICAgICAgbGV0IG5mdENvbnRyYWN0QWRkcmVzcyA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdEFkZHJlc3MoZnJvbVR5cGU6IG5mdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IGFkZHJlc3MgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdChuZnRJZGVudGlmaWVyKSkKICAgICAgICBsZXQgbmZ0Q29udHJhY3ROYW1lID0gRmxvd0VWTUJyaWRnZVV0aWxzLmdldENvbnRyYWN0TmFtZShmcm9tVHlwZTogbmZ0VHlwZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgbmFtZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQoKICAgICAgICBsZXQgbSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEh5YnJpZEN1c3RvZHkuTWFuYWdlKSAmSHlicmlkQ3VzdG9keS5NYW5hZ2VyPihmcm9tOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgICAgIGxldCBjaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogY2hpbGQpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCgogICAgICAgIC8qIC0tLSBSZXRyaWV2ZSB0aGUgTkZUIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBORlQgY29sbGVjdGlvbiwgY29uZmlndXJpbmcgaWYgbmVjZXNzYXJ5CiAgICAgICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQobmZ0Q29udHJhY3RBZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogbmZ0Q29udHJhY3ROYW1lKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBWaWV3UmVzb2x2ZXIgZnJvbSBORlQgY29udHJhY3QiKQogICAgICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBuaWwsCiAgICAgICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPigpCiAgICAgICAgICAgICkgYXMhIE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE/ID8/IHBhbmljKCJDb3VsZCBub3QgcmVzb2x2ZSBORlRDb2xsZWN0aW9uRGF0YSB2aWV3IikKCiAgICAgICAgbGV0IGNhcFR5cGUgPSBUeXBlPCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uUHVibGljfT4oKQogICAgICAgIGxldCBjb250cm9sbGVySUQgPSBjaGlsZEFjY3QuZ2V0Q29udHJvbGxlcklERm9yVHlwZSh0eXBlOiBjYXBUeXBlLCBmb3JQYXRoOiBjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIm5vIGNvbnRyb2xsZXIgZm91bmQgZm9yIGNhcFR5cGUiKQoKICAgICAgICBsZXQgY2FwID0gY2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiBjb250cm9sbGVySUQsIHR5cGU6IGNhcFR5cGUpID8/IHBhbmljKCJubyBjYXAgZm91bmQiKQogICAgICAgIGxldCBwdWJsaWNDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8JntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb25QdWJsaWN9PgogICAgICAgIGFzc2VydChwdWJsaWNDYXAuY2hlY2soKSwgbWVzc2FnZTogImludmFsaWQgcHVibGljIGNhcGFiaWxpdHkiKQoKICAgICAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIGNoaWxkJ3Mgc3RvcmVkIHZhdWx0CiAgICAgICAgbGV0IGNvbGxlY3Rpb25SZWYgPSBwdWJsaWNDYXAuYm9ycm93KCkhCgogICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgYXBwcm94aW1hdGUgZmVlIGZvciB0aGUgYnJpZGdlCiAgICAgICAgbGV0IGFwcHJveEZlZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5jYWxjdWxhdGVCcmlkZ2VGZWUoYnl0ZXM6IDQwMF8wMDApCgogICAgICAgIC8qIC0tLSBDb25maWd1cmUgYSBTY29wZWRGVFByb3ZpZGVyIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gSXNzdWUgYW5kIHN0b3JlIGJyaWRnZS1kZWRpY2F0ZWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBpbiBzdG9yYWdlIGlmIG5lY2Vzc2FyeQogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLnR5cGUoYXQ6IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIGxldCBwcm92aWRlckNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KAogICAgICAgICAgICAgICAgL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgICAgICAgKQogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKHByb3ZpZGVyQ2FwLCB0bzogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkKICAgICAgICB9CiAgICAgICAgLy8gQ29weSB0aGUgc3RvcmVkIFByb3ZpZGVyIGNhcGFiaWxpdHkgYW5kIGNyZWF0ZSBhIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBsZXQgcHJvdmlkZXJDYXBDb3B5ID0gc2lnbmVyLnN0b3JhZ2UuY29weTxDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4+KAogICAgICAgICAgICAgICAgZnJvbTogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJJbnZhbGlkIFByb3ZpZGVyIENhcGFiaWxpdHkgZm91bmQgaW4gc3RvcmFnZS4iKQogICAgICAgIGxldCBwcm92aWRlckZpbHRlciA9IFNjb3BlZEZUUHJvdmlkZXJzLkFsbG93YW5jZUZpbHRlcihhcHByb3hGZWUpCiAgICAgICAgbGV0IHNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICAgICAgICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgICAgICkKCiAgICAgICAgLy8gVW53cmFwIE5GVHMgaWYgYXBwbGljYWJsZQogICAgICAgIHVud3JhcE5GVHNJZkFwcGxpY2FibGUoY29hIGFzIGF1dGgoRVZNLkNhbGwpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudCwgbmZ0SURzOiBbaWRdLCBuZnRUeXBlOiBuZnRUeXBlLCB2aWV3UmVzb2x2ZXI6IHZpZXdSZXNvbHZlcikKCiAgICAgICAgbGV0IG5mdDogQHtOb25GdW5naWJsZVRva2VuLk5GVH0gPC0gY29hLndpdGhkcmF3TkZUKAogICAgICAgICAgICB0eXBlOiBuZnRUeXBlLAogICAgICAgICAgICBpZDogaWQsCiAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgKQoKICAgICAgICBhc3NlcnQoCiAgICAgICAgICAgIG5mdC5nZXRUeXBlKCkgPT0gbmZ0VHlwZSwKICAgICAgICAgICAgbWVzc2FnZTogIkJyaWRnZWQgbmZ0IHR5cGUgbWlzbWF0Y2ggLSByZXF1ZXN3dGVkOiAiLmNvbmNhdChuZnRUeXBlLmlkZW50aWZpZXIpCiAgICAgICAgICAgICAgICAuY29uY2F0KCIsIHJlY2VpdmVkOiAiKS5jb25jYXQobmZ0LmdldFR5cGUoKS5pZGVudGlmaWVyKQogICAgICAgICkKCiAgICAgICAgY29sbGVjdGlvblJlZi5kZXBvc2l0KHRva2VuOiA8LSBuZnQpCiAgICAgICAgLy8gRGVzdHJveSB0aGUgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGRlc3Ryb3kgc2NvcGVkUHJvdmlkZXIKICAgIH0KfQoKLy8vIFVud3JhcHMgTkZUcyBmcm9tIGEgcHJvamVjdCdzIGN1c3RvbSBFUkM3MjEgd3JhcHBlciBjb250cmFjdCB0byBicmlkZ2VkIE5GVHMgb24gRVZNLCBpZiBhcHBsaWNhYmxlLgovLy8gRW5hYmxlcyBwcm9qZWN0cyB0byB1c2UgdGhlaXIgb3duIEVSQzcyMSBjb250cmFjdCB3aGlsZSBsZXZlcmFnaW5nIHRoZSBicmlkZ2UncyB1bmRlcmx5aW5nIGNvbnRyYWN0LAovLy8gdW50aWwgZGlyZWN0IGN1c3RvbSBjb250cmFjdCBzdXBwb3J0IGlzIGFkZGVkIHRvIHRoZSBicmlkZ2UuCi8vLwovLy8gQHBhcmFtIGNvYTogVGhlIENPQSBvZiB0aGUgc2lnbmVyCi8vLyBAcGFyYW0gbmZ0SURzOiBUaGUgSURzIG9mIHRoZSBORlRzIHRvIHdyYXAKLy8vIEBwYXJhbSBuZnRUeXBlOiBUaGUgdHlwZSBvZiB0aGUgTkZUcyB0byB3cmFwCi8vLyBAcGFyYW0gdmlld1Jlc29sdmVyOiBUaGUgVmlld1Jlc29sdmVyIG9mIHRoZSBORlQgY29udHJhY3QKLy8vCmFjY2VzcyhhbGwpIGZ1biB1bndyYXBORlRzSWZBcHBsaWNhYmxlKAogICAgXyBjb2E6IGF1dGgoRVZNLkNhbGwpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudCwKICAgIG5mdElEczogW1VJbnQyNTZdLAogICAgbmZ0VHlwZTogVHlwZSwKICAgIHZpZXdSZXNvbHZlcjogJntWaWV3UmVzb2x2ZXJ9CikgewogICAgLy8gR2V0IHRoZSBwcm9qZWN0LWRlZmluZWQgRVJDNzIxIGFkZHJlc3MgaWYgaXQgZXhpc3RzCiAgICBpZiBsZXQgY3Jvc3NWTVBvaW50ZXIgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBuZnRUeXBlLAogICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxDcm9zc1ZNTWV0YWRhdGFWaWV3cy5FVk1Qb2ludGVyPigpCiAgICApIGFzISBDcm9zc1ZNTWV0YWRhdGFWaWV3cy5FVk1Qb2ludGVyPyB7CiAgICAgICAgLy8gR2V0IHRoZSB1bmRlcmx5aW5nIEVSQzcyMSBhZGRyZXNzIGlmIGl0IGV4aXN0cwogICAgICAgIGlmIGxldCB1bmRlcmx5aW5nQWRkcmVzcyA9IGdldFVuZGVybHlpbmdFUkM3MjFBZGRyZXNzKGNvYSwgY3Jvc3NWTVBvaW50ZXIuZXZtQ29udHJhY3RBZGRyZXNzKSB7CiAgICAgICAgICAgIGZvciBpZCBpbiBuZnRJRHMgewogICAgICAgICAgICAgICAgLy8gVW53cmFwIE5GVCBpZiBpdCBpcyB3cmFwcGVkCiAgICAgICAgICAgICAgICBpZiBpc05GVFdyYXBwZWQoY29hLAogICAgICAgICAgICAgICAgICAgIG5mdElEOiBpZCwKICAgICAgICAgICAgICAgICAgICB1bmRlcmx5aW5nOiB1bmRlcmx5aW5nQWRkcmVzcywKICAgICAgICAgICAgICAgICAgICB3cmFwcGVyOiBjcm9zc1ZNUG9pbnRlci5ldm1Db250cmFjdEFkZHJlc3MKICAgICAgICAgICAgICAgICkgewogICAgICAgICAgICAgICAgICAgIGxldCByZXMgPSBtdXN0Q2FsbChjb2EsIGNyb3NzVk1Qb2ludGVyLmV2bUNvbnRyYWN0QWRkcmVzcywKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb25TaWc6ICJ3aXRoZHJhd1RvKGFkZHJlc3MsdWludDI1NltdKSIsCiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3M6IFtjb2EuYWRkcmVzcygpLCBbaWRdXQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBsZXQgZGVjb2RlZFJlcyA9IEVWTS5kZWNvZGVBQkkodHlwZXM6IFtUeXBlPEJvb2w+KCldLCBkYXRhOiByZXMuZGF0YSkKICAgICAgICAgICAgICAgICAgICBhc3NlcnQoZGVjb2RlZFJlcy5sZW5ndGggPT0gMSwgbWVzc2FnZTogIkludmFsaWQgcmVzcG9uc2UgbGVuZ3RoIikKICAgICAgICAgICAgICAgICAgICBhc3NlcnQoZGVjb2RlZFJlc1swXSBhcyEgQm9vbCwgbWVzc2FnZTogIkZhaWxlZCB0byB1bndyYXAgTkZUIikKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKLy8vIEdldHMgdGhlIHVuZGVybHlpbmcgRVJDNzIxIGFkZHJlc3MgaWYgaXQgZXhpc3RzIChpLmUuIGlmIHRoZSBFUkM3MjEgaXMgYSB3cmFwcGVyKQovLy8KYWNjZXNzKGFsbCkgZnVuIGdldFVuZGVybHlpbmdFUkM3MjFBZGRyZXNzKAogICAgXyBjb2E6IGF1dGgoRVZNLkNhbGwpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudCwKICAgIF8gd3JhcHBlckFkZHJlc3M6IEVWTS5FVk1BZGRyZXNzCik6IEVWTS5FVk1BZGRyZXNzPyB7CiAgICBsZXQgcmVzID0gY29hLmNhbGwoCiAgICAgICAgdG86IHdyYXBwZXJBZGRyZXNzLAogICAgICAgIGRhdGE6IEVWTS5lbmNvZGVBQklXaXRoU2lnbmF0dXJlKCJ1bmRlcmx5aW5nKCkiLCBbXSksCiAgICAgICAgZ2FzTGltaXQ6IDEwMF8wMDAsCiAgICAgICAgdmFsdWU6IEVWTS5CYWxhbmNlKGF0dG9mbG93OiAwKQogICAgKQoKICAgIC8vIElmIHRoZSBjYWxsIGZhaWxzLCByZXR1cm4gbmlsCiAgICBpZiByZXMuc3RhdHVzICE9IEVWTS5TdGF0dXMuc3VjY2Vzc2Z1bCB8fCByZXMuZGF0YS5sZW5ndGggPT0gMCB7CiAgICAgICAgcmV0dXJuIG5pbAogICAgfQoKICAgIC8vIERlY29kZSBhbmQgcmV0dXJuIHRoZSB1bmRlcmx5aW5nIEVSQzcyMSBhZGRyZXNzCiAgICBsZXQgZGVjb2RlZFJlc3VsdCA9IEVWTS5kZWNvZGVBQkkoCiAgICAgICAgdHlwZXM6IFtUeXBlPEVWTS5FVk1BZGRyZXNzPigpXSwKICAgICAgICBkYXRhOiByZXMuZGF0YQogICAgKQogICAgYXNzZXJ0KGRlY29kZWRSZXN1bHQubGVuZ3RoID09IDEsIG1lc3NhZ2U6ICJJbnZhbGlkIHJlc3BvbnNlIGxlbmd0aCIpCiAgICByZXR1cm4gZGVjb2RlZFJlc3VsdFswXSBhcyEgRVZNLkVWTUFkZHJlc3MKfQoKLy8vIENoZWNrcyBpZiB0aGUgcHJvdmlkZWQgTkZUIGlzIHdyYXBwZWQgaW4gdGhlIHVuZGVybHlpbmcgRVJDNzIxIGNvbnRyYWN0Ci8vLwphY2Nlc3MoYWxsKSBmdW4gaXNORlRXcmFwcGVkKAogICAgXyBjb2E6IGF1dGgoRVZNLkNhbGwpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudCwKICAgIG5mdElEOiBVSW50MjU2LAogICAgdW5kZXJseWluZzogRVZNLkVWTUFkZHJlc3MsCiAgICB3cmFwcGVyOiBFVk0uRVZNQWRkcmVzcwopOiBCb29sIHsKICAgIGxldCByZXMgPSBjb2EuY2FsbCgKICAgICAgICB0bzogdW5kZXJseWluZywKICAgICAgICBkYXRhOiBFVk0uZW5jb2RlQUJJV2l0aFNpZ25hdHVyZSgib3duZXJPZih1aW50MjU2KSIsIFtuZnRJRF0pLAogICAgICAgIGdhc0xpbWl0OiAxMDBfMDAwLAogICAgICAgIHZhbHVlOiBFVk0uQmFsYW5jZShhdHRvZmxvdzogMCkKICAgICkKCiAgICAvLyBJZiB0aGUgY2FsbCBmYWlscywgcmV0dXJuIGZhbHNlCiAgICBpZiByZXMuc3RhdHVzICE9IEVWTS5TdGF0dXMuc3VjY2Vzc2Z1bCB8fCByZXMuZGF0YS5sZW5ndGggPT0gMHsKICAgICAgICByZXR1cm4gZmFsc2UKICAgIH0KCiAgICAvLyBEZWNvZGUgYW5kIGNvbXBhcmUgdGhlIGFkZHJlc3NlcwogICAgbGV0IGRlY29kZWRSZXN1bHQgPSBFVk0uZGVjb2RlQUJJKAogICAgICAgIHR5cGVzOiBbVHlwZTxFVk0uRVZNQWRkcmVzcz4oKV0sCiAgICAgICAgZGF0YTogcmVzLmRhdGEKICAgICkKICAgIGFzc2VydChkZWNvZGVkUmVzdWx0Lmxlbmd0aCA9PSAxLCBtZXNzYWdlOiAiSW52YWxpZCByZXNwb25zZSBsZW5ndGgiKQogICAgbGV0IG93bmVyID0gZGVjb2RlZFJlc3VsdFswXSBhcyEgRVZNLkVWTUFkZHJlc3MKICAgIHJldHVybiBvd25lci50b1N0cmluZygpID09IHdyYXBwZXIudG9TdHJpbmcoKQp9CgovLy8gQ2FsbHMgYSBmdW5jdGlvbiBvbiBhbiBFVk0gY29udHJhY3QgZnJvbSBwcm92aWRlZCBjb2EKLy8vCmFjY2VzcyhhbGwpIGZ1biBtdXN0Q2FsbCgKICAgIF8gY29hOiBhdXRoKEVWTS5DYWxsKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQsCiAgICBfIGNvbnRyYWN0QWRkcjogRVZNLkVWTUFkZHJlc3MsCiAgICBmdW5jdGlvblNpZzogU3RyaW5nLAogICAgYXJnczogW0FueVN0cnVjdF0KKTogRVZNLlJlc3VsdCB7CiAgICBsZXQgcmVzID0gY29hLmNhbGwoCiAgICAgICAgdG86IGNvbnRyYWN0QWRkciwKICAgICAgICBkYXRhOiBFVk0uZW5jb2RlQUJJV2l0aFNpZ25hdHVyZShmdW5jdGlvblNpZywgYXJncyksCiAgICAgICAgZ2FzTGltaXQ6IDRfMDAwXzAwMCwKICAgICAgICB2YWx1ZTogRVZNLkJhbGFuY2UoYXR0b2Zsb3c6IDApCiAgICApCgogICAgYXNzZXJ0KHJlcy5zdGF0dXMgPT0gRVZNLlN0YXR1cy5zdWNjZXNzZnVsLAogICAgICAgIG1lc3NhZ2U6ICJGYWlsZWQgdG8gY2FsbCAnIi5jb25jYXQoZnVuY3Rpb25TaWcpCiAgICAgICAgICAgIC5jb25jYXQoIlxuXHQgZXJyb3IgY29kZTogIikuY29uY2F0KHJlcy5lcnJvckNvZGUudG9TdHJpbmcoKSkKICAgICAgICAgICAgLmNvbmNhdCgiXG5cdCBlcnJvciBtZXNzYWdlOiAiKS5jb25jYXQocmVzLmVycm9yTWVzc2FnZSkKICAgICAgICAgICAgLmNvbmNhdCgiXG5cdCBnYXMgdXNlZDogIikuY29uY2F0KHJlcy5nYXNVc2VkLnRvU3RyaW5nKCkpCiAgICAgICAgICAgIC5jb25jYXQoIlxuXHQgY2FsbGVyIGFkZHJlc3M6IDB4IikuY29uY2F0KGNvYS5hZGRyZXNzKCkudG9TdHJpbmcoKSkKICAgICAgICAgICAgLmNvbmNhdCgiXG5cdCBjb250cmFjdCBhZGRyZXNzOiAweCIpLmNvbmNhdChjb250cmFjdEFkZHIudG9TdHJpbmcoKSkKICAgICkKCiAgICByZXR1cm4gcmVzCn0K",
          "bridgeChildNFTToEvm": "",
          "bridgeChildNFTToEvmAddress": "",
          "checkChildLinkedCollections": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgY2hlY2tDaGlsZExpbmtlZENvbGxlY3Rpb25zIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4ZDhhN2UwNWE3YWM2NzBjMAoKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweGQ4YTdlMDVhN2FjNjcwYzAKCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgoKYWNjZXNzKGFsbCkgZnVuIG1haW4ocGFyZW50OiBBZGRyZXNzLCBjaGlsZDogQWRkcmVzcywgaWRlbnRpZmllcjogU3RyaW5nKTogQm9vbCB7CiAgICBsZXQgbWdyID0gZ2V0QXV0aEFjY291bnQocGFyZW50KS5ib3Jyb3c8Jkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgbWFuYWdlciBmcm9tIHBhcmVudCIpCiAgICBsZXQgY2hpbGQgPSBtZ3IuYm9ycm93QWNjb3VudChhZGRyOiBjaGlsZCkgPz8gcGFuaWMoIkNoaWxkIGFjY291bnQgbm90IGZvdW5kIikKCiAgICBsZXQgY2FwID0gY2hpbGQuZ2V0Q2FwYWJpbGl0eSgKICAgICAgICAgICAgcGF0aDogUHJpdmF0ZVBhdGgoaWRlbnRpZmllcjogaWRlbnRpZmllcikhIGFzIENhcGFiaWxpdHlQYXRoLAogICAgICAgICAgICB0eXBlOiBUeXBlPCZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlciwgTm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uUHVibGljfT4oKQogICAgICAgICkgYXMhIENhcGFiaWxpdHk8JntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyLCBOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb25QdWJsaWN9Pj8KCiAgICAKICAgIHJldHVybiBjYXAgIT0gbmlsCn0gICAKICAgIA==",
          "checkChildLinkedVaults": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgY2hlY2tDaGlsZExpbmtlZFZhdWx0cyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweGQ4YTdlMDVhN2FjNjcwYzAKCmltcG9ydCBDYXBhYmlsaXR5RmlsdGVyIGZyb20gMHhkOGE3ZTA1YTdhYzY3MGMwCgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQoKCmFjY2VzcyhhbGwpIGZ1biBtYWluKHBhcmVudDogQWRkcmVzcywgY2hpbGQ6IEFkZHJlc3MsIHBhdGg6IFN0cmluZyk6IEJvb2wgewogIGxldCBhY2NvdW50ID0gZ2V0QXV0aEFjY291bnQ8YXV0aChTdG9yYWdlKSAmQWNjb3VudD4ocGFyZW50KQogIGxldCBtYW5hZ2VyID0gZ2V0QXV0aEFjY291bnQ8YXV0aChTdG9yYWdlKSAmQWNjb3VudD4ocGFyZW50KS5zdG9yYWdlLmJvcnJvdzxhdXRoKEh5YnJpZEN1c3RvZHkuTWFuYWdlKSAmSHlicmlkQ3VzdG9keS5NYW5hZ2VyPihmcm9tOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkgPz8gcGFuaWMgKCJtYW5hZ2VyIGRvZXMgbm90IGV4aXN0IikKICAKICBsZXQgcHJvdmlkZXJUeXBlID0gVHlwZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KCkKCiAgbGV0IGFkZHIgPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UsIENhcGFiaWxpdGllcykgJkFjY291bnQ+KGNoaWxkKQogIAogIGxldCBjaGlsZEFjY3QgPSBtYW5hZ2VyLmJvcnJvd0FjY291bnQoYWRkcjogY2hpbGQpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCgogIGxldCBjb250cm9sbGVycyA9IGFkZHIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuZ2V0Q29udHJvbGxlcnMoZm9yUGF0aDogU3RvcmFnZVBhdGgoaWRlbnRpZmllcjogcGF0aCkhKQogIHZhciBmbGFnID0gZmFsc2UKCiAgZm9yIGMgaW4gY29udHJvbGxlcnMgewogICAgaWYgIWMuYm9ycm93VHlwZS5pc1N1YnR5cGUob2Y6IHByb3ZpZGVyVHlwZSkgewogICAgICBjb250aW51ZQogICAgfQoKICAgIGlmIGxldCBjYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGMuY2FwYWJpbGl0eUlELCB0eXBlOiBwcm92aWRlclR5cGUpIHsKICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gY2FwIGFzISBDYXBhYmlsaXR5PCZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+IAoKICAgICAgaWYgIXByb3ZpZGVyQ2FwLmNoZWNrKCl7CiAgICAgICAgY29udGludWUKICAgICAgfQoKICAgICAgZmxhZyA9IHRydWUKICAgICAgYnJlYWsKICAgIH0KICB9CgogIHJldHVybiBmbGFnCn0gCiAgICA=",
          "checkChildRecieveVaults": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgY2hlY2tDaGlsZFJlY2lldmVWYXVsdHMgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhkOGE3ZTA1YTdhYzY3MGMwCgppbXBvcnQgQ2FwYWJpbGl0eUZpbHRlciBmcm9tIDB4ZDhhN2UwNWE3YWM2NzBjMAoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweGYyMzNkY2VlODhmZTBhYmUKCgphY2Nlc3MoYWxsKSBmdW4gbWFpbihwYXJlbnQ6IEFkZHJlc3MsIGNoaWxkOiBBZGRyZXNzLCBwYXRoOiBTdHJpbmcpOiBCb29sIHsKICBsZXQgYWNjb3VudCA9IGdldEF1dGhBY2NvdW50PGF1dGgoU3RvcmFnZSkgJkFjY291bnQ+KHBhcmVudCkKICBsZXQgbWFuYWdlciA9IGdldEF1dGhBY2NvdW50PGF1dGgoU3RvcmFnZSkgJkFjY291bnQ+KHBhcmVudCkuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpID8/IHBhbmljICgibWFuYWdlciBkb2VzIG5vdCBleGlzdCIpCiAgCiAgbGV0IHJlY2VpdmVyVHlwZSA9IFR5cGU8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4oKQoKICBsZXQgYWRkciA9IGdldEF1dGhBY2NvdW50PGF1dGgoU3RvcmFnZSwgQ2FwYWJpbGl0aWVzKSAmQWNjb3VudD4oY2hpbGQpCiAgCiAgbGV0IGNoaWxkQWNjdCA9IG1hbmFnZXIuYm9ycm93QWNjb3VudChhZGRyOiBjaGlsZCkgPz8gcGFuaWMoImNoaWxkIGFjY291bnQgbm90IGZvdW5kIikKCiAgbGV0IGNvbnRyb2xsZXJzID0gYWRkci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5nZXRDb250cm9sbGVycyhmb3JQYXRoOiBTdG9yYWdlUGF0aChpZGVudGlmaWVyOiBwYXRoKSEpCiAgdmFyIGZsYWcgPSBmYWxzZQoKICBmb3IgYyBpbiBjb250cm9sbGVycyB7CiAgICBpZiAhYy5ib3Jyb3dUeXBlLmlzU3VidHlwZShvZjogcmVjZWl2ZXJUeXBlKSB7CiAgICAgIGNvbnRpbnVlCiAgICB9CgogICAgaWYgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogYy5jYXBhYmlsaXR5SUQsIHR5cGU6IHJlY2VpdmVyVHlwZSkgewogICAgICBsZXQgcHJvdmlkZXJDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4gCgogICAgICBpZiAhcHJvdmlkZXJDYXAuY2hlY2soKXsKICAgICAgICBjb250aW51ZQogICAgICB9CgogICAgICBmbGFnID0gdHJ1ZQogICAgICBicmVhawogICAgfQogIH0KCiAgcmV0dXJuIGZsYWcKfSAKICAgIA==",
          "editChildAccount": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZWRpdENoaWxkQWNjb3VudCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweGQ4YTdlMDVhN2FjNjcwYzAKCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgoKdHJhbnNhY3Rpb24oY2hpbGRBZGRyZXNzOiBBZGRyZXNzLCBuYW1lOiBTdHJpbmcsIGRlc2NyaXB0aW9uOiBTdHJpbmcsIHRodW1ibmFpbDogU3RyaW5nKSB7CiAgICBwcmVwYXJlKGFjY3Q6IEF1dGhBY2NvdW50KSB7CiAgICAgICAgbGV0IG0gPSBhY2N0LmJvcnJvdzwmSHlicmlkQ3VzdG9keS5NYW5hZ2VyPihmcm9tOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgbm90IGZvdW5kIikKICAgICAgICAKICAgICAgICBsZXQgZCA9IE1ldGFkYXRhVmlld3MuRGlzcGxheSgKICAgICAgICAgICAgbmFtZTogbmFtZSwKICAgICAgICAgICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uLAogICAgICAgICAgICB0aHVtYm5haWw6IE1ldGFkYXRhVmlld3MuSFRUUEZpbGUodXJsOiB0aHVtYm5haWwpCiAgICAgICAgKQoKICAgICAgICBtLnNldENoaWxkQWNjb3VudERpc3BsYXkoYWRkcmVzczogY2hpbGRBZGRyZXNzLCBkKQogICAgfQp9",
          "getAccessibleChildAccountNFTs": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0QWNjZXNzaWJsZUNoaWxkQWNjb3VudE5GVHMgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhkOGE3ZTA1YTdhYzY3MGMwCgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCgoKLy8gVGhpcyBzY3JpcHQgaXRlcmF0ZXMgdGhyb3VnaCBhIHBhcmVudCdzIGNoaWxkIGFjY291bnRzLCAKLy8gaWRlbnRpZmllcyBwcml2YXRlIHBhdGhzIHdpdGggYW4gYWNjZXNzaWJsZSBOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyLCBhbmQgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyB0eXBlSWRzCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHI6IEFkZHJlc3MpOiBBbnlTdHJ1Y3QgewogIGxldCBtYW5hZ2VyID0gZ2V0QXV0aEFjY291bnQ8YXV0aChTdG9yYWdlKSAmQWNjb3VudD4oYWRkcikuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpID8/IHBhbmljICgibWFuYWdlciBkb2VzIG5vdCBleGlzdCIpCgogIHZhciB0eXBlSWRzV2l0aFByb3ZpZGVyID0ge30gYXMge0FkZHJlc3M6IFtTdHJpbmddfQoKICAvLyBBZGRyZXNzIC0+IG5mdCBVVUlEIC0+IERpc3BsYXkKICB2YXIgbmZ0Vmlld3MgPSB7fSBhcyB7QWRkcmVzczoge1N0cmluZzogW1VJbnQ2NF19fSAKCiAgCiAgbGV0IHByb3ZpZGVyVHlwZSA9IFR5cGU8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigpCiAgbGV0IGNvbGxlY3Rpb25UeXBlOiBUeXBlID0gVHlwZTxAe05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+KCkKCiAgLy8gSXRlcmF0ZSB0aHJvdWdoIGNoaWxkIGFjY291bnRzCiAgZm9yIGFkZHJlc3MgaW4gbWFuYWdlci5nZXRDaGlsZEFkZHJlc3NlcygpIHsKICAgIGxldCBhY2N0ID0gZ2V0QXV0aEFjY291bnQ8YXV0aChTdG9yYWdlLCBDYXBhYmlsaXRpZXMpICZBY2NvdW50PihhZGRyZXNzKQogICAgbGV0IGZvdW5kVHlwZXM6IFtTdHJpbmddID0gW10KICAgIGxldCB2aWV3czoge1N0cmluZzogW1VJbnQ2NF19ID0ge30KICAgIGxldCBjaGlsZEFjY3QgPSBtYW5hZ2VyLmJvcnJvd0FjY291bnQoYWRkcjogYWRkcmVzcykgPz8gcGFuaWMoImNoaWxkIGFjY291bnQgbm90IGZvdW5kIikKICAgICAKICAgIC8vIHR5cGVJZHNXaXRoUHJvdmlkZXJbYWRkcmVzc10gPSBmb3VuZFR5cGVzCgogICAgYWNjdC5zdG9yYWdlLmZvckVhY2hTdG9yZWQoZnVuIChwYXRoOiBTdG9yYWdlUGF0aCwgdHlwZTogVHlwZSk6IEJvb2wgewoKICAgICAgbGV0IGNvbnRyb2xsZXJzID0gYWNjdC5jYXBhYmlsaXRpZXMuc3RvcmFnZS5nZXRDb250cm9sbGVycyhmb3JQYXRoOiBwYXRoISkKICAgICAgZm9yIGMgaW4gY29udHJvbGxlcnMgewogICAgICAgIGlmICFjLmJvcnJvd1R5cGUuaXNTdWJ0eXBlKG9mOiBwcm92aWRlclR5cGUpIHsKICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgfQoKICAgICAgICBpZiBsZXQgY2FwID0gY2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiBjLmNhcGFiaWxpdHlJRCwgdHlwZTogcHJvdmlkZXJUeXBlKSB7CiAgICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8JntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4gCgogICAgICAgICAgaWYgIXByb3ZpZGVyQ2FwLmNoZWNrKCl7CiAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICB9CiAgICAgICAgICBmb3VuZFR5cGVzLmFwcGVuZChjYXAuYm9ycm93PCZBbnlSZXNvdXJjZT4oKSEuZ2V0VHlwZSgpLmlkZW50aWZpZXIpCiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiB0cnVlCiAgICB9KQoKICAgIHR5cGVJZHNXaXRoUHJvdmlkZXJbYWRkcmVzc10gPSBmb3VuZFR5cGVzCiAgICAKCiAgICAvLyBpdGVyYXRlIHN0b3JhZ2UsIGNoZWNrIGlmIHR5cGVJZHNXaXRoUHJvdmlkZXIgY29udGFpbnMgdGhlIHR5cGVJZCwgaWYgc28sIGFkZCB0byB2aWV3cwogICAgYWNjdC5zdG9yYWdlLmZvckVhY2hTdG9yZWQoZnVuIChwYXRoOiBTdG9yYWdlUGF0aCwgdHlwZTogVHlwZSk6IEJvb2wgewogICAgICAKICAgICAgaWYgdHlwZUlkc1dpdGhQcm92aWRlclthZGRyZXNzXSA9PSBuaWwgewogICAgICAgIHJldHVybiB0cnVlCiAgICAgIH0KCiAgICAgIGZvciBrZXkgaW4gdHlwZUlkc1dpdGhQcm92aWRlci5rZXlzIHsKICAgICAgICBmb3IgaWR4LCB2YWx1ZSBpbiB0eXBlSWRzV2l0aFByb3ZpZGVyW2tleV0hIHsKICAgICAgICAgIGxldCB2YWx1ZSA9IHR5cGVJZHNXaXRoUHJvdmlkZXJba2V5XSEKCiAgICAgICAgICBpZiB2YWx1ZVtpZHhdICE9IHR5cGUuaWRlbnRpZmllciB7CiAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZiB0eXBlLmlzSW5zdGFuY2UoY29sbGVjdGlvblR5cGUpIHsKICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIGxldCBjb2xsZWN0aW9uID0gYWNjdC5zdG9yYWdlLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpYywgVmlld1Jlc29sdmVyLlJlc29sdmVyQ29sbGVjdGlvbn0+KGZyb206IHBhdGgpIHsgCiAgICAgICAgICAgICAgLy8gSXRlcmF0ZSBvdmVyIElEcyAmIHJlc29sdmUgdGhlIHZpZXcKICAgICAgICAgICAgIAogICAgICAgICAgICAgIGZvciBpZCBpbiBjb2xsZWN0aW9uLmdldElEcygpIHsKICAgICAgICAgICAgICAgIGxldCBuZnQgPSBjb2xsZWN0aW9uLmJvcnJvd05GVChpZCkhCgogICAgICAgICAgICAgICAgdmlld3NbbmZ0LmdldFR5cGUoKS5pZGVudGlmaWVyXSA9IGNvbGxlY3Rpb24uZ2V0SURzKCkKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gdHJ1ZQogICAgfSkKICAgIG5mdFZpZXdzW2FkZHJlc3NdID0gdmlld3MKICB9CiAgcmV0dXJuIG5mdFZpZXdzCn0=",
          "getAccessibleCoinInfo": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0QWNjZXNzaWJsZUNvaW5JbmZvIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgogaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweGQ4YTdlMDVhN2FjNjcwYzAKCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQoKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCgphY2Nlc3MoYWxsKSBzdHJ1Y3QgVG9rZW5JbmZvIHsKYWNjZXNzKGFsbCkgbGV0IGlkOiBTdHJpbmcKYWNjZXNzKGFsbCkgbGV0IGJhbGFuY2U6IFVGaXg2NAoKaW5pdChpZDogU3RyaW5nLCBiYWxhbmNlOiBVRml4NjQpIHsKICAgIHNlbGYuaWQgPSBpZAogICAgc2VsZi5iYWxhbmNlID0gYmFsYW5jZQp9Cn0KCmFjY2VzcyhhbGwpIGZ1biBtYWluKHBhcmVudDogQWRkcmVzcywgY2hpbGRBZGRyZXNzOiBBZGRyZXNzKTogW1Rva2VuSW5mb10gewogICAgbGV0IG1hbmFnZXIgPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UpICZBY2NvdW50PihwYXJlbnQpLnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5NYW5hZ2UpICZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKSA/PyBwYW5pYyAoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQoKICAgIHZhciB0eXBlSWRzV2l0aFByb3ZpZGVyOiB7QWRkcmVzczogW1N0cmluZ119ID0ge30KCiAgICB2YXIgY29pbkluZm9MaXN0OiBbVG9rZW5JbmZvXSA9IFtdCiAgICBsZXQgcHJvdmlkZXJUeXBlID0gVHlwZTxDYXBhYmlsaXR5PCZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+PigpCiAgICBsZXQgdmF1bHRUeXBlOiBUeXBlID0gVHlwZTxAe0Z1bmdpYmxlVG9rZW4uVmF1bHR9PigpCgogICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGNoaWxkIGFjY291bnRzCgogICAgbGV0IGFjY3QgPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UsIENhcGFiaWxpdGllcykgJkFjY291bnQ+IChjaGlsZEFkZHJlc3MpCiAgICBsZXQgZm91bmRUeXBlczogW1N0cmluZ10gPSBbXQogICAgbGV0IHZhdWx0QmFsYW5jZXM6IHtTdHJpbmc6IFVGaXg2NH0gPSB7fQogICAgbGV0IGNoaWxkQWNjdCA9IG1hbmFnZXIuYm9ycm93QWNjb3VudChhZGRyOiBjaGlsZEFkZHJlc3MpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAvLyBnZXQgYWxsIHByaXZhdGUgcGF0aHMKICAgIGFjY3Quc3RvcmFnZS5mb3JFYWNoU3RvcmVkKGZ1biAocGF0aDogU3RvcmFnZVBhdGgsIHR5cGU6IFR5cGUpOiBCb29sIHsKICAgICAgICAvLyBDaGVjayB3aGljaCBwcml2YXRlIHBhdGhzIGhhdmUgTkZUIFByb3ZpZGVyIEFORCBjYW4gYmUgYm9ycm93ZWQKICAgICAgICBpZiAhdHlwZS5pc1N1YnR5cGUob2Y6IHByb3ZpZGVyVHlwZSl7CiAgICAgICAgICAgIHJldHVybiB0cnVlCiAgICAgICAgfQoKICAgICAgICBsZXQgY29udHJvbGxlcnMgPSBhY2N0LmNhcGFiaWxpdGllcy5zdG9yYWdlLmdldENvbnRyb2xsZXJzKGZvclBhdGg6IHBhdGgpCgogICAgICAgIC8vIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTwme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PiAKCiAgICAgICAgZm9yIGMgaW4gY29udHJvbGxlcnMgewogICAgICAgICAgICBpZiAhYy5ib3Jyb3dUeXBlLmlzU3VidHlwZShvZjogcHJvdmlkZXJUeXBlKSB7CiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiBsZXQgY2FwID0gY2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiBjLmNhcGFiaWxpdHlJRCwgdHlwZTogcHJvdmlkZXJUeXBlKSB7CiAgICAgICAgICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8JntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4gCgogICAgICAgICAgICAgICAgaWYgIXByb3ZpZGVyQ2FwLmNoZWNrKCl7CiAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZvdW5kVHlwZXMuYXBwZW5kKGNhcC5ib3Jyb3c8JkFueVJlc291cmNlPigpIS5nZXRUeXBlKCkuaWRlbnRpZmllcikKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gdHJ1ZQogICAgfSkKICAgIHR5cGVJZHNXaXRoUHJvdmlkZXJbY2hpbGRBZGRyZXNzXSA9IGZvdW5kVHlwZXMKCiAgICAKICAgIGFjY3Quc3RvcmFnZS5mb3JFYWNoU3RvcmVkKGZ1biAocGF0aDogU3RvcmFnZVBhdGgsIHR5cGU6IFR5cGUpOiBCb29sIHsKICAgIAogICAgaWYgdHlwZUlkc1dpdGhQcm92aWRlcltjaGlsZEFkZHJlc3NdID09IG5pbCB7CiAgICAgICAgcmV0dXJuIHRydWUKICAgIH0KCiAgICBmb3Iga2V5IGluIHR5cGVJZHNXaXRoUHJvdmlkZXIua2V5cyB7CiAgICAgICAgZm9yIGlkeCwgdmFsdWUgaW4gdHlwZUlkc1dpdGhQcm92aWRlcltrZXldISB7CiAgICAgICAgICAgIGxldCB2YWx1ZSA9IHR5cGVJZHNXaXRoUHJvdmlkZXJba2V5XSEKCiAgICAgICAgICAgIGlmIHZhbHVlW2lkeF0gIT0gdHlwZS5pZGVudGlmaWVyIHsKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBpZiB0eXBlLmlzSW5zdGFuY2UodmF1bHRUeXBlKSB7CiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgbGV0IHZhdWx0ID0gYWNjdC5zdG9yYWdlLmJvcnJvdzwme0Z1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KGZyb206IHBhdGgpIHsgCiAgICAgICAgICAgICAgICAvLyBJdGVyYXRlIG92ZXIgSURzICYgcmVzb2x2ZSB0aGUgdmlldwogICAgICAgICAgICAgICAgICAgIGNvaW5JbmZvTGlzdC5hcHBlbmQoCiAgICAgICAgICAgICAgICAgICAgVG9rZW5JbmZvKGlkOiB0eXBlLmlkZW50aWZpZXIsIGJhbGFuY2U6IHZhdWx0LmJhbGFuY2UpKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB9CiAgICAgIHJldHVybiB0cnVlCiAgICB9KQoKICAgIAogICAgcmV0dXJuIGNvaW5JbmZvTGlzdAp9",
          "getAccessibleCollectionAndIdsDisplay": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0QWNjZXNzaWJsZUNvbGxlY3Rpb25BbmRJZHNEaXNwbGF5IC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4ZDhhN2UwNWE3YWM2NzBjMAoKaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhmMjMzZGNlZTg4ZmUwYWJlCgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKCgphY2Nlc3MoYWxsKSBzdHJ1Y3QgQ29sbGVjdGlvbkRpc3BsYXkgewogIGFjY2VzcyhhbGwpIGxldCBuYW1lOiBTdHJpbmcKICBhY2Nlc3MoYWxsKSBsZXQgc3F1YXJlSW1hZ2U6IE1ldGFkYXRhVmlld3MuTWVkaWEKCiAgaW5pdChuYW1lOiBTdHJpbmcsIHNxdWFyZUltYWdlOiBNZXRhZGF0YVZpZXdzLk1lZGlhKSB7CiAgICBzZWxmLm5hbWUgPSBuYW1lCiAgICBzZWxmLnNxdWFyZUltYWdlID0gc3F1YXJlSW1hZ2UKICB9Cn0KCmFjY2VzcyhhbGwpIHN0cnVjdCBORlRDb2xsZWN0aW9uIHsKICBhY2Nlc3MoYWxsKSBsZXQgaWQ6IFN0cmluZwogIGFjY2VzcyhhbGwpIGxldCBkaXNwbGF5OiBDb2xsZWN0aW9uRGlzcGxheT8KICBhY2Nlc3MoYWxsKSBsZXQgaWRMaXN0OiBbVUludDY0XQoKICBpbml0KGlkOlN0cmluZywgZGlzcGxheTogQ29sbGVjdGlvbkRpc3BsYXk/LCBpZExpc3Q6IFtVSW50NjRdKSB7CiAgICBzZWxmLmlkID0gaWQKICAgIHNlbGYuZGlzcGxheSA9IGRpc3BsYXkKICAgIHNlbGYuaWRMaXN0ID0gaWRMaXN0CiAgfQp9CgphY2Nlc3MoYWxsKSBmdW4gZ2V0RGlzcGxheShhZGRyZXNzOiBBZGRyZXNzLCBwYXRoOiBTdG9yYWdlUGF0aCk6IENvbGxlY3Rpb25EaXNwbGF5PyB7CiAgbGV0IGFjY291bnQgPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UsIENhcGFiaWxpdGllcykgJkFjY291bnQ+KGFkZHJlc3MpCgogIGxldCByZXNvdXJjZVR5cGUgPSBUeXBlPEBBbnlSZXNvdXJjZT4oKQogIC8vIGxldCB2YXVsdFR5cGUgPSBUeXBlPEB7RnVuZ2libGVUb2tlbi5WYXVsdH0+KCkKICBsZXQgY29sbGVjdGlvblR5cGUgPSBUeXBlPEB7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufT4oKQogIGxldCBtZXRhZGF0YVZpZXdUeXBlID0gVHlwZTwme1ZpZXdSZXNvbHZlci5SZXNvbHZlckNvbGxlY3Rpb259PigpCiAgdmFyIGl0ZW06IENvbGxlY3Rpb25EaXNwbGF5PyA9ICBuaWwKCiAgICBpZiBsZXQgdHlwZSA9IGFjY291bnQuc3RvcmFnZS50eXBlKGF0OiBwYXRoKSB7CiAgICAgIGxldCBpc1Jlc291cmNlID0gdHlwZS5pc1N1YnR5cGUob2Y6IHJlc291cmNlVHlwZSkKICAgICAgbGV0IGlzTkZUQ29sbGVjdGlvbiA9IHR5cGUuaXNTdWJ0eXBlKG9mOiBjb2xsZWN0aW9uVHlwZSkKICAgICAgbGV0IGNvbmZvcm1lZE1ldGFkYXRhVmlld3MgPSB0eXBlLmlzU3VidHlwZShvZjogbWV0YWRhdGFWaWV3VHlwZSkKCiAgICAgIHZhciB0b2tlbklEczogW1VJbnQ2NF0gPSBbXQogICAgICBpZiBpc05GVENvbGxlY3Rpb24gJiYgY29uZm9ybWVkTWV0YWRhdGFWaWV3cyB7CiAgICAgICAgaWYgbGV0IGNvbGxlY3Rpb25SZWYgPSBhY2NvdW50LnN0b3JhZ2UuYm9ycm93PCZ7Vmlld1Jlc29sdmVyLlJlc29sdmVyQ29sbGVjdGlvbiwgTm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uUHVibGljfT4oZnJvbTogcGF0aCkgewogICAgICAgICAgdG9rZW5JRHMgPSBjb2xsZWN0aW9uUmVmLmdldElEcygpCgogICAgICAgICAgLy8gVE9ETzogbW92ZSB0byBhIGxpc3QKICAgICAgICAgIGlmIHRva2VuSURzLmxlbmd0aCA+IDAgCiAgICAgICAgICAmJiBwYXRoICE9IC9zdG9yYWdlL1JhcmlibGVORlRDb2xsZWN0aW9uIAogICAgICAgICAgJiYgcGF0aCAhPSAvc3RvcmFnZS9BUlRJRkFDVFBhY2tWM0NvbGxlY3Rpb24KICAgICAgICAgICYmIHBhdGggIT0gL3N0b3JhZ2UvQXJsZWVTY2VuZSB7CiAgICAgICAgICAgIGxldCByZXNvbHZlciA9IGNvbGxlY3Rpb25SZWYuYm9ycm93Vmlld1Jlc29sdmVyKGlkOiB0b2tlbklEc1swXSkhCiAgICAgICAgICAgIGlmIGxldCBkaXNwbGF5ID0gTWV0YWRhdGFWaWV3cy5nZXRORlRDb2xsZWN0aW9uRGlzcGxheShyZXNvbHZlcikgewogICAgICAgICAgICAgIGl0ZW0gPSBDb2xsZWN0aW9uRGlzcGxheSgKICAgICAgICAgICAgICAgIG5hbWU6IGRpc3BsYXkubmFtZSwKICAgICAgICAgICAgICAgIHNxdWFyZUltYWdlOiBkaXNwbGF5LnNxdWFyZUltYWdlCiAgICAgICAgICAgICAgKQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogIHJldHVybiBpdGVtCn0KCmFjY2VzcyhhbGwpIGZ1biBtYWluKHBhcmVudDogQWRkcmVzcywgY2hpbGRBY2NvdW50OiBBZGRyZXNzKTogW05GVENvbGxlY3Rpb25dIHsKICAgIGxldCBtYW5hZ2VyID0gIGdldEF1dGhBY2NvdW50PGF1dGgoU3RvcmFnZSkgJkFjY291bnQ+KHBhcmVudCkuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpID8/IHBhbmljICgibWFuYWdlciBkb2VzIG5vdCBleGlzdCIpCgogICAgLy8gQWRkcmVzcyAtPiBDb2xsZWN0aW9uIFR5cGUgLT4gb3duZWRORlRzCgogICAgbGV0IHByb3ZpZGVyVHlwZSA9IFR5cGU8Q2FwYWJpbGl0eTwme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oKQogICAgbGV0IGNvbGxlY3Rpb25UeXBlOiBUeXBlID0gVHlwZTxAe05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+KCkKCiAgICAvLyBJdGVyYXRlIHRocm91Z2ggY2hpbGQgYWNjb3VudHMKCiAgICBsZXQgYWNjdCA9IGdldEF1dGhBY2NvdW50PGF1dGgoU3RvcmFnZSwgQ2FwYWJpbGl0aWVzKSAmQWNjb3VudD4oY2hpbGRBY2NvdW50KQogICAgbGV0IGZvdW5kVHlwZXM6IFtUeXBlXSA9IFtdCiAgICBsZXQgbmZ0czoge1N0cmluZzogW1VJbnQ2NF19ID0ge30KICAgIGxldCBjb2xsZWN0aW9uTGlzdDogW05GVENvbGxlY3Rpb25dID0gW10KICAgIGxldCBjaGlsZEFjY3QgPSBtYW5hZ2VyLmJvcnJvd0FjY291bnQoYWRkcjogY2hpbGRBY2NvdW50KSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQogICAgCiAgICAvLyBnZXQgYWxsIHByaXZhdGUgcGF0aHMKICAgIGFjY3Quc3RvcmFnZS5mb3JFYWNoU3RvcmVkKGZ1biAocGF0aDogU3RvcmFnZVBhdGgsIHR5cGU6IFR5cGUpOiBCb29sIHsKICAgICAgICAvLyBDaGVjayB3aGljaCBwcml2YXRlIHBhdGhzIGhhdmUgTkZUIFByb3ZpZGVyIEFORCBjYW4gYmUgYm9ycm93ZWQKICAgICAgICAvLyBpZiAhdHlwZS5pc1N1YnR5cGUob2Y6IHByb3ZpZGVyVHlwZSl7CiAgICAgICAgLy8gICAgIHJldHVybiB0cnVlCiAgICAgICAgLy8gfQogICAgICAgIC8vIGlmIGxldCBjYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShwYXRoOiBwYXRoLCB0eXBlOiBUeXBlPCZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KCkpIHsKICAgICAgICAvLyAgICAgbGV0IHByb3ZpZGVyQ2FwID0gY2FwIGFzISBDYXBhYmlsaXR5PCZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+IAoKICAgICAgICAvLyAgICAgaWYgIXByb3ZpZGVyQ2FwLmNoZWNrKCl7CiAgICAgICAgLy8gICAgICAgICAvLyBpZiB0aGlzIGlzbid0IGEgcHJvdmlkZXIgY2FwYWJpbGl0eSwgZXhpdCB0aGUgYWNjb3VudCBpdGVyYXRpb24gZnVuY3Rpb24gZm9yIHRoaXMgcGF0aAogICAgICAgIC8vICAgICAgICAgcmV0dXJuIHRydWUKICAgICAgICAvLyAgICAgfQogICAgICAgIC8vICAgICBmb3VuZFR5cGVzLmFwcGVuZChjYXAuYm9ycm93PCZBbnlSZXNvdXJjZT4oKSEuZ2V0VHlwZSgpKQogICAgICAgIC8vIH0KCiAgICAgICAgbGV0IGNvbnRyb2xsZXJzID0gYWNjdC5jYXBhYmlsaXRpZXMuc3RvcmFnZS5nZXRDb250cm9sbGVycyhmb3JQYXRoOiBwYXRoISkKICAgICAgICBmb3IgYyBpbiBjb250cm9sbGVycyB7CiAgICAgICAgICBpZiAhYy5ib3Jyb3dUeXBlLmlzU3VidHlwZShvZjogcHJvdmlkZXJUeXBlKSB7CiAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICB9CgogICAgICAgICAgaWYgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogYy5jYXBhYmlsaXR5SUQsIHR5cGU6IHByb3ZpZGVyVHlwZSkgewogICAgICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8JntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4gCgogICAgICAgICAgICBpZiAhcHJvdmlkZXJDYXAuY2hlY2soKXsKICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvdW5kVHlwZXMuYXBwZW5kKGNhcC5ib3Jyb3c8JkFueVJlc291cmNlPigpIS5nZXRUeXBlKCkpCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiB0cnVlCiAgICB9KQoKICAgIC8vIGl0ZXJhdGUgc3RvcmFnZSwgY2hlY2sgaWYgdHlwZUlkc1dpdGhQcm92aWRlciBjb250YWlucyB0aGUgdHlwZUlkLCBpZiBzbywgYWRkIHRvIG5mdHMKICAgIGFjY3Quc3RvcmFnZS5mb3JFYWNoU3RvcmVkKGZ1biAocGF0aDogU3RvcmFnZVBhdGgsIHR5cGU6IFR5cGUpOiBCb29sIHsKCiAgICAgICAgaWYgZm91bmRUeXBlcyA9PSBuaWwgewogICAgICAgICAgICByZXR1cm4gdHJ1ZQogICAgICAgIH0KCiAgICAgICAgZm9yIGlkeCwgdmFsdWUgaW4gZm91bmRUeXBlcyB7CiAgICAgICAgICAgIGxldCB2YWx1ZSA9IGZvdW5kVHlwZXMhCgogICAgICAgICAgICBpZiB2YWx1ZVtpZHhdICE9IHR5cGUgewogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGlmIHR5cGUuaXNJbnN0YW5jZShjb2xsZWN0aW9uVHlwZSkgewogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiBsZXQgY29sbGVjdGlvbiA9IGFjY3Quc3RvcmFnZS5ib3Jyb3c8JntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb25QdWJsaWN9Pihmcm9tOiBwYXRoKSB7IAogICAgICAgICAgICAgICAgICAgIG5mdHMuaW5zZXJ0KGtleTogdHlwZS5pZGVudGlmaWVyLCBjb2xsZWN0aW9uLmdldElEcygpKQogICAgICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25MaXN0LmFwcGVuZCgKICAgICAgICAgICAgICAgICAgICAgIE5GVENvbGxlY3Rpb24oCiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiB0eXBlLmlkZW50aWZpZXIsCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGdldERpc3BsYXkoYWRkcmVzczogY2hpbGRBY2NvdW50LCBwYXRoOiBwYXRoKSwKICAgICAgICAgICAgICAgICAgICAgICAgaWRMaXN0OiBjb2xsZWN0aW9uLmdldElEcygpCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gdHJ1ZQogICAgfSkKCiAgICByZXR1cm4gY29sbGVjdGlvbkxpc3QKfQ==",
          "getChildAccountAllowTypes": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0Q2hpbGRBY2NvdW50QWxsb3dUeXBlcyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweGQ4YTdlMDVhN2FjNjcwYzAKCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQoKCi8vIFRoaXMgc2NyaXB0IGl0ZXJhdGVzIHRocm91Z2ggYSBwYXJlbnQncyBjaGlsZCBhY2NvdW50cywgCi8vIGlkZW50aWZpZXMgcHJpdmF0ZSBwYXRocyB3aXRoIGFuIGFjY2Vzc2libGUgTm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlciwgYW5kIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgdHlwZUlkcwphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyOiBBZGRyZXNzLCBjaGlsZDogQWRkcmVzcyk6IFtTdHJpbmddPyB7CiAgbGV0IGFjY291bnQgPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UpICZBY2NvdW50PihhZGRyKQogIGxldCBtYW5hZ2VyID0gZ2V0QXV0aEFjY291bnQ8YXV0aChTdG9yYWdlKSAmQWNjb3VudD4oYWRkcikuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpID8/IHBhbmljICgibWFuYWdlciBkb2VzIG5vdCBleGlzdCIpCgoKICAKICBsZXQgbmZ0UHJvdmlkZXJUeXBlID0gVHlwZTxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KCkKICBsZXQgZnRQcm92aWRlclR5cGUgPSBUeXBlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oKQoKICAvLyBJdGVyYXRlIHRocm91Z2ggY2hpbGQgYWNjb3VudHMKICBsZXQgYWRkciA9IGdldEF1dGhBY2NvdW50PGF1dGgoU3RvcmFnZSwgQ2FwYWJpbGl0aWVzKSAmQWNjb3VudD4oY2hpbGQpCiAgbGV0IGZvdW5kVHlwZXM6IFtTdHJpbmddID0gW10KICBsZXQgY2hpbGRBY2N0ID0gbWFuYWdlci5ib3Jyb3dBY2NvdW50KGFkZHI6IGNoaWxkKSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQogIC8vIGdldCBhbGwgcHJpdmF0ZSBwYXRocwoKICBmb3IgcyBpbiBhZGRyLnN0b3JhZ2Uuc3RvcmFnZVBhdGhzIHsKICAgIGxldCBjb250cm9sbGVycyA9IGFkZHIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuZ2V0Q29udHJvbGxlcnMoZm9yUGF0aDogcykKICAgIGZvciBjIGluIGNvbnRyb2xsZXJzIHsKICAgICAgLy8gaWYgIWMuYm9ycm93VHlwZS5pc1N1YnR5cGUob2Y6IHByb3ZpZGVyVHlwZSkgewogICAgICAvLyAgIGNvbnRpbnVlCiAgICAgIC8vIH0KCiAgICAgIGlmIGxldCBuZnRDYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGMuY2FwYWJpbGl0eUlELCB0eXBlOiBuZnRQcm92aWRlclR5cGUpIHsKICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBuZnRDYXAgYXMhIENhcGFiaWxpdHk8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PiAKCiAgICAgICAgaWYgIXByb3ZpZGVyQ2FwLmNoZWNrKCl7CiAgICAgICAgICBjb250aW51ZQogICAgICAgIH0KCiAgICAgICAgZm91bmRUeXBlcy5hcHBlbmQobmZ0Q2FwLmJvcnJvdzwmQW55UmVzb3VyY2U+KCkhLmdldFR5cGUoKS5pZGVudGlmaWVyKQogICAgICAgIGJyZWFrCiAgICAgIH0KICAgICAgaWYgbGV0IGZ0Q2FwID0gY2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiBjLmNhcGFiaWxpdHlJRCwgdHlwZTogZnRQcm92aWRlclR5cGUpIHsKICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBmdENhcCBhcyEgQ2FwYWJpbGl0eTwme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PiAKCiAgICAgICAgaWYgIXByb3ZpZGVyQ2FwLmNoZWNrKCl7CiAgICAgICAgICBjb250aW51ZQogICAgICAgIH0KCiAgICAgICAgZm91bmRUeXBlcy5hcHBlbmQoZnRDYXAuYm9ycm93PCZBbnlSZXNvdXJjZT4oKSEuZ2V0VHlwZSgpLmlkZW50aWZpZXIpCiAgICAgICAgYnJlYWsKICAgICAgfQogICAgfQogIH0KCiAgcmV0dXJuIGZvdW5kVHlwZXMKfQ==",
          "getChildAccountFTCapabilities": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0Q2hpbGRBY2NvdW50RlRDYXBhYmlsaXRpZXMgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhkOGE3ZTA1YTdhYzY3MGMwCgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQoKCi8vIFRoaXMgc2NyaXB0IGl0ZXJhdGVzIHRocm91Z2ggYSBwYXJlbnQncyBjaGlsZCBhY2NvdW50cywgCi8vIGlkZW50aWZpZXMgcHJpdmF0ZSBwYXRocyB3aXRoIGFuIGFjY2Vzc2libGUgRnVuZ2libGVUb2tlbi5Qcm92aWRlciwgYW5kIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgdHlwZUlkcwphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyOiBBZGRyZXNzKTpBbnlTdHJ1Y3QgewogIGxldCBhY2NvdW50ID0gZ2V0QXV0aEFjY291bnQ8YXV0aChTdG9yYWdlKSAmQWNjb3VudD4oYWRkcikKICBsZXQgbWFuYWdlciA9IGdldEF1dGhBY2NvdW50PGF1dGgoU3RvcmFnZSkgJkFjY291bnQ+KGFkZHIpLnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5NYW5hZ2UpICZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQogICAgPz8gcGFuaWMgKCJtYW5hZ2VyIGRvZXMgbm90IGV4aXN0IikKCiAgdmFyIHR5cGVJZHNXaXRoUHJvdmlkZXI6IHtBZGRyZXNzOiBbU3RyaW5nXX0gPSB7fQogIAogIGxldCBwcm92aWRlclR5cGUgPSBUeXBlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oKQoKICAvLyBJdGVyYXRlIHRocm91Z2ggY2hpbGQgYWNjb3VudHMKICBmb3IgYWRkcmVzcyBpbiBtYW5hZ2VyLmdldENoaWxkQWRkcmVzc2VzKCkgewogICAgbGV0IGFkZHIgPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UsIENhcGFiaWxpdGllcykgJkFjY291bnQ+KGFkZHJlc3MpCiAgICBsZXQgZm91bmRUeXBlczogW1N0cmluZ10gPSBbXQogICAgbGV0IGNoaWxkQWNjdCA9IG1hbmFnZXIuYm9ycm93QWNjb3VudChhZGRyOiBhZGRyZXNzKSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQogICAgLy8gZ2V0IGFsbCBwcml2YXRlIHBhdGhzCgogICAgZm9yIHMgaW4gYWRkci5zdG9yYWdlLnN0b3JhZ2VQYXRocyB7CiAgICAgIGZvciBjIGluIGFkZHIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuZ2V0Q29udHJvbGxlcnMoZm9yUGF0aDogcykgewogICAgICAgIGlmICFjLmJvcnJvd1R5cGUuaXNTdWJ0eXBlKG9mOiBwcm92aWRlclR5cGUpewogICAgICAgICAgY29udGludWUKICAgICAgICB9CgogICAgICAgIGlmIGxldCBjYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGMuY2FwYWJpbGl0eUlELCB0eXBlOiBwcm92aWRlclR5cGUpIHsKICAgICAgICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTwme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PiAKCiAgICAgICAgICBpZiAhcHJvdmlkZXJDYXAuY2hlY2soKXsKICAgICAgICAgICAgY29udGludWUKICAgICAgICAgIH0KCiAgICAgICAgICBmb3VuZFR5cGVzLmFwcGVuZChjYXAuYm9ycm93PCZBbnlSZXNvdXJjZT4oKSEuZ2V0VHlwZSgpLmlkZW50aWZpZXIpCiAgICAgICAgICB0eXBlSWRzV2l0aFByb3ZpZGVyW2FkZHJlc3NdID0gZm91bmRUeXBlcwogICAgICAgICAgYnJlYWsKICAgICAgICB9CiAgICAgIH0KICAgIH0gICAgICAKICB9CgogIHJldHVybiB0eXBlSWRzV2l0aFByb3ZpZGVyCn0KIA==",
          "getChildAccountMeta": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0Q2hpbGRBY2NvdW50TWV0YSAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweGQ4YTdlMDVhN2FjNjcwYzAKCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgoKYWNjZXNzKGFsbCkgZnVuIG1haW4ocGFyZW50OiBBZGRyZXNzKToge0FkZHJlc3M6IEFueVN0cnVjdH0gewogICAgbGV0IGFjY3QgPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UpICZBY2NvdW50PihwYXJlbnQpCiAgICBsZXQgbSA9IGFjY3Quc3RvcmFnZS5ib3Jyb3c8Jkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCgogICAgaWYgbSA9PSBuaWwgewogICAgICAgIHJldHVybiB7fQogICAgfSBlbHNlIHsKICAgICAgICB2YXIgZGF0YToge0FkZHJlc3M6IEFueVN0cnVjdH0gPSB7fQogICAgICAgIGZvciBhZGRyZXNzIGluIG0/LmdldENoaWxkQWRkcmVzc2VzKCkhIHsKICAgICAgICAgICAgbGV0IGMgPSBtPy5nZXRDaGlsZEFjY291bnREaXNwbGF5KGFkZHJlc3M6IGFkZHJlc3MpIAogICAgICAgICAgICBkYXRhLmluc2VydChrZXk6IGFkZHJlc3MsIGMpCiAgICAgICAgfQogICAgICAgIHJldHVybiBkYXRhCiAgICB9Cn0=",
          "getChildAddresses": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0Q2hpbGRBZGRyZXNzZXMgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhkOGE3ZTA1YTdhYzY3MGMwCgoKYWNjZXNzKGFsbCkgZnVuIG1haW4ocGFyZW50OiBBZGRyZXNzKTogW0FkZHJlc3NdIHsKICAgIGxldCBhY2N0ID0gZ2V0QXV0aEFjY291bnQ8YXV0aChTdG9yYWdlKSAmQWNjb3VudD4ocGFyZW50KQogICAgbGV0IG1hbmFnZXIgPSBhY2N0LnN0b3JhZ2UuYm9ycm93PCZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJtYW5hZ2VyIG5vdCBmb3VuZCIpCiAgICByZXR1cm4gIG1hbmFnZXIuZ2V0Q2hpbGRBZGRyZXNzZXMoKQp9",
          "getExamplenftCollectionFromDelegator": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0RXhhbXBsZW5mdENvbGxlY3Rpb25Gcm9tRGVsZWdhdG9yIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4ZDhhN2UwNWE3YWM2NzBjMAoKCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgppbXBvcnQgPFRva2VuPiBmcm9tIDxUb2tlbkFkZHJlc3M+CgphY2Nlc3MoYWxsKSBmdW4gbWFpbihwYXJlbnQ6IEFkZHJlc3MsIGNoaWxkOiBBZGRyZXNzLCBpc1B1YmxpYzogQm9vbCkgewogICAgbGV0IG0gPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UpICZBY2NvdW50PihwYXJlbnQpLnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5NYW5hZ2UpICZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJtYW5hZ2VyIG5vdCBmb3VuZCIpCiAgICBsZXQgYWNjdCA9IG0uYm9ycm93QWNjb3VudChhZGRyOiBjaGlsZCkKICAgICAgICA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQgaW4gbWFuYWdlciIpCgogICAgbGV0IHQgPSBUeXBlPENhcGFiaWxpdHk8JkV4YW1wbGVORlQuQ29sbGVjdGlvbj4+KCkKCiAgICBsZXQgY2FwID0gKGlzUHVibGljID8gYWNjdC5nZXRQdWJsaWNDYXBGcm9tRGVsZWdhdG9yKHR5cGU6IHQpIDogYWNjdC5nZXRQcml2YXRlQ2FwRnJvbURlbGVnYXRvcih0eXBlOiB0KSkKICAgICAgICA/PyBwYW5pYygiY2FwYWJpbGl0eSBub3QgZm91bmQiKQogICAgCiAgICBhc3NlcnQoY2FwLmdldFR5cGUoKSA9PSB0LCBtZXNzYWdlOiAibWlzbWF0Y2hlZCBjYXBhYmlsaXR5IHR5cGVzIikKfQ==",
          "publishToParent": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgcHVibGlzaFRvUGFyZW50IC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgojYWxsb3dBY2NvdW50TGlua2luZwoKaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweGQ4YTdlMDVhN2FjNjcwYzAKCmltcG9ydCBDYXBhYmlsaXR5RmFjdG9yeSBmcm9tIDB4ZDhhN2UwNWE3YWM2NzBjMAoKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweGQ4YTdlMDVhN2FjNjcwYzAKCmltcG9ydCBDYXBhYmlsaXR5RGVsZWdhdG9yIGZyb20gMHhkOGE3ZTA1YTdhYzY3MGMwCgoKdHJhbnNhY3Rpb24ocGFyZW50OiBBZGRyZXNzLCBmYWN0b3J5QWRkcmVzczogQWRkcmVzcywgZmlsdGVyQWRkcmVzczogQWRkcmVzcykgewogICAgcHJlcGFyZShhY2N0OiBhdXRoKFN0b3JhZ2UpICZBY2NvdW50KSB7CiAgICAgICAgbGV0IG93bmVkID0gYWNjdC5zdG9yYWdlLmJvcnJvdzxhdXRoKEh5YnJpZEN1c3RvZHkuT3duZXIpICZIeWJyaWRDdXN0b2R5Lk93bmVkQWNjb3VudD4oZnJvbTogSHlicmlkQ3VzdG9keS5Pd25lZEFjY291bnRTdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIm93bmVkIGFjY291bnQgbm90IGZvdW5kIikKCiAgICAgICAgbGV0IGZhY3RvcnkgPSBnZXRBY2NvdW50KGZhY3RvcnlBZGRyZXNzKS5jYXBhYmlsaXRpZXMuZ2V0PCZDYXBhYmlsaXR5RmFjdG9yeS5NYW5hZ2VyPihDYXBhYmlsaXR5RmFjdG9yeS5QdWJsaWNQYXRoKQogICAgICAgIGFzc2VydChmYWN0b3J5LmNoZWNrKCksIG1lc3NhZ2U6ICJmYWN0b3J5IGFkZHJlc3MgaXMgbm90IGNvbmZpZ3VyZWQgcHJvcGVybHkiKQoKICAgICAgICBsZXQgZmlsdGVyID0gZ2V0QWNjb3VudChmaWx0ZXJBZGRyZXNzKS5jYXBhYmlsaXRpZXMuZ2V0PCZ7Q2FwYWJpbGl0eUZpbHRlci5GaWx0ZXJ9PihDYXBhYmlsaXR5RmlsdGVyLlB1YmxpY1BhdGgpCiAgICAgICAgYXNzZXJ0KGZpbHRlci5jaGVjaygpLCBtZXNzYWdlOiAiY2FwYWJpbGl0eSBmaWx0ZXIgaXMgbm90IGNvbmZpZ3VyZWQgcHJvcGVybHkiKQoKICAgICAgICBvd25lZC5wdWJsaXNoVG9QYXJlbnQocGFyZW50QWRkcmVzczogcGFyZW50LCBmYWN0b3J5OiBmYWN0b3J5LCBmaWx0ZXI6IGZpbHRlcikKICAgIH0KfQ==",
          "redeemAccount": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgcmVkZWVtQWNjb3VudCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCgppbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4ZDhhN2UwNWE3YWM2NzBjMAoKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweGQ4YTdlMDVhN2FjNjcwYzAKCgp0cmFuc2FjdGlvbihjaGlsZEFkZHJlc3M6IEFkZHJlc3MsIGZpbHRlckFkZHJlc3M6IEFkZHJlc3M/LCBmaWx0ZXJQYXRoOiBQdWJsaWNQYXRoPykgewogICAgcHJlcGFyZShhY2N0OiBhdXRoKFN0b3JhZ2UsIENhcGFiaWxpdGllcywgSW5ib3gpICZBY2NvdW50KSB7CiAgICAgICAgdmFyIGZpbHRlcjogQ2FwYWJpbGl0eTwme0NhcGFiaWxpdHlGaWx0ZXIuRmlsdGVyfT4/ID0gbmlsCiAgICAgICAgaWYgZmlsdGVyQWRkcmVzcyAhPSBuaWwgJiYgZmlsdGVyUGF0aCAhPSBuaWwgewogICAgICAgICAgICBmaWx0ZXIgPSBnZXRBY2NvdW50KGZpbHRlckFkZHJlc3MhKS5jYXBhYmlsaXRpZXMuZ2V0PCZ7Q2FwYWJpbGl0eUZpbHRlci5GaWx0ZXJ9PihmaWx0ZXJQYXRoISkKICAgICAgICB9CgogICAgICAgIGlmIGFjY3Quc3RvcmFnZS5ib3Jyb3c8Jkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIGxldCBtIDwtIEh5YnJpZEN1c3RvZHkuY3JlYXRlTWFuYWdlcihmaWx0ZXI6IGZpbHRlcikKICAgICAgICAgICAgYWNjdC5zdG9yYWdlLnNhdmUoPC0gbSwgdG86IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQoKICAgICAgICAgICAgZm9yIGMgaW4gYWNjdC5jYXBhYmlsaXRpZXMuc3RvcmFnZS5nZXRDb250cm9sbGVycyhmb3JQYXRoOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkgewogICAgICAgICAgICAgICAgYy5kZWxldGUoKQogICAgICAgICAgICB9CgogICAgICAgICAgICBhY2N0LmNhcGFiaWxpdGllcy51bnB1Ymxpc2goSHlicmlkQ3VzdG9keS5NYW5hZ2VyUHVibGljUGF0aCkKCiAgICAgICAgICAgIGFjY3QuY2FwYWJpbGl0aWVzLnB1Ymxpc2goCiAgICAgICAgICAgICAgICBhY2N0LmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCZ7SHlicmlkQ3VzdG9keS5NYW5hZ2VyUHVibGljfT4oSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpLAogICAgICAgICAgICAgICAgYXQ6IEh5YnJpZEN1c3RvZHkuTWFuYWdlclB1YmxpY1BhdGgKICAgICAgICAgICAgKQoKICAgICAgICAgICAgYWNjdC5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEh5YnJpZEN1c3RvZHkuTWFuYWdlKSAme0h5YnJpZEN1c3RvZHkuTWFuYWdlclByaXZhdGUsIEh5YnJpZEN1c3RvZHkuTWFuYWdlclB1YmxpY30+KEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQogICAgICAgIH0KCiAgICAgICAgbGV0IGluYm94TmFtZSA9IEh5YnJpZEN1c3RvZHkuZ2V0Q2hpbGRBY2NvdW50SWRlbnRpZmllcihhY2N0LmFkZHJlc3MpCiAgICAgICAgbGV0IGNhcCA9IGFjY3QuaW5ib3guY2xhaW08YXV0aChIeWJyaWRDdXN0b2R5LkNoaWxkKSAme0h5YnJpZEN1c3RvZHkuQWNjb3VudFByaXZhdGUsIEh5YnJpZEN1c3RvZHkuQWNjb3VudFB1YmxpYywgVmlld1Jlc29sdmVyLlJlc29sdmVyfT4oaW5ib3hOYW1lLCBwcm92aWRlcjogY2hpbGRBZGRyZXNzKQogICAgICAgICAgICA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBjYXAgbm90IGZvdW5kIikKCiAgICAgICAgbGV0IG1hbmFnZXIgPSBhY2N0LnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5NYW5hZ2UpICZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygibWFuYWdlciBubyBmb3VuZCIpCgogICAgICAgIG1hbmFnZXIuYWRkQWNjb3VudChjYXA6IGNhcCkKICAgIH0KfQ==",
          "sendChildFT": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgc2VuZENoaWxkRlQgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhkOGE3ZTA1YTdhYzY3MGMwCgoKLy8gSEMtb3duZWQgaW1wb3J0cwppbXBvcnQgQ2FwYWJpbGl0eUZhY3RvcnkgZnJvbSAweGQ4YTdlMDVhN2FjNjcwYzAKCmltcG9ydCBDYXBhYmlsaXR5RmlsdGVyIGZyb20gMHhkOGE3ZTA1YTdhYzY3MGMwCgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweGYyMzNkY2VlODhmZTBhYmUKCmltcG9ydCA8VG9rZW4+IGZyb20gPFRva2VuQWRkcmVzcz4KCgp0cmFuc2FjdGlvbihhZGRyZXNzOiBBZGRyZXNzLCByZWNlaXZlcjogQWRkcmVzcywgcGF0aDogU3RyaW5nLCBhbW91bnQ6IFVGaXg2NCApIHsKCiAgLy8gVGhlIFZhdWx0IHJlc291cmNlIHRoYXQgaG9sZHMgdGhlIHRva2VucyB0aGF0IGFyZSBiZWluZyB0cmFuc2ZlcnJlZAogIGxldCBwYXltZW50VmF1bHQ6IEB7RnVuZ2libGVUb2tlbi5WYXVsdH0KICBsZXQgdmF1bHREYXRhOiBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YQoKICBwcmVwYXJlKHNpZ25lcjogYXV0aChTdG9yYWdlKSAmQWNjb3VudCkgewogICAgICAvLyBzaWduZXIgaXMgdGhlIHBhcmVudCBhY2NvdW50CiAgICAgIC8vIGdldCB0aGUgbWFuYWdlciByZXNvdXJjZSBhbmQgYm9ycm93IGNoaWxkQWNjb3VudAogICAgICBsZXQgbSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEh5YnJpZEN1c3RvZHkuTWFuYWdlKSAmSHlicmlkQ3VzdG9keS5NYW5hZ2VyPihmcm9tOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkKICAgICAgICAgID8/IHBhbmljKCJtYW5hZ2VyIGRvZXMgbm90IGV4aXN0IikKICAgICAgbGV0IGNoaWxkQWNjdCA9IG0uYm9ycm93QWNjb3VudChhZGRyOiBhZGRyZXNzKSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQogICAgICAKICAgICAgc2VsZi52YXVsdERhdGEgPSA8VG9rZW4+LnJlc29sdmVDb250cmFjdFZpZXcocmVzb3VyY2VUeXBlOiBuaWwsIHZpZXdUeXBlOiBUeXBlPEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPigpKSBhcyEgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE/CiAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCB0aGUgdmF1bHQgZGF0YSB2aWV3IGZvciA8VG9rZW4+ICIpCgogICAgICAvL2dldCBGdCBjYXAgZnJvbSBjaGlsZCBhY2NvdW50CiAgICAgIGxldCBjYXBUeXBlID0gVHlwZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KCkKICAgICAgbGV0IGNvbnRyb2xsZXJJRCA9IGNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IHNlbGYudmF1bHREYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgICAgPz8gcGFuaWMoIm5vIGNvbnRyb2xsZXIgZm91bmQgZm9yIGNhcFR5cGUiKQogICAgICAKICAgICAgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogY29udHJvbGxlcklELCB0eXBlOiBjYXBUeXBlKSA/PyBwYW5pYygibm8gY2FwIGZvdW5kIikKICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gY2FwIGFzISBDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4KICAgICAgYXNzZXJ0KHByb3ZpZGVyQ2FwLmNoZWNrKCksIG1lc3NhZ2U6ICJpbnZhbGlkIHByb3ZpZGVyIGNhcGFiaWxpdHkiKQogICAgICAKICAgICAgLy8gR2V0IGEgcmVmZXJlbmNlIHRvIHRoZSBjaGlsZCdzIHN0b3JlZCB2YXVsdAogICAgICBsZXQgdmF1bHRSZWYgPSBwcm92aWRlckNhcC5ib3Jyb3coKSEKCiAgICAgIC8vIFdpdGhkcmF3IHRva2VucyBmcm9tIHRoZSBzaWduZXIncyBzdG9yZWQgdmF1bHQKICAgICAgc2VsZi5wYXltZW50VmF1bHQgPC0gdmF1bHRSZWYud2l0aGRyYXcoYW1vdW50OiBhbW91bnQpCiAgfQoKICBleGVjdXRlIHsKCiAgICAgIC8vIEdldCB0aGUgcmVjaXBpZW50J3MgcHVibGljIGFjY291bnQgb2JqZWN0CiAgICAgIGxldCByZWNpcGllbnQgPSBnZXRBY2NvdW50KHJlY2VpdmVyKQoKICAgICAgLy8gR2V0IGEgcmVmZXJlbmNlIHRvIHRoZSByZWNpcGllbnQncyBSZWNlaXZlcgogICAgICBsZXQgcmVjZWl2ZXJSZWYgPSByZWNpcGllbnQuY2FwYWJpbGl0aWVzLmdldDwme0Z1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9PihzZWxmLnZhdWx0RGF0YS5yZWNlaXZlclBhdGgpIS5ib3Jyb3coKQogICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVjZWl2ZXIgcmVmZXJlbmNlIHRvIHRoZSByZWNpcGllbnQncyBWYXVsdCIpCgogICAgICAvLyBEZXBvc2l0IHRoZSB3aXRoZHJhd24gdG9rZW5zIGluIHRoZSByZWNpcGllbnQncyByZWNlaXZlcgogICAgICByZWNlaXZlclJlZi5kZXBvc2l0KGZyb206IDwtc2VsZi5wYXltZW50VmF1bHQpCiAgfQp9CiA=",
          "sendChildFTToChild": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgc2VuZENoaWxkRlRUb0NoaWxkIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4ZDhhN2UwNWE3YWM2NzBjMAoKCi8vIEhDLW93bmVkIGltcG9ydHMKaW1wb3J0IENhcGFiaWxpdHlGYWN0b3J5IGZyb20gMHhkOGE3ZTA1YTdhYzY3MGMwCgppbXBvcnQgQ2FwYWJpbGl0eUZpbHRlciBmcm9tIDB4ZDhhN2UwNWE3YWM2NzBjMAoKCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhmMjMzZGNlZTg4ZmUwYWJlCgppbXBvcnQgPFRva2VuPiBmcm9tIDxUb2tlbkFkZHJlc3M+CgoKdHJhbnNhY3Rpb24oYWRkcmVzczogQWRkcmVzcywgcmVjZWl2ZXI6IEFkZHJlc3MsIHBhdGg6IFN0cmluZywgYW1vdW50OiBVRml4NjQgKSB7CgogIC8vIFRoZSBWYXVsdCByZXNvdXJjZSB0aGF0IGhvbGRzIHRoZSB0b2tlbnMgdGhhdCBhcmUgYmVpbmcgdHJhbnNmZXJyZWQKICBsZXQgcGF5bWVudFZhdWx0OiBAe0Z1bmdpYmxlVG9rZW4uVmF1bHR9CiAgbGV0IHZhdWx0RGF0YTogRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGEKCiAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSkgJkFjY291bnQpIHsKICAgICAgLy8gc2lnbmVyIGlzIHRoZSBwYXJlbnQgYWNjb3VudAogICAgICAvLyBnZXQgdGhlIG1hbmFnZXIgcmVzb3VyY2UgYW5kIGJvcnJvdyBjaGlsZEFjY291bnQKICAgICAgbGV0IG0gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgICA/PyBwYW5pYygibWFuYWdlciBkb2VzIG5vdCBleGlzdCIpCiAgICAgIGxldCBjaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogYWRkcmVzcykgPz8gcGFuaWMoImNoaWxkIGFjY291bnQgbm90IGZvdW5kIikKICAgICAgCiAgICAgIHNlbGYudmF1bHREYXRhID0gPFRva2VuPi5yZXNvbHZlQ29udHJhY3RWaWV3KHJlc291cmNlVHlwZTogbmlsLCB2aWV3VHlwZTogVHlwZTxGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT4oKSkgYXMhIEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPwogICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgdGhlIHZhdWx0IGRhdGEgdmlldyBmb3IgPFRva2VuPiAiKQoKICAgICAgLy9nZXQgRnQgY2FwIGZyb20gY2hpbGQgYWNjb3VudAogICAgICBsZXQgY2FwVHlwZSA9IFR5cGU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigpCiAgICAgIGxldCBjb250cm9sbGVySUQgPSBjaGlsZEFjY3QuZ2V0Q29udHJvbGxlcklERm9yVHlwZSh0eXBlOiBjYXBUeXBlLCBmb3JQYXRoOiBzZWxmLnZhdWx0RGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgICAgCiAgICAgIGxldCBjYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGNvbnRyb2xsZXJJRCwgdHlwZTogY2FwVHlwZSkgPz8gcGFuaWMoIm5vIGNhcCBmb3VuZCIpCiAgICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+CiAgICAgIGFzc2VydChwcm92aWRlckNhcC5jaGVjaygpLCBtZXNzYWdlOiAiaW52YWxpZCBwcm92aWRlciBjYXBhYmlsaXR5IikKICAgICAgCiAgICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgY2hpbGQncyBzdG9yZWQgdmF1bHQKICAgICAgbGV0IHZhdWx0UmVmID0gcHJvdmlkZXJDYXAuYm9ycm93KCkhCgogICAgICAvLyBXaXRoZHJhdyB0b2tlbnMgZnJvbSB0aGUgc2lnbmVyJ3Mgc3RvcmVkIHZhdWx0CiAgICAgIHNlbGYucGF5bWVudFZhdWx0IDwtIHZhdWx0UmVmLndpdGhkcmF3KGFtb3VudDogYW1vdW50KQogIH0KCiAgZXhlY3V0ZSB7CgogICAgICAvLyBHZXQgdGhlIHJlY2lwaWVudCdzIHB1YmxpYyBhY2NvdW50IG9iamVjdAogICAgICBsZXQgcmVjaXBpZW50ID0gZ2V0QWNjb3VudChyZWNlaXZlcikKCiAgICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgcmVjaXBpZW50J3MgUmVjZWl2ZXIKICAgICAgbGV0IHJlY2VpdmVyUmVmID0gcmVjaXBpZW50LmNhcGFiaWxpdGllcy5nZXQ8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4oc2VsZi52YXVsdERhdGEucmVjZWl2ZXJQYXRoKSEuYm9ycm93KCkKICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlY2VpdmVyIHJlZmVyZW5jZSB0byB0aGUgcmVjaXBpZW50J3MgVmF1bHQiKQoKICAgICAgLy8gRGVwb3NpdCB0aGUgd2l0aGRyYXduIHRva2VucyBpbiB0aGUgcmVjaXBpZW50J3MgcmVjZWl2ZXIKICAgICAgcmVjZWl2ZXJSZWYuZGVwb3NpdChmcm9tOiA8LXNlbGYucGF5bWVudFZhdWx0KQogIH0KfQog",
          "sendChildFTWithParent": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgc2VuZENoaWxkRlRXaXRoUGFyZW50IC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQoKCmltcG9ydCA8VG9rZW4+IGZyb20gPFRva2VuQWRkcmVzcz4KCmltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhkOGE3ZTA1YTdhYzY3MGMwCgppbXBvcnQgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MgZnJvbSAweGYyMzNkY2VlODhmZTBhYmUKCgp0cmFuc2FjdGlvbihhbW91bnQ6IFVGaXg2NCwgdG86IEFkZHJlc3MsIGNoaWxkOiBBZGRyZXNzKSB7CgogICAgLy8gVGhlIFZhdWx0IHJlc291cmNlIHRoYXQgaG9sZHMgdGhlIHRva2VucyB0aGF0IGFyZSBiZWluZyB0cmFuc2ZlcnJlZAogICAgbGV0IHBheW1lbnRWYXVsdDogQHtGdW5naWJsZVRva2VuLlZhdWx0fQogICAgbGV0IHZhdWx0RGF0YTogRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGEKCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChTdG9yYWdlKSAmQWNjb3VudCkgewogICAgICAgIC8vIHNpZ25lciBpcyB0aGUgcGFyZW50IGFjY291bnQKICAgICAgICAvLyBnZXQgdGhlIG1hbmFnZXIgcmVzb3VyY2UgYW5kIGJvcnJvdyBjaGlsZEFjY291bnQKICAgICAgICBsZXQgbSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEh5YnJpZEN1c3RvZHkuTWFuYWdlKSAmSHlicmlkQ3VzdG9keS5NYW5hZ2VyPihmcm9tOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgICAgIGxldCBjaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogY2hpbGQpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAgICAgCiAgICAgICAgc2VsZi52YXVsdERhdGEgPSBFeGFtcGxlVG9rZW4ucmVzb2x2ZUNvbnRyYWN0VmlldyhyZXNvdXJjZVR5cGU6IG5pbCwgdmlld1R5cGU6IFR5cGU8RnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE+KCkpIGFzISBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT8KICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgdGhlIHZhdWx0IGRhdGEgdmlldyBmb3IgRXhhbXBsZVRva2VuIikKCiAgICAgICAgLy9nZXQgRnQgY2FwIGZyb20gY2hpbGQgYWNjb3VudAogICAgICAgIGxldCBjYXBUeXBlID0gVHlwZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KCkKICAgICAgICBsZXQgY29udHJvbGxlcklEID0gY2hpbGRBY2N0LmdldENvbnRyb2xsZXJJREZvclR5cGUodHlwZTogY2FwVHlwZSwgZm9yUGF0aDogc2VsZi52YXVsdERhdGEuc3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgICAgICAKICAgICAgICBsZXQgY2FwID0gY2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiBjb250cm9sbGVySUQsIHR5cGU6IGNhcFR5cGUpID8/IHBhbmljKCJubyBjYXAgZm91bmQiKQogICAgICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+CiAgICAgICAgYXNzZXJ0KHByb3ZpZGVyQ2FwLmNoZWNrKCksIG1lc3NhZ2U6ICJpbnZhbGlkIHByb3ZpZGVyIGNhcGFiaWxpdHkiKQogICAgICAgIAogICAgICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgY2hpbGQncyBzdG9yZWQgdmF1bHQKICAgICAgICBsZXQgdmF1bHRSZWYgPSBwcm92aWRlckNhcC5ib3Jyb3coKSEKCiAgICAgICAgLy8gV2l0aGRyYXcgdG9rZW5zIGZyb20gdGhlIHNpZ25lcidzIHN0b3JlZCB2YXVsdAogICAgICAgIHNlbGYucGF5bWVudFZhdWx0IDwtIHZhdWx0UmVmLndpdGhkcmF3KGFtb3VudDogYW1vdW50KQogICAgfQoKICAgIGV4ZWN1dGUgewoKICAgICAgICAvLyBHZXQgdGhlIHJlY2lwaWVudCdzIHB1YmxpYyBhY2NvdW50IG9iamVjdAogICAgICAgIGxldCByZWNpcGllbnQgPSBnZXRBY2NvdW50KHRvKQoKICAgICAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIHJlY2lwaWVudCdzIFJlY2VpdmVyCiAgICAgICAgbGV0IHJlY2VpdmVyUmVmID0gcmVjaXBpZW50LmNhcGFiaWxpdGllcy5nZXQ8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4oc2VsZi52YXVsdERhdGEucmVjZWl2ZXJQYXRoKSEuYm9ycm93KCkKCQkJPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVjZWl2ZXIgcmVmZXJlbmNlIHRvIHRoZSByZWNpcGllbnQncyBWYXVsdCIpCgogICAgICAgIC8vIERlcG9zaXQgdGhlIHdpdGhkcmF3biB0b2tlbnMgaW4gdGhlIHJlY2lwaWVudCdzIHJlY2VpdmVyCiAgICAgICAgcmVjZWl2ZXJSZWYuZGVwb3NpdChmcm9tOiA8LXNlbGYucGF5bWVudFZhdWx0KQogICAgfQp9CiA=",
          "sendChildNFT": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgc2VuZENoaWxkTkZUIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4ZDhhN2UwNWE3YWM2NzBjMAoKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweGQ4YTdlMDVhN2FjNjcwYzAKCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKCmltcG9ydCA8TkZUPiBmcm9tIDxORlRBZGRyZXNzPgoKCnRyYW5zYWN0aW9uKGNoaWxkQWRkcjogQWRkcmVzcywgcmVjZWl2ZXI6IEFkZHJlc3MsIGlkZW50aWZpZXI6IFN0cmluZywgaWQ6IFVJbnQ2NCkgewogIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UpICZBY2NvdW50KSB7CiAgICAvLyBzaWduZXIgaXMgdGhlIHBhcmVudCBhY2NvdW50CiAgICAvLyBnZXQgdGhlIG1hbmFnZXIgcmVzb3VyY2UgYW5kIGJvcnJvdyBjaGlsZEFjY291bnQKICAgIGxldCBtID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5NYW5hZ2UpICZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJtYW5hZ2VyIGRvZXMgbm90IGV4aXN0IikKICAgIGxldCBjaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogY2hpbGRBZGRyKSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQogICAgCiAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSA8TkZUPi5yZXNvbHZlQ29udHJhY3RWaWV3KHJlc291cmNlVHlwZTogbmlsLCB2aWV3VHlwZTogVHlwZTxNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPigpKSBhcyEgTWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT8KICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCB0aGUgdmF1bHQgZGF0YSB2aWV3IGZvciA8TkZUPiAiKQoKICAgIC8vZ2V0IEZ0IGNhcCBmcm9tIGNoaWxkIGFjY291bnQKICAgIGxldCBjYXBUeXBlID0gVHlwZTxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KCkKICAgIGxldCBjb250cm9sbGVySUQgPSBjaGlsZEFjY3QuZ2V0Q29udHJvbGxlcklERm9yVHlwZSh0eXBlOiBjYXBUeXBlLCBmb3JQYXRoOiBjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICA/PyBwYW5pYygibm8gY29udHJvbGxlciBmb3VuZCBmb3IgY2FwVHlwZSIpCiAgICAKICAgIGxldCBjYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGNvbnRyb2xsZXJJRCwgdHlwZTogY2FwVHlwZSkgPz8gcGFuaWMoIm5vIGNhcCBmb3VuZCIpCiAgICBsZXQgcHJvdmlkZXJDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PgogICAgYXNzZXJ0KHByb3ZpZGVyQ2FwLmNoZWNrKCksIG1lc3NhZ2U6ICJpbnZhbGlkIHByb3ZpZGVyIGNhcGFiaWxpdHkiKQogICAgCiAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIGNoaWxkJ3Mgc3RvcmVkIHZhdWx0CiAgICBsZXQgY29sbGVjdGlvblJlZiA9IHByb3ZpZGVyQ2FwLmJvcnJvdygpIQoKICAgIC8vIFdpdGhkcmF3IHRva2VucyBmcm9tIHRoZSBzaWduZXIncyBzdG9yZWQgdmF1bHQKICAgIGxldCBuZnQgPC0gY29sbGVjdGlvblJlZi53aXRoZHJhdyh3aXRoZHJhd0lEOiBpZCkKICAgIGxldCByZWNlaXZlckFjYyA9IGdldEFjY291bnQocmVjZWl2ZXIpCiAgICBsZXQgcmVjZWl2ZXJSZWYgPSAgcmVjZWl2ZXJBY2MuY2FwYWJpbGl0aWVzLmdldDwme05vbkZ1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9Pihjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKSEuYm9ycm93KCkKICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlY2VpdmVyIHJlZmVyZW5jZSB0byB0aGUgcmVjaXBpZW50J3MgVmF1bHQiKQogICAgCiAgICByZWNlaXZlclJlZi5kZXBvc2l0KHRva2VuOiA8LSBuZnQpCiAgfQp9",
          "sendChildNFTToChild": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgc2VuZENoaWxkTkZUVG9DaGlsZCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweGQ4YTdlMDVhN2FjNjcwYzAKCmltcG9ydCBDYXBhYmlsaXR5RmlsdGVyIGZyb20gMHhkOGE3ZTA1YTdhYzY3MGMwCgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCmltcG9ydCA8TkZUPiBmcm9tIDxORlRBZGRyZXNzPgoKdHJhbnNhY3Rpb24oY2hpbGRBZGRyOiBBZGRyZXNzLCByZWNlaXZlcjogQWRkcmVzcywgaWRlbnRpZmllcjogU3RyaW5nLCBpZDogVUludDY0KSB7CiAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSkgJkFjY291bnQpIHsKICAgIC8vIHNpZ25lciBpcyB0aGUgcGFyZW50IGFjY291bnQKICAgIC8vIGdldCB0aGUgbWFuYWdlciByZXNvdXJjZSBhbmQgYm9ycm93IGNoaWxkQWNjb3VudAogICAgbGV0IG0gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgbGV0IGNoaWxkQWNjdCA9IG0uYm9ycm93QWNjb3VudChhZGRyOiBjaGlsZEFkZHIpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAKICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IDxORlQ+LnJlc29sdmVDb250cmFjdFZpZXcocmVzb3VyY2VUeXBlOiBuaWwsIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkpIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPwogICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IHRoZSB2YXVsdCBkYXRhIHZpZXcgZm9yIDxORlQ+ICIpCgogICAgLy9nZXQgRnQgY2FwIGZyb20gY2hpbGQgYWNjb3VudAogICAgbGV0IGNhcFR5cGUgPSBUeXBlPGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oKQogICAgbGV0IGNvbnRyb2xsZXJJRCA9IGNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgIAogICAgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogY29udHJvbGxlcklELCB0eXBlOiBjYXBUeXBlKSA/PyBwYW5pYygibm8gY2FwIGZvdW5kIikKICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+CiAgICBhc3NlcnQocHJvdmlkZXJDYXAuY2hlY2soKSwgbWVzc2FnZTogImludmFsaWQgcHJvdmlkZXIgY2FwYWJpbGl0eSIpCiAgICBsZXQgY29sbGVjdGlvblJlZiA9IHByb3ZpZGVyQ2FwLmJvcnJvdygpIQoKCiAgICBsZXQgcmVjZWl2ZXJDaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogcmVjZWl2ZXIpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICBsZXQgcmVjZWl2ZXJDb250cm9sbGVySWQgPSByZWNlaXZlckNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgIGxldCByZWNlaXZlckNhcCA9IHJlY2VpdmVyQ2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiByZWNlaXZlckNvbnRyb2xsZXJJZCwgdHlwZTogY2FwVHlwZSkgPz8gcGFuaWMoIm5vIGNhcCBmb3VuZCIpIAogICAgbGV0IHB1YmxpY0NhcCA9IHJlY2VpdmVyQ2FwIGFzISBDYXBhYmlsaXR5PCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uUHVibGljfT4KICAgIGxldCByZWNlaXZlclJlZiA9ICBwdWJsaWNDYXAuYm9ycm93KCkhCgogICAgLy8gV2l0aGRyYXcgdG9rZW5zIGZyb20gdGhlIHNpZ25lcidzIHN0b3JlZCB2YXVsdAogICAgbGV0IG5mdCA8LSBjb2xsZWN0aW9uUmVmLndpdGhkcmF3KHdpdGhkcmF3SUQ6IGlkKQogICAgCiAgICByZWNlaXZlclJlZi5kZXBvc2l0KHRva2VuOiA8LSBuZnQpCiAgfQp9",
          "setupOwnedAccount": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgc2V0dXBPd25lZEFjY291bnQgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCiNhbGxvd0FjY291bnRMaW5raW5nCgppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweGQ4YTdlMDVhN2FjNjcwYzAKCi8vLyBUaGlzIHRyYW5zYWN0aW9uIGNvbmZpZ3VyZXMgYW4gT3duZWRBY2NvdW50IGluIHRoZSBzaWduZXIgaWYgbmVlZGVkIGFuZCBjb25maWd1cmVzIGl0cyBDYXBhYmlsaXRpZXMgcGVyCi8vLyBIeWJyaWRDdXN0b2R5J3MgaW50ZW5kZWQgZGVzaWduLiBJZiBEaXNwbGF5IHZhbHVlcyBhcmUgc3BlY2lmaWVkIChhcyByZWNvbW1lbmRlZCksIHRoZXkgd2lsbCBiZSBzZXQgb24gdGhlCi8vLyBzaWduZXIncyBPd25lZEFjY291bnQuCi8vLwp0cmFuc2FjdGlvbihuYW1lOiBTdHJpbmc/LCBkZXNjOiBTdHJpbmc/LCB0aHVtYm5haWxVUkw6IFN0cmluZz8pIHsKICAgIHByZXBhcmUoYWNjdDogYXV0aChTdG9yYWdlLCBDYXBhYmlsaXRpZXMpICZBY2NvdW50KSB7CiAgICAgICAgbGV0IGFjY3RDYXAgPSBhY2N0LmNhcGFiaWxpdGllcy5hY2NvdW50Lmlzc3VlPGF1dGgoU3RvcmFnZSwgQ29udHJhY3RzLCBLZXlzLCBJbmJveCwgQ2FwYWJpbGl0aWVzKSAmQWNjb3VudD4oKQoKICAgICAgICBpZiBhY2N0LnN0b3JhZ2UuYm9ycm93PCZIeWJyaWRDdXN0b2R5Lk93bmVkQWNjb3VudD4oZnJvbTogSHlicmlkQ3VzdG9keS5Pd25lZEFjY291bnRTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IG93bmVkQWNjb3VudCA8LSBIeWJyaWRDdXN0b2R5LmNyZWF0ZU93bmVkQWNjb3VudChhY2N0OiBhY2N0Q2FwKQogICAgICAgICAgICBhY2N0LnN0b3JhZ2Uuc2F2ZSg8LW93bmVkQWNjb3VudCwgdG86IEh5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50U3RvcmFnZVBhdGgpCiAgICAgICAgfQoKICAgICAgICBsZXQgb3duZWQgPSBhY2N0LnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5Pd25lcikgJkh5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50Pihmcm9tOiBIeWJyaWRDdXN0b2R5Lk93bmVkQWNjb3VudFN0b3JhZ2VQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygib3duZWQgYWNjb3VudCBub3QgZm91bmQiKQogICAgICAgIAogICAgICAgIC8vIFNldCB0aGUgZGlzcGxheSBtZXRhZGF0YSBmb3IgdGhlIE93bmVkQWNjb3VudAogICAgICAgIGlmIG5hbWUgIT0gbmlsICYmIGRlc2MgIT0gbmlsICYmIHRodW1ibmFpbFVSTCAhPSBuaWwgewogICAgICAgICAgICBsZXQgdGh1bWJuYWlsID0gTWV0YWRhdGFWaWV3cy5IVFRQRmlsZSh1cmw6IHRodW1ibmFpbFVSTCEpCiAgICAgICAgICAgIGxldCBkaXNwbGF5ID0gTWV0YWRhdGFWaWV3cy5EaXNwbGF5KG5hbWU6IG5hbWUhLCBkZXNjcmlwdGlvbjogZGVzYyEsIHRodW1ibmFpbDogdGh1bWJuYWlsKQogICAgICAgICAgICBvd25lZC5zZXREaXNwbGF5KGRpc3BsYXkpCiAgICAgICAgfQoKICAgICAgICAvLyBjaGVjayB0aGF0IHBhdGhzIGFyZSBhbGwgY29uZmlndXJlZCBwcm9wZXJseQogICAgICAgIGZvciBjIGluIGFjY3QuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuZ2V0Q29udHJvbGxlcnMoZm9yUGF0aDogSHlicmlkQ3VzdG9keS5Pd25lZEFjY291bnRTdG9yYWdlUGF0aCkgewogICAgICAgICAgICBjLmRlbGV0ZSgpCiAgICAgICAgfQoKICAgICAgICBhY2N0LmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCZ7SHlicmlkQ3VzdG9keS5Cb3Jyb3dhYmxlQWNjb3VudCwgSHlicmlkQ3VzdG9keS5Pd25lZEFjY291bnRQdWJsaWMsIFZpZXdSZXNvbHZlci5SZXNvbHZlcn0+KEh5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50U3RvcmFnZVBhdGgpCiAgICAgICAgYWNjdC5jYXBhYmlsaXRpZXMucHVibGlzaCgKICAgICAgICAgICAgYWNjdC5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwme0h5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50UHVibGljLCBWaWV3UmVzb2x2ZXIuUmVzb2x2ZXJ9PihIeWJyaWRDdXN0b2R5Lk93bmVkQWNjb3VudFN0b3JhZ2VQYXRoKSwKICAgICAgICAgICAgYXQ6IEh5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50UHVibGljUGF0aAogICAgICAgICkKICAgIH0KfQog",
          "setupOwnedAccountAndPublishToParent": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgc2V0dXBPd25lZEFjY291bnRBbmRQdWJsaXNoVG9QYXJlbnQgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCiNhbGxvd0FjY291bnRMaW5raW5nCgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKCgppbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4ZDhhN2UwNWE3YWM2NzBjMAoKaW1wb3J0IENhcGFiaWxpdHlGYWN0b3J5IGZyb20gMHhkOGE3ZTA1YTdhYzY3MGMwCgppbXBvcnQgQ2FwYWJpbGl0eUZpbHRlciBmcm9tIDB4ZDhhN2UwNWE3YWM2NzBjMAoKaW1wb3J0IENhcGFiaWxpdHlEZWxlZ2F0b3IgZnJvbSAweGQ4YTdlMDVhN2FjNjcwYzAKCi8vLyBUaGlzIHRyYW5zYWN0aW9uIGNvbmZpZ3VyZXMgYW4gT3duZWRBY2NvdW50IGluIHRoZSBzaWduZXIgaWYgbmVlZGVkLCBhbmQgcHJvY2VlZHMgdG8gY3JlYXRlIGEgQ2hpbGRBY2NvdW50IAovLy8gdXNpbmcgQ2FwYWJpbGl0eUZhY3RvcnkuTWFuYWdlciBhbmQgQ2FwYWJpbGl0eUZpbHRlci5GaWx0ZXIgQ2FwYWJpbGl0aWVzIGZyb20gdGhlIGdpdmVuIGFkZHJlc3Nlcy4gQQovLy8gQ2FwYWJpbGl0eSBvbiB0aGUgQ2hpbGRBY2NvdW50IGlzIHRoZW4gcHVibGlzaGVkIHRvIHRoZSBzcGVjaWZpZWQgcGFyZW50IGFjY291bnQuIAovLy8KdHJhbnNhY3Rpb24oCiAgICBwYXJlbnQ6IEFkZHJlc3MsCiAgICBmYWN0b3J5QWRkcmVzczogQWRkcmVzcywKICAgIGZpbHRlckFkZHJlc3M6IEFkZHJlc3MsCiAgICBuYW1lOiBTdHJpbmcsCiAgICBkZXNjOiBTdHJpbmcsCiAgICB0aHVtYm5haWxVUkw6IFN0cmluZwopIHsKICAgIHByZXBhcmUoYWNjdDogYXV0aChTdG9yYWdlLCBDYXBhYmlsaXRpZXMpICZBY2NvdW50KSB7CiAgICAgICAgLy8gQ29uZmlndXJlIE93bmVkQWNjb3VudCBpZiBpdCBkb2Vzbid0IGV4aXN0CiAgICAgICAgaWYgYWNjdC5zdG9yYWdlLmJvcnJvdzwmSHlicmlkQ3VzdG9keS5Pd25lZEFjY291bnQ+KGZyb206IEh5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50U3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIHZhciBhY2N0Q2FwID0gYWNjdC5jYXBhYmlsaXRpZXMuYWNjb3VudC5pc3N1ZTxhdXRoKFN0b3JhZ2UsIENvbnRyYWN0cywgS2V5cywgSW5ib3gsIENhcGFiaWxpdGllcykgJkFjY291bnQ+KCkKICAgICAgICAgICAgbGV0IG93bmVkQWNjb3VudCA8LSBIeWJyaWRDdXN0b2R5LmNyZWF0ZU93bmVkQWNjb3VudChhY2N0OiBhY2N0Q2FwKQogICAgICAgICAgICBhY2N0LnN0b3JhZ2Uuc2F2ZSg8LW93bmVkQWNjb3VudCwgdG86IEh5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50U3RvcmFnZVBhdGgpCiAgICAgICAgfQoKICAgICAgICBmb3IgYyBpbiBhY2N0LmNhcGFiaWxpdGllcy5zdG9yYWdlLmdldENvbnRyb2xsZXJzKGZvclBhdGg6IEh5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50U3RvcmFnZVBhdGgpIHsKICAgICAgICAgICAgYy5kZWxldGUoKQogICAgICAgIH0KCgogICAgICAgIGFjY3QuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JntIeWJyaWRDdXN0b2R5LkJvcnJvd2FibGVBY2NvdW50LCBIeWJyaWRDdXN0b2R5Lk93bmVkQWNjb3VudFB1YmxpYywgVmlld1Jlc29sdmVyLlJlc29sdmVyfT4oSHlicmlkQ3VzdG9keS5Pd25lZEFjY291bnRTdG9yYWdlUGF0aCkKICAgICAgICBhY2N0LmNhcGFiaWxpdGllcy5wdWJsaXNoKAogICAgICAgICAgICBhY2N0LmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCZ7SHlicmlkQ3VzdG9keS5Pd25lZEFjY291bnRQdWJsaWMsIFZpZXdSZXNvbHZlci5SZXNvbHZlcn0+KEh5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50U3RvcmFnZVBhdGgpLAogICAgICAgICAgICBhdDogSHlicmlkQ3VzdG9keS5Pd25lZEFjY291bnRQdWJsaWNQYXRoCiAgICAgICAgKQoKICAgICAgICBsZXQgb3duZWQgPSBhY2N0LnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5Pd25lcikgJkh5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50Pihmcm9tOiBIeWJyaWRDdXN0b2R5Lk93bmVkQWNjb3VudFN0b3JhZ2VQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygib3duZWQgYWNjb3VudCBub3QgZm91bmQiKQogICAgICAgIAogICAgICAgIC8vIFNldCB0aGUgZGlzcGxheSBtZXRhZGF0YSBmb3IgdGhlIE93bmVkQWNjb3VudAogICAgICAgIGlmIG5hbWUgIT0gbmlsICYmIGRlc2MgIT0gbmlsICYmIHRodW1ibmFpbFVSTCAhPSBuaWwgewogICAgICAgICAgICBsZXQgdGh1bWJuYWlsID0gTWV0YWRhdGFWaWV3cy5IVFRQRmlsZSh1cmw6IHRodW1ibmFpbFVSTCEpCiAgICAgICAgICAgIGxldCBkaXNwbGF5ID0gTWV0YWRhdGFWaWV3cy5EaXNwbGF5KG5hbWU6IG5hbWUhLCBkZXNjcmlwdGlvbjogZGVzYyEsIHRodW1ibmFpbDogdGh1bWJuYWlsKQogICAgICAgICAgICBvd25lZC5zZXREaXNwbGF5KGRpc3BsYXkpCiAgICAgICAgfQoKICAgICAgICAvLyBHZXQgQ2FwYWJpbGl0eUZhY3RvcnkgJiBDYXBhYmlsaXR5RmlsdGVyIENhcGFiaWxpdGllcwogICAgICAgIGxldCBmYWN0b3J5ID0gZ2V0QWNjb3VudChmYWN0b3J5QWRkcmVzcykuY2FwYWJpbGl0aWVzLmdldDwmQ2FwYWJpbGl0eUZhY3RvcnkuTWFuYWdlcj4oQ2FwYWJpbGl0eUZhY3RvcnkuUHVibGljUGF0aCkKICAgICAgICBhc3NlcnQoZmFjdG9yeS5jaGVjaygpLCBtZXNzYWdlOiAiZmFjdG9yeSBhZGRyZXNzIGlzIG5vdCBjb25maWd1cmVkIHByb3Blcmx5IikKCiAgICAgICAgbGV0IGZpbHRlciA9IGdldEFjY291bnQoZmlsdGVyQWRkcmVzcykuY2FwYWJpbGl0aWVzLmdldDwme0NhcGFiaWxpdHlGaWx0ZXIuRmlsdGVyfT4oQ2FwYWJpbGl0eUZpbHRlci5QdWJsaWNQYXRoKQogICAgICAgIGFzc2VydChmaWx0ZXIuY2hlY2soKSwgbWVzc2FnZTogImNhcGFiaWxpdHkgZmlsdGVyIGlzIG5vdCBjb25maWd1cmVkIHByb3Blcmx5IikKCiAgICAgICAgLy8gRmluYWxseSBwdWJsaXNoIGEgQ2hpbGRBY2NvdW50IGNhcGFiaWxpdHkgb24gdGhlIHNpZ25pbmcgYWNjb3VudCB0byB0aGUgc3BlY2lmaWVkIHBhcmVudAogICAgICAgIG93bmVkLnB1Ymxpc2hUb1BhcmVudChwYXJlbnRBZGRyZXNzOiBwYXJlbnQsIGZhY3Rvcnk6IGZhY3RvcnksIGZpbHRlcjogZmlsdGVyKQogICAgfQp9",
          "transferChildFT": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgdHJhbnNmZXJDaGlsZEZUIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4ZDhhN2UwNWE3YWM2NzBjMAoKCi8vIEhDLW93bmVkIGltcG9ydHMKaW1wb3J0IENhcGFiaWxpdHlGYWN0b3J5IGZyb20gMHhkOGE3ZTA1YTdhYzY3MGMwCgppbXBvcnQgQ2FwYWJpbGl0eUZpbHRlciBmcm9tIDB4ZDhhN2UwNWE3YWM2NzBjMAoKCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhmMjMzZGNlZTg4ZmUwYWJlCgppbXBvcnQgPFRva2VuPiBmcm9tIDxUb2tlbkFkZHJlc3M+CgoKCnRyYW5zYWN0aW9uKGFkZHJlc3M6IEFkZHJlc3MsIHBhdGg6IFN0cmluZywgYW1vdW50OiBVRml4NjQgKSB7CgogIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UpICZBY2NvdW50KSB7CiAgICAvLyBzaWduZXIgaXMgdGhlIHBhcmVudCBhY2NvdW50CiAgICAvLyBnZXQgdGhlIG1hbmFnZXIgcmVzb3VyY2UgYW5kIGJvcnJvdyBjaGlsZEFjY291bnQKICAgIGxldCBtID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5NYW5hZ2UpICZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJtYW5hZ2VyIGRvZXMgbm90IGV4aXN0IikKICAgIGxldCBjaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogYWRkcmVzcykgPz8gcGFuaWMoImNoaWxkIGFjY291bnQgbm90IGZvdW5kIikKICAgIAogICAgbGV0IHZhdWx0RGF0YSA9IDxUb2tlbj4ucmVzb2x2ZUNvbnRyYWN0VmlldyhyZXNvdXJjZVR5cGU6IG5pbCwgdmlld1R5cGU6IFR5cGU8RnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE+KCkpIGFzISBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT8KICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCB0aGUgdmF1bHQgZGF0YSB2aWV3IGZvciA8VG9rZW4+ICIpCgogICAgLy9nZXQgRnQgY2FwIGZyb20gY2hpbGQgYWNjb3VudAogICAgbGV0IGNhcFR5cGUgPSBUeXBlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oKQogICAgbGV0IGNvbnRyb2xsZXJJRCA9IGNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IHZhdWx0RGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICA/PyBwYW5pYygibm8gY29udHJvbGxlciBmb3VuZCBmb3IgY2FwVHlwZSIpCiAgICAKICAgIGxldCBjYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGNvbnRyb2xsZXJJRCwgdHlwZTogY2FwVHlwZSkgPz8gcGFuaWMoIm5vIGNhcCBmb3VuZCIpCiAgICBsZXQgcHJvdmlkZXJDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PgogICAgYXNzZXJ0KHByb3ZpZGVyQ2FwLmNoZWNrKCksIG1lc3NhZ2U6ICJpbnZhbGlkIHByb3ZpZGVyIGNhcGFiaWxpdHkiKQogICAgCiAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIGNoaWxkJ3Mgc3RvcmVkIHZhdWx0CiAgICBsZXQgdmF1bHRSZWYgPSBwcm92aWRlckNhcC5ib3Jyb3coKSEKCiAgICAvLyBXaXRoZHJhdyB0b2tlbnMgZnJvbSB0aGUgc2lnbmVyJ3Mgc3RvcmVkIHZhdWx0CiAgICBsZXQgcGF5bWVudFZhdWx0IDwtIHZhdWx0UmVmLndpdGhkcmF3KGFtb3VudDogYW1vdW50KQogICAgbGV0IHJlY2VpdmVyUmVmID0gIHNpZ25lci5jYXBhYmlsaXRpZXMuZ2V0PCZ7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KHZhdWx0RGF0YS5yZWNlaXZlclBhdGgpIS5ib3Jyb3coKQogICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVjZWl2ZXIgcmVmZXJlbmNlIHRvIHRoZSByZWNpcGllbnQncyBWYXVsdCIpCiAgICByZWNlaXZlclJlZi5kZXBvc2l0KGZyb206IDwtcGF5bWVudFZhdWx0KQogIH0KfQ==",
          "transferChildNFT": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgdHJhbnNmZXJDaGlsZE5GVCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweGQ4YTdlMDVhN2FjNjcwYzAKCmltcG9ydCBDYXBhYmlsaXR5RmlsdGVyIGZyb20gMHhkOGE3ZTA1YTdhYzY3MGMwCgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCmltcG9ydCA8TkZUPiBmcm9tIDxORlRBZGRyZXNzPgoKLy8vIFRyYW5zZmVyIGEgc2luZ2xlIE5GVCBmcm9tIHByb3ZpZGVkIGNoaWxkIGFjY291bnQgYWRkcmVzcyB0byBwYXJlbnQgYWNjb3VudCAoc2lnbmVyKQovLy8KdHJhbnNhY3Rpb24oYWRkcmVzczogQWRkcmVzcywgcGF0aDogU3RyaW5nLCBpZDogVUludDY0KSB7CgogIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UsIENhcGFiaWxpdGllcykgJkFjY291bnQpIHsKICAgIC8vIEdldCB0aGUgbWFuYWdlciByZXNvdXJjZSBhbmQgYm9ycm93IGNoaWxkQWNjb3VudAogICAgbGV0IG0gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgbGV0IGNoaWxkQWNjdCA9IG0uYm9ycm93QWNjb3VudChhZGRyOiBhZGRyZXNzKSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQoKICAgIC8vIEdldCB0aGUgY29sbGVjdGlvbiBkYXRhIHZpZXcgZm9yIHRoZSBORlQKICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IDxORlQ+LnJlc29sdmVDb250cmFjdFZpZXcocmVzb3VyY2VUeXBlOiBuaWwsIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkpIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPwogICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IHRoZSB2YXVsdCBkYXRhIHZpZXcgZm9yIDxORlQ+ICIpCgogICAgLy8gUmV0cmlldmUgYSBwcm92aWRlciBjYXBhYmlsaXR5IGZyb20gdGhlIGNoaWxkIGFjY291bnQgYW5kIGJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgY2hpbGQncyBjb2xsZWN0aW9uCiAgICBsZXQgY2FwVHlwZSA9IFR5cGU8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigpCiAgICBsZXQgY29udHJvbGxlcklEID0gY2hpbGRBY2N0LmdldENvbnRyb2xsZXJJREZvclR5cGUodHlwZTogY2FwVHlwZSwgZm9yUGF0aDogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpCiAgICAgICAgPz8gcGFuaWMoIm5vIGNvbnRyb2xsZXIgZm91bmQgZm9yIGNhcFR5cGUiKQoKICAgIGxldCBjYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGNvbnRyb2xsZXJJRCwgdHlwZTogY2FwVHlwZSkgPz8gcGFuaWMoIm5vIGNhcCBmb3VuZCIpCiAgICBsZXQgcHJvdmlkZXJDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PgogICAgYXNzZXJ0KHByb3ZpZGVyQ2FwLmNoZWNrKCksIG1lc3NhZ2U6ICJpbnZhbGlkIHByb3ZpZGVyIGNhcGFiaWxpdHkiKQogICAgbGV0IGNoaWxkQ29sbGVjdGlvblJlZiA9IHByb3ZpZGVyQ2FwLmJvcnJvdygpIQoKICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3MgY29sbGVjdGlvbiBvciBjcmVhdGUgYSBjb2xsZWN0aW9uIGlmIGl0IGRvZXNuJ3QgZXhpc3QKICAgIHZhciByZWNlaXZlclJlZiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KGZyb206IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgaWYgcmVjZWl2ZXJSZWYgPT0gbmlsIHsKICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZSg8LSA8TkZUPi5jcmVhdGVFbXB0eUNvbGxlY3Rpb24obmZ0VHlwZTogVHlwZTxAPE5GVD4uTkZUPigpKSwgdG86IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICBzaWduZXIuY2FwYWJpbGl0aWVzLnVucHVibGlzaChjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKQogICAgICBsZXQgY29sbGVjdGlvbkNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwmPE5GVD4uQ29sbGVjdGlvbj4oY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpCiAgICAgIHNpZ25lci5jYXBhYmlsaXRpZXMucHVibGlzaChjb2xsZWN0aW9uQ2FwLCBhdDogY29sbGVjdGlvbkRhdGEucHVibGljUGF0aCkKICAgICAgcmVjZWl2ZXJSZWYgPSBjb2xsZWN0aW9uQ2FwLmJvcnJvdygpIQogICAgfQoKICAgIC8vIFRyYW5zZmVyIE5GVCBmcm9tIGNoaWxkIGFjY291bnQncyBjb2xsZWN0aW9uIHRvIHNpZ25lcidzIGNvbGxlY3Rpb24KICAgIHJlY2VpdmVyUmVmIS5kZXBvc2l0KHRva2VuOiA8LSBjaGlsZENvbGxlY3Rpb25SZWYud2l0aGRyYXcod2l0aGRyYXdJRDogaWQpKQogIH0KfQ==",
          "transferNFTToChild": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgdHJhbnNmZXJORlRUb0NoaWxkIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4ZDhhN2UwNWE3YWM2NzBjMAoKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweGQ4YTdlMDVhN2FjNjcwYzAKCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKaW1wb3J0IDxORlQ+IGZyb20gPE5GVEFkZHJlc3M+Cgp0cmFuc2FjdGlvbihjaGlsZEFkZHI6IEFkZHJlc3MsIGlkZW50aWZpZXI6IFN0cmluZywgaWQ6IFVJbnQ2NCkgewogIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UpICZBY2NvdW50KSB7CiAgICAvLyBzaWduZXIgaXMgdGhlIHBhcmVudCBhY2NvdW50CiAgICAvLyBnZXQgdGhlIG1hbmFnZXIgcmVzb3VyY2UgYW5kIGJvcnJvdyBjaGlsZEFjY291bnQKICAgIGxldCBtID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5NYW5hZ2UpICZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJtYW5hZ2VyIGRvZXMgbm90IGV4aXN0IikKICAgIGxldCBjaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogY2hpbGRBZGRyKSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQogICAgCiAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSA8TkZUPiAucmVzb2x2ZUNvbnRyYWN0VmlldyhyZXNvdXJjZVR5cGU6IG5pbCwgdmlld1R5cGU6IFR5cGU8TWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT4oKSkgYXMhIE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE/CiAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgdGhlIHZhdWx0IGRhdGEgdmlldyBmb3IgPE5GVD4gIikKCiAgICAvL2dldCBGdCBjYXAgZnJvbSBjaGlsZCBhY2NvdW50CiAgICBsZXQgY2FwVHlwZSA9IFR5cGU8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigpCiAgICBsZXQgY29udHJvbGxlcklEID0gY2hpbGRBY2N0LmdldENvbnRyb2xsZXJJREZvclR5cGUodHlwZTogY2FwVHlwZSwgZm9yUGF0aDogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpCiAgICAgICAgPz8gcGFuaWMoIm5vIGNvbnRyb2xsZXIgZm91bmQgZm9yIGNhcFR5cGUiKQogICAgCiAgICBsZXQgY2FwID0gY2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiBjb250cm9sbGVySUQsIHR5cGU6IGNhcFR5cGUpID8/IHBhbmljKCJubyBjYXAgZm91bmQiKQogICAgbGV0IGNoaWxkQ2FwID0gY2FwIGFzISBDYXBhYmlsaXR5PCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uUHVibGljfT4KICAgIGFzc2VydChjaGlsZENhcC5jaGVjaygpLCBtZXNzYWdlOiAiaW52YWxpZCBwcm92aWRlciBjYXBhYmlsaXR5IikKICAgIAogICAgbGV0IHBhcmVudFJlZiA9ICBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pihmcm9tIDogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpIQogICAgbGV0IGNoaWxkUmVmID0gY2hpbGRDYXAuYm9ycm93KCkhCiAgICAvLyBXaXRoZHJhdyB0b2tlbnMgZnJvbSB0aGUgc2lnbmVyJ3Mgc3RvcmVkIHZhdWx0CiAgICBsZXQgbmZ0IDwtIHBhcmVudFJlZiEud2l0aGRyYXcod2l0aGRyYXdJRDogaWQpIQogICAgCiAgICBjaGlsZFJlZi5kZXBvc2l0KHRva2VuOiA8LSBuZnQpCiAgfQp9",
          "unlinkChildAccount": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgdW5saW5rQ2hpbGRBY2NvdW50IC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4ZDhhN2UwNWE3YWM2NzBjMAoKCnRyYW5zYWN0aW9uKGNoaWxkOiBBZGRyZXNzKSB7CiAgICBwcmVwYXJlIChhY2N0OiBhdXRoKFN0b3JhZ2UpICZBY2NvdW50KSB7CiAgICAgICAgbGV0IG1hbmFnZXIgPSBhY2N0LnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5NYW5hZ2UpICZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygibWFuYWdlciBub3QgZm91bmQiKQogICAgICAgIG1hbmFnZXIucmVtb3ZlQ2hpbGQoYWRkcjogY2hpbGQpCiAgICB9Cn0="
        },
        "lostAndFound": {
          "claimFT": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgY2xhaW1GVCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKCgoKaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4MTY1NDY1MzM5OTA0MGE2MQoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweGYyMzNkY2VlODhmZTBhYmUKCmltcG9ydCBMb3N0QW5kRm91bmQgZnJvbSAweDQ3M2Q2YTJjMzdlYWI1YmUKCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCmltcG9ydCBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cyBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VVdGlscyBmcm9tIDB4MWU0YWEwYjg3ZDEwYjE0MQoKCnRyYW5zYWN0aW9uKHZhdWx0SWRlbnRpZmllcjogU3RyaW5nKSB7CiAgICBwcmVwYXJlKGFjY3Q6IGF1dGgoU3RvcmFnZSwgQ2FwYWJpbGl0aWVzKSAmQWNjb3VudCkgewogICAgICAgIGxldCB2YXVsdFR5cGUgPSBDb21wb3NpdGVUeXBlKHZhdWx0SWRlbnRpZmllcikKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBjb25zdHJ1Y3QgVmF1bHQgdHlwZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KHZhdWx0SWRlbnRpZmllcikpCiAgICAgICAgbGV0IHRva2VuQ29udHJhY3RBZGRyZXNzID0gRmxvd0VWTUJyaWRnZVV0aWxzLmdldENvbnRyYWN0QWRkcmVzcyhmcm9tVHlwZTogdmF1bHRUeXBlKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCBjb250cmFjdCBhZGRyZXNzIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQodmF1bHRJZGVudGlmaWVyKSkKICAgICAgICBsZXQgdG9rZW5Db250cmFjdE5hbWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3ROYW1lKGZyb21UeXBlOiB2YXVsdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IG5hbWUgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdCh2YXVsdElkZW50aWZpZXIpKQogICAgICAgIAogICAgICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KHRva2VuQ29udHJhY3RBZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogdG9rZW5Db250cmFjdE5hbWUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZpZXdSZXNvbHZlciBmcm9tIEZ1bmdpYmxlVG9rZW4gY29udHJhY3QiKQogICAgICAgIGxldCB2YXVsdERhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgICAgIHJlc291cmNlVHlwZTogbmlsLAogICAgICAgICAgICAgICAgdmlld1R5cGU6IFR5cGU8RnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE+KCkKICAgICAgICAgICAgKSBhcyEgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE/ID8/IHBhbmljKCJDb3VsZCBub3QgcmVzb2x2ZSBGVFZhdWx0RGF0YSB2aWV3IikKCgogICAgICAgCgogICAgICAgIGlmIGFjY3Quc3RvcmFnZS5ib3Jyb3c8JntGdW5naWJsZVRva2VuLlZhdWx0fT4oZnJvbTogdmF1bHREYXRhLnN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBhY2N0LnN0b3JhZ2Uuc2F2ZSgKICAgICAgICAgICAgICAgIDwtIHZhdWx0RGF0YS5jcmVhdGVFbXB0eVZhdWx0KCksCiAgICAgICAgICAgICAgICB0bzogdmF1bHREYXRhLnN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkKICAgICAgICB9CgogICAgICAgIGFjY3QuY2FwYWJpbGl0aWVzLnVucHVibGlzaCh2YXVsdERhdGEucmVjZWl2ZXJQYXRoKQogICAgICAgIGFjY3QuY2FwYWJpbGl0aWVzLnB1Ymxpc2goCiAgICAgICAgICAgIGFjY3QuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyLCBGdW5naWJsZVRva2VuLkJhbGFuY2V9Pih2YXVsdERhdGEuc3RvcmFnZVBhdGgpLAogICAgICAgICAgICBhdDogdmF1bHREYXRhLnJlY2VpdmVyUGF0aAogICAgICAgICkKICAgICAgICAgICAgICAgIAogICAgICAgIGxldCBjYXAgPSBhY2N0LmNhcGFiaWxpdGllcy5nZXQ8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4odmF1bHREYXRhLnJlY2VpdmVyUGF0aCkKCiAgICAgICAgTG9zdEFuZEZvdW5kLnJlZGVlbUFsbCh0eXBlOiB2YXVsdFR5cGUsIG1heDogbmlsLCByZWNlaXZlcjogY2FwKQogICAgICAgIGFjY3QuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuZ2V0Q29udHJvbGxlcihieUNhcGFiaWxpdHlJRDogY2FwLmlkKSEuZGVsZXRlKCkKICAgIH0KfQ==",
          "claimNFT": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgY2xhaW1ORlQgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKaW1wb3J0IExvc3RBbmRGb3VuZCBmcm9tIDB4NDczZDZhMmMzN2VhYjViZQoKaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweDFlNGFhMGI4N2QxMGIxNDEKCgoKdHJhbnNhY3Rpb24obmZ0SWRlbnRpZmllcjogU3RyaW5nKSB7CiAgICBwcmVwYXJlKGFjY3Q6IGF1dGgoU3RvcmFnZSwgQ2FwYWJpbGl0aWVzKSAmQWNjb3VudCkgewogICAgICAgIGxldCBuZnRUeXBlID0gQ29tcG9zaXRlVHlwZShuZnRJZGVudGlmaWVyKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGNvbnN0cnVjdCBORlQgdHlwZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQogICAgICAgIGxldCBuZnRDb250cmFjdEFkZHJlc3MgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3RBZGRyZXNzKGZyb21UeXBlOiBuZnRUeXBlKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCBjb250cmFjdCBhZGRyZXNzIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQobmZ0SWRlbnRpZmllcikpCiAgICAgICAgbGV0IG5mdENvbnRyYWN0TmFtZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdE5hbWUoZnJvbVR5cGU6IG5mdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IG5hbWUgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdChuZnRJZGVudGlmaWVyKSkKCiAgICAgICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQobmZ0Q29udHJhY3RBZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogbmZ0Q29udHJhY3ROYW1lKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBWaWV3UmVzb2x2ZXIgZnJvbSBORlQgY29udHJhY3QiKQogICAgICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBuaWwsCiAgICAgICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPigpCiAgICAgICAgICAgICkgYXMhIE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE/ID8/IHBhbmljKCJDb3VsZCBub3QgcmVzb2x2ZSBORlRDb2xsZWN0aW9uRGF0YSB2aWV3IikKICAgICAgICAKICAgICAgIAoKICAgICAgICBpZiBhY2N0LnN0b3JhZ2UuYm9ycm93PCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufT4oZnJvbTogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIGFjY3Quc3RvcmFnZS5zYXZlKAogICAgICAgICAgICAgICAgPC0gY29sbGVjdGlvbkRhdGEuY3JlYXRlRW1wdHlDb2xsZWN0aW9uKCksCiAgICAgICAgICAgICAgICB0bzogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgKICAgICAgICAgICAgKQogICAgICAgIH0KCiAgICAgICAgYWNjdC5jYXBhYmlsaXRpZXMudW5wdWJsaXNoKGNvbGxlY3Rpb25EYXRhLnB1YmxpY1BhdGgpCiAgICAgICAgYWNjdC5jYXBhYmlsaXRpZXMucHVibGlzaCgKICAgICAgICAgICAgYWNjdC5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwme05vbkZ1bmdpYmxlVG9rZW4uUmVjZWl2ZXIsIE5vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+KGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKSwKICAgICAgICAgICAgYXQ6IGNvbGxlY3Rpb25EYXRhLnB1YmxpY1BhdGgKICAgICAgICApCiAgICAgICAgICAgICAgICAKICAgICAgICBsZXQgY2FwID0gYWNjdC5jYXBhYmlsaXRpZXMuZ2V0PCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uUHVibGljfT4oY29sbGVjdGlvbkRhdGEucHVibGljUGF0aCkKCiAgICAgICAgTG9zdEFuZEZvdW5kLnJlZGVlbUFsbCh0eXBlOiBuZnRUeXBlLCBtYXg6IG5pbCwgcmVjZWl2ZXI6IGNhcCkKICAgICAgICBhY2N0LmNhcGFiaWxpdGllcy5zdG9yYWdlLmdldENvbnRyb2xsZXIoYnlDYXBhYmlsaXR5SUQ6IGNhcC5pZCkhLmRlbGV0ZSgpCiAgICB9Cn0=",
          "queryUnclaimedFTs": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgcXVlcnlVbmNsYWltZWRGVHMgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBMb3N0QW5kRm91bmQgZnJvbSAweDQ3M2Q2YTJjMzdlYWI1YmUKCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQoKCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHI6IEFkZHJlc3MpOiBbQW55U3RydWN0P10gewogICAgbGV0IHRpY2tldHMgPSBMb3N0QW5kRm91bmQuYm9ycm93QWxsVGlja2V0cyhhZGRyOiBhZGRyKQogICAgCiAgICBsZXQgZGlzcGxheUFycjogW0FueVN0cnVjdD9dICA9IFtdCiAgICBmb3IgdGlja2V0IGluIHRpY2tldHMgewogICAgICAgIGlmIHRpY2tldC50eXBlLmlzU3VidHlwZShvZjogVHlwZTxAe0Z1bmdpYmxlVG9rZW4uVmF1bHR9PigpKSB7IAogICAgICAgICAgICBkaXNwbGF5QXJyLmFwcGVuZCh7ImRpc3BsYXkiOiB0aWNrZXQuZGlzcGxheSwgImJhbGFuY2UiOiB0aWNrZXQuZ2V0RnVuZ2libGVUb2tlbkJhbGFuY2UoKX0pCiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIGRpc3BsYXlBcnIKfQ==",
          "queryUnclaimedNFTs": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgcXVlcnlVbmNsYWltZWRORlRzIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgTG9zdEFuZEZvdW5kIGZyb20gMHg0NzNkNmEyYzM3ZWFiNWJlCgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCgphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyOiBBZGRyZXNzKTogWyZNZXRhZGF0YVZpZXdzLkRpc3BsYXk/XSB7CiAgICBsZXQgdGlja2V0cyA9IExvc3RBbmRGb3VuZC5ib3Jyb3dBbGxUaWNrZXRzKGFkZHI6IGFkZHIpCiAgICAKICAgIGxldCBkaXNwbGF5QXJyOiBbJk1ldGFkYXRhVmlld3MuRGlzcGxheT9dICA9IFtdCiAgICBmb3IgdGlja2V0IGluIHRpY2tldHMgewogICAgICAgIGlmIHRpY2tldC50eXBlLmlzU3VidHlwZShvZjogVHlwZTxAe05vbkZ1bmdpYmxlVG9rZW4uTkZUfT4oKSkgeyAKICAgICAgICAgICAgZGlzcGxheUFyci5hcHBlbmQodGlja2V0LmRpc3BsYXkpCiAgICAgICAgfQogICAgfQogICAgCiAgICByZXR1cm4gZGlzcGxheUFycgp9",
          "queryUnclaimedNumber": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgcXVlcnlVbmNsYWltZWROdW1iZXIgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBMb3N0QW5kRm91bmQgZnJvbSAweDQ3M2Q2YTJjMzdlYWI1YmUKCgphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyOiBBZGRyZXNzKTogSW50IHsKICAgIGxldCBzaGVsZk1hbmFnZXIgPSBMb3N0QW5kRm91bmQuYm9ycm93U2hlbGZNYW5hZ2VyKCkKICAgIGxldCBzaGVsZiA9IHNoZWxmTWFuYWdlci5ib3Jyb3dTaGVsZihyZWRlZW1lcjogYWRkcikKICAgIGlmIHNoZWxmID09IG5pbCB7CiAgICAgICAgcmV0dXJuIDAKICAgIH0KICAgIAogICAgcmV0dXJuIHNoZWxmIS5nZXRSZWRlZW1hYmxlVHlwZXMoKS5sZW5ndGgKfQ==",
          "sendFT": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgc2VuZEZUIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgoKaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4MTY1NDY1MzM5OTA0MGE2MQoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweGYyMzNkY2VlODhmZTBhYmUKCmltcG9ydCBMb3N0QW5kRm91bmQgZnJvbSAweDQ3M2Q2YTJjMzdlYWI1YmUKCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgppbXBvcnQgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MgZnJvbSAweGYyMzNkY2VlODhmZTBhYmUKCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweDFlNGFhMGI4N2QxMGIxNDEKCgoKdHJhbnNhY3Rpb24odmF1bHRJZGVudGlmaWVyOiBTdHJpbmcsIHJlY2lwaWVudDogQWRkcmVzcywgYW1vdW50OiBVRml4NjQsIG1lbW86IFN0cmluZykgewogICAgbGV0IHNlbnRWYXVsdDogQHtGdW5naWJsZVRva2VuLlZhdWx0fQogICAgbGV0IGZsb3dQcm92aWRlcjogQ2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZGbG93VG9rZW4uVmF1bHQ+CiAgICBsZXQgZmxvd1JlY2VpdmVyOiBDYXBhYmlsaXR5PCZGbG93VG9rZW4uVmF1bHQ+CiAgICBsZXQgcmVjZWl2ZXJDYXA6IENhcGFiaWxpdHk8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4KICAgIGxldCBkaXNwbGF5OiBNZXRhZGF0YVZpZXdzLkRpc3BsYXk/CgoKICAgIHByZXBhcmUoYWNjdDogYXV0aChTdG9yYWdlLCBDYXBhYmlsaXRpZXMpICZBY2NvdW50KSB7CiAgICAgICAgIGxldCB2YXVsdFR5cGUgPSBDb21wb3NpdGVUeXBlKHZhdWx0SWRlbnRpZmllcikKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBjb25zdHJ1Y3QgVmF1bHQgdHlwZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KHZhdWx0SWRlbnRpZmllcikpCiAgICAgICAgLy8gUGFyc2UgdGhlIFZhdWx0IGlkZW50aWZpZXIgaW50byBpdHMgY29tcG9uZW50cwogICAgICAgIGxldCB0b2tlbkNvbnRyYWN0QWRkcmVzcyA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdEFkZHJlc3MoZnJvbVR5cGU6IHZhdWx0VHlwZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgYWRkcmVzcyBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KHZhdWx0SWRlbnRpZmllcikpCiAgICAgICAgbGV0IHRva2VuQ29udHJhY3ROYW1lID0gRmxvd0VWTUJyaWRnZVV0aWxzLmdldENvbnRyYWN0TmFtZShmcm9tVHlwZTogdmF1bHRUeXBlKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCBjb250cmFjdCBuYW1lIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQodmF1bHRJZGVudGlmaWVyKSkKICAgICAgICAKICAgICAgICAvKiAtLS0gUmV0cmlldmUgdGhlIGZ1bmRzIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBGdW5naWJsZVRva2VuIFZhdWx0CiAgICAgICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQodG9rZW5Db250cmFjdEFkZHJlc3MpLmNvbnRyYWN0cy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXJ9PihuYW1lOiB0b2tlbkNvbnRyYWN0TmFtZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gRnVuZ2libGVUb2tlbiBjb250cmFjdCIpCiAgICAgICAgbGV0IHZhdWx0RGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBuaWwsCiAgICAgICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT4oKQogICAgICAgICAgICApIGFzISBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT8gPz8gcGFuaWMoIkNvdWxkIG5vdCByZXNvbHZlIEZUVmF1bHREYXRhIHZpZXciKQoKCiAgICAgICAgbGV0IHZhdWx0RGlzcGxheSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBuaWwsCiAgICAgICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVERpc3BsYXk+KCkKICAgICAgICAgICAgKSBhcyEgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlREaXNwbGF5PyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgRlRWYXVsdERhdGEgdmlldyIpCgogICAgICAgIHNlbGYuZGlzcGxheSA9IE1ldGFkYXRhVmlld3MuRGlzcGxheSgKICAgICAgICAgICAgbmFtZTogdmF1bHREaXNwbGF5Lm5hbWUsCiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB2YXVsdERpc3BsYXkuZGVzY3JpcHRpb24sCiAgICAgICAgICAgIHRodW1ibmFpbDogdmF1bHREaXNwbGF5LmxvZ29zLml0ZW1zWzBdLmZpbGUKICAgICAgICApCgogICAgICAgIGxldCB2YXVsdCA9IGFjY3Quc3RvcmFnZS5ib3Jyb3c8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uVmF1bHR9PigKICAgICAgICAgICAgICAgIGZyb206IHZhdWx0RGF0YS5zdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYWNjZXNzIHNpZ25lcidzIEZ1bmdpYmxlVG9rZW4gVmF1bHQiKQoKICAgICAgICBzZWxmLnNlbnRWYXVsdCA8LSB2YXVsdC53aXRoZHJhdyhhbW91bnQ6IGFtb3VudCkKCiAgICAgICAgdmFyIHByb3ZpZGVyOiBDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJkZsb3dUb2tlbi5WYXVsdD4/ID0gbmlsCiAgICAgICAgYWNjdC5jYXBhYmlsaXRpZXMuc3RvcmFnZS5mb3JFYWNoQ29udHJvbGxlcihmb3JQYXRoOiAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdCwgZnVuKGM6ICZTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIpOiBCb29sIHsKICAgICAgICAgICAgaWYgYy5ib3Jyb3dUeXBlID09IFR5cGU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAmRmxvd1Rva2VuLlZhdWx0PigpIHsKICAgICAgICAgICAgICAgIHByb3ZpZGVyID0gYy5jYXBhYmlsaXR5IGFzISBDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJkZsb3dUb2tlbi5WYXVsdD4KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdHJ1ZQogICAgICAgIH0pCgogICAgICAgIGlmIHByb3ZpZGVyID09IG5pbCB7CiAgICAgICAgICAgIHByb3ZpZGVyID0gYWNjdC5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZGbG93VG9rZW4uVmF1bHQ+KC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0KQogICAgICAgIH0KICAgICAgICBzZWxmLmZsb3dQcm92aWRlciA9IHByb3ZpZGVyIQogICAgICAgIHNlbGYuZmxvd1JlY2VpdmVyID0gYWNjdC5jYXBhYmlsaXRpZXMuZ2V0PCZGbG93VG9rZW4uVmF1bHQ+KC9wdWJsaWMvZmxvd1Rva2VuUmVjZWl2ZXIpIQogICAgICAgIHNlbGYucmVjZWl2ZXJDYXAgPSBnZXRBY2NvdW50KHJlY2lwaWVudCkuY2FwYWJpbGl0aWVzLmdldDwme0Z1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9Pih2YXVsdERhdGEucmVjZWl2ZXJQYXRoKSEKICAgIH0KCiAgICBleGVjdXRlIHsKCiAgICAgICAgCiAgICAgICAgbGV0IGRlcG9zaXRFc3RpbWF0ZSA8LSBMb3N0QW5kRm91bmQuZXN0aW1hdGVEZXBvc2l0KHJlZGVlbWVyOiByZWNpcGllbnQsIGl0ZW06IDwtc2VsZi5zZW50VmF1bHQsIG1lbW86IG1lbW8sIGRpc3BsYXk6IHNlbGYuZGlzcGxheSkKICAgICAgICBsZXQgc3RvcmFnZUZlZSA8LSBzZWxmLmZsb3dQcm92aWRlci5ib3Jyb3coKSEud2l0aGRyYXcoYW1vdW50OiBkZXBvc2l0RXN0aW1hdGUuc3RvcmFnZUZlZSkKICAgICAgICBsZXQgaXRlbSA8LSBkZXBvc2l0RXN0aW1hdGUud2l0aGRyYXcoKQoKICAgICAgICBMb3N0QW5kRm91bmQudHJ5U2VuZFJlc291cmNlKAogICAgICAgICAgICBpdGVtOiA8LWl0ZW0sCiAgICAgICAgICAgIGNhcDogc2VsZi5yZWNlaXZlckNhcCwKICAgICAgICAgICAgbWVtbzogbWVtbywKICAgICAgICAgICAgZGlzcGxheTogc2VsZi5kaXNwbGF5LAogICAgICAgICAgICBzdG9yYWdlUGF5bWVudDogJnN0b3JhZ2VGZWUgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uVmF1bHR9LAogICAgICAgICAgICBmbG93VG9rZW5SZXBheW1lbnQ6IHNlbGYuZmxvd1JlY2VpdmVyCiAgICAgICAgKQoKICAgICAgICBzZWxmLmZsb3dSZWNlaXZlci5ib3Jyb3coKSEuZGVwb3NpdChmcm9tOiA8LXN0b3JhZ2VGZWUpCiAgICAgICAgZGVzdHJveSBkZXBvc2l0RXN0aW1hdGUKICAgIH0KfQ==",
          "sendNFT": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgc2VuZE5GVCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweDE2NTQ2NTMzOTkwNDBhNjEKCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHgxZDdlNTdhYTU1ODE3NDQ4CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQoKaW1wb3J0IExvc3RBbmRGb3VuZCBmcm9tIDB4NDczZDZhMmMzN2VhYjViZQoKaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCmltcG9ydCBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cyBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VVdGlscyBmcm9tIDB4MWU0YWEwYjg3ZDEwYjE0MQoKCgp0cmFuc2FjdGlvbihuZnRJZGVudGlmaWVyOiBTdHJpbmcsIHJlY2lwaWVudDogQWRkcmVzcywgaWQ6IFVJbnQ2NCwgbWVtbzogU3RyaW5nKSB7CiAgICBsZXQgbmZ0OiBAe05vbkZ1bmdpYmxlVG9rZW4uTkZUfQogICAgbGV0IGZsb3dQcm92aWRlcjogQ2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZGbG93VG9rZW4uVmF1bHQ+CiAgICBsZXQgZmxvd1JlY2VpdmVyOiBDYXBhYmlsaXR5PCZGbG93VG9rZW4uVmF1bHQ+CiAgICBsZXQgcmVjZWl2ZXJDYXA6IENhcGFiaWxpdHk8JntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb25QdWJsaWN9PgoKCiAgICBwcmVwYXJlKGFjY3Q6IGF1dGgoU3RvcmFnZSwgQ2FwYWJpbGl0aWVzKSAmQWNjb3VudCkgewogICAgICAgIGxldCBuZnRUeXBlID0gQ29tcG9zaXRlVHlwZShuZnRJZGVudGlmaWVyKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGNvbnN0cnVjdCBORlQgdHlwZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQogICAgICAgIGxldCBuZnRDb250cmFjdEFkZHJlc3MgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3RBZGRyZXNzKGZyb21UeXBlOiBuZnRUeXBlKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCBjb250cmFjdCBhZGRyZXNzIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQobmZ0SWRlbnRpZmllcikpCiAgICAgICAgbGV0IG5mdENvbnRyYWN0TmFtZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdE5hbWUoZnJvbVR5cGU6IG5mdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IG5hbWUgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdChuZnRJZGVudGlmaWVyKSkKCiAgICAgICAgLyogLS0tIFJldHJpZXZlIHRoZSBmdW5kcyAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgRnVuZ2libGVUb2tlbiBWYXVsdAogICAgICAgCiAgICAgICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQobmZ0Q29udHJhY3RBZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogbmZ0Q29udHJhY3ROYW1lKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBWaWV3UmVzb2x2ZXIgZnJvbSBORlQgY29udHJhY3QiKQogICAgICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBuaWwsCiAgICAgICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPigpCiAgICAgICAgICAgICkgYXMhIE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE/ID8/IHBhbmljKCJDb3VsZCBub3QgcmVzb2x2ZSBORlRDb2xsZWN0aW9uRGF0YSB2aWV3IikKICAgICAgICAKICAgICAgICAKCiAgICAgICAgbGV0IGNvbGxlY3Rpb24gPSBhY2N0LnN0b3JhZ2UuYm9ycm93PGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259PigKICAgICAgICAgICAgICAgIGZyb206IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkNvdWxkIG5vdCBhY2Nlc3Mgc2lnbmVyJ3MgRnVuZ2libGVUb2tlbiBWYXVsdCIpCgogICAgICAgIHNlbGYubmZ0IDwtIGNvbGxlY3Rpb24ud2l0aGRyYXcod2l0aGRyYXdJRDogaWQpCgogICAgICAgIHZhciBwcm92aWRlcjogQ2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZGbG93VG9rZW4uVmF1bHQ+PyA9IG5pbAogICAgICAgIGFjY3QuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuZm9yRWFjaENvbnRyb2xsZXIoZm9yUGF0aDogL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQsIGZ1bihjOiAmU3RvcmFnZUNhcGFiaWxpdHlDb250cm9sbGVyKTogQm9vbCB7CiAgICAgICAgICAgIGlmIGMuYm9ycm93VHlwZSA9PSBUeXBlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJkZsb3dUb2tlbi5WYXVsdD4oKSB7CiAgICAgICAgICAgICAgICBwcm92aWRlciA9IGMuY2FwYWJpbGl0eSBhcyEgQ2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZGbG93VG9rZW4uVmF1bHQ+CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHRydWUKICAgICAgICB9KQoKICAgICAgICBpZiBwcm92aWRlciA9PSBuaWwgewogICAgICAgICAgICBwcm92aWRlciA9IGFjY3QuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAmRmxvd1Rva2VuLlZhdWx0Pigvc3RvcmFnZS9mbG93VG9rZW5WYXVsdCkKICAgICAgICB9CiAgICAgICAgc2VsZi5mbG93UHJvdmlkZXIgPSBwcm92aWRlciEKICAgICAgICBzZWxmLmZsb3dSZWNlaXZlciA9IGFjY3QuY2FwYWJpbGl0aWVzLmdldDwmRmxvd1Rva2VuLlZhdWx0PigvcHVibGljL2Zsb3dUb2tlblJlY2VpdmVyKSEKICAgICAgICBzZWxmLnJlY2VpdmVyQ2FwID0gZ2V0QWNjb3VudChyZWNpcGllbnQpLmNhcGFiaWxpdGllcy5nZXQ8JntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb25QdWJsaWN9Pihjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKSEKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICAKICAgICAgICBsZXQgZGlzcGxheSA9IHNlbGYubmZ0LnJlc29sdmVWaWV3KFR5cGU8TWV0YWRhdGFWaWV3cy5EaXNwbGF5PigpKSBhcyEgTWV0YWRhdGFWaWV3cy5EaXNwbGF5PwoKICAgICAgICBsZXQgZGVwb3NpdEVzdGltYXRlIDwtIExvc3RBbmRGb3VuZC5lc3RpbWF0ZURlcG9zaXQocmVkZWVtZXI6IHJlY2lwaWVudCwgaXRlbTogPC1zZWxmLm5mdCwgbWVtbzogbWVtbywgZGlzcGxheTogZGlzcGxheSkKICAgICAgICBsZXQgc3RvcmFnZUZlZSA8LSBzZWxmLmZsb3dQcm92aWRlci5ib3Jyb3coKSEud2l0aGRyYXcoYW1vdW50OiBkZXBvc2l0RXN0aW1hdGUuc3RvcmFnZUZlZSkKICAgICAgICBsZXQgaXRlbSA8LSBkZXBvc2l0RXN0aW1hdGUud2l0aGRyYXcoKQoKICAgICAgICBMb3N0QW5kRm91bmQudHJ5U2VuZFJlc291cmNlKAogICAgICAgICAgICBpdGVtOiA8LWl0ZW0sCiAgICAgICAgICAgIGNhcDogc2VsZi5yZWNlaXZlckNhcCwKICAgICAgICAgICAgbWVtbzogbWVtbywKICAgICAgICAgICAgZGlzcGxheTogZGlzcGxheSwKICAgICAgICAgICAgc3RvcmFnZVBheW1lbnQ6ICZzdG9yYWdlRmVlIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlZhdWx0fSwKICAgICAgICAgICAgZmxvd1Rva2VuUmVwYXltZW50OiBzZWxmLmZsb3dSZWNlaXZlcgogICAgICAgICkKCiAgICAgICAgc2VsZi5mbG93UmVjZWl2ZXIuYm9ycm93KCkhLmRlcG9zaXQoZnJvbTogPC1zdG9yYWdlRmVlKQogICAgICAgIGRlc3Ryb3kgZGVwb3NpdEVzdGltYXRlCiAgICB9Cn0="
        },
        "staking": {
          "checkSetup": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgY2hlY2tTZXR1cCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZsb3dTdGFraW5nQ29sbGVjdGlvbiBmcm9tIDB4OGQwZTg3YjY1MTU5YWU2MwoKCi8vLyBEZXRlcm1pbmVzIGlmIGFuIGFjY291bnQgaXMgc2V0IHVwIHdpdGggYSBTdGFraW5nIENvbGxlY3Rpb24KCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MpOiBCb29sIHsKICAgIHJldHVybiBGbG93U3Rha2luZ0NvbGxlY3Rpb24uZG9lc0FjY291bnRIYXZlU3Rha2luZ0NvbGxlY3Rpb24oYWRkcmVzczogYWRkcmVzcykKfQ==",
          "checkStakingEnabled": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgY2hlY2tTdGFraW5nRW5hYmxlZCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZsb3dJRFRhYmxlU3Rha2luZyBmcm9tIDB4ODYyNGI1MmY5ZGRjZDA0YQoKCmFjY2VzcyhhbGwpIGZ1biBtYWluKCk6Qm9vbCB7CiAgICByZXR1cm4gRmxvd0lEVGFibGVTdGFraW5nLnN0YWtpbmdFbmFibGVkKCkKfQ==",
          "closeStake": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgY2xvc2VTdGFrZSAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZsb3dTdGFraW5nQ29sbGVjdGlvbiBmcm9tIDB4OGQwZTg3YjY1MTU5YWU2MwoKCi8vIENsb3NlcyBvdXQgYSBzdGFraW5nIG9iamVjdCBpbiB0aGUgc3Rha2luZyBjb2xsZWN0aW9uCi8vIFRoaXMgZG9lcyBub3QgcmVtb3ZlIHRoZSByZWNvcmQgZnJvbSB0aGUgaWRlbnRpdHkgdGFibGUsCi8vIGJ1dCBpdCBkb2VzIG1lYW4gdGhhdCB0aGUgYWNjb3VudCB0aGF0IGNsb3NlcyBpdCBjYW5ub3QgZXZlciBhY2Nlc3MgaXQgYWdhaW4KCnRyYW5zYWN0aW9uKG5vZGVJRDogU3RyaW5nLCBkZWxlZ2F0b3JJRDogVUludDMyPykgewogICAgCiAgICBsZXQgc3Rha2luZ0NvbGxlY3Rpb25SZWY6IGF1dGgoRmxvd1N0YWtpbmdDb2xsZWN0aW9uLkNvbGxlY3Rpb25Pd25lcikgJkZsb3dTdGFraW5nQ29sbGVjdGlvbi5TdGFraW5nQ29sbGVjdGlvbgoKICAgIHByZXBhcmUoYWNjb3VudDogYXV0aChCb3Jyb3dWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICBzZWxmLnN0YWtpbmdDb2xsZWN0aW9uUmVmID0gYWNjb3VudC5zdG9yYWdlLmJvcnJvdzxhdXRoKEZsb3dTdGFraW5nQ29sbGVjdGlvbi5Db2xsZWN0aW9uT3duZXIpICZGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb24+KGZyb206IEZsb3dTdGFraW5nQ29sbGVjdGlvbi5TdGFraW5nQ29sbGVjdGlvblN0b3JhZ2VQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBhIHJlZmVyZW5jZSB0byBhIFN0YWtpbmdDb2xsZWN0aW9uIGluIHRoZSBwcmltYXJ5IHVzZXIncyBhY2NvdW50IikKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICBzZWxmLnN0YWtpbmdDb2xsZWN0aW9uUmVmLmNsb3NlU3Rha2Uobm9kZUlEOiBub2RlSUQsIGRlbGVnYXRvcklEOiBkZWxlZ2F0b3JJRCkKICAgIH0KfQ==",
          "createDelegator": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgY3JlYXRlRGVsZWdhdG9yIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRmxvd1N0YWtpbmdDb2xsZWN0aW9uIGZyb20gMHg4ZDBlODdiNjUxNTlhZTYzCgoKLy8vIFJlZ2lzdGVycyBhIGRlbGVnYXRvciBpbiB0aGUgc3Rha2luZyBjb2xsZWN0aW9uIHJlc291cmNlCi8vLyBmb3IgdGhlIHNwZWNpZmllZCBub2RlSUQgYW5kIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGNvbW1pdAoKdHJhbnNhY3Rpb24oaWQ6IFN0cmluZywgYW1vdW50OiBVRml4NjQpIHsKICAgIAogICAgbGV0IHN0YWtpbmdDb2xsZWN0aW9uUmVmOiBhdXRoKEZsb3dTdGFraW5nQ29sbGVjdGlvbi5Db2xsZWN0aW9uT3duZXIpICZGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb24KCiAgICBwcmVwYXJlKGFjY291bnQ6IGF1dGgoQm9ycm93VmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgc2VsZi5zdGFraW5nQ29sbGVjdGlvblJlZiA9IGFjY291bnQuc3RvcmFnZS5ib3Jyb3c8YXV0aChGbG93U3Rha2luZ0NvbGxlY3Rpb24uQ29sbGVjdGlvbk93bmVyKSAmRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uPihmcm9tOiBGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb25TdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgYSByZWZlcmVuY2UgdG8gYSBTdGFraW5nQ29sbGVjdGlvbiBpbiB0aGUgcHJpbWFyeSB1c2VyJ3MgYWNjb3VudCIpCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgc2VsZi5zdGFraW5nQ29sbGVjdGlvblJlZi5yZWdpc3RlckRlbGVnYXRvcihub2RlSUQ6IGlkLCBhbW91bnQ6IGFtb3VudCkgICAgICAKICAgIH0KfQ==",
          "createStake": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgY3JlYXRlU3Rha2UgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGbG93U3Rha2luZ0NvbGxlY3Rpb24gZnJvbSAweDhkMGU4N2I2NTE1OWFlNjMKCgovLy8gQ29tbWl0cyBuZXcgdG9rZW5zIHRvIHN0YWtlIGZvciB0aGUgc3BlY2lmaWVkIG5vZGUgb3IgZGVsZWdhdG9yIGluIHRoZSBzdGFraW5nIGNvbGxlY3Rpb24KLy8vIFRoZSB0b2tlbnMgZnJvbSB0aGUgbG9ja2VkIHZhdWx0IGFyZSB1c2VkIGZpcnN0LCBpZiBpdCBleGlzdHMKLy8vIGZvbGxvd2VkIGJ5IHRoZSB0b2tlbnMgZnJvbSB0aGUgdW5sb2NrZWQgdmF1bHQKCnRyYW5zYWN0aW9uKG5vZGVJRDogU3RyaW5nLCBkZWxlZ2F0b3JJRDogVUludDMyPywgYW1vdW50OiBVRml4NjQpIHsKICAgIAogICAgbGV0IHN0YWtpbmdDb2xsZWN0aW9uUmVmOiBhdXRoKEZsb3dTdGFraW5nQ29sbGVjdGlvbi5Db2xsZWN0aW9uT3duZXIpICZGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb24KCiAgICBwcmVwYXJlKGFjY291bnQ6IGF1dGgoQm9ycm93VmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgc2VsZi5zdGFraW5nQ29sbGVjdGlvblJlZiA9IGFjY291bnQuc3RvcmFnZS5ib3Jyb3c8YXV0aChGbG93U3Rha2luZ0NvbGxlY3Rpb24uQ29sbGVjdGlvbk93bmVyKSAmRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uPihmcm9tOiBGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb25TdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgYSByZWZlcmVuY2UgdG8gYSBTdGFraW5nQ29sbGVjdGlvbiBpbiB0aGUgcHJpbWFyeSB1c2VyJ3MgYWNjb3VudCIpCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgc2VsZi5zdGFraW5nQ29sbGVjdGlvblJlZi5zdGFrZU5ld1Rva2Vucyhub2RlSUQ6IG5vZGVJRCwgZGVsZWdhdG9ySUQ6IGRlbGVnYXRvcklELCBhbW91bnQ6IGFtb3VudCkKICAgIH0KfQ==",
          "getApr": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0QXByIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRmxvd0lEVGFibGVTdGFraW5nIGZyb20gMHg4NjI0YjUyZjlkZGNkMDRhCgoKYWNjZXNzKGFsbCkgZnVuIG1haW4oKTogVUZpeDY0IHsKICAgIGxldCBhcHIgPSBGbG93SURUYWJsZVN0YWtpbmcuZ2V0RXBvY2hUb2tlblBheW91dCgpIC8gRmxvd0lEVGFibGVTdGFraW5nLmdldFRvdGFsU3Rha2VkKCkgLyA3LjAgKiAzNjUuMCAqICgxLjAgLSBGbG93SURUYWJsZVN0YWtpbmcuZ2V0UmV3YXJkQ3V0UGVyY2VudGFnZSgpKQogICAgcmV0dXJuIGFwcgp9",
          "getApyWeekly": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0QXB5V2Vla2x5IC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRmxvd0lEVGFibGVTdGFraW5nIGZyb20gMHg4NjI0YjUyZjlkZGNkMDRhCgoKYWNjZXNzKGFsbCkgZnVuIG1haW4oKTogVUZpeDY0IHsKICAgIGxldCBhcHIgPSBGbG93SURUYWJsZVN0YWtpbmcuZ2V0RXBvY2hUb2tlblBheW91dCgpIC8gRmxvd0lEVGFibGVTdGFraW5nLmdldFRvdGFsU3Rha2VkKCkgKiA1NC4wICogKDEuMCAtIEZsb3dJRFRhYmxlU3Rha2luZy5nZXRSZXdhcmRDdXRQZXJjZW50YWdlKCkpCiAgICByZXR1cm4gYXByCn0=",
          "getDelegatesIndo": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0RGVsZWdhdGVzSW5kbyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKCmltcG9ydCBGbG93U3Rha2luZ0NvbGxlY3Rpb24gZnJvbSAweDhkMGU4N2I2NTE1OWFlNjMKCmltcG9ydCBGbG93SURUYWJsZVN0YWtpbmcgZnJvbSAweDg2MjRiNTJmOWRkY2QwNGEKCmltcG9ydCBMb2NrZWRUb2tlbnMgZnJvbSAweDhkMGU4N2I2NTE1OWFlNjMKCgphY2Nlc3MoYWxsKSBzdHJ1Y3QgRGVsZWdhdGVJbmZvIHsKICAgIGFjY2VzcyhhbGwpIGxldCBkZWxlZ2F0b3JJRDogVUludDMyCiAgICBhY2Nlc3MoYWxsKSBsZXQgbm9kZUlEOiBTdHJpbmcKICAgIGFjY2VzcyhhbGwpIGxldCB0b2tlbnNDb21taXR0ZWQ6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgbGV0IHRva2Vuc1N0YWtlZDogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSBsZXQgdG9rZW5zVW5zdGFraW5nOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIGxldCB0b2tlbnNSZXdhcmRlZDogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSBsZXQgdG9rZW5zVW5zdGFrZWQ6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgbGV0IHRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZTogVUZpeDY0CgogICAgLy8gUHJvamVjdGVkIFZhbHVlcwoKICAgIGFjY2VzcyhhbGwpIGxldCBpZDogU3RyaW5nCiAgICBhY2Nlc3MoYWxsKSBsZXQgcm9sZTogVUludDgKICAgIGFjY2VzcyhhbGwpIGxldCB1bnN0YWthYmxlVG9rZW5zOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIGxldCBkZWxlZ2F0ZWROb2RlSW5mbzogRmxvd0lEVGFibGVTdGFraW5nLk5vZGVJbmZvCiAgICBhY2Nlc3MoYWxsKSBsZXQgcmVzdGFrYWJsZVVuc3Rha2VkVG9rZW5zOiBVRml4NjQKCiAgICBpbml0KGRlbGVnYXRvckluZm86IEZsb3dJRFRhYmxlU3Rha2luZy5EZWxlZ2F0b3JJbmZvKSB7CiAgICAgICAgc2VsZi5kZWxlZ2F0b3JJRCA9IGRlbGVnYXRvckluZm8uaWQKICAgICAgICBzZWxmLm5vZGVJRCA9IGRlbGVnYXRvckluZm8ubm9kZUlECiAgICAgICAgc2VsZi50b2tlbnNDb21taXR0ZWQgPSBkZWxlZ2F0b3JJbmZvLnRva2Vuc0NvbW1pdHRlZAogICAgICAgIHNlbGYudG9rZW5zU3Rha2VkID0gZGVsZWdhdG9ySW5mby50b2tlbnNTdGFrZWQKICAgICAgICBzZWxmLnRva2Vuc1Vuc3Rha2luZyA9IGRlbGVnYXRvckluZm8udG9rZW5zVW5zdGFraW5nCiAgICAgICAgc2VsZi50b2tlbnNVbnN0YWtlZCA9IGRlbGVnYXRvckluZm8udG9rZW5zVW5zdGFrZWQKICAgICAgICBzZWxmLnRva2Vuc1Jld2FyZGVkID0gZGVsZWdhdG9ySW5mby50b2tlbnNSZXdhcmRlZAogICAgICAgIHNlbGYudG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlID0gZGVsZWdhdG9ySW5mby50b2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UKCiAgICAgICAgLy8gUHJvamVjdGVkIFZhbHVlcwogICAgICAgIGxldCBub2RlSW5mbyA9IEZsb3dJRFRhYmxlU3Rha2luZy5Ob2RlSW5mbyhub2RlSUQ6IGRlbGVnYXRvckluZm8ubm9kZUlEKQogICAgICAgIHNlbGYuZGVsZWdhdGVkTm9kZUluZm8gPSBub2RlSW5mbwogICAgICAgIHNlbGYuaWQgPSBub2RlSW5mby5pZAogICAgICAgIHNlbGYucm9sZSA9IG5vZGVJbmZvLnJvbGUKICAgICAgICBzZWxmLnVuc3Rha2FibGVUb2tlbnMgPSBzZWxmLnRva2Vuc1N0YWtlZCArIHNlbGYudG9rZW5zQ29tbWl0dGVkCiAgICAgICAgc2VsZi5yZXN0YWthYmxlVW5zdGFrZWRUb2tlbnMgPSBzZWxmLnRva2Vuc1Vuc3Rha2VkICsgc2VsZi50b2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UKICAgIH0KfQoKYWNjZXNzKGFsbCkgZnVuIG1haW4oYWNjb3VudDogQWRkcmVzcyk6IHtTdHJpbmc6IHtVSW50MzI6IERlbGVnYXRlSW5mb319PyB7CiAgICBsZXQgZG9lc0FjY291bnRIYXZlU3Rha2luZ0NvbGxlY3Rpb24gPSBGbG93U3Rha2luZ0NvbGxlY3Rpb24uZG9lc0FjY291bnRIYXZlU3Rha2luZ0NvbGxlY3Rpb24oYWRkcmVzczogYWNjb3VudCkKICAgIGlmICghZG9lc0FjY291bnRIYXZlU3Rha2luZ0NvbGxlY3Rpb24pIHsKICAgICAgICByZXR1cm4gbmlsCiAgICB9CgogICAgbGV0IGRlbGVnYXRvcklEczogW0Zsb3dTdGFraW5nQ29sbGVjdGlvbi5EZWxlZ2F0b3JJRHNdID0gRmxvd1N0YWtpbmdDb2xsZWN0aW9uLmdldERlbGVnYXRvcklEcyhhZGRyZXNzOiBhY2NvdW50KQoKICAgIGxldCBmb3JtYXR0ZWREZWxlZ2F0b3JJbmZvOiB7U3RyaW5nOiB7VUludDMyOiBEZWxlZ2F0ZUluZm99fSA9IHt9CgogICAgZm9yIGRlbGVnYXRvcklEIGluIGRlbGVnYXRvcklEcyB7CiAgICAgICAgaWYgbGV0IF9mb3JtYXR0ZWREZWxlZ2F0b3JJbmZvID0gZm9ybWF0dGVkRGVsZWdhdG9ySW5mb1tkZWxlZ2F0b3JJRC5kZWxlZ2F0b3JOb2RlSURdIHsKICAgICAgICAgICAgbGV0IGRlbGVnYXRvckluZm86IEZsb3dJRFRhYmxlU3Rha2luZy5EZWxlZ2F0b3JJbmZvID0gRmxvd0lEVGFibGVTdGFraW5nLkRlbGVnYXRvckluZm8obm9kZUlEOiBkZWxlZ2F0b3JJRC5kZWxlZ2F0b3JOb2RlSUQsIGRlbGVnYXRvcklEOiBkZWxlZ2F0b3JJRC5kZWxlZ2F0b3JJRCkKICAgICAgICAgICAgX2Zvcm1hdHRlZERlbGVnYXRvckluZm9bZGVsZWdhdG9ySUQuZGVsZWdhdG9ySURdID0gRGVsZWdhdGVJbmZvKGRlbGVnYXRvckluZm86IGRlbGVnYXRvckluZm8pCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbGV0IGRlbGVnYXRvckluZm86IEZsb3dJRFRhYmxlU3Rha2luZy5EZWxlZ2F0b3JJbmZvID0gRmxvd0lEVGFibGVTdGFraW5nLkRlbGVnYXRvckluZm8obm9kZUlEOiBkZWxlZ2F0b3JJRC5kZWxlZ2F0b3JOb2RlSUQsIGRlbGVnYXRvcklEOiBkZWxlZ2F0b3JJRC5kZWxlZ2F0b3JJRCkKICAgICAgICAgICAgZm9ybWF0dGVkRGVsZWdhdG9ySW5mb1tkZWxlZ2F0b3JJRC5kZWxlZ2F0b3JOb2RlSURdID0geyBkZWxlZ2F0b3JJRC5kZWxlZ2F0b3JJRDogRGVsZWdhdGVJbmZvKGRlbGVnYXRvckluZm86IGRlbGVnYXRvckluZm8pfQogICAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gZm9ybWF0dGVkRGVsZWdhdG9ySW5mbwp9Cg==",
          "getDelegatesInfo": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0RGVsZWdhdGVzSW5mbyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKCmltcG9ydCBGbG93U3Rha2luZ0NvbGxlY3Rpb24gZnJvbSAweDhkMGU4N2I2NTE1OWFlNjMKCmltcG9ydCBGbG93SURUYWJsZVN0YWtpbmcgZnJvbSAweDg2MjRiNTJmOWRkY2QwNGEKCmltcG9ydCBMb2NrZWRUb2tlbnMgZnJvbSAweDhkMGU4N2I2NTE1OWFlNjMKCgphY2Nlc3MoYWxsKSBzdHJ1Y3QgRGVsZWdhdGVJbmZvIHsKICAgIGFjY2VzcyhhbGwpIGxldCBkZWxlZ2F0b3JJRDogVUludDMyCiAgICBhY2Nlc3MoYWxsKSBsZXQgbm9kZUlEOiBTdHJpbmcKICAgIGFjY2VzcyhhbGwpIGxldCB0b2tlbnNDb21taXR0ZWQ6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgbGV0IHRva2Vuc1N0YWtlZDogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSBsZXQgdG9rZW5zVW5zdGFraW5nOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIGxldCB0b2tlbnNSZXdhcmRlZDogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSBsZXQgdG9rZW5zVW5zdGFrZWQ6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgbGV0IHRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZTogVUZpeDY0CgogICAgLy8gUHJvamVjdGVkIFZhbHVlcwoKICAgIGFjY2VzcyhhbGwpIGxldCBpZDogU3RyaW5nCiAgICBhY2Nlc3MoYWxsKSBsZXQgcm9sZTogVUludDgKICAgIGFjY2VzcyhhbGwpIGxldCB1bnN0YWthYmxlVG9rZW5zOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIGxldCBkZWxlZ2F0ZWROb2RlSW5mbzogRmxvd0lEVGFibGVTdGFraW5nLk5vZGVJbmZvCiAgICBhY2Nlc3MoYWxsKSBsZXQgcmVzdGFrYWJsZVVuc3Rha2VkVG9rZW5zOiBVRml4NjQKCiAgICBpbml0KGRlbGVnYXRvckluZm86IEZsb3dJRFRhYmxlU3Rha2luZy5EZWxlZ2F0b3JJbmZvKSB7CiAgICAgICAgc2VsZi5kZWxlZ2F0b3JJRCA9IGRlbGVnYXRvckluZm8uaWQKICAgICAgICBzZWxmLm5vZGVJRCA9IGRlbGVnYXRvckluZm8ubm9kZUlECiAgICAgICAgc2VsZi50b2tlbnNDb21taXR0ZWQgPSBkZWxlZ2F0b3JJbmZvLnRva2Vuc0NvbW1pdHRlZAogICAgICAgIHNlbGYudG9rZW5zU3Rha2VkID0gZGVsZWdhdG9ySW5mby50b2tlbnNTdGFrZWQKICAgICAgICBzZWxmLnRva2Vuc1Vuc3Rha2luZyA9IGRlbGVnYXRvckluZm8udG9rZW5zVW5zdGFraW5nCiAgICAgICAgc2VsZi50b2tlbnNVbnN0YWtlZCA9IGRlbGVnYXRvckluZm8udG9rZW5zVW5zdGFrZWQKICAgICAgICBzZWxmLnRva2Vuc1Jld2FyZGVkID0gZGVsZWdhdG9ySW5mby50b2tlbnNSZXdhcmRlZAogICAgICAgIHNlbGYudG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlID0gZGVsZWdhdG9ySW5mby50b2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UKCiAgICAgICAgLy8gUHJvamVjdGVkIFZhbHVlcwogICAgICAgIGxldCBub2RlSW5mbyA9IEZsb3dJRFRhYmxlU3Rha2luZy5Ob2RlSW5mbyhub2RlSUQ6IGRlbGVnYXRvckluZm8ubm9kZUlEKQogICAgICAgIHNlbGYuZGVsZWdhdGVkTm9kZUluZm8gPSBub2RlSW5mbwogICAgICAgIHNlbGYuaWQgPSBub2RlSW5mby5pZAogICAgICAgIHNlbGYucm9sZSA9IG5vZGVJbmZvLnJvbGUKICAgICAgICBzZWxmLnVuc3Rha2FibGVUb2tlbnMgPSBzZWxmLnRva2Vuc1N0YWtlZCArIHNlbGYudG9rZW5zQ29tbWl0dGVkCiAgICAgICAgc2VsZi5yZXN0YWthYmxlVW5zdGFrZWRUb2tlbnMgPSBzZWxmLnRva2Vuc1Vuc3Rha2VkICsgc2VsZi50b2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UKICAgIH0KfQoKYWNjZXNzKGFsbCkgZnVuIG1haW4oYWNjb3VudDogQWRkcmVzcyk6IHtTdHJpbmc6IHtVSW50MzI6IERlbGVnYXRlSW5mb319PyB7CiAgICBsZXQgZG9lc0FjY291bnRIYXZlU3Rha2luZ0NvbGxlY3Rpb24gPSBGbG93U3Rha2luZ0NvbGxlY3Rpb24uZG9lc0FjY291bnRIYXZlU3Rha2luZ0NvbGxlY3Rpb24oYWRkcmVzczogYWNjb3VudCkKICAgIGlmICghZG9lc0FjY291bnRIYXZlU3Rha2luZ0NvbGxlY3Rpb24pIHsKICAgICAgICByZXR1cm4gbmlsCiAgICB9CgogICAgbGV0IGRlbGVnYXRvcklEczogW0Zsb3dTdGFraW5nQ29sbGVjdGlvbi5EZWxlZ2F0b3JJRHNdID0gRmxvd1N0YWtpbmdDb2xsZWN0aW9uLmdldERlbGVnYXRvcklEcyhhZGRyZXNzOiBhY2NvdW50KQoKICAgIGxldCBmb3JtYXR0ZWREZWxlZ2F0b3JJbmZvOiB7U3RyaW5nOiB7VUludDMyOiBEZWxlZ2F0ZUluZm99fSA9IHt9CgogICAgZm9yIGRlbGVnYXRvcklEIGluIGRlbGVnYXRvcklEcyB7CiAgICAgICAgaWYgbGV0IF9mb3JtYXR0ZWREZWxlZ2F0b3JJbmZvID0gZm9ybWF0dGVkRGVsZWdhdG9ySW5mb1tkZWxlZ2F0b3JJRC5kZWxlZ2F0b3JOb2RlSURdIHsKICAgICAgICAgICAgbGV0IGRlbGVnYXRvckluZm86IEZsb3dJRFRhYmxlU3Rha2luZy5EZWxlZ2F0b3JJbmZvID0gRmxvd0lEVGFibGVTdGFraW5nLkRlbGVnYXRvckluZm8obm9kZUlEOiBkZWxlZ2F0b3JJRC5kZWxlZ2F0b3JOb2RlSUQsIGRlbGVnYXRvcklEOiBkZWxlZ2F0b3JJRC5kZWxlZ2F0b3JJRCkKICAgICAgICAgICAgX2Zvcm1hdHRlZERlbGVnYXRvckluZm9bZGVsZWdhdG9ySUQuZGVsZWdhdG9ySURdID0gRGVsZWdhdGVJbmZvKGRlbGVnYXRvckluZm86IGRlbGVnYXRvckluZm8pCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbGV0IGRlbGVnYXRvckluZm86IEZsb3dJRFRhYmxlU3Rha2luZy5EZWxlZ2F0b3JJbmZvID0gRmxvd0lEVGFibGVTdGFraW5nLkRlbGVnYXRvckluZm8obm9kZUlEOiBkZWxlZ2F0b3JJRC5kZWxlZ2F0b3JOb2RlSUQsIGRlbGVnYXRvcklEOiBkZWxlZ2F0b3JJRC5kZWxlZ2F0b3JJRCkKICAgICAgICAgICAgZm9ybWF0dGVkRGVsZWdhdG9ySW5mb1tkZWxlZ2F0b3JJRC5kZWxlZ2F0b3JOb2RlSURdID0geyBkZWxlZ2F0b3JJRC5kZWxlZ2F0b3JJRDogRGVsZWdhdGVJbmZvKGRlbGVnYXRvckluZm86IGRlbGVnYXRvckluZm8pfQogICAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gZm9ybWF0dGVkRGVsZWdhdG9ySW5mbwp9",
          "getDelegatesInfoArray": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0RGVsZWdhdGVzSW5mb0FycmF5IC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgoKaW1wb3J0IEZsb3dTdGFraW5nQ29sbGVjdGlvbiBmcm9tIDB4OGQwZTg3YjY1MTU5YWU2MwoKaW1wb3J0IEZsb3dJRFRhYmxlU3Rha2luZyBmcm9tIDB4ODYyNGI1MmY5ZGRjZDA0YQoKaW1wb3J0IExvY2tlZFRva2VucyBmcm9tIDB4OGQwZTg3YjY1MTU5YWU2MwoKICAgICAgICAKYWNjZXNzKGFsbCkgZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcyk6IFtGbG93SURUYWJsZVN0YWtpbmcuRGVsZWdhdG9ySW5mb10gewogICAgcmV0dXJuIEZsb3dTdGFraW5nQ29sbGVjdGlvbi5nZXRBbGxEZWxlZ2F0b3JJbmZvKGFkZHJlc3M6IGFkZHJlc3MpCn0=",
          "getDelegatesInfoArrayV2": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0RGVsZWdhdGVzSW5mb0FycmF5VjIgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCgppbXBvcnQgRmxvd1N0YWtpbmdDb2xsZWN0aW9uIGZyb20gMHg4ZDBlODdiNjUxNTlhZTYzCgppbXBvcnQgRmxvd0lEVGFibGVTdGFraW5nIGZyb20gMHg4NjI0YjUyZjlkZGNkMDRhCgppbXBvcnQgTG9ja2VkVG9rZW5zIGZyb20gMHg4ZDBlODdiNjUxNTlhZTYzCgogICAgICAgIAphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzKTogW0Zsb3dJRFRhYmxlU3Rha2luZy5EZWxlZ2F0b3JJbmZvXT8gewogICAgdmFyIHJlczogW0Zsb3dJRFRhYmxlU3Rha2luZy5EZWxlZ2F0b3JJbmZvXT8gPSBuaWwKCiAgICBsZXQgaW5pdGVkID0gRmxvd1N0YWtpbmdDb2xsZWN0aW9uLmRvZXNBY2NvdW50SGF2ZVN0YWtpbmdDb2xsZWN0aW9uKGFkZHJlc3M6IGFkZHJlc3MpCgogICAgaWYgaW5pdGVkIHsKICAgICAgICByZXMgPSBGbG93U3Rha2luZ0NvbGxlY3Rpb24uZ2V0QWxsRGVsZWdhdG9ySW5mbyhhZGRyZXNzOiBhZGRyZXNzKQogICAgfQogICAgcmV0dXJuIHJlcwp9",
          "getDelegatorInfo": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0RGVsZWdhdG9ySW5mbyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZsb3dJRFRhYmxlU3Rha2luZyBmcm9tIDB4ODYyNGI1MmY5ZGRjZDA0YQoKCmFjY2VzcyhhbGwpIGZ1biBtYWluKG5vZGVJRDogU3RyaW5nLCBkZWxlZ2F0b3JJRDogVUludDMyKTogRmxvd0lEVGFibGVTdGFraW5nLkRlbGVnYXRvckluZm8gewogIHJldHVybiBGbG93SURUYWJsZVN0YWtpbmcuRGVsZWdhdG9ySW5mbyhub2RlSUQ6IG5vZGVJRCwgZGVsZWdhdG9ySUQ6IGRlbGVnYXRvcklEKQp9",
          "getEpochMetadata": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0RXBvY2hNZXRhZGF0YSAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZsb3dFcG9jaCBmcm9tIDB4ODYyNGI1MmY5ZGRjZDA0YQoKCmFjY2VzcyhhbGwpIGZ1biBtYWluKGVwb2NoQ291bnRlcjogVUludDY0KTogRmxvd0Vwb2NoLkVwb2NoTWV0YWRhdGEgewogICAgcmV0dXJuIEZsb3dFcG9jaC5nZXRFcG9jaE1ldGFkYXRhKGVwb2NoQ291bnRlcikhCn0=",
          "getNodeInfo": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0Tm9kZUluZm8gLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGbG93SURUYWJsZVN0YWtpbmcgZnJvbSAweDg2MjRiNTJmOWRkY2QwNGEKCgphY2Nlc3MoYWxsKSBmdW4gbWFpbihub2RlSUQ6IFN0cmluZyk6IEZsb3dJRFRhYmxlU3Rha2luZy5Ob2RlSW5mbyB7CiAgcmV0dXJuIEZsb3dJRFRhYmxlU3Rha2luZy5Ob2RlSW5mbyhub2RlSUQ6IG5vZGVJRCkKfQ==",
          "getNodesInfo": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0Tm9kZXNJbmZvIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRmxvd1N0YWtpbmdDb2xsZWN0aW9uIGZyb20gMHg4ZDBlODdiNjUxNTlhZTYzCgppbXBvcnQgRmxvd0lEVGFibGVTdGFraW5nIGZyb20gMHg4NjI0YjUyZjlkZGNkMDRhCgoKYWNjZXNzKGFsbCkgc3RydWN0IFN1bW1hcnlTdGFrZURlbGVnYXRlSW5mbyB7CgogICAgYWNjZXNzKGFsbCkgdmFyIG5vZGVDb3VudDogVUludDY0CiAgICBhY2Nlc3MoYWxsKSB2YXIgZGVsZWdhdGVDb3VudDogVUludDY0CgogICAgYWNjZXNzKGFsbCkgdmFyIHRvdGFsVG9rZW5zU3Rha2VkOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIHZhciB0b3RhbFRva2Vuc0NvbW1pdHRlZDogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSB2YXIgdG90YWxUb2tlbnNVbnN0YWtpbmc6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgdmFyIHRvdGFsVG9rZW5zVW5zdGFrZWQ6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgdmFyIHRvdGFsVG9rZW5zUmV3YXJkZWQ6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgdmFyIHRvdGFsVG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlOiBVRml4NjQKCiAgICBhY2Nlc3MoYWxsKSB2YXIgc3Rha2VUb2tlbnNTdGFrZWQ6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgdmFyIHN0YWtlVG9rZW5zQ29tbWl0dGVkOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIHZhciBzdGFrZVRva2Vuc1Vuc3Rha2luZzogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSB2YXIgc3Rha2VUb2tlbnNVbnN0YWtlZDogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSB2YXIgc3Rha2VUb2tlbnNSZXdhcmRlZDogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSB2YXIgc3Rha2VUb2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2U6IFVGaXg2NAoKICAgIGFjY2VzcyhhbGwpIHZhciBkZWxlZ2F0ZVRva2Vuc1N0YWtlZDogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSB2YXIgZGVsZWdhdGVUb2tlbnNDb21taXR0ZWQ6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgdmFyIGRlbGVnYXRlVG9rZW5zVW5zdGFraW5nOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIHZhciBkZWxlZ2F0ZVRva2Vuc1Vuc3Rha2VkOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIHZhciBkZWxlZ2F0ZVRva2Vuc1Jld2FyZGVkOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIHZhciBkZWxlZ2F0ZVRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZTogVUZpeDY0CgogICAgaW5pdChhbGxOb2RlSW5mbzogW0Zsb3dJRFRhYmxlU3Rha2luZy5Ob2RlSW5mb10sIGFsbERlbGVnYXRlSW5mbzogW0Zsb3dJRFRhYmxlU3Rha2luZy5EZWxlZ2F0b3JJbmZvXSkgewoKICAgICAgICBzZWxmLm5vZGVDb3VudCA9IFVJbnQ2NCgwKQogICAgICAgIHNlbGYuZGVsZWdhdGVDb3VudCA9IFVJbnQ2NCgwKQoKICAgICAgICBzZWxmLnRvdGFsVG9rZW5zU3Rha2VkID0gVUZpeDY0KDApCiAgICAgICAgc2VsZi50b3RhbFRva2Vuc0NvbW1pdHRlZCA9IFVGaXg2NCgwKQogICAgICAgIHNlbGYudG90YWxUb2tlbnNVbnN0YWtpbmcgPSBVRml4NjQoMCkKICAgICAgICBzZWxmLnRvdGFsVG9rZW5zVW5zdGFrZWQgPSBVRml4NjQoMCkKICAgICAgICBzZWxmLnRvdGFsVG9rZW5zUmV3YXJkZWQgPSBVRml4NjQoMCkKICAgICAgICBzZWxmLnRvdGFsVG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlID0gVUZpeDY0KDApCgogICAgICAgIHNlbGYuc3Rha2VUb2tlbnNTdGFrZWQgPSBVRml4NjQoMCkKICAgICAgICBzZWxmLnN0YWtlVG9rZW5zQ29tbWl0dGVkID0gVUZpeDY0KDApCiAgICAgICAgc2VsZi5zdGFrZVRva2Vuc1Vuc3Rha2luZyA9IFVGaXg2NCgwKQogICAgICAgIHNlbGYuc3Rha2VUb2tlbnNVbnN0YWtlZCA9IFVGaXg2NCgwKQogICAgICAgIHNlbGYuc3Rha2VUb2tlbnNSZXdhcmRlZCA9IFVGaXg2NCgwKQogICAgICAgIHNlbGYuc3Rha2VUb2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UgPSBVRml4NjQoMCkKCiAgICAgICAgc2VsZi5kZWxlZ2F0ZVRva2Vuc1N0YWtlZCA9IFVGaXg2NCgwKQogICAgICAgIHNlbGYuZGVsZWdhdGVUb2tlbnNDb21taXR0ZWQgPSBVRml4NjQoMCkKICAgICAgICBzZWxmLmRlbGVnYXRlVG9rZW5zVW5zdGFraW5nID0gVUZpeDY0KDApCiAgICAgICAgc2VsZi5kZWxlZ2F0ZVRva2Vuc1Vuc3Rha2VkID0gVUZpeDY0KDApCiAgICAgICAgc2VsZi5kZWxlZ2F0ZVRva2Vuc1Jld2FyZGVkID0gVUZpeDY0KDApCiAgICAgICAgc2VsZi5kZWxlZ2F0ZVRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZSA9IFVGaXg2NCgwKQoKICAgICAgICBmb3Igbm9kZUluZm8gaW4gYWxsTm9kZUluZm8gewogICAgICAgICAgICBzZWxmLm5vZGVDb3VudCA9IHNlbGYubm9kZUNvdW50ICsgMQoKICAgICAgICAgICAgc2VsZi50b3RhbFRva2Vuc1N0YWtlZCA9IHNlbGYudG90YWxUb2tlbnNTdGFrZWQgKyBub2RlSW5mby50b2tlbnNTdGFrZWQKICAgICAgICAgICAgc2VsZi50b3RhbFRva2Vuc0NvbW1pdHRlZCA9IHNlbGYudG90YWxUb2tlbnNDb21taXR0ZWQgKyBub2RlSW5mby50b2tlbnNDb21taXR0ZWQKICAgICAgICAgICAgc2VsZi50b3RhbFRva2Vuc1Vuc3Rha2luZyA9IHNlbGYudG90YWxUb2tlbnNVbnN0YWtpbmcgKyBub2RlSW5mby50b2tlbnNVbnN0YWtpbmcKICAgICAgICAgICAgc2VsZi50b3RhbFRva2Vuc1Vuc3Rha2VkID0gc2VsZi50b3RhbFRva2Vuc1Vuc3Rha2VkICsgbm9kZUluZm8udG9rZW5zVW5zdGFrZWQKICAgICAgICAgICAgc2VsZi50b3RhbFRva2Vuc1Jld2FyZGVkID0gc2VsZi50b3RhbFRva2Vuc1Jld2FyZGVkICsgbm9kZUluZm8udG9rZW5zUmV3YXJkZWQKICAgICAgICAgICAgc2VsZi50b3RhbFRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZSA9IHNlbGYudG90YWxUb2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UgKyBub2RlSW5mby50b2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UKCiAgICAgICAgICAgIHNlbGYuc3Rha2VUb2tlbnNTdGFrZWQgPSBzZWxmLnN0YWtlVG9rZW5zU3Rha2VkICsgbm9kZUluZm8udG9rZW5zU3Rha2VkCiAgICAgICAgICAgIHNlbGYuc3Rha2VUb2tlbnNDb21taXR0ZWQgPSBzZWxmLnN0YWtlVG9rZW5zQ29tbWl0dGVkICsgbm9kZUluZm8udG9rZW5zQ29tbWl0dGVkCiAgICAgICAgICAgIHNlbGYuc3Rha2VUb2tlbnNVbnN0YWtpbmcgPSBzZWxmLnN0YWtlVG9rZW5zVW5zdGFraW5nICsgbm9kZUluZm8udG9rZW5zVW5zdGFraW5nCiAgICAgICAgICAgIHNlbGYuc3Rha2VUb2tlbnNVbnN0YWtlZCA9IHNlbGYuc3Rha2VUb2tlbnNVbnN0YWtlZCArIG5vZGVJbmZvLnRva2Vuc1Vuc3Rha2VkCiAgICAgICAgICAgIHNlbGYuc3Rha2VUb2tlbnNSZXdhcmRlZCA9IHNlbGYuc3Rha2VUb2tlbnNSZXdhcmRlZCArIG5vZGVJbmZvLnRva2Vuc1Jld2FyZGVkCiAgICAgICAgICAgIHNlbGYuc3Rha2VUb2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UgPSBzZWxmLnN0YWtlVG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlICsgbm9kZUluZm8udG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlCiAgICAgICAgfQoKICAgICAgICBmb3IgZGVsZWdhdGVJbmZvIGluIGFsbERlbGVnYXRlSW5mbyB7CiAgICAgICAgICAgIHNlbGYuZGVsZWdhdGVDb3VudCA9IHNlbGYuZGVsZWdhdGVDb3VudCArIDEKCiAgICAgICAgICAgIHNlbGYudG90YWxUb2tlbnNTdGFrZWQgPSBzZWxmLnRvdGFsVG9rZW5zU3Rha2VkICsgZGVsZWdhdGVJbmZvLnRva2Vuc1N0YWtlZAogICAgICAgICAgICBzZWxmLnRvdGFsVG9rZW5zQ29tbWl0dGVkID0gc2VsZi50b3RhbFRva2Vuc0NvbW1pdHRlZCArIGRlbGVnYXRlSW5mby50b2tlbnNDb21taXR0ZWQKICAgICAgICAgICAgc2VsZi50b3RhbFRva2Vuc1Vuc3Rha2luZyA9IHNlbGYudG90YWxUb2tlbnNVbnN0YWtpbmcgKyBkZWxlZ2F0ZUluZm8udG9rZW5zVW5zdGFraW5nCiAgICAgICAgICAgIHNlbGYudG90YWxUb2tlbnNVbnN0YWtlZCA9IHNlbGYudG90YWxUb2tlbnNVbnN0YWtlZCArIGRlbGVnYXRlSW5mby50b2tlbnNVbnN0YWtlZAogICAgICAgICAgICBzZWxmLnRvdGFsVG9rZW5zUmV3YXJkZWQgPSBzZWxmLnRvdGFsVG9rZW5zUmV3YXJkZWQgKyBkZWxlZ2F0ZUluZm8udG9rZW5zUmV3YXJkZWQKICAgICAgICAgICAgc2VsZi50b3RhbFRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZSA9IHNlbGYudG90YWxUb2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UgKyBkZWxlZ2F0ZUluZm8udG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlCgogICAgICAgICAgICBzZWxmLmRlbGVnYXRlVG9rZW5zU3Rha2VkID0gc2VsZi5kZWxlZ2F0ZVRva2Vuc1N0YWtlZCArIGRlbGVnYXRlSW5mby50b2tlbnNTdGFrZWQKICAgICAgICAgICAgc2VsZi5kZWxlZ2F0ZVRva2Vuc0NvbW1pdHRlZCA9IHNlbGYuZGVsZWdhdGVUb2tlbnNDb21taXR0ZWQgKyBkZWxlZ2F0ZUluZm8udG9rZW5zQ29tbWl0dGVkCiAgICAgICAgICAgIHNlbGYuZGVsZWdhdGVUb2tlbnNVbnN0YWtpbmcgPSBzZWxmLmRlbGVnYXRlVG9rZW5zVW5zdGFraW5nICsgZGVsZWdhdGVJbmZvLnRva2Vuc1Vuc3Rha2luZwogICAgICAgICAgICBzZWxmLmRlbGVnYXRlVG9rZW5zVW5zdGFrZWQgPSBzZWxmLmRlbGVnYXRlVG9rZW5zVW5zdGFrZWQgKyBkZWxlZ2F0ZUluZm8udG9rZW5zVW5zdGFrZWQKICAgICAgICAgICAgc2VsZi5kZWxlZ2F0ZVRva2Vuc1Jld2FyZGVkID0gc2VsZi5kZWxlZ2F0ZVRva2Vuc1Jld2FyZGVkICsgZGVsZWdhdGVJbmZvLnRva2Vuc1Jld2FyZGVkCiAgICAgICAgICAgIHNlbGYuZGVsZWdhdGVUb2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UgPSBzZWxmLmRlbGVnYXRlVG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlICsgZGVsZWdhdGVJbmZvLnRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZQogICAgICAgIH0KCiAgICB9Cn0KCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFjY291bnQ6IEFkZHJlc3MpOiBTdW1tYXJ5U3Rha2VEZWxlZ2F0ZUluZm8/IHsKICAgIGxldCBkb2VzQWNjb3VudEhhdmVTdGFraW5nQ29sbGVjdGlvbiA9IEZsb3dTdGFraW5nQ29sbGVjdGlvbi5kb2VzQWNjb3VudEhhdmVTdGFraW5nQ29sbGVjdGlvbihhZGRyZXNzOiBhY2NvdW50KQogICAgaWYgKCFkb2VzQWNjb3VudEhhdmVTdGFraW5nQ29sbGVjdGlvbikgewogICAgICAgIHJldHVybiBuaWwKICAgIH0KCiAgICBsZXQgYWxsTm9kZUluZm86IFtGbG93SURUYWJsZVN0YWtpbmcuTm9kZUluZm9dID0gRmxvd1N0YWtpbmdDb2xsZWN0aW9uLmdldEFsbE5vZGVJbmZvKGFkZHJlc3M6IGFjY291bnQpCiAgICBsZXQgYWxsRGVsZWdhdGVJbmZvOiBbRmxvd0lEVGFibGVTdGFraW5nLkRlbGVnYXRvckluZm9dID0gRmxvd1N0YWtpbmdDb2xsZWN0aW9uLmdldEFsbERlbGVnYXRvckluZm8oYWRkcmVzczogYWNjb3VudCkKCiAgICByZXR1cm4gU3VtbWFyeVN0YWtlRGVsZWdhdGVJbmZvKGFsbE5vZGVJbmZvOiBhbGxOb2RlSW5mbywgYWxsRGVsZWdhdGVJbmZvOiBhbGxEZWxlZ2F0ZUluZm8pCn0K",
          "getStakeInfo": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0U3Rha2VJbmZvIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgoKaW1wb3J0IEZsb3dTdGFraW5nQ29sbGVjdGlvbiBmcm9tIDB4OGQwZTg3YjY1MTU5YWU2MwoKaW1wb3J0IEZsb3dJRFRhYmxlU3Rha2luZyBmcm9tIDB4ODYyNGI1MmY5ZGRjZDA0YQoKaW1wb3J0IExvY2tlZFRva2VucyBmcm9tIDB4OGQwZTg3YjY1MTU5YWU2MwoKCmFjY2VzcyhhbGwpIHN0cnVjdCBTdGFrZUluZm8gewogICAgYWNjZXNzKGFsbCkgbGV0IGlkOiBTdHJpbmcKICAgIGFjY2VzcyhhbGwpIGxldCByb2xlOiBVSW50OAogICAgYWNjZXNzKGFsbCkgbGV0IG5ldHdvcmtpbmdBZGRyZXNzOiBTdHJpbmcKICAgIGFjY2VzcyhhbGwpIGxldCBuZXR3b3JraW5nS2V5OiBTdHJpbmcKICAgIGFjY2VzcyhhbGwpIGxldCBzdGFraW5nS2V5OiBTdHJpbmcKICAgIGFjY2VzcyhhbGwpIGxldCB0b2tlbnNTdGFrZWQ6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgbGV0IHRvdGFsVG9rZW5zU3Rha2VkOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIGxldCB0b2tlbnNDb21taXR0ZWQ6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgbGV0IHRva2Vuc1Vuc3Rha2luZzogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSBsZXQgdG9rZW5zVW5zdGFrZWQ6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgbGV0IHRva2Vuc1Jld2FyZGVkOiBVRml4NjQKCiAgICBhY2Nlc3MoYWxsKSBsZXQgZGVsZWdhdG9yc0NudDogSW50CiAgICBhY2Nlc3MoYWxsKSBsZXQgZGVsZWdhdG9ySURDb3VudGVyOiBVSW50MzIKICAgIGFjY2VzcyhhbGwpIGxldCB0b2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2U6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgbGV0IGluaXRpYWxXZWlnaHQ6IFVJbnQ2NAoKICAgIC8vIFByb2plY3RlZCBWYWx1ZXMKICAgIGFjY2VzcyhhbGwpIGxldCBub2RlSUQ6IFN0cmluZwogICAgYWNjZXNzKGFsbCkgbGV0IHVuc3Rha2FibGVUb2tlbnM6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgbGV0IHRva2Vuc0RlbGVnYXRlZDogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSBsZXQgcmVzdGFrYWJsZVVuc3Rha2VkVG9rZW5zOiBVRml4NjQKCiAgICBhY2Nlc3MoYWxsKSBsZXQgbWFjaGluZUFjY291bnRBZGRyZXNzOiBBZGRyZXNzPwogICAgYWNjZXNzKGFsbCkgbGV0IG1hY2hpbmVBY2NvdW50QmFsYW5jZTogVUZpeDY0PwoKICAgIGluaXQobm9kZUluZm86IEZsb3dJRFRhYmxlU3Rha2luZy5Ob2RlSW5mbywgbWFjaGluZUFjY291bnRJbmZvOiBGbG93U3Rha2luZ0NvbGxlY3Rpb24uTWFjaGluZUFjY291bnRJbmZvPykgewogICAgICAgIHNlbGYuaWQgPSBub2RlSW5mby5pZAogICAgICAgIHNlbGYucm9sZSA9IG5vZGVJbmZvLnJvbGUKICAgICAgICBzZWxmLm5ldHdvcmtpbmdBZGRyZXNzID0gbm9kZUluZm8ubmV0d29ya2luZ0FkZHJlc3MKICAgICAgICBzZWxmLm5ldHdvcmtpbmdLZXkgPSBub2RlSW5mby5uZXR3b3JraW5nS2V5CiAgICAgICAgc2VsZi5zdGFraW5nS2V5ID0gbm9kZUluZm8uc3Rha2luZ0tleQogICAgICAgIHNlbGYudG9rZW5zU3Rha2VkID0gbm9kZUluZm8udG9rZW5zU3Rha2VkCiAgICAgICAgc2VsZi50b3RhbFRva2Vuc1N0YWtlZCA9IG5vZGVJbmZvLnRvdGFsU3Rha2VkV2l0aERlbGVnYXRvcnMoKQogICAgICAgIHNlbGYudG9rZW5zQ29tbWl0dGVkID0gbm9kZUluZm8udG9rZW5zQ29tbWl0dGVkCiAgICAgICAgc2VsZi50b2tlbnNVbnN0YWtpbmcgPSBub2RlSW5mby50b2tlbnNVbnN0YWtpbmcKICAgICAgICBzZWxmLnRva2Vuc1Vuc3Rha2VkID0gbm9kZUluZm8udG9rZW5zVW5zdGFrZWQKICAgICAgICBzZWxmLnRva2Vuc1Jld2FyZGVkID0gbm9kZUluZm8udG9rZW5zUmV3YXJkZWQKCiAgICAgICAgc2VsZi5kZWxlZ2F0b3JzQ250ID0gbm9kZUluZm8uZGVsZWdhdG9ycy5sZW5ndGggCiAgICAgICAgc2VsZi5kZWxlZ2F0b3JJRENvdW50ZXIgPSBub2RlSW5mby5kZWxlZ2F0b3JJRENvdW50ZXIKICAgICAgICBzZWxmLnRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZSA9IG5vZGVJbmZvLnRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZQogICAgICAgIHNlbGYuaW5pdGlhbFdlaWdodCA9IG5vZGVJbmZvLmluaXRpYWxXZWlnaHQKCiAgICAgICAgLy8gUHJvamVjdGVkIFZhbHVlcwogICAgICAgIHNlbGYubm9kZUlEID0gbm9kZUluZm8uaWQKICAgICAgICBzZWxmLnVuc3Rha2FibGVUb2tlbnMgPSBzZWxmLnRva2Vuc1N0YWtlZCArIHNlbGYudG9rZW5zQ29tbWl0dGVkCiAgICAgICAgbGV0IG5vZGVTdGFrZWRCYWxhbmNlV2l0aERlbGVnYXRvcnMgPSBub2RlSW5mby50b3RhbFN0YWtlZFdpdGhEZWxlZ2F0b3JzKCkKICAgICAgICBzZWxmLnRva2Vuc0RlbGVnYXRlZCA9IG5vZGVTdGFrZWRCYWxhbmNlV2l0aERlbGVnYXRvcnMgLSBub2RlSW5mby50b2tlbnNTdGFrZWQKICAgICAgICBzZWxmLnJlc3Rha2FibGVVbnN0YWtlZFRva2VucyA9IHNlbGYudG9rZW5zVW5zdGFrZWQgKyBzZWxmLnRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZQoKICAgICAgICBpZiBsZXQgX21hY2hpbmVBY2NvdW50SW5mbyA9IG1hY2hpbmVBY2NvdW50SW5mbyB7CiAgICAgICAgICAgIGxldCBfbWFjaGluZUFjY291bnRBZGRyZXNzID0gX21hY2hpbmVBY2NvdW50SW5mby5nZXRBZGRyZXNzKCkKCiAgICAgICAgICAgIGxldCBtYWNoaW5lQWNjb3VudCA9IGdldEFjY291bnQoX21hY2hpbmVBY2NvdW50QWRkcmVzcykKCiAgICAgICAgICAgIHNlbGYubWFjaGluZUFjY291bnRBZGRyZXNzID0gX21hY2hpbmVBY2NvdW50QWRkcmVzcwogICAgICAgICAgICBzZWxmLm1hY2hpbmVBY2NvdW50QmFsYW5jZSA9IG1hY2hpbmVBY2NvdW50LmJhbGFuY2UKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBzZWxmLm1hY2hpbmVBY2NvdW50QWRkcmVzcyA9IG5pbAogICAgICAgICAgICBzZWxmLm1hY2hpbmVBY2NvdW50QmFsYW5jZSA9IG5pbAogICAgICAgIH0KICAgIH0KfQoKYWNjZXNzKGFsbCkgZnVuIG1haW4oYWNjb3VudDogQWRkcmVzcyk6IHtTdHJpbmc6IFN0YWtlSW5mb30/IHsKICAgIGxldCBkb2VzQWNjb3VudEhhdmVTdGFraW5nQ29sbGVjdGlvbiA9IEZsb3dTdGFraW5nQ29sbGVjdGlvbi5kb2VzQWNjb3VudEhhdmVTdGFraW5nQ29sbGVjdGlvbihhZGRyZXNzOiBhY2NvdW50KQogICAgaWYgKCFkb2VzQWNjb3VudEhhdmVTdGFraW5nQ29sbGVjdGlvbikgewogICAgICAgIHJldHVybiBuaWwKICAgIH0KCiAgICBsZXQgZm9ybWF0dGVkTm9kZUluZm86IHtTdHJpbmc6IFN0YWtlSW5mb30gPSB7fQogICAgbGV0IGFsbE5vZGVJbmZvOiBbRmxvd0lEVGFibGVTdGFraW5nLk5vZGVJbmZvXSA9IEZsb3dTdGFraW5nQ29sbGVjdGlvbi5nZXRBbGxOb2RlSW5mbyhhZGRyZXNzOiBhY2NvdW50KQogICAgbGV0IG1hY2hpbmVBY2NvdW50czoge1N0cmluZzogRmxvd1N0YWtpbmdDb2xsZWN0aW9uLk1hY2hpbmVBY2NvdW50SW5mb30gPSBGbG93U3Rha2luZ0NvbGxlY3Rpb24uZ2V0TWFjaGluZUFjY291bnRzKGFkZHJlc3M6IGFjY291bnQpCgogICAgZm9yIG5vZGVJbmZvIGluIGFsbE5vZGVJbmZvIHsKICAgICAgICBmb3JtYXR0ZWROb2RlSW5mb1tub2RlSW5mby5pZF0gPSBTdGFrZUluZm8obm9kZUluZm86IG5vZGVJbmZvLCBtYWNoaW5lQWNjb3VudEluZm86IG1hY2hpbmVBY2NvdW50c1tub2RlSW5mby5pZF0pCiAgICB9CgogICAgcmV0dXJuIGZvcm1hdHRlZE5vZGVJbmZvCn0K",
          "getStakingInfo": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0U3Rha2luZ0luZm8gLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBMb2NrZWRUb2tlbnMgZnJvbSAweDhkMGU4N2I2NTE1OWFlNjMKCmltcG9ydCBGbG93SURUYWJsZVN0YWtpbmcgZnJvbSAweDg2MjRiNTJmOWRkY2QwNGEKCmltcG9ydCBGbG93RXBvY2ggZnJvbSAweDg2MjRiNTJmOWRkY2QwNGEKCgphY2Nlc3MoYWxsKXN0cnVjdCBFcG9jaEluZm8gewogIGFjY2VzcyhhbGwpbGV0IGN1cnJlbnRFcG9jaENvdW50ZXI6IFVJbnQ2NAogIGFjY2VzcyhhbGwpbGV0IGN1cnJlbnRFcG9jaFBoYXNlOiBVSW50OAoKICBpbml0KAogICAgICBjdXJyZW50RXBvY2hDb3VudGVyOiBVSW50NjQsCiAgICAgIGN1cnJlbnRFcG9jaFBoYXNlOiBVSW50OAogICkgewogICAgICBzZWxmLmN1cnJlbnRFcG9jaENvdW50ZXIgPSBjdXJyZW50RXBvY2hDb3VudGVyCiAgICAgIHNlbGYuY3VycmVudEVwb2NoUGhhc2UgPSBjdXJyZW50RXBvY2hQaGFzZQogIH0KfQoKYWNjZXNzKGFsbClzdHJ1Y3QgUmVzdWx0IHsKICBhY2Nlc3MoYWxsKWxldCBzdGFraW5nSW5mbzogU3Rha2luZ0luZm8/CgogIGluaXQoc3Rha2luZ0luZm86IFN0YWtpbmdJbmZvPykgewogICAgc2VsZi5zdGFraW5nSW5mbyA9IHN0YWtpbmdJbmZvCiAgfQp9CgphY2Nlc3MoYWxsKXN0cnVjdCBTdGFraW5nSW5mbyB7CiAgYWNjZXNzKGFsbClsZXQgZXBvY2hJbmZvOiBFcG9jaEluZm8KICBhY2Nlc3MoYWxsKWxldCBsb2NrZWRBZGRyZXNzOiBBZGRyZXNzICAgCiAgYWNjZXNzKGFsbClsZXQgbG9ja2VkQmFsYW5jZTogVUZpeDY0CiAgYWNjZXNzKGFsbClsZXQgdW5sb2NrTGltaXQ6IFVGaXg2NAogIGFjY2VzcyhhbGwpbGV0IG5vZGVJbmZvOiBOb2RlSW5mbz8KICBhY2Nlc3MoYWxsKWxldCBkZWxlZ2F0b3JOb2RlSW5mbzogTm9kZUluZm8/CiAgYWNjZXNzKGFsbClsZXQgZGVsZWdhdG9ySW5mbzogRGVsZWdhdG9ySW5mbz8KCiAgaW5pdCgKICAgIGVwb2NoSW5mbzogRXBvY2hJbmZvLAogICAgbG9ja2VkQWRkcmVzczogQWRkcmVzcywKICAgIGxvY2tlZEJhbGFuY2U6IFVGaXg2NCwKICAgIHVubG9ja0xpbWl0OiBVRml4NjQsCiAgICBub2RlSW5mbzogTm9kZUluZm8/LAogICAgZGVsZWdhdG9yTm9kZUluZm86IE5vZGVJbmZvPywKICAgIGRlbGVnYXRvckluZm86IERlbGVnYXRvckluZm8/LAogICkgewogICAgc2VsZi5lcG9jaEluZm8gPSBlcG9jaEluZm8KICAgIHNlbGYubG9ja2VkQWRkcmVzcyA9IGxvY2tlZEFkZHJlc3MKICAgIHNlbGYubG9ja2VkQmFsYW5jZSA9IGxvY2tlZEJhbGFuY2UKICAgIHNlbGYudW5sb2NrTGltaXQgPSB1bmxvY2tMaW1pdAogICAgc2VsZi5ub2RlSW5mbyA9IG5vZGVJbmZvCiAgICBzZWxmLmRlbGVnYXRvck5vZGVJbmZvID0gZGVsZWdhdG9yTm9kZUluZm8KICAgIHNlbGYuZGVsZWdhdG9ySW5mbyA9IGRlbGVnYXRvckluZm8KICB9Cn0KCmFjY2VzcyhhbGwpc3RydWN0IE5vZGVJbmZvIHsKICBhY2Nlc3MoYWxsKWxldCBpZDogU3RyaW5nCiAgYWNjZXNzKGFsbClsZXQgbmV0d29ya2luZ0FkZHJlc3M6IFN0cmluZwogIGFjY2VzcyhhbGwpbGV0IHJvbGU6IFVJbnQ4CiAgYWNjZXNzKGFsbClsZXQgdG9rZW5zU3Rha2VkOiBVRml4NjQKICBhY2Nlc3MoYWxsKWxldCB0b2tlbnNDb21taXR0ZWQ6IFVGaXg2NAogIGFjY2VzcyhhbGwpbGV0IHRva2Vuc1Vuc3Rha2luZzogVUZpeDY0CiAgYWNjZXNzKGFsbClsZXQgdG9rZW5zVW5zdGFrZWQ6IFVGaXg2NAogIGFjY2VzcyhhbGwpbGV0IHRva2Vuc1Jld2FyZGVkOiBVRml4NjQKICAKICBhY2Nlc3MoYWxsKWxldCBkZWxlZ2F0b3JJRENvdW50ZXI6IFVJbnQzMgogIGFjY2VzcyhhbGwpbGV0IHRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZTogVUZpeDY0CiAgYWNjZXNzKGFsbClsZXQgaW5pdGlhbFdlaWdodDogVUludDY0CgogIGluaXQobm9kZUlEOiBTdHJpbmcpIHsKICAgIGxldCBub2RlSW5mbyA9IEZsb3dJRFRhYmxlU3Rha2luZy5Ob2RlSW5mbyhub2RlSUQ6IG5vZGVJRCkgCgogICAgc2VsZi5pZCA9IG5vZGVJbmZvLmlkCiAgICBzZWxmLm5ldHdvcmtpbmdBZGRyZXNzID0gbm9kZUluZm8ubmV0d29ya2luZ0FkZHJlc3MKICAgIHNlbGYucm9sZSA9IG5vZGVJbmZvLnJvbGUKICAgIHNlbGYudG9rZW5zU3Rha2VkID0gbm9kZUluZm8udG9rZW5zU3Rha2VkCiAgICBzZWxmLnRva2Vuc0NvbW1pdHRlZCA9IG5vZGVJbmZvLnRva2Vuc0NvbW1pdHRlZAogICAgc2VsZi50b2tlbnNVbnN0YWtpbmcgPSBub2RlSW5mby50b2tlbnNVbnN0YWtpbmcKICAgIHNlbGYudG9rZW5zVW5zdGFrZWQgPSBub2RlSW5mby50b2tlbnNVbnN0YWtlZAogICAgc2VsZi50b2tlbnNSZXdhcmRlZCA9IG5vZGVJbmZvLnRva2Vuc1Jld2FyZGVkCiAgICBzZWxmLmRlbGVnYXRvcklEQ291bnRlciA9IG5vZGVJbmZvLmRlbGVnYXRvcklEQ291bnRlcgogICAgc2VsZi50b2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UgPSBub2RlSW5mby50b2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UKICAgIHNlbGYuaW5pdGlhbFdlaWdodCA9IG5vZGVJbmZvLmluaXRpYWxXZWlnaHQKICB9Cn0KCmFjY2VzcyhhbGwpc3RydWN0IERlbGVnYXRvckluZm8gewogIGFjY2VzcyhhbGwpbGV0IGlkOiBVSW50MzIKICBhY2Nlc3MoYWxsKWxldCBub2RlSUQ6IFN0cmluZwogIGFjY2VzcyhhbGwpbGV0IHRva2Vuc0NvbW1pdHRlZDogVUZpeDY0CiAgYWNjZXNzKGFsbClsZXQgdG9rZW5zU3Rha2VkOiBVRml4NjQKICBhY2Nlc3MoYWxsKWxldCB0b2tlbnNVbnN0YWtpbmc6IFVGaXg2NAogIGFjY2VzcyhhbGwpbGV0IHRva2Vuc1Jld2FyZGVkOiBVRml4NjQKICBhY2Nlc3MoYWxsKWxldCB0b2tlbnNVbnN0YWtlZDogVUZpeDY0CiAgYWNjZXNzKGFsbClsZXQgdG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlOiBVRml4NjQKCiAgaW5pdChub2RlSUQ6IFN0cmluZywgZGVsZWdhdG9ySUQ6IFVJbnQzMikgewogICAgbGV0IGRlbGVnYXRvckluZm8gPSBGbG93SURUYWJsZVN0YWtpbmcuRGVsZWdhdG9ySW5mbyhub2RlSUQ6IG5vZGVJRCwgZGVsZWdhdG9ySUQ6IGRlbGVnYXRvcklEKQoKICAgIHNlbGYuaWQgPSBkZWxlZ2F0b3JJbmZvLmlkCiAgICBzZWxmLm5vZGVJRCA9IGRlbGVnYXRvckluZm8ubm9kZUlECiAgICBzZWxmLnRva2Vuc0NvbW1pdHRlZCA9IGRlbGVnYXRvckluZm8udG9rZW5zQ29tbWl0dGVkCiAgICBzZWxmLnRva2Vuc1N0YWtlZCA9IGRlbGVnYXRvckluZm8udG9rZW5zU3Rha2VkCiAgICBzZWxmLnRva2Vuc1Vuc3Rha2luZyA9IGRlbGVnYXRvckluZm8udG9rZW5zVW5zdGFraW5nCiAgICBzZWxmLnRva2Vuc1Jld2FyZGVkID0gZGVsZWdhdG9ySW5mby50b2tlbnNSZXdhcmRlZAogICAgc2VsZi50b2tlbnNVbnN0YWtlZCA9IGRlbGVnYXRvckluZm8udG9rZW5zVW5zdGFrZWQKICAgIHNlbGYudG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlID0gZGVsZWdhdG9ySW5mby50b2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UKICB9Cn0KCmFjY2VzcyhhbGwpZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcyk6IFJlc3VsdCB7CiAgbGV0IHRva2VuSG9sZGVyUmVmID0gCiAgICAgIGdldEF1dGhBY2NvdW50KGFkZHJlc3MpCiAgICAgICAgICAuYm9ycm93PCZMb2NrZWRUb2tlbnMuVG9rZW5Ib2xkZXI+KGZyb206IExvY2tlZFRva2Vucy5Ub2tlbkhvbGRlclN0b3JhZ2VQYXRoKQoKICB2YXIgc3Rha2luZ0luZm86IFN0YWtpbmdJbmZvPyA9IG5pbAogIGlmIGxldCB0b2tlbkhvbGRlciA9IHRva2VuSG9sZGVyUmVmIHsKICAgIGxldCBsb2NrZWRBZGRyZXNzID0gdG9rZW5Ib2xkZXIuZ2V0TG9ja2VkQWNjb3VudEFkZHJlc3MoKSAgICAgICAKICAgIGxldCBsb2NrZWRCYWxhbmNlID0gdG9rZW5Ib2xkZXIuZ2V0TG9ja2VkQWNjb3VudEJhbGFuY2UoKQogICAgbGV0IHVubG9ja0xpbWl0ID0gdG9rZW5Ib2xkZXIuZ2V0VW5sb2NrTGltaXQoKQogICAgCiAgICB2YXIgbm9kZUluZm86IE5vZGVJbmZvPyA9IG5pbAogICAgaWYgbGV0IG5vZGVJRCA9IHRva2VuSG9sZGVyLmdldE5vZGVJRCgpIHsKICAgICAgbm9kZUluZm8gPSBOb2RlSW5mbyhub2RlSUQ6IG5vZGVJRCkKICAgIH0KCiAgICB2YXIgZGVsZWdhdG9yTm9kZUluZm86IE5vZGVJbmZvPyA9IG5pbAogICAgdmFyIGRlbGVnYXRvckluZm86IERlbGVnYXRvckluZm8/ID0gbmlsCiAgICBpZiBsZXQgZGVsZWdhdG9yTm9kZUlEID0gdG9rZW5Ib2xkZXIuZ2V0RGVsZWdhdG9yTm9kZUlEKCkgewogICAgICBpZiBsZXQgZGVsZWdhdG9ySUQgPSB0b2tlbkhvbGRlci5nZXREZWxlZ2F0b3JJRCgpIHsKICAgICAgICBkZWxlZ2F0b3JOb2RlSW5mbyA9IE5vZGVJbmZvKG5vZGVJRDogZGVsZWdhdG9yTm9kZUlEKQogICAgICAgIGRlbGVnYXRvckluZm8gPSBEZWxlZ2F0b3JJbmZvKG5vZGVJRDogZGVsZWdhdG9yTm9kZUlELCBkZWxlZ2F0b3JJRDogZGVsZWdhdG9ySUQpCiAgICAgIH0gCiAgICB9IAoKICAgIGxldCBlcG9jaEluZm86IEVwb2NoSW5mbyA9IEVwb2NoSW5mbygKICAgICAgY3VycmVudEVwb2NoQ291bnRlcjogRmxvd0Vwb2NoLmN1cnJlbnRFcG9jaENvdW50ZXIsCiAgICAgIGN1cnJlbnRFcG9jaFBoYXNlOiBGbG93RXBvY2guY3VycmVudEVwb2NoUGhhc2UucmF3VmFsdWUKICAgICkKCiAgICBzdGFraW5nSW5mbyA9IFN0YWtpbmdJbmZvKAogICAgICBlcG9jaEluZm86IGVwb2NoSW5mbywKICAgICAgbG9ja2VkQWRkcmVzczogbG9ja2VkQWRkcmVzcywKICAgICAgbG9ja2VkQmFsYW5jZTogbG9ja2VkQmFsYW5jZSwKICAgICAgdW5sb2NrTGltaXQ6IHVubG9ja0xpbWl0LAogICAgICBub2RlSW5mbzogbm9kZUluZm8sCiAgICAgIGRlbGVnYXRvck5vZGVJbmZvOiBkZWxlZ2F0b3JOb2RlSW5mbywKICAgICAgZGVsZWdhdG9ySW5mbzogZGVsZWdhdG9ySW5mbyAKICAgICkKICB9CgogIHJldHVybiBSZXN1bHQoc3Rha2luZ0luZm86IHN0YWtpbmdJbmZvKQp9",
          "restakeReward": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgcmVzdGFrZVJld2FyZCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKIGltcG9ydCBGbG93U3Rha2luZ0NvbGxlY3Rpb24gZnJvbSAweDhkMGU4N2I2NTE1OWFlNjMKCgovLy8gQ29tbWl0cyByZXdhcmRlZCB0b2tlbnMgdG8gc3Rha2UgZm9yIHRoZSBzcGVjaWZpZWQgbm9kZSBvciBkZWxlZ2F0b3IgaW4gdGhlIHN0YWtpbmcgY29sbGVjdGlvbgoKdHJhbnNhY3Rpb24obm9kZUlEOiBTdHJpbmcsIGRlbGVnYXRvcklEOiBVSW50MzI/LCBhbW91bnQ6IFVGaXg2NCkgewogICAgCiAgICBsZXQgc3Rha2luZ0NvbGxlY3Rpb25SZWY6IGF1dGgoRmxvd1N0YWtpbmdDb2xsZWN0aW9uLkNvbGxlY3Rpb25Pd25lcikgJkZsb3dTdGFraW5nQ29sbGVjdGlvbi5TdGFraW5nQ29sbGVjdGlvbgoKICAgIHByZXBhcmUoYWNjb3VudDogYXV0aChCb3Jyb3dWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICBzZWxmLnN0YWtpbmdDb2xsZWN0aW9uUmVmID0gYWNjb3VudC5zdG9yYWdlLmJvcnJvdzxhdXRoKEZsb3dTdGFraW5nQ29sbGVjdGlvbi5Db2xsZWN0aW9uT3duZXIpICZGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb24+KGZyb206IEZsb3dTdGFraW5nQ29sbGVjdGlvbi5TdGFraW5nQ29sbGVjdGlvblN0b3JhZ2VQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBhIHJlZmVyZW5jZSB0byBhIFN0YWtpbmdDb2xsZWN0aW9uIGluIHRoZSBwcmltYXJ5IHVzZXIncyBhY2NvdW50IikKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICBzZWxmLnN0YWtpbmdDb2xsZWN0aW9uUmVmLnN0YWtlUmV3YXJkZWRUb2tlbnMobm9kZUlEOiBub2RlSUQsIGRlbGVnYXRvcklEOiBkZWxlZ2F0b3JJRCwgYW1vdW50OiBhbW91bnQpCiAgICB9Cn0=",
          "restakeUnstaked": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgcmVzdGFrZVVuc3Rha2VkIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRmxvd1N0YWtpbmdDb2xsZWN0aW9uIGZyb20gMHg4ZDBlODdiNjUxNTlhZTYzCgoKLy8vIENvbW1pdHMgdW5zdGFrZWQgdG9rZW5zIHRvIHN0YWtlIGZvciB0aGUgc3BlY2lmaWVkIG5vZGUgb3IgZGVsZWdhdG9yIGluIHRoZSBzdGFraW5nIGNvbGxlY3Rpb24KCnRyYW5zYWN0aW9uKG5vZGVJRDogU3RyaW5nLCBkZWxlZ2F0b3JJRDogVUludDMyPywgYW1vdW50OiBVRml4NjQpIHsKICAgIAogICAgbGV0IHN0YWtpbmdDb2xsZWN0aW9uUmVmOiBhdXRoKEZsb3dTdGFraW5nQ29sbGVjdGlvbi5Db2xsZWN0aW9uT3duZXIpICZGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb24KCiAgICBwcmVwYXJlKGFjY291bnQ6IGF1dGgoQm9ycm93VmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgc2VsZi5zdGFraW5nQ29sbGVjdGlvblJlZiA9IGFjY291bnQuc3RvcmFnZS5ib3Jyb3c8YXV0aChGbG93U3Rha2luZ0NvbGxlY3Rpb24uQ29sbGVjdGlvbk93bmVyKSAmRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uPihmcm9tOiBGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb25TdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgYSByZWZlcmVuY2UgdG8gYSBTdGFraW5nQ29sbGVjdGlvbiBpbiB0aGUgcHJpbWFyeSB1c2VyJ3MgYWNjb3VudCIpCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgc2VsZi5zdGFraW5nQ29sbGVjdGlvblJlZi5zdGFrZVVuc3Rha2VkVG9rZW5zKG5vZGVJRDogbm9kZUlELCBkZWxlZ2F0b3JJRDogZGVsZWdhdG9ySUQsIGFtb3VudDogYW1vdW50KQogICAgfQp9",
          "setup": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgc2V0dXAgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhmMjMzZGNlZTg4ZmUwYWJlCgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHgxNjU0NjUzMzk5MDQwYTYxCgppbXBvcnQgTG9ja2VkVG9rZW5zIGZyb20gMHg4ZDBlODdiNjUxNTlhZTYzCgppbXBvcnQgRmxvd0lEVGFibGVTdGFraW5nIGZyb20gMHg4NjI0YjUyZjlkZGNkMDRhCgppbXBvcnQgRmxvd1N0YWtpbmdDb2xsZWN0aW9uIGZyb20gMHg4ZDBlODdiNjUxNTlhZTYzCgoKLy8vIFRoaXMgdHJhbnNhY3Rpb24gc2V0cyB1cCBhbiBhY2NvdW50IHRvIHVzZSBhIHN0YWtpbmcgY29sbGVjdGlvbgovLy8gSXQgd2lsbCB3b3JrIHJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGV5IGhhdmUgYSByZWd1bGFyIGFjY291bnQsIGEgdHdvLWFjY291bnQgbG9ja2VkIHRva2VucyBzZXR1cCwKLy8vIG9yIHN0YWtpbmcgb2JqZWN0cyBzdG9yZWQgaW4gdGhlIHVubG9ja2VkIGFjY291bnQKCnRyYW5zYWN0aW9uIHsKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKEJvcnJvd1ZhbHVlLCBTdG9yYWdlLCBDYXBhYmlsaXRpZXMpICZBY2NvdW50KSB7CgogICAgICAgIC8vIElmIHRoZXJlIGlzbid0IGFscmVhZHkgYSBzdGFraW5nIGNvbGxlY3Rpb24KICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8JkZsb3dTdGFraW5nQ29sbGVjdGlvbi5TdGFraW5nQ29sbGVjdGlvbj4oZnJvbTogRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uU3RvcmFnZVBhdGgpID09IG5pbCB7CgogICAgICAgICAgICAvLyBDcmVhdGUgcHJpdmF0ZSBjYXBhYmlsaXRpZXMgZm9yIHRoZSB0b2tlbiBob2xkZXIgYW5kIHVubG9ja2VkIHZhdWx0CiAgICAgICAgICAgIGxldCBsb2NrZWRIb2xkZXIgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3LCBMb2NrZWRUb2tlbnMuVG9rZW5PcGVyYXRpb25zKSAmTG9ja2VkVG9rZW5zLlRva2VuSG9sZGVyPihMb2NrZWRUb2tlbnMuVG9rZW5Ib2xkZXJTdG9yYWdlUGF0aCkhCiAgICAgICAgICAgIGxldCBmbG93VG9rZW4gPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAmRmxvd1Rva2VuLlZhdWx0Pigvc3RvcmFnZS9mbG93VG9rZW5WYXVsdCkhCgogICAgICAgICAgICAvLyBDcmVhdGUgYSBuZXcgU3Rha2luZyBDb2xsZWN0aW9uIGFuZCBwdXQgaXQgaW4gc3RvcmFnZQogICAgICAgICAgICBpZiBsb2NrZWRIb2xkZXIuY2hlY2soKSB7CiAgICAgICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKAogICAgICAgICAgICAgICAgICAgIDwtIEZsb3dTdGFraW5nQ29sbGVjdGlvbi5jcmVhdGVTdGFraW5nQ29sbGVjdGlvbigKICAgICAgICAgICAgICAgICAgICAgICAgdW5sb2NrZWRWYXVsdDogZmxvd1Rva2VuLAogICAgICAgICAgICAgICAgICAgICAgICB0b2tlbkhvbGRlcjogbG9ja2VkSG9sZGVyCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICB0bzogRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uU3RvcmFnZVBhdGgKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUoCiAgICAgICAgICAgICAgICAgICAgPC0gRmxvd1N0YWtpbmdDb2xsZWN0aW9uLmNyZWF0ZVN0YWtpbmdDb2xsZWN0aW9uKAogICAgICAgICAgICAgICAgICAgICAgICB1bmxvY2tlZFZhdWx0OiBmbG93VG9rZW4sCiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuSG9sZGVyOiBuaWwKICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIHRvOiBGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb25TdG9yYWdlUGF0aAogICAgICAgICAgICAgICAgKQogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBQdWJsaXNoIGEgY2FwYWJpbGl0eSB0byB0aGUgY3JlYXRlZCBzdGFraW5nIGNvbGxlY3Rpb24uCiAgICAgICAgICAgIGxldCBzdGFraW5nQ29sbGVjdGlvbkNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwmRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uPigKICAgICAgICAgICAgICAgIEZsb3dTdGFraW5nQ29sbGVjdGlvbi5TdGFraW5nQ29sbGVjdGlvblN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkKCiAgICAgICAgICAgIHNpZ25lci5jYXBhYmlsaXRpZXMucHVibGlzaCgKICAgICAgICAgICAgICAgIHN0YWtpbmdDb2xsZWN0aW9uQ2FwLAogICAgICAgICAgICAgICAgYXQ6IEZsb3dTdGFraW5nQ29sbGVjdGlvbi5TdGFraW5nQ29sbGVjdGlvblB1YmxpY1BhdGgKICAgICAgICAgICAgKQogICAgICAgIH0KCiAgICAgICAgLy8gYm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBzdGFraW5nIGNvbGxlY3Rpb24KICAgICAgICBsZXQgY29sbGVjdGlvblJlZiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzwmRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uPihmcm9tOiBGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb25TdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgc3Rha2luZyBjb2xsZWN0aW9uIHJlZmVyZW5jZSIpCgogICAgICAgIC8vIElmIHRoZXJlIGlzIGEgbm9kZSBzdGFrZXIgb2JqZWN0IGluIHRoZSBhY2NvdW50LCBwdXQgaXQgaW4gdGhlIHN0YWtpbmcgY29sbGVjdGlvbgogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLmJvcnJvdzwmRmxvd0lEVGFibGVTdGFraW5nLk5vZGVTdGFrZXI+KGZyb206IEZsb3dJRFRhYmxlU3Rha2luZy5Ob2RlU3Rha2VyU3RvcmFnZVBhdGgpICE9IG5pbCB7CiAgICAgICAgICAgIGxldCBub2RlIDwtIHNpZ25lci5zdG9yYWdlLmxvYWQ8QEZsb3dJRFRhYmxlU3Rha2luZy5Ob2RlU3Rha2VyPihmcm9tOiBGbG93SURUYWJsZVN0YWtpbmcuTm9kZVN0YWtlclN0b3JhZ2VQYXRoKSEKICAgICAgICAgICAgY29sbGVjdGlvblJlZi5hZGROb2RlT2JqZWN0KDwtbm9kZSwgbWFjaGluZUFjY291bnRJbmZvOiBuaWwpCiAgICAgICAgfQoKICAgICAgICAvLyBJZiB0aGVyZSBpcyBhIGRlbGVnYXRvciBvYmplY3QgaW4gdGhlIGFjY291bnQsIHB1dCBpdCBpbiB0aGUgc3Rha2luZyBjb2xsZWN0aW9uCiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UuYm9ycm93PCZGbG93SURUYWJsZVN0YWtpbmcuTm9kZURlbGVnYXRvcj4oZnJvbTogRmxvd0lEVGFibGVTdGFraW5nLkRlbGVnYXRvclN0b3JhZ2VQYXRoKSAhPSBuaWwgewogICAgICAgICAgICBsZXQgZGVsZWdhdG9yIDwtIHNpZ25lci5zdG9yYWdlLmxvYWQ8QEZsb3dJRFRhYmxlU3Rha2luZy5Ob2RlRGVsZWdhdG9yPihmcm9tOiBGbG93SURUYWJsZVN0YWtpbmcuRGVsZWdhdG9yU3RvcmFnZVBhdGgpIQogICAgICAgICAgICBjb2xsZWN0aW9uUmVmLmFkZERlbGVnYXRvck9iamVjdCg8LWRlbGVnYXRvcikKICAgICAgICB9CiAgICB9Cn0=",
          "unstake": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgdW5zdGFrZSAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKIGltcG9ydCBGbG93U3Rha2luZ0NvbGxlY3Rpb24gZnJvbSAweDhkMGU4N2I2NTE1OWFlNjMKCgovLy8gUmVxdWVzdHMgdW5zdGFraW5nIGZvciB0aGUgc3BlY2lmaWVkIG5vZGUgb3IgZGVsZWdhdG9yIGluIHRoZSBzdGFraW5nIGNvbGxlY3Rpb24KCnRyYW5zYWN0aW9uKG5vZGVJRDogU3RyaW5nLCBkZWxlZ2F0b3JJRDogVUludDMyPywgYW1vdW50OiBVRml4NjQpIHsKICAgIAogICAgbGV0IHN0YWtpbmdDb2xsZWN0aW9uUmVmOiBhdXRoKEZsb3dTdGFraW5nQ29sbGVjdGlvbi5Db2xsZWN0aW9uT3duZXIpICZGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb24KCiAgICBwcmVwYXJlKGFjY291bnQ6IGF1dGgoQm9ycm93VmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgc2VsZi5zdGFraW5nQ29sbGVjdGlvblJlZiA9IGFjY291bnQuc3RvcmFnZS5ib3Jyb3c8YXV0aChGbG93U3Rha2luZ0NvbGxlY3Rpb24uQ29sbGVjdGlvbk93bmVyKSAmRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uPihmcm9tOiBGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb25TdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgYSByZWZlcmVuY2UgdG8gYSBTdGFraW5nQ29sbGVjdGlvbiBpbiB0aGUgcHJpbWFyeSB1c2VyJ3MgYWNjb3VudCIpCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgc2VsZi5zdGFraW5nQ29sbGVjdGlvblJlZi5yZXF1ZXN0VW5zdGFraW5nKG5vZGVJRDogbm9kZUlELCBkZWxlZ2F0b3JJRDogZGVsZWdhdG9ySUQsIGFtb3VudDogYW1vdW50KQogICAgfQp9",
          "withdrawLocked": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgd2l0aGRyYXdMb2NrZWQgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhGVU5HSUJMRVRPS0VOQUREUkVTUwppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHhGTE9XVE9LRU5BRERSRVNTCmltcG9ydCBMb2NrZWRUb2tlbnMgZnJvbSAweExPQ0tFRFRPS0VOQUREUkVTUwoKdHJhbnNhY3Rpb24oYW1vdW50OiBVRml4NjQpIHsKCiAgICBsZXQgaG9sZGVyUmVmOiBhdXRoKExvY2tlZFRva2Vucy5Ub2tlbk9wZXJhdGlvbnMsIEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZMb2NrZWRUb2tlbnMuVG9rZW5Ib2xkZXIKICAgIGxldCB2YXVsdFJlZjogYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAmRmxvd1Rva2VuLlZhdWx0CgogICAgcHJlcGFyZShhY2N0OiBhdXRoKEJvcnJvd1ZhbHVlKSAmQWNjb3VudCkgewogICAgICAgIHNlbGYuaG9sZGVyUmVmID0gYWNjdC5zdG9yYWdlLmJvcnJvdzxhdXRoKExvY2tlZFRva2Vucy5Ub2tlbk9wZXJhdGlvbnMsIEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZMb2NrZWRUb2tlbnMuVG9rZW5Ib2xkZXI+KGZyb206IExvY2tlZFRva2Vucy5Ub2tlbkhvbGRlclN0b3JhZ2VQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygiVGhlIHByaW1hcnkgdXNlciBhY2NvdW50IGRvZXMgbm90IGhhdmUgYW4gYXNzb2NpYXRlZCBsb2NrZWQgYWNjb3VudCIpCgogICAgICAgIHNlbGYudmF1bHRSZWYgPSBhY2N0LnN0b3JhZ2UuYm9ycm93PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJkZsb3dUb2tlbi5WYXVsdD4oZnJvbTogL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IGZsb3cgdG9rZW4gdmF1bHQgcmVmIikKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICBzZWxmLnZhdWx0UmVmLmRlcG9zaXQoZnJvbTogPC1zZWxmLmhvbGRlclJlZi53aXRoZHJhdyhhbW91bnQ6IGFtb3VudCkpCiAgICB9Cn0=",
          "withdrawReward": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgd2l0aGRyYXdSZXdhcmQgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGbG93U3Rha2luZ0NvbGxlY3Rpb24gZnJvbSAweDhkMGU4N2I2NTE1OWFlNjMKCgovLy8gUmVxdWVzdCB0byB3aXRoZHJhdyByZXdhcmRlZCB0b2tlbnMgZm9yIHRoZSBzcGVjaWZpZWQgbm9kZSBvciBkZWxlZ2F0b3IgaW4gdGhlIHN0YWtpbmcgY29sbGVjdGlvbgovLy8gVGhlIHRva2VucyBhcmUgYXV0b21hdGljYWxseSBkZXBvc2l0ZWQgdG8gdGhlIHVubG9ja2VkIGFjY291bnQgdmF1bHQgZmlyc3QsCi8vLyBBbmQgdGhlbiBhbnkgbG9ja2VkIHRva2VucyBhcmUgZGVwb3NpdGVkIGludG8gdGhlIGxvY2tlZCBhY2NvdW50IHZhdWx0Cgp0cmFuc2FjdGlvbihub2RlSUQ6IFN0cmluZywgZGVsZWdhdG9ySUQ6IFVJbnQzMj8sIGFtb3VudDogVUZpeDY0KSB7CiAgICAKICAgIGxldCBzdGFraW5nQ29sbGVjdGlvblJlZjogYXV0aChGbG93U3Rha2luZ0NvbGxlY3Rpb24uQ29sbGVjdGlvbk93bmVyKSAmRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uCgogICAgcHJlcGFyZShhY2NvdW50OiBhdXRoKEJvcnJvd1ZhbHVlKSAmQWNjb3VudCkgewogICAgICAgIHNlbGYuc3Rha2luZ0NvbGxlY3Rpb25SZWYgPSBhY2NvdW50LnN0b3JhZ2UuYm9ycm93PGF1dGgoRmxvd1N0YWtpbmdDb2xsZWN0aW9uLkNvbGxlY3Rpb25Pd25lcikgJkZsb3dTdGFraW5nQ29sbGVjdGlvbi5TdGFraW5nQ29sbGVjdGlvbj4oZnJvbTogRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uU3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IGEgcmVmZXJlbmNlIHRvIGEgU3Rha2luZ0NvbGxlY3Rpb24gaW4gdGhlIHByaW1hcnkgdXNlcidzIGFjY291bnQiKQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIHNlbGYuc3Rha2luZ0NvbGxlY3Rpb25SZWYud2l0aGRyYXdSZXdhcmRlZFRva2Vucyhub2RlSUQ6IG5vZGVJRCwgZGVsZWdhdG9ySUQ6IGRlbGVnYXRvcklELCBhbW91bnQ6IGFtb3VudCkKICAgIH0KfQ==",
          "withdrawUnstaked": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgd2l0aGRyYXdVbnN0YWtlZCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKIGltcG9ydCBGbG93U3Rha2luZ0NvbGxlY3Rpb24gZnJvbSAweDhkMGU4N2I2NTE1OWFlNjMKCgovLy8gUmVxdWVzdCB0byB3aXRoZHJhdyB1bnN0YWtlZCB0b2tlbnMgZm9yIHRoZSBzcGVjaWZpZWQgbm9kZSBvciBkZWxlZ2F0b3IgaW4gdGhlIHN0YWtpbmcgY29sbGVjdGlvbgovLy8gVGhlIHRva2VucyBhcmUgYXV0b21hdGljYWxseSBkZXBvc2l0ZWQgdG8gdGhlIHVubG9ja2VkIGFjY291bnQgdmF1bHQgZmlyc3QsCi8vLyBBbmQgdGhlbiBhbnkgbG9ja2VkIHRva2VucyBhcmUgZGVwb3NpdGVkIGludG8gdGhlIGxvY2tlZCBhY2NvdW50IHZhdWx0IGlmIGl0IGlzIHRoZXJlCgp0cmFuc2FjdGlvbihub2RlSUQ6IFN0cmluZywgZGVsZWdhdG9ySUQ6IFVJbnQzMj8sIGFtb3VudDogVUZpeDY0KSB7CiAgICAKICAgIGxldCBzdGFraW5nQ29sbGVjdGlvblJlZjogYXV0aChGbG93U3Rha2luZ0NvbGxlY3Rpb24uQ29sbGVjdGlvbk93bmVyKSAmRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uCgogICAgcHJlcGFyZShhY2NvdW50OiBhdXRoKEJvcnJvd1ZhbHVlKSAmQWNjb3VudCkgewogICAgICAgIHNlbGYuc3Rha2luZ0NvbGxlY3Rpb25SZWYgPSBhY2NvdW50LnN0b3JhZ2UuYm9ycm93PGF1dGgoRmxvd1N0YWtpbmdDb2xsZWN0aW9uLkNvbGxlY3Rpb25Pd25lcikgJkZsb3dTdGFraW5nQ29sbGVjdGlvbi5TdGFraW5nQ29sbGVjdGlvbj4oZnJvbTogRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uU3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IGEgcmVmZXJlbmNlIHRvIGEgU3Rha2luZ0NvbGxlY3Rpb24gaW4gdGhlIHByaW1hcnkgdXNlcidzIGFjY291bnQiKQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIHNlbGYuc3Rha2luZ0NvbGxlY3Rpb25SZWYud2l0aGRyYXdVbnN0YWtlZFRva2Vucyhub2RlSUQ6IG5vZGVJRCwgZGVsZWdhdG9ySUQ6IGRlbGVnYXRvcklELCBhbW91bnQ6IGFtb3VudCkKICAgIH0KfQ=="
        },
        "storage": {
          "enableTokenStorage": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZW5hYmxlVG9rZW5TdG9yYWdlIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQoKaW1wb3J0IDxUb2tlbj4gZnJvbSA8VG9rZW5BZGRyZXNzPgoKdHJhbnNhY3Rpb24gewoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UsIENhcGFiaWxpdGllcykgJkFjY291bnQpIHsKCiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UuYm9ycm93PCY8VG9rZW4+LlZhdWx0Pihmcm9tOiA8VG9rZW5TdG9yYWdlUGF0aD4gKSA9PSBuaWwgewogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKDwtIDxUb2tlbj4uY3JlYXRlRW1wdHlWYXVsdCh2YXVsdFR5cGU6IFR5cGU8QDxUb2tlbj4uVmF1bHQ+KCkpLCB0bzogPFRva2VuU3RvcmFnZVBhdGg+KQogICAgICAgIH0KCiAgICAgICAgaWYgc2lnbmVyLmNhcGFiaWxpdGllcy5leGlzdHMoPFRva2VuUmVjZWl2ZXJQYXRoPikgPT0gZmFsc2UgewogICAgICAgICAgICBsZXQgcmVjZWl2ZXJDYXBhYmlsaXR5ID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCY8VG9rZW4+LlZhdWx0Pig8VG9rZW5TdG9yYWdlUGF0aD4pCiAgICAgICAgICAgIHNpZ25lci5jYXBhYmlsaXRpZXMucHVibGlzaChyZWNlaXZlckNhcGFiaWxpdHksIGF0OiA8VG9rZW5SZWNlaXZlclBhdGg+KQogICAgICAgIAogICAgICAgIH0KICAgICAgIAogICAgICAgIGlmIHNpZ25lci5jYXBhYmlsaXRpZXMuZXhpc3RzKDxUb2tlbkJhbGFuY2VQYXRoPikgPT0gZmFsc2UgewogICAgICAgICAgICBsZXQgYmFsYW5jZUNhcGFiaWxpdHkgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JjxUb2tlbj4uVmF1bHQ+KDxUb2tlblN0b3JhZ2VQYXRoPikKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy5wdWJsaXNoKGJhbGFuY2VDYXBhYmlsaXR5LCBhdDogPFRva2VuQmFsYW5jZVBhdGg+KQogICAgICAgIH0KICAgIAogICAgfQp9",
          "getBasicPublicItems": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0QmFzaWNQdWJsaWNJdGVtcyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKYWNjZXNzKGFsbClzdHJ1Y3QgSXRlbSB7CiAgYWNjZXNzKGFsbClsZXQgYWRkcmVzczogQWRkcmVzcwogIGFjY2VzcyhhbGwpbGV0IHBhdGg6IFN0cmluZwogIGFjY2VzcyhhbGwpbGV0IHRhcmdldFBhdGg6IFN0cmluZz8KCiAgaW5pdChhZGRyZXNzOiBBZGRyZXNzLCBwYXRoOiBTdHJpbmcsIHRhcmdldFBhdGg6IFN0cmluZz8pIHsKICAgIHNlbGYuYWRkcmVzcyA9IGFkZHJlc3MKICAgIHNlbGYucGF0aCA9IHBhdGgKICAgIHNlbGYudGFyZ2V0UGF0aCA9IHRhcmdldFBhdGgKICB9Cn0KCmFjY2VzcyhhbGwpZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcyk6IFtJdGVtXSB7CiAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgbGV0IGl0ZW1zOiBbSXRlbV0gPSBbXQoKCiAgZnVuIGVhY2hQYXRoKHBhdGg6IFB1YmxpY1BhdGgsIGNhcFR5cGU6IFR5cGUpOiBCb29sIHsKICAgIC8vIHRvZG8KICAgIGxldCBjYXAgPSBhY2NvdW50LmNhcGFiaWxpdGllcy5nZXQ8JkFueVN0cnVjdD4ocGF0aCkKICAgIHZhciB0YXJnZXRQYXRoID0gIiIKCiAgICBpZiBjYXAgIT0gbmlsIHsKICAgICAgdGFyZ2V0UGF0aCA9ICIxMiIgCiAgICB9CiAgICBsZXQgaXRlbSA9IEl0ZW0oYWRkcmVzczogYWRkcmVzcywgcGF0aDogcGF0aC50b1N0cmluZygpLCB0YXJnZXRQYXRoOiB0YXJnZXRQYXRoKQogICAgaXRlbXMuYXBwZW5kKGl0ZW0pCiAgICByZXR1cm4gdHJ1ZQogIH0KICBhY2NvdW50LnN0b3JhZ2UuZm9yRWFjaFB1YmxpYyhlYWNoUGF0aCkKCiAgcmV0dXJuIGl0ZW1zCn0=",
          "getPrivateItems": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0UHJpdmF0ZUl0ZW1zIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgphY2Nlc3MoYWxsKXN0cnVjdCBJdGVtIHsKICBhY2Nlc3MoYWxsKWxldCBhZGRyZXNzOiBBZGRyZXNzCiAgYWNjZXNzKGFsbClsZXQgcGF0aDogU3RyaW5nCiAgYWNjZXNzKGFsbClsZXQgdHlwZTogVHlwZQogIGFjY2VzcyhhbGwpbGV0IHRhcmdldFBhdGg6IFN0cmluZz8KCiAgaW5pdCgKICAgIGFkZHJlc3M6IEFkZHJlc3MsIAogICAgcGF0aDogU3RyaW5nLCAKICAgIHR5cGU6IFR5cGUsIAogICAgdGFyZ2V0UGF0aDogU3RyaW5nPwogICkgewogICAgc2VsZi5hZGRyZXNzID0gYWRkcmVzcwogICAgc2VsZi5wYXRoID0gcGF0aAogICAgc2VsZi50eXBlID0gdHlwZQogICAgc2VsZi50YXJnZXRQYXRoID0gdGFyZ2V0UGF0aAogIH0KfQoKYWNjZXNzKGFsbClmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzLCBwYXRoTWFwOiB7U3RyaW5nOiBCb29sfSk6IFtJdGVtXSB7CiAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCgogIGxldCBpdGVtczogW0l0ZW1dID0gW10KCiAgYWNjb3VudC5zdG9yYWdlLmZvckVhY2hQcml2YXRlKGZ1biAocGF0aDogUHJpdmF0ZVBhdGgsIHR5cGU6IFR5cGUpOiBCb29sIHsKICAgIGlmICFwYXRoTWFwLmNvbnRhaW5zS2V5KHBhdGgudG9TdHJpbmcoKSkgewogICAgICByZXR1cm4gdHJ1ZQogICAgfQoKICAgIHZhciB0YXJnZXRQYXRoOiBTdHJpbmc/ID0gbmlsCiAgICBpZiBsZXQgdGFyZ2V0ID0gYWNjb3VudC5nZXRMaW5rVGFyZ2V0KHBhdGgpIHsKICAgICAgdGFyZ2V0UGF0aCA9IHRhcmdldC50b1N0cmluZygpCiAgICB9CgogICAgbGV0IGl0ZW0gPSBJdGVtKAogICAgICBhZGRyZXNzOiBhZGRyZXNzLAogICAgICBwYXRoOiBwYXRoLnRvU3RyaW5nKCksCiAgICAgIHR5cGU6IHR5cGUsCiAgICAgIHRhcmdldFBhdGg6IHRhcmdldFBhdGgKICAgICkKCiAgICBpdGVtcy5hcHBlbmQoaXRlbSkKICAgIHJldHVybiB0cnVlCiAgfSkKCiAgcmV0dXJuIGl0ZW1zCn0=",
          "getPrivatePaths": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0UHJpdmF0ZVBhdGhzIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgphY2Nlc3MoYWxsKWZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MpOiBbUHJpdmF0ZVBhdGhdIHsKICBsZXQgYWNjb3VudCA9IGdldEF1dGhBY2NvdW50KGFkZHJlc3MpCiAgbGV0IGNsZWFuZFBhdGhzOiBbUHJpdmF0ZVBhdGhdID0gW10KICBmb3IgcGF0aCBpbiBhY2NvdW50LnByaXZhdGVQYXRocyB7CiAgICBjbGVhbmRQYXRocy5hcHBlbmQocGF0aCkKICB9CiAgcmV0dXJuIGNsZWFuZFBhdGhzCn0=",
          "getPublicItem": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0UHVibGljSXRlbSAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKLy8gQSB3b3JrYXJvdW5kIG1ldGhvZAppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQoKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCiAgCmFjY2VzcyhhbGwpIHN0cnVjdCBJdGVtIHsKICBhY2Nlc3MoYWxsKSBsZXQgYWRkcmVzczogQWRkcmVzcwogIGFjY2VzcyhhbGwpIGxldCBwYXRoOiBTdHJpbmcKICBhY2Nlc3MoYWxsKSBsZXQgdHlwZTogVHlwZQoKICBhY2Nlc3MoYWxsKSBsZXQgdGFyZ2V0UGF0aDogU3RyaW5nPwoKICBpbml0KAogICAgYWRkcmVzczogQWRkcmVzcywgCiAgICBwYXRoOiBTdHJpbmcsIAogICAgdHlwZTogVHlwZSwgCiAgICB0YXJnZXRQYXRoOiBTdHJpbmc/CiAgKSB7CiAgICBzZWxmLmFkZHJlc3MgPSBhZGRyZXNzCiAgICBzZWxmLnBhdGggPSBwYXRoCiAgICBzZWxmLnR5cGUgPSB0eXBlCiAgICBzZWxmLnRhcmdldFBhdGggPSB0YXJnZXRQYXRoCiAgfQp9CgphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzLCBwYXRoTWFwOiB7U3RyaW5nOiBCb29sfSk6IFtJdGVtXSB7CiAgbGV0IGFjY291bnQgPSBnZXRBdXRoQWNjb3VudChhZGRyZXNzKQoKICBsZXQgaXRlbXM6IFtJdGVtXSA9IFtdCiAgYWNjb3VudC5mb3JFYWNoUHVibGljKGZ1biAocGF0aDogUHVibGljUGF0aCwgdHlwZTogVHlwZSk6IEJvb2wgewogICAgaWYgIXBhdGhNYXAuY29udGFpbnNLZXkocGF0aC50b1N0cmluZygpKSB7CiAgICAgIHJldHVybiB0cnVlCiAgICB9CgogICAgdmFyIHRhcmdldFBhdGg6IFN0cmluZz8gPSBuaWwKCiAgICBpZiBsZXQgdGFyZ2V0ID0gYWNjb3VudC5nZXRMaW5rVGFyZ2V0KHBhdGgpIHsKICAgICAgdGFyZ2V0UGF0aCA9IHRhcmdldC50b1N0cmluZygpCiAgICB9CgogICAgbGV0IGl0ZW0gPSBJdGVtKAogICAgICBhZGRyZXNzOiBhZGRyZXNzLAogICAgICBwYXRoOiBwYXRoLnRvU3RyaW5nKCksCiAgICAgIHR5cGU6IHR5cGUsCiAgICAgIHRhcmdldFBhdGg6IHRhcmdldFBhdGgKICAgICkKCiAgICBpdGVtcy5hcHBlbmQoaXRlbSkKICAgIHJldHVybiBmYWxzZQogIH0pCgogIHJldHVybiBpdGVtcwp9",
          "getPublicItems": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0UHVibGljSXRlbXMgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhmMjMzZGNlZTg4ZmUwYWJlCgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKICAKYWNjZXNzKGFsbCkgc3RydWN0IEl0ZW0gewogIGFjY2VzcyhhbGwpIGxldCBhZGRyZXNzOiBBZGRyZXNzCiAgYWNjZXNzKGFsbCkgbGV0IHBhdGg6IFN0cmluZwogIGFjY2VzcyhhbGwpIGxldCB0eXBlOiBUeXBlCgogIGFjY2VzcyhhbGwpIGxldCB0YXJnZXRQYXRoOiBTdHJpbmc/CgogIGFjY2VzcyhhbGwpIGxldCBpc0NvbGxlY3Rpb25DYXA6IEJvb2wKICBhY2Nlc3MoYWxsKSBsZXQgdG9rZW5JRHM6IFtVSW50NjRdCgogIGFjY2VzcyhhbGwpIGxldCBpc0JhbGFuY2VDYXA6IEJvb2wKICBhY2Nlc3MoYWxsKSBsZXQgYmFsYW5jZTogVUZpeDY0PwoKICBpbml0KAogICAgYWRkcmVzczogQWRkcmVzcywgCiAgICBwYXRoOiBTdHJpbmcsIAogICAgdHlwZTogVHlwZSwgCiAgICB0YXJnZXRQYXRoOiBTdHJpbmc/LCAKICAgIGlzQ29sbGVjdGlvbkNhcDogQm9vbCwgCiAgICB0b2tlbklEczogW1VJbnQ2NF0sCiAgICBpc0JhbGFuY2VDYXA6IEJvb2wsCiAgICBiYWxhbmNlOiBVRml4NjQ/CiAgKSB7CiAgICBzZWxmLmFkZHJlc3MgPSBhZGRyZXNzCiAgICBzZWxmLnBhdGggPSBwYXRoCiAgICBzZWxmLnR5cGUgPSB0eXBlCiAgICBzZWxmLnRhcmdldFBhdGggPSB0YXJnZXRQYXRoCiAgICBzZWxmLmlzQ29sbGVjdGlvbkNhcCA9IGlzQ29sbGVjdGlvbkNhcAogICAgc2VsZi50b2tlbklEcyA9IHRva2VuSURzCiAgICBzZWxmLmlzQmFsYW5jZUNhcCA9IGlzQmFsYW5jZUNhcAogICAgc2VsZi5iYWxhbmNlID0gYmFsYW5jZQogIH0KfQoKYWNjZXNzKGFsbCkgZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcywgcGF0aE1hcDoge1N0cmluZzogQm9vbH0pOiBbSXRlbV0gewogIGxldCBhY2NvdW50ID0gZ2V0QXV0aEFjY291bnQoYWRkcmVzcykKCiAgbGV0IGl0ZW1zOiBbSXRlbV0gPSBbXQogIGxldCBiYWxhbmNlQ2FwVHlwZSA9IFR5cGU8Q2FwYWJpbGl0eTwmQW55UmVzb3VyY2V7RnVuZ2libGVUb2tlbi5CYWxhbmNlfT4+KCkKICBsZXQgY29sbGVjdGlvblR5cGUgPSBUeXBlPENhcGFiaWxpdHk8JkFueVJlc291cmNle05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+PigpCgogIGFjY291bnQuZm9yRWFjaFB1YmxpYyhmdW4gKHBhdGg6IFB1YmxpY1BhdGgsIHR5cGU6IFR5cGUpOiBCb29sIHsKICAgIGlmICFwYXRoTWFwLmNvbnRhaW5zS2V5KHBhdGgudG9TdHJpbmcoKSkgewogICAgICByZXR1cm4gdHJ1ZQogICAgfQoKICAgIHZhciB0YXJnZXRQYXRoOiBTdHJpbmc/ID0gbmlsCiAgICB2YXIgaXNDb2xsZWN0aW9uQ2FwID0gZmFsc2UKICAgIHZhciBpc0JhbGFuY2VDYXAgPSBmYWxzZQogICAgdmFyIHRva2VuSURzOiBbVUludDY0XSA9IFtdCiAgICB2YXIgYmFsYW5jZTogVUZpeDY0PyA9IG5pbAoKICAgIGlmIGxldCB0YXJnZXQgPSBhY2NvdW50LmdldExpbmtUYXJnZXQocGF0aCkgewogICAgICB0YXJnZXRQYXRoID0gdGFyZ2V0LnRvU3RyaW5nKCkKICAgIH0KCiAgICBpZiAodHlwZS5pc1N1YnR5cGUob2Y6IGJhbGFuY2VDYXBUeXBlKSkgewogICAgICBpc0JhbGFuY2VDYXAgPSB0cnVlCiAgICAgIGxldCB2YXVsdFJlZiA9IGFjY291bnQKICAgICAgICAgIC5nZXRDYXBhYmlsaXR5KHBhdGgpCiAgICAgICAgICAuYm9ycm93PCZ7RnVuZ2libGVUb2tlbi5CYWxhbmNlfT4oKQoKICAgICAgaWYgbGV0IHZhdWx0ID0gdmF1bHRSZWYgewogICAgICAgICAgYmFsYW5jZSA9IHZhdWx0LmJhbGFuY2UKICAgICAgfQogICAgfSBlbHNlIGlmICh0eXBlLmlzU3VidHlwZShvZjogY29sbGVjdGlvblR5cGUpKSB7CiAgICAgIGlzQ29sbGVjdGlvbkNhcCA9IHRydWUKICAgICAgbGV0IGNvbGxlY3Rpb25SZWYgPSBhY2NvdW50CiAgICAgICAgLmdldENhcGFiaWxpdHkocGF0aCkKICAgICAgICAuYm9ycm93PCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uUHVibGljfT4oKQoKICAgICAgaWYgbGV0IGNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uUmVmIHsKICAgICAgICB0b2tlbklEcyA9IGNvbGxlY3Rpb24uZ2V0SURzKCkKICAgICAgfQogICAgfQoKICAgIGxldCBpdGVtID0gSXRlbSgKICAgICAgYWRkcmVzczogYWRkcmVzcywKICAgICAgcGF0aDogcGF0aC50b1N0cmluZygpLAogICAgICB0eXBlOiB0eXBlLAogICAgICB0YXJnZXRQYXRoOiB0YXJnZXRQYXRoLAogICAgICBpc0NvbGxlY3Rpb25DYXA6IGlzQ29sbGVjdGlvbkNhcCwKICAgICAgdG9rZW5JRHM6IHRva2VuSURzLAogICAgICBpc0JhbGFuY2VDYXA6IGlzQmFsYW5jZUNhcCwKICAgICAgYmFsYW5jZTogYmFsYW5jZQogICAgKQoKICAgIGl0ZW1zLmFwcGVuZChpdGVtKQogICAgcmV0dXJuIHRydWUKICB9KQoKICByZXR1cm4gaXRlbXMKfQ==",
          "getPublicPaths": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0UHVibGljUGF0aHMgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCnB1YiBmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzKTogW1B1YmxpY1BhdGhdIHsKICBsZXQgYWNjb3VudCA9IGdldEF1dGhBY2NvdW50KGFkZHJlc3MpCiAgbGV0IGNsZWFuZFBhdGhzOiBbUHVibGljUGF0aF0gPSBbXQogIGZvciBwYXRoIGluIGFjY291bnQucHVibGljUGF0aHMgewogICAgY2xlYW5kUGF0aHMuYXBwZW5kKHBhdGgpCiAgfQogIHJldHVybiBjbGVhbmRQYXRocwp9",
          "getStoragePaths": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0U3RvcmFnZVBhdGhzIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgpwdWIgZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcyk6IFtTdG9yYWdlUGF0aF0gewogIGxldCBhY2NvdW50ID0gZ2V0QXV0aEFjY291bnQoYWRkcmVzcykKICBsZXQgY2xlYW5kUGF0aHM6IFtTdG9yYWdlUGF0aF0gPSBbXQogIGZvciBwYXRoIGluIGFjY291bnQuc3RvcmFnZVBhdGhzIHsKICAgIGNsZWFuZFBhdGhzLmFwcGVuZChwYXRoKQogIH0KICByZXR1cm4gY2xlYW5kUGF0aHMKfQ==",
          "getStoredItems": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0U3RvcmVkSXRlbXMgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhmMjMzZGNlZTg4ZmUwYWJlCgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCgpwdWIgc3RydWN0IENvbGxlY3Rpb25EaXNwbGF5IHsKICBwdWIgbGV0IG5hbWU6IFN0cmluZwogIHB1YiBsZXQgc3F1YXJlSW1hZ2U6IE1ldGFkYXRhVmlld3MuTWVkaWEKCiAgaW5pdChuYW1lOiBTdHJpbmcsIHNxdWFyZUltYWdlOiBNZXRhZGF0YVZpZXdzLk1lZGlhKSB7CiAgICBzZWxmLm5hbWUgPSBuYW1lCiAgICBzZWxmLnNxdWFyZUltYWdlID0gc3F1YXJlSW1hZ2UKICB9Cn0KCnB1YiBzdHJ1Y3QgSXRlbSB7CiAgcHViIGxldCBhZGRyZXNzOiBBZGRyZXNzCiAgcHViIGxldCBwYXRoOiBTdHJpbmcKICBwdWIgbGV0IHR5cGU6IFR5cGUKICBwdWIgbGV0IGlzUmVzb3VyY2U6IEJvb2wKICBwdWIgbGV0IGlzTkZUQ29sbGVjdGlvbjogQm9vbAogIHB1YiBsZXQgZGlzcGxheTogQ29sbGVjdGlvbkRpc3BsYXk/CiAgcHViIGxldCB0b2tlbklEczogW1VJbnQ2NF0KICBwdWIgbGV0IGlzVmF1bHQ6IEJvb2wKICBwdWIgbGV0IGJhbGFuY2U6IFVGaXg2ND8KCiAgaW5pdChhZGRyZXNzOiBBZGRyZXNzLCBwYXRoOiBTdHJpbmcsIHR5cGU6IFR5cGUsIGlzUmVzb3VyY2U6IEJvb2wsIAogICAgaXNORlRDb2xsZWN0aW9uOiBCb29sLCBkaXNwbGF5OiBDb2xsZWN0aW9uRGlzcGxheT8sCiAgICB0b2tlbklEczogW1VJbnQ2NF0sIGlzVmF1bHQ6IEJvb2wsIGJhbGFuY2U6IFVGaXg2ND8pIHsKICAgICAgc2VsZi5hZGRyZXNzID0gYWRkcmVzcwogICAgICBzZWxmLnBhdGggPSBwYXRoCiAgICAgIHNlbGYudHlwZSA9IHR5cGUKICAgICAgc2VsZi5pc1Jlc291cmNlID0gaXNSZXNvdXJjZQogICAgICBzZWxmLmlzTkZUQ29sbGVjdGlvbiA9IGlzTkZUQ29sbGVjdGlvbgogICAgICBzZWxmLmRpc3BsYXkgPSBkaXNwbGF5CiAgICAgIHNlbGYudG9rZW5JRHMgPSB0b2tlbklEcwogICAgICBzZWxmLmlzVmF1bHQgPSBpc1ZhdWx0CiAgICAgIHNlbGYuYmFsYW5jZSA9IGJhbGFuY2UKICB9Cn0KCnB1YiBmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzLCBwYXRoSWRlbnRpZmllcnM6IFtTdHJpbmddKTogW0l0ZW1dIHsKICBsZXQgYWNjb3VudCA9IGdldEF1dGhBY2NvdW50KGFkZHJlc3MpCiAgbGV0IHJlc291cmNlVHlwZSA9IFR5cGU8QEFueVJlc291cmNlPigpCiAgbGV0IHZhdWx0VHlwZSA9IFR5cGU8QEZ1bmdpYmxlVG9rZW4uVmF1bHQ+KCkKICBsZXQgY29sbGVjdGlvblR5cGUgPSBUeXBlPEBOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb24+KCkKICBsZXQgbWV0YWRhdGFWaWV3VHlwZSA9IFR5cGU8QEFueVJlc291cmNle01ldGFkYXRhVmlld3MuUmVzb2x2ZXJDb2xsZWN0aW9ufT4oKQogIGxldCBpdGVtczogW0l0ZW1dID0gW10KCiAgZm9yIGlkZW50aWZpZXIgaW4gcGF0aElkZW50aWZpZXJzIHsKICAgIGxldCBwYXRoID0gU3RvcmFnZVBhdGgoaWRlbnRpZmllcjogaWRlbnRpZmllcikhCgogICAgaWYgbGV0IHR5cGUgPSBhY2NvdW50LnR5cGUoYXQ6IHBhdGgpIHsKICAgICAgbGV0IGlzUmVzb3VyY2UgPSB0eXBlLmlzU3VidHlwZShvZjogcmVzb3VyY2VUeXBlKQogICAgICBsZXQgaXNORlRDb2xsZWN0aW9uID0gdHlwZS5pc1N1YnR5cGUob2Y6IGNvbGxlY3Rpb25UeXBlKQogICAgICBsZXQgY29uZm9ybWVkTWV0YWRhdGFWaWV3cyA9IHR5cGUuaXNTdWJ0eXBlKG9mOiBtZXRhZGF0YVZpZXdUeXBlKQoKICAgICAgdmFyIHRva2VuSURzOiBbVUludDY0XSA9IFtdCiAgICAgIHZhciBjb2xsZWN0aW9uRGlzcGxheTogQ29sbGVjdGlvbkRpc3BsYXk/ID0gbmlsCiAgICAgIGlmIGlzTkZUQ29sbGVjdGlvbiAmJiBjb25mb3JtZWRNZXRhZGF0YVZpZXdzIHsKICAgICAgICBpZiBsZXQgY29sbGVjdGlvblJlZiA9IGFjY291bnQuYm9ycm93PCZ7TWV0YWRhdGFWaWV3cy5SZXNvbHZlckNvbGxlY3Rpb24sIE5vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+KGZyb206IHBhdGgpIHsKICAgICAgICAgIHRva2VuSURzID0gY29sbGVjdGlvblJlZi5nZXRJRHMoKQoKICAgICAgICAgIC8vIFRPRE86IG1vdmUgdG8gYSBsaXN0CiAgICAgICAgICBpZiB0b2tlbklEcy5sZW5ndGggPiAwIAogICAgICAgICAgJiYgcGF0aCAhPSAvc3RvcmFnZS9SYXJpYmxlTkZUQ29sbGVjdGlvbiAKICAgICAgICAgICYmIHBhdGggIT0gL3N0b3JhZ2UvQVJUSUZBQ1RQYWNrVjNDb2xsZWN0aW9uCiAgICAgICAgICAmJiBwYXRoICE9IC9zdG9yYWdlL0FybGVlU2NlbmUgewogICAgICAgICAgICBsZXQgcmVzb2x2ZXIgPSBjb2xsZWN0aW9uUmVmLmJvcnJvd1ZpZXdSZXNvbHZlcihpZDogdG9rZW5JRHNbMF0pIAogICAgICAgICAgICBpZiBsZXQgZGlzcGxheSA9IE1ldGFkYXRhVmlld3MuZ2V0TkZUQ29sbGVjdGlvbkRpc3BsYXkocmVzb2x2ZXIpIHsKICAgICAgICAgICAgICBjb2xsZWN0aW9uRGlzcGxheSA9IENvbGxlY3Rpb25EaXNwbGF5KAogICAgICAgICAgICAgICAgbmFtZTogZGlzcGxheS5uYW1lLAogICAgICAgICAgICAgICAgc3F1YXJlSW1hZ2U6IGRpc3BsYXkuc3F1YXJlSW1hZ2UKICAgICAgICAgICAgICApCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiBpc05GVENvbGxlY3Rpb24gewogICAgICAgIGlmIGxldCBjb2xsZWN0aW9uUmVmID0gYWNjb3VudC5ib3Jyb3c8Jk5vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbj4oZnJvbTogcGF0aCkgewogICAgICAgICAgdG9rZW5JRHMgPSBjb2xsZWN0aW9uUmVmLmdldElEcygpCiAgICAgICAgfQogICAgICB9CgogICAgICBsZXQgaXNWYXVsdCA9IHR5cGUuaXNTdWJ0eXBlKG9mOiB2YXVsdFR5cGUpIAogICAgICB2YXIgYmFsYW5jZTogVUZpeDY0PyA9IG5pbAogICAgICBpZiBpc1ZhdWx0IHsKICAgICAgICBpZiBsZXQgdmF1bHRSZWYgPSBhY2NvdW50LmJvcnJvdzwmRnVuZ2libGVUb2tlbi5WYXVsdD4oZnJvbTogcGF0aCkgewogICAgICAgICAgYmFsYW5jZSA9IHZhdWx0UmVmLmJhbGFuY2UKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGxldCBpdGVtID0gSXRlbSgKICAgICAgICBhZGRyZXNzOiBhZGRyZXNzLAogICAgICAgIHBhdGg6IHBhdGgudG9TdHJpbmcoKSwKICAgICAgICB0eXBlOiB0eXBlLAogICAgICAgIGlzUmVzb3VyY2U6IGlzUmVzb3VyY2UsCiAgICAgICAgaXNORlRDb2xsZWN0aW9uOiBpc05GVENvbGxlY3Rpb24sCiAgICAgICAgZGlzcGxheTogY29sbGVjdGlvbkRpc3BsYXksCiAgICAgICAgdG9rZW5JRHM6IHRva2VuSURzLAogICAgICAgIGlzVmF1bHQ6IGlzVmF1bHQsCiAgICAgICAgYmFsYW5jZTogYmFsYW5jZQogICAgICApCgogICAgICBpdGVtcy5hcHBlbmQoaXRlbSkKICAgIH0KICB9CgogIHJldHVybiBpdGVtcwp9",
          "getStoredResource": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0U3RvcmVkUmVzb3VyY2UgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCnB1YiBmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzLCBwYXRoU3RyOiBTdHJpbmcpOiAmQW55UmVzb3VyY2U/IHsKICBsZXQgYWNjb3VudCA9IGdldEF1dGhBY2NvdW50KGFkZHJlc3MpCiAgbGV0IHBhdGggPSBTdG9yYWdlUGF0aChpZGVudGlmaWVyOiBwYXRoU3RyKSEKICByZXR1cm4gYWNjb3VudC5ib3Jyb3c8JkFueVJlc291cmNlPihmcm9tOiBwYXRoKQp9",
          "getStoredStruct": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgZ2V0U3RvcmVkU3RydWN0IC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgpwdWIgZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcywgcGF0aFN0cjogU3RyaW5nKTogJkFueVN0cnVjdD8gewogIGxldCBhY2NvdW50ID0gZ2V0QXV0aEFjY291bnQoYWRkcmVzcykKICBsZXQgcGF0aCA9IFN0b3JhZ2VQYXRoKGlkZW50aWZpZXI6IHBhdGhTdHIpIQogIHJldHVybiBhY2NvdW50LmJvcnJvdzwmQW55U3RydWN0Pihmcm9tOiBwYXRoKQp9"
        },
        "temp": {
          "addKeys": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgYWRkS2V5cyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IENyeXB0bwoKdHJhbnNhY3Rpb24ocHVibGljS2V5OiBTdHJpbmcpIHsKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKEtleXMpICZBY2NvdW50KSB7CiAgICAgICAgbGV0IGtleSA9IFB1YmxpY0tleSgKICAgICAgICAgICAgcHVibGljS2V5OiBwdWJsaWNLZXkuZGVjb2RlSGV4KCksCiAgICAgICAgICAgIHNpZ25hdHVyZUFsZ29yaXRobTogU2lnbmF0dXJlQWxnb3JpdGhtKHJhd1ZhbHVlOiAxKSEKICAgICAgICApCiAgICAgICAgdmFyIGlkeCA9IDAKICAgICAgICB3aGlsZSBpZHggPCA5OSB7CiAgICAgICAgICAgIHNpZ25lci5rZXlzLmFkZCgKICAgICAgICAgICAgICAgIHB1YmxpY0tleToga2V5LAogICAgICAgICAgICAgICAgaGFzaEFsZ29yaXRobTogSGFzaEFsZ29yaXRobShyYXdWYWx1ZTogMSkhLAogICAgICAgICAgICAgICAgd2VpZ2h0OiAxMDAwLjAKICAgICAgICAgICAgKQogICAgICAgICAgICBpZHggPSBpZHggKyAxCiAgICAgICAgfQogICAgICAgCiAgICB9Cn0=",
          "createAccount": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgY3JlYXRlQWNjb3VudCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IENyeXB0bwppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQoKaW1wb3J0IEVWTSBmcm9tIDB4ZTQ2N2I5ZGQxMWZhMDBkZgoKaW1wb3J0IFVTRENGbG93IGZyb20gMHhmMWFiOTljODJkZWUzNTI2CgppbXBvcnQgc3RGbG93VG9rZW4gZnJvbSAweGQ2ZjgwNTY1MTkzYWQ3MjcKCgp0cmFuc2FjdGlvbihwdWJsaWNLZXlzOiBbQ3J5cHRvLktleUxpc3RFbnRyeV0sIGNvbnRyYWN0czoge1N0cmluZzogU3RyaW5nfSkgewogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQm9ycm93VmFsdWUpICZBY2NvdW50KSB7CgogICAgICAgIGxldCBuZXdBY2NvdW50ID0gQWNjb3VudChwYXllcjogc2lnbmVyKQoKICAgICAgICBmb3Iga2V5IGluIHB1YmxpY0tleXMgewogICAgICAgICAgICBuZXdBY2NvdW50LmtleXMuYWRkKHB1YmxpY0tleToga2V5LnB1YmxpY0tleSwgaGFzaEFsZ29yaXRobToga2V5Lmhhc2hBbGdvcml0aG0sIHdlaWdodDoga2V5LndlaWdodCkKICAgICAgICB9CgogICAgICAgIGZvciBjb250cmFjdCBpbiBjb250cmFjdHMua2V5cyB7CiAgICAgICAgICAgIG5ld0FjY291bnQuY29udHJhY3RzLmFkZChuYW1lOiBjb250cmFjdCwgY29kZTogY29udHJhY3RzW2NvbnRyYWN0XSEuZGVjb2RlSGV4KCkpCiAgICAgICAgfQoKICAgICAgICBsZXQgY29hIDwtIEVWTS5jcmVhdGVDYWRlbmNlT3duZWRBY2NvdW50KCkKICAgICAgICBsZXQgY29hUGF0aCA9IC9zdG9yYWdlL2V2bQogICAgICAgIG5ld0FjY291bnQuc3RvcmFnZS5zYXZlKDwtY29hLCB0bzogY29hUGF0aCkKICAgICAgICBsZXQgY29hQ2FwYWJpbGl0eSA9IG5ld0FjY291bnQuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JkVWTS5DYWRlbmNlT3duZWRBY2NvdW50Pihjb2FQYXRoKQogICAgICAgIG5ld0FjY291bnQuY2FwYWJpbGl0aWVzLnB1Ymxpc2goY29hQ2FwYWJpbGl0eSwgYXQ6IC9wdWJsaWMvZXZtKQogICAgICAgIGxldCB1c2RjVmF1bHQgPC0gVVNEQ0Zsb3cuY3JlYXRlRW1wdHlWYXVsdCh2YXVsdFR5cGU6IFR5cGU8QFVTRENGbG93LlZhdWx0PigpKQogICAgICAgIG5ld0FjY291bnQuc3RvcmFnZS5zYXZlKDwtdXNkY1ZhdWx0LCB0bzogVVNEQ0Zsb3cuVmF1bHRTdG9yYWdlUGF0aCkKICAgICAgICBuZXdBY2NvdW50LmNhcGFiaWxpdGllcy5wdWJsaXNoKAogICAgICAgICAgICBuZXdBY2NvdW50LmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCZ7RnVuZ2libGVUb2tlbi5SZWNlaXZlciwgRnVuZ2libGVUb2tlbi5CYWxhbmNlfT4oVVNEQ0Zsb3cuVmF1bHRTdG9yYWdlUGF0aCksCiAgICAgICAgICAgIGF0OiBVU0RDRmxvdy5WYXVsdFB1YmxpY1BhdGgKICAgICAgICApCiAgICAgICAgbmV3QWNjb3VudC5jYXBhYmlsaXRpZXMucHVibGlzaCgKICAgICAgICAgICAgbmV3QWNjb3VudC5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwme0Z1bmdpYmxlVG9rZW4uUmVjZWl2ZXIsIEZ1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KFVTRENGbG93LlZhdWx0U3RvcmFnZVBhdGgpLAogICAgICAgICAgICBhdDogVVNEQ0Zsb3cuUmVjZWl2ZXJQdWJsaWNQYXRoCiAgICAgICAgKQoKICAgICAgICAvLyBzdEZsb3cKICAgICAgICBsZXQgc3RGbG93VmF1bHQgPC0gc3RGbG93VG9rZW4uY3JlYXRlRW1wdHlWYXVsdCh2YXVsdFR5cGU6IFR5cGU8QHN0Rmxvd1Rva2VuLlZhdWx0PigpKQogICAgICAgIG5ld0FjY291bnQuc3RvcmFnZS5zYXZlKDwtc3RGbG93VmF1bHQsIHRvOiBzdEZsb3dUb2tlbi50b2tlblZhdWx0UGF0aCkKICAgICAgICBuZXdBY2NvdW50LmNhcGFiaWxpdGllcy5wdWJsaXNoKAogICAgICAgICAgICBuZXdBY2NvdW50LmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCZ7RnVuZ2libGVUb2tlbi5SZWNlaXZlciwgRnVuZ2libGVUb2tlbi5CYWxhbmNlfT4oc3RGbG93VG9rZW4udG9rZW5WYXVsdFBhdGgpLAogICAgICAgICAgICBhdDogc3RGbG93VG9rZW4udG9rZW5CYWxhbmNlUGF0aAogICAgICAgICkKICAgICAgICBuZXdBY2NvdW50LmNhcGFiaWxpdGllcy5wdWJsaXNoKAogICAgICAgICAgICBuZXdBY2NvdW50LmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCZ7RnVuZ2libGVUb2tlbi5SZWNlaXZlciwgRnVuZ2libGVUb2tlbi5CYWxhbmNlfT4oc3RGbG93VG9rZW4udG9rZW5WYXVsdFBhdGgpLAogICAgICAgICAgICBhdDogc3RGbG93VG9rZW4udG9rZW5SZWNlaXZlclBhdGgKICAgICAgICApCiAgICB9Cgp9",
          "mintNFT": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgbWludE5GVCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKLy8vIFRoaXMgc2NyaXB0IHVzZXMgdGhlIE5GVE1pbnRlciByZXNvdXJjZSB0byBtaW50IGEgbmV3IE5GVAovLy8gSXQgbXVzdCBiZSBydW4gd2l0aCB0aGUgYWNjb3VudCB0aGF0IGhhcyB0aGUgbWludGVyIHJlc291cmNlCi8vLyBzdG9yZWQgaW4gL3N0b3JhZ2UvTkZUTWludGVyCgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQoKaW1wb3J0IEV4YW1wbGVORlQgZnJvbSAweDM5MGI0NzA1ZGE2MzA1YzMKCnRyYW5zYWN0aW9uKAogICAgcmVjaXBpZW50OiBBZGRyZXNzLAogICAgbmFtZTogU3RyaW5nLAogICAgZGVzY3JpcHRpb246IFN0cmluZywKICAgIHRodW1ibmFpbDogU3RyaW5nLAogICAgY3V0czogW1VGaXg2NF0sCiAgICByb3lhbHR5RGVzY3JpcHRpb25zOiBbU3RyaW5nXSwKICAgIHJveWFsdHlCZW5lZmljaWFyaWVzOiBbQWRkcmVzc10KKSB7CgogICAgLy8vIGxvY2FsIHZhcmlhYmxlIGZvciBzdG9yaW5nIHRoZSBtaW50ZXIgcmVmZXJlbmNlCiAgICBsZXQgbWludGVyOiAmRXhhbXBsZU5GVC5ORlRNaW50ZXIKCiAgICAvLy8gUmVmZXJlbmNlIHRvIHRoZSByZWNlaXZlcidzIGNvbGxlY3Rpb24KICAgIGxldCByZWNpcGllbnRDb2xsZWN0aW9uUmVmOiAme05vbkZ1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9CgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQm9ycm93VmFsdWUpICZBY2NvdW50KSB7CgogICAgICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IEV4YW1wbGVORlQucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgICAgIHJlc291cmNlVHlwZTogbmlsLAogICAgICAgICAgICAgICAgdmlld1R5cGU6IFR5cGU8TWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT4oKQogICAgICAgICAgICApIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPwogICAgICAgICAgICA/PyBwYW5pYygiVmlld1Jlc29sdmVyIGRvZXMgbm90IHJlc29sdmUgTkZUQ29sbGVjdGlvbkRhdGEgdmlldyIpCiAgICAgICAgCiAgICAgICAgLy8gYm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBORlRNaW50ZXIgcmVzb3VyY2UgaW4gc3RvcmFnZQogICAgICAgIHNlbGYubWludGVyID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PCZFeGFtcGxlTkZULk5GVE1pbnRlcj4oZnJvbTogRXhhbXBsZU5GVC5NaW50ZXJTdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIkFjY291bnQgZG9lcyBub3Qgc3RvcmUgYW4gb2JqZWN0IGF0IHRoZSBzcGVjaWZpZWQgcGF0aCIpCgogICAgICAgIC8vIEJvcnJvdyB0aGUgcmVjaXBpZW50J3MgcHVibGljIE5GVCBjb2xsZWN0aW9uIHJlZmVyZW5jZQogICAgICAgIHNlbGYucmVjaXBpZW50Q29sbGVjdGlvblJlZiA9IGdldEFjY291bnQocmVjaXBpZW50KS5jYXBhYmlsaXRpZXMuYm9ycm93PCZ7Tm9uRnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KAogICAgICAgICAgICAgICAgY29sbGVjdGlvbkRhdGEucHVibGljUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IHJlY2VpdmVyIHJlZmVyZW5jZSB0byB0aGUgTkZUIENvbGxlY3Rpb24iKQogICAgfQoKICAgIHByZSB7CiAgICAgICAgY3V0cy5sZW5ndGggPT0gcm95YWx0eURlc2NyaXB0aW9ucy5sZW5ndGggJiYgY3V0cy5sZW5ndGggPT0gcm95YWx0eUJlbmVmaWNpYXJpZXMubGVuZ3RoOiAiQXJyYXkgbGVuZ3RoIHNob3VsZCBiZSBlcXVhbCBmb3Igcm95YWx0eSByZWxhdGVkIGRldGFpbHMiCiAgICB9CgogICAgZXhlY3V0ZSB7CgogICAgICAgIC8vIENyZWF0ZSB0aGUgcm95YWx0eSBkZXRhaWxzCiAgICAgICAgdmFyIGNvdW50ID0gMAogICAgICAgIHZhciByb3lhbHRpZXM6IFtNZXRhZGF0YVZpZXdzLlJveWFsdHldID0gW10KICAgICAgICBsb2cocm95YWx0eUJlbmVmaWNpYXJpZXMubGVuZ3RoKQogICAgICAgIHdoaWxlIHJveWFsdHlCZW5lZmljaWFyaWVzLmxlbmd0aCA+IGNvdW50IHsKICAgICAgICAgICAgbGV0IGJlbmVmaWNpYXJ5ID0gcm95YWx0eUJlbmVmaWNpYXJpZXNbY291bnRdCiAgICAgICAgICAgIGxldCBiZW5lZmljaWFyeUNhcGFiaWxpdHkgPSBnZXRBY2NvdW50KGJlbmVmaWNpYXJ5KS5jYXBhYmlsaXRpZXMuZ2V0PCZ7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KAogICAgICAgICAgICAgICAgICAgIE1ldGFkYXRhVmlld3MuZ2V0Um95YWx0eVJlY2VpdmVyUHVibGljUGF0aCgpCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgIGlmICFiZW5lZmljaWFyeUNhcGFiaWxpdHkuY2hlY2soKSB7CiAgICAgICAgICAgICAgICBwYW5pYygiQmVuZWZpY2lhcnkgZG9lcyBub3QgaGF2ZSBSZWNlaXZlciBjb25maWd1cmVkIGF0IFJveWFsdHlSZWNlaXZlclB1YmxpY1BhdGgiKQogICAgICAgICAgICB9CgogICAgICAgICAgICByb3lhbHRpZXMuYXBwZW5kKAogICAgICAgICAgICAgICAgTWV0YWRhdGFWaWV3cy5Sb3lhbHR5KAogICAgICAgICAgICAgICAgICAgIHJlY2VpdmVyOiBiZW5lZmljaWFyeUNhcGFiaWxpdHksCiAgICAgICAgICAgICAgICAgICAgY3V0OiBjdXRzW2NvdW50XSwKICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogcm95YWx0eURlc2NyaXB0aW9uc1tjb3VudF0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgKQogICAgICAgICAgICBjb3VudCA9IGNvdW50ICsgMQogICAgICAgIH0KCgogICAgICAgIC8vIE1pbnQgdGhlIE5GVCBhbmQgZGVwb3NpdCBpdCB0byB0aGUgcmVjaXBpZW50J3MgY29sbGVjdGlvbgogICAgICAgIGxldCBtaW50ZWRORlQgPC0gc2VsZi5taW50ZXIubWludE5GVCgKICAgICAgICAgICAgbmFtZTogbmFtZSwKICAgICAgICAgICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uLAogICAgICAgICAgICB0aHVtYm5haWw6IHRodW1ibmFpbCwKICAgICAgICAgICAgcm95YWx0aWVzOiByb3lhbHRpZXMKICAgICAgICApCiAgICAgICAgc2VsZi5yZWNpcGllbnRDb2xsZWN0aW9uUmVmLmRlcG9zaXQodG9rZW46IDwtbWludGVkTkZUKQogICAgfQoKfQ==",
          "onboardEvmToFlow": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgb25ib2FyZEV2bVRvRmxvdyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweGYyMzNkY2VlODhmZTBhYmUKCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweDE2NTQ2NTMzOTkwNDBhNjEKCgppbXBvcnQgU2NvcGVkRlRQcm92aWRlcnMgZnJvbSAweDFlNGFhMGI4N2QxMGIxNDEKCgppbXBvcnQgRVZNIGZyb20gMHhlNDY3YjlkZDExZmEwMGRmCgoKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweDFlNGFhMGI4N2QxMGIxNDEKCmltcG9ydCBGbG93RVZNQnJpZGdlQ29uZmlnIGZyb20gMHgxZTRhYTBiODdkMTBiMTQxCkNvbmZpZwoKLy8vIFRoaXMgdHJhbnNhY3Rpb24gb25ib2FyZHMgRVJDMjAvRVJDNzIxIGFzc2V0cyB0byB0aGUgYnJpZGdlLCBjb25maWd1cmluZyB0aGUgYnJpZGdlIHRvIG1vdmUgYXNzZXRzIGJldHdlZW4KLy8vIGVudmlyb25tZW50cwovLy8gTk9URTogVGhpcyBtdXN0IGJlIGRvbmUgYmVmb3JlIGJyaWRnaW5nIGEgQ2FkZW5jZS1uYXRpdmUgTkZUIHRvIEVWTQovLy8KLy8vIEBwYXJhbSBhZGRyZXNzZXNBc0hleDogQXJyYXkgb2YgRVZNIGNvbnRyYWN0IGFkZHJlc3NlcyBkZWZpbmluZyB0aGUgCi8vLyAgICAgYnJpZGdlYWJsZSBhc3NldCB0byBiZSBvbmJvYXJkZWQKLy8vCnRyYW5zYWN0aW9uKGFkZHJlc3Nlc0FzSGV4OiBbU3RyaW5nXSkgewpsZXQgc2NvcGVkUHJvdmlkZXI6IEBTY29wZWRGVFByb3ZpZGVycy5TY29wZWRGVFByb3ZpZGVyCgpwcmVwYXJlKHNpZ25lcjogYXV0aChDb3B5VmFsdWUsIEJvcnJvd1ZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsKICAgIC8qIC0tLSBDb25maWd1cmUgYSBTY29wZWRGVFByb3ZpZGVyIC0tLSAqLwogICAgLy8KICAgIC8vIElzc3VlIGFuZCBzdG9yZSBicmlkZ2UtZGVkaWNhdGVkIFByb3ZpZGVyIENhcGFiaWxpdHkgaW4gc3RvcmFnZSBpZiBuZWNlc3NhcnkKICAgIGlmIHNpZ25lci5zdG9yYWdlLnR5cGUoYXQ6IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgIC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICAgKQogICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgfQogICAgLy8gQ29weSB0aGUgc3RvcmVkIFByb3ZpZGVyIGNhcGFiaWxpdHkgYW5kIGNyZWF0ZSBhIFNjb3BlZEZUUHJvdmlkZXIKICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgIGZyb206IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgKICAgICAgICApID8/IHBhbmljKCJJbnZhbGlkIFByb3ZpZGVyIENhcGFiaWxpdHkgZm91bmQgaW4gc3RvcmFnZS4iKQogICAgLy8gU2V0IGEgd2l0aGRyYXdhbCBsaW1pdCBmb3IgdGhlIHByb3ZpZGVyCiAgICBsZXQgcHJvdmlkZXJMaW1pdCA9IEZsb3dFVk1CcmlkZ2VDb25maWcub25ib2FyZEZlZSAqIFVGaXg2NChhZGRyZXNzZXNBc0hleC5sZW5ndGgpCiAgICBsZXQgcHJvdmlkZXJGaWx0ZXIgPSBTY29wZWRGVFByb3ZpZGVycy5BbGxvd2FuY2VGaWx0ZXIocHJvdmlkZXJMaW1pdCkKICAgIC8vIENyZWF0ZSBTY29wZWRGVFByb3ZpZGVyIHRvIGV4cGlyZSBqdXN0IGFmdGVyIHRoaXMgdHJhbnNhY3Rpb24KICAgIHNlbGYuc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgICAgICAgcHJvdmlkZXI6IHByb3ZpZGVyQ2FwQ29weSwKICAgICAgICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICAgICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICAgICApCn0KZXhlY3V0ZSB7CiAgICAvLyBJdGVyYXRlIG92ZXIgcHJvdmlkZWQgYXJyYXkKICAgIGZvciBhZGRyZXNzSGV4IGluIGFkZHJlc3Nlc0FzSGV4IHsKICAgICAgICAvLyBDb252ZXJ0IGhleCBzdHJpbmcgdG8gRVZNQWRkcmVzcwogICAgICAgIGxldCBhZGRyZXNzID0gRVZNLmFkZHJlc3NGcm9tU3RyaW5nKGFkZHJlc3NIZXgpCiAgICAgICAgLy8gQ29udGludWUgaWYgdGhlIGhleCBpcyBub3QgYSB2YWxpZCBFVk0gYWRkcmVzcyBvciBpZiB0aGUgYWRkcmVzcyBpcyBhbHJlYWR5IG9uYm9hcmRlZAogICAgICAgIGlmIGFkZHJlc3MgPT0gbmlsIHx8IEZsb3dFVk1CcmlkZ2UuZXZtQWRkcmVzc1JlcXVpcmVzT25ib2FyZGluZyhhZGRyZXNzISkgIT0gdHJ1ZSB7CiAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgfQogICAgICAgIEZsb3dFVk1CcmlkZ2Uub25ib2FyZEJ5RVZNQWRkcmVzcygKICAgICAgICAgICAgYWRkcmVzcyEsCiAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICApCiAgICB9CiAgICBkZXN0cm95IHNlbGYuc2NvcGVkUHJvdmlkZXIKfQp9",
          "setupFTProvider": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgc2V0dXBGVFByb3ZpZGVyIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQoKCmltcG9ydCBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cyBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQoKaW1wb3J0IDxUb2tlbj4gZnJvbSA8VG9rZW5BZGRyZXNzPgoKdHJhbnNhY3Rpb24gewogICAgcHJlcGFyZShhY2N0OiBhdXRoKENhcGFiaWxpdGllcykgJkFjY291bnQpIHsKICAgICAgICBsZXQgdmF1bHREYXRhID0gRXhhbXBsZVRva2VuLnJlc29sdmVDb250cmFjdFZpZXcocmVzb3VyY2VUeXBlOiBuaWwsIHZpZXdUeXBlOiBUeXBlPEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPigpKSBhcyEgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE/CiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IHRoZSB2YXVsdCBkYXRhIHZpZXcgZm9yIEV4YW1wbGVUb2tlbiIpCiAgICAKICAgICAgICBhY2N0LmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4odmF1bHREYXRhLnN0b3JhZ2VQYXRoKQogICAgfQp9CiA=",
          "setupNFTFull": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgc2V0dXBORlRGdWxsIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4MWQ3ZTU3YWE1NTgxNzQ0OAoKaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweDFkN2U1N2FhNTU4MTc0NDgKCgppbXBvcnQgPFRva2VuPiBmcm9tIDxUb2tlbkFkZHJlc3M+Cgp0cmFuc2FjdGlvbiB7CiAgICBwcmVwYXJlKGFjY3Q6IGF1dGgoU3RvcmFnZSwgQ2FwYWJpbGl0aWVzKSAmQWNjb3VudCkgewogICAgICAgIGxldCBkID0gRXhhbXBsZU5GVC5yZXNvbHZlQ29udHJhY3RWaWV3KHJlc291cmNlVHlwZTogbmlsLCB2aWV3VHlwZTogVHlwZTxNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPigpKSEgYXMhIE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGEKCiAgICAgICAgaWYgYWNjdC5zdG9yYWdlLmJvcnJvdzwmRXhhbXBsZU5GVC5Db2xsZWN0aW9uPihmcm9tOiBkLnN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBhY2N0LnN0b3JhZ2Uuc2F2ZSg8LSBFeGFtcGxlTkZULmNyZWF0ZUVtcHR5Q29sbGVjdGlvbigpLCB0bzogRXhhbXBsZU5GVC5Db2xsZWN0aW9uU3RvcmFnZVBhdGgpCiAgICAgICAgfQoKICAgICAgICBhY2N0LmNhcGFiaWxpdGllcy51bnB1Ymxpc2goZC5wdWJsaWNQYXRoKQogICAgICAgIGxldCBjYXAgPSBhY2N0LmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCZ7RXhhbXBsZU5GVC5FeGFtcGxlTkZUQ29sbGVjdGlvblB1YmxpYywgTm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uUHVibGljfT4oZC5zdG9yYWdlUGF0aCkKICAgICAgICBhY2N0LmNhcGFiaWxpdGllcy5wdWJsaXNoKGNhcCwgYXQ6IGQucHVibGljUGF0aCkKCiAgICAgICAgYWNjdC5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RXhhbXBsZU5GVC5FeGFtcGxlTkZUQ29sbGVjdGlvblB1YmxpYywgTm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uUHVibGljLCBOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oZC5zdG9yYWdlUGF0aCkKICAgIH0KfQo=",
          "test": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgdGVzdCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoK",
          "transferTokens": "Ly8gRmxvdyBXYWxsZXQgLSBtYWlubmV0IFNjcmlwdCAgdHJhbnNmZXJUb2tlbnMgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhmMjMzZGNlZTg4ZmUwYWJlCgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHgxNjU0NjUzMzk5MDQwYTYxCgoKdHJhbnNhY3Rpb24ocmVjaXBpZW50OiBBZGRyZXNzLCBhbW91bnQ6IFVGaXg2NCkgewogICAgLy8gVGhlIFZhdWx0IHJlc291cmNlIHRoYXQgaG9sZHMgdGhlIHRva2VucyB0aGF0IGFyZSBiZWluZyB0cmFuc2ZlcmVkCiAgICBsZXQgc2VudFZhdWx0OiBAe0Z1bmdpYmxlVG9rZW4uVmF1bHR9CiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChTdG9yYWdlLCBCb3Jyb3dWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICAgLy8gR2V0IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBzdG9yZWQgdmF1bHQKICAgICAgICBsZXQgdmF1bHRSZWYgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAmRmxvd1Rva2VuLlZhdWx0Pihmcm9tOiAvc3RvcmFnZS9GbG93VG9rZW5WYXVsdCkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVmZXJlbmNlIHRvIHRoZSBvd25lcidzIFZhdWx0ISIpCgogICAgICAgIC8vIFdpdGhkcmF3IHRva2VucyBmcm9tIHRoZSBzaWduZXIncyBzdG9yZWQgdmF1bHQKICAgICAgICBzZWxmLnNlbnRWYXVsdCA8LSB2YXVsdFJlZi53aXRoZHJhdyhhbW91bnQ6IGFtb3VudCkKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICAvLyBHZXQgdGhlIHJlY2lwaWVudCdzIHB1YmxpYyBhY2NvdW50IG9iamVjdAogICAgICAgIGxldCByZWNpcGllbnRBY2NvdW50ID0gZ2V0QWNjb3VudChyZWNpcGllbnQpCgogICAgICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgcmVjaXBpZW50J3MgUmVjZWl2ZXIKICAgICAgICBsZXQgcmVjZWl2ZXJSZWYgPSByZWNpcGllbnRBY2NvdW50LmNhcGFiaWxpdGllcy5ib3Jyb3c8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4oL3B1YmxpYy9GbG93VG9rZW5SZWNlaXZlcikhCiAgICAgICAgICAgIAogICAgICAgIC8vIERlcG9zaXQgdGhlIHdpdGhkcmF3biB0b2tlbnMgaW4gdGhlIHJlY2lwaWVudCdzIHJlY2VpdmVyCiAgICAgICAgcmVjZWl2ZXJSZWYuZGVwb3NpdChmcm9tOiA8LXNlbGYuc2VudFZhdWx0KQogICAgfQp9"
        }
      },
      "testnet": {
        "version": "1.0",
        "ft": {
          "isTokenListEnabled": "",
          "getTokenListBalance": "",
          "addToken": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgYWRkVG9rZW4gLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHg5YTA3NjZkOTNiNjYwOGI3CgppbXBvcnQgPFRva2VuPiBmcm9tIDxUb2tlbkFkZHJlc3M+Cgp0cmFuc2FjdGlvbiB7CgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSwgQ2FwYWJpbGl0aWVzKSAmQWNjb3VudCkgewoKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8JjxUb2tlbj4uVmF1bHQ+KGZyb206IDxUb2tlblN0b3JhZ2VQYXRoPiApID09IG5pbCB7CiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUoPC0gPFRva2VuPi5jcmVhdGVFbXB0eVZhdWx0KHZhdWx0VHlwZTogVHlwZTxAPFRva2VuPi5WYXVsdD4oKSksIHRvOiA8VG9rZW5TdG9yYWdlUGF0aD4pCiAgICAgICAgfQoKICAgICAgICBpZiBzaWduZXIuY2FwYWJpbGl0aWVzLmV4aXN0cyg8VG9rZW5SZWNlaXZlclBhdGg+KSA9PSBmYWxzZSB7CiAgICAgICAgICAgIGxldCByZWNlaXZlckNhcGFiaWxpdHkgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JjxUb2tlbj4uVmF1bHQ+KDxUb2tlblN0b3JhZ2VQYXRoPikKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy5wdWJsaXNoKHJlY2VpdmVyQ2FwYWJpbGl0eSwgYXQ6IDxUb2tlblJlY2VpdmVyUGF0aD4pCiAgICAgICAgCiAgICAgICAgfQogICAgICAgCiAgICAgICAgaWYgc2lnbmVyLmNhcGFiaWxpdGllcy5leGlzdHMoPFRva2VuQmFsYW5jZVBhdGg+KSA9PSBmYWxzZSB7CiAgICAgICAgICAgIGxldCBiYWxhbmNlQ2FwYWJpbGl0eSA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwmPFRva2VuPi5WYXVsdD4oPFRva2VuU3RvcmFnZVBhdGg+KQogICAgICAgICAgICBzaWduZXIuY2FwYWJpbGl0aWVzLnB1Ymxpc2goYmFsYW5jZUNhcGFiaWxpdHksIGF0OiA8VG9rZW5CYWxhbmNlUGF0aD4pCiAgICAgICAgfQogICAgCiAgICB9Cn0=",
          "enableTokenStorage": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZW5hYmxlVG9rZW5TdG9yYWdlIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4OWEwNzY2ZDkzYjY2MDhiNwoKaW1wb3J0IDxUb2tlbj4gZnJvbSA8VG9rZW5BZGRyZXNzPgoKdHJhbnNhY3Rpb24gewoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UsIENhcGFiaWxpdGllcykgJkFjY291bnQpIHsKCiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UuYm9ycm93PCY8VG9rZW4+LlZhdWx0Pihmcm9tOiA8VG9rZW5TdG9yYWdlUGF0aD4gKSA9PSBuaWwgewogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKDwtIDxUb2tlbj4uY3JlYXRlRW1wdHlWYXVsdCh2YXVsdFR5cGU6IFR5cGU8QDxUb2tlbj4uVmF1bHQ+KCkpLCB0bzogPFRva2VuU3RvcmFnZVBhdGg+KQogICAgICAgIH0KCiAgICAgICAgaWYgc2lnbmVyLmNhcGFiaWxpdGllcy5leGlzdHMoPFRva2VuUmVjZWl2ZXJQYXRoPikgPT0gZmFsc2UgewogICAgICAgICAgICBsZXQgcmVjZWl2ZXJDYXBhYmlsaXR5ID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCY8VG9rZW4+LlZhdWx0Pig8VG9rZW5TdG9yYWdlUGF0aD4pCiAgICAgICAgICAgIHNpZ25lci5jYXBhYmlsaXRpZXMucHVibGlzaChyZWNlaXZlckNhcGFiaWxpdHksIGF0OiA8VG9rZW5SZWNlaXZlclBhdGg+KQogICAgICAgIAogICAgICAgIH0KICAgICAgIAogICAgICAgIGlmIHNpZ25lci5jYXBhYmlsaXRpZXMuZXhpc3RzKDxUb2tlbkJhbGFuY2VQYXRoPikgPT0gZmFsc2UgewogICAgICAgICAgICBsZXQgYmFsYW5jZUNhcGFiaWxpdHkgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JjxUb2tlbj4uVmF1bHQ+KDxUb2tlblN0b3JhZ2VQYXRoPikKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy5wdWJsaXNoKGJhbGFuY2VDYXBhYmlsaXR5LCBhdDogPFRva2VuQmFsYW5jZVBhdGg+KQogICAgICAgIH0KICAgIAogICAgfQp9",
          "getTokenBalanceStorage": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0VG9rZW5CYWxhbmNlU3RvcmFnZSAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweDlhMDc2NmQ5M2I2NjA4YjcKCgovLy8gUXVlcmllcyBmb3IgRlQuVmF1bHQgYmFsYW5jZSBvZiBhbGwgRlQuVmF1bHRzIGluIHRoZSBzcGVjaWZpZWQgYWNjb3VudC4KLy8vCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MpOiB7U3RyaW5nOiBVRml4NjR9IHsKICAgIC8vIEdldCB0aGUgYWNjb3VudAogICAgbGV0IGFjY291bnQgPSBnZXRBdXRoQWNjb3VudDxhdXRoKEJvcnJvd1ZhbHVlKSAmQWNjb3VudD4oYWRkcmVzcykKICAgIC8vIEluaXQgZm9yIHJldHVybiB2YWx1ZQogICAgbGV0IGJhbGFuY2VzOiB7U3RyaW5nOiBVRml4NjR9ID0ge30KICAgIC8vIFRyYWNrIHNlZW4gVHlwZXMgaW4gYXJyYXkKICAgIGxldCBzZWVuOiBbU3RyaW5nXSA9IFtdCiAgICAvLyBBc3NpZ24gdGhlIHR5cGUgd2UnbGwgbmVlZAogICAgbGV0IHZhdWx0VHlwZTogVHlwZSA9IFR5cGU8QHtGdW5naWJsZVRva2VuLlZhdWx0fT4oKQogICAgLy8gSXRlcmF0ZSBvdmVyIGFsbCBzdG9yZWQgaXRlbXMgJiBnZXQgdGhlIHBhdGggaWYgdGhlIHR5cGUgaXMgd2hhdCB3ZSdyZSBsb29raW5nIGZvcgogICAgYWNjb3VudC5zdG9yYWdlLmZvckVhY2hTdG9yZWQoZnVuIChwYXRoOiBTdG9yYWdlUGF0aCwgdHlwZTogVHlwZSk6IEJvb2wgewogICAgICAgIGlmICF0eXBlLmlzUmVjb3ZlcmVkICYmICh0eXBlLmlzSW5zdGFuY2UodmF1bHRUeXBlKSB8fCB0eXBlLmlzU3VidHlwZShvZjogdmF1bHRUeXBlKSkgewogICAgICAgICAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIHJlc291cmNlICYgaXRzIGJhbGFuY2UKICAgICAgICAgICAgbGV0IHZhdWx0UmVmID0gYWNjb3VudC5zdG9yYWdlLmJvcnJvdzwme0Z1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KGZyb206IHBhdGgpIQogICAgICAgICAgICAvLyBJbnNlcnQgYSBuZXcgdmFsdWVzIGlmIGl0J3MgdGhlIGZpcnN0IHRpbWUgd2UndmUgc2VlbiB0aGUgdHlwZQogICAgICAgICAgICBpZiAhc2Vlbi5jb250YWlucyh0eXBlLmlkZW50aWZpZXIpIHsKICAgICAgICAgICAgICAgIGJhbGFuY2VzLmluc2VydChrZXk6IHR5cGUuaWRlbnRpZmllciwgdmF1bHRSZWYuYmFsYW5jZSkKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSBqdXN0IHVwZGF0ZSB0aGUgYmFsYW5jZSBvZiB0aGUgdmF1bHQgKHVubGlrZWx5IHdlJ2xsIHNlZSB0aGUgc2FtZSB0eXBlIHR3aWNlIGluCiAgICAgICAgICAgICAgICAvLyB0aGUgc2FtZSBhY2NvdW50LCBidXQgd2Ugd2FudCB0byBjb3ZlciB0aGUgY2FzZSkKICAgICAgICAgICAgICAgIGJhbGFuY2VzW3R5cGUuaWRlbnRpZmllcl0gPSBiYWxhbmNlc1t0eXBlLmlkZW50aWZpZXJdISArIHZhdWx0UmVmLmJhbGFuY2UKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gdHJ1ZQogICAgfSkKCiAgICAvLyBBZGQgYXZhaWxhYmxlIEZsb3cgVG9rZW4gQmFsYW5jZQogICAgYmFsYW5jZXMuaW5zZXJ0KGtleTogImF2YWlsYWJsZUZsb3dUb2tlbiIsIGFjY291bnQuYXZhaWxhYmxlQmFsYW5jZSkKCiAgICByZXR1cm4gYmFsYW5jZXMKfQ==",
          "transferEvmTokens": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgdHJhbnNmZXJFdm1Ub2tlbnMgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBFVk0gZnJvbSAweDhjNTMwM2VhYTI2MjAyZDYKCgovLy8gVHJhbnNmZXJzICRGTE9XIGZyb20gdGhlIHNpZ25lcidzIGFjY291bnQgQ2FkZW5jZSBGbG93IGJhbGFuY2UgdG8gdGhlIHJlY2lwaWVudCdzIGhleC1lbmNvZGVkIEVWTSBhZGRyZXNzLgovLy8gTm90ZSB0aGF0IGEgQ09BIG11c3QgaGF2ZSBhICRGTE9XIGJhbGFuY2UgaW4gRVZNIGJlZm9yZSB0cmFuc2ZlcnJpbmcgdmFsdWUgdG8gYW5vdGhlciBFVk0gYWRkcmVzcy4KLy8vCnRyYW5zYWN0aW9uKHRvRVZNQWRkcmVzc0hleDogU3RyaW5nLCBhbW91bnQ6IFVJbnQyNTYsIGdhc0xpbWl0OiBVSW50NjQpIHsKCiAgICBsZXQgY29hOiBhdXRoKEVWTS5XaXRoZHJhdywgRVZNLkNhbGwpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudAogICAgbGV0IHJlY2lwaWVudEVWTUFkZHJlc3M6IEVWTS5FVk1BZGRyZXNzCgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQm9ycm93VmFsdWUsIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS50eXBlKGF0OiAvc3RvcmFnZS9ldm0pID09IG5pbCB7CiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUoPC1FVk0uY3JlYXRlQ2FkZW5jZU93bmVkQWNjb3VudCgpLCB0bzogL3N0b3JhZ2UvZXZtKQogICAgICAgIH0KICAgICAgICBzZWxmLmNvYSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEVWTS5XaXRoZHJhdywgRVZNLkNhbGwpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oZnJvbTogL3N0b3JhZ2UvZXZtKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyByZWZlcmVuY2UgdG8gdGhlIHNpZ25lcidzIGJyaWRnZWQgYWNjb3VudCIpCgogICAgICAgIHNlbGYucmVjaXBpZW50RVZNQWRkcmVzcyA9IEVWTS5hZGRyZXNzRnJvbVN0cmluZyh0b0VWTUFkZHJlc3NIZXgpCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgLy8gaWYgc2VsZi5yZWNpcGllbnRFVk1BZGRyZXNzLmJ5dGVzID09IHNlbGYuY29hLmFkZHJlc3MoKS5ieXRlcyB7CiAgICAgICAgLy8gICAgIHJldHVybgogICAgICAgIC8vIH0KICAgICAgICBsZXQgZGF0YSA9ICIiCiAgICAgICAgbGV0IHR4UmVzdWx0ID0gc2VsZi5jb2EuY2FsbCgKICAgICAgICAgICAgdG86IHNlbGYucmVjaXBpZW50RVZNQWRkcmVzcywKICAgICAgICAgICAgZGF0YTogZGF0YSwKICAgICAgICAgICAgZ2FzTGltaXQ6IGdhc0xpbWl0LAogICAgICAgICAgICB2YWx1ZTogdmFsdWVCYWxhbmNlCiAgICAgICAgKQogICAgICAgIGFzc2VydCgKICAgICAgICAgICAgdHhSZXN1bHQuc3RhdHVzID09IEVWTS5TdGF0dXMuZmFpbGVkIHx8IHR4UmVzdWx0LnN0YXR1cyA9PSBFVk0uU3RhdHVzLnN1Y2Nlc3NmdWwsCiAgICAgICAgICAgIG1lc3NhZ2U6ICJldm1fZXJyb3I9Ii5jb25jYXQodHhSZXN1bHQuZXJyb3JNZXNzYWdlKS5jb25jYXQoIlxuIikKICAgICAgICApCiAgICB9Cn0=",
          "transferTokens": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgdHJhbnNmZXJUb2tlbnMgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHg5YTA3NjZkOTNiNjYwOGI3CgppbXBvcnQgPFRva2VuPiBmcm9tIDxUb2tlbkFkZHJlc3M+CgoKdHJhbnNhY3Rpb24oYW1vdW50OiBVRml4NjQsIHJlY2lwaWVudDogQWRkcmVzcykgewoKICAgIC8vIFRoZSBWYXVsdCByZXNvdXJjZSB0aGF0IGhvbGRzIHRoZSB0b2tlbnMgdGhhdCBhcmUgYmVpbmcgdHJhbnNmZXJlZAogICAgbGV0IHNlbnRWYXVsdDogQHtGdW5naWJsZVRva2VuLlZhdWx0fQoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UsIEJvcnJvd1ZhbHVlKSAmQWNjb3VudCkgewogICAgICAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIHNpZ25lcidzIHN0b3JlZCB2YXVsdAogICAgICAgIGxldCB2YXVsdFJlZiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICY8VG9rZW4+LlZhdWx0Pihmcm9tOiA8VG9rZW5TdG9yYWdlUGF0aD4pCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlZmVyZW5jZSB0byB0aGUgb3duZXIncyBWYXVsdCEiKQoKICAgICAgICAvLyBXaXRoZHJhdyB0b2tlbnMgZnJvbSB0aGUgc2lnbmVyJ3Mgc3RvcmVkIHZhdWx0CiAgICAgICAgc2VsZi5zZW50VmF1bHQgPC0gdmF1bHRSZWYud2l0aGRyYXcoYW1vdW50OiBhbW91bnQpCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgLy8gR2V0IHRoZSByZWNpcGllbnQncyBwdWJsaWMgYWNjb3VudCBvYmplY3QKICAgICAgICBsZXQgcmVjaXBpZW50QWNjb3VudCA9IGdldEFjY291bnQocmVjaXBpZW50KQoKICAgICAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIHJlY2lwaWVudCdzIFJlY2VpdmVyCiAgICAgICAgbGV0IHJlY2VpdmVyUmVmID0gcmVjaXBpZW50QWNjb3VudC5jYXBhYmlsaXRpZXMuYm9ycm93PCZ7RnVuZ2libGVUb2tlbi5WYXVsdH0+KDxUb2tlblJlY2VpdmVyUGF0aD4pIQogICAgICAgICAgICAKICAgICAgICAvLyBEZXBvc2l0IHRoZSB3aXRoZHJhd24gdG9rZW5zIGluIHRoZSByZWNpcGllbnQncyByZWNlaXZlcgogICAgICAgIHJlY2VpdmVyUmVmLmRlcG9zaXQoZnJvbTogPC1zZWxmLnNlbnRWYXVsdCkKCiAgICB9Cn0=",
          "transferTokensV3": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgdHJhbnNmZXJUb2tlbnNWMyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweDlhMDc2NmQ5M2I2NjA4YjcKCmltcG9ydCBTdG9yYWdlUmVudCBmcm9tIDB4ZDUwMDg0YTFhNDNiMTUwNwoKaW1wb3J0IDxUb2tlbj4gZnJvbSA8VG9rZW5BZGRyZXNzPgoKCnRyYW5zYWN0aW9uKGFtb3VudDogVUZpeDY0LCByZWNpcGllbnQ6IEFkZHJlc3MpIHsKCiAgICAvLyBUaGUgVmF1bHQgcmVzb3VyY2UgdGhhdCBob2xkcyB0aGUgdG9rZW5zIHRoYXQgYXJlIGJlaW5nIHRyYW5zZmVyZWQKICAgIGxldCBzZW50VmF1bHQ6IEB7RnVuZ2libGVUb2tlbi5WYXVsdH0KCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChTdG9yYWdlLCBCb3Jyb3dWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICAgLy8gR2V0IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBzdG9yZWQgdmF1bHQKICAgICAgICBsZXQgdmF1bHRSZWYgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAmPFRva2VuPi5WYXVsdD4oZnJvbTogPFRva2VuU3RvcmFnZVBhdGg+KQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyByZWZlcmVuY2UgdG8gdGhlIG93bmVyJ3MgVmF1bHQhIikKCiAgICAgICAgLy8gV2l0aGRyYXcgdG9rZW5zIGZyb20gdGhlIHNpZ25lcidzIHN0b3JlZCB2YXVsdAogICAgICAgIHNlbGYuc2VudFZhdWx0IDwtIHZhdWx0UmVmLndpdGhkcmF3KGFtb3VudDogYW1vdW50KQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIC8vIEdldCB0aGUgcmVjaXBpZW50J3MgcHVibGljIGFjY291bnQgb2JqZWN0CiAgICAgICAgbGV0IHJlY2lwaWVudEFjY291bnQgPSBnZXRBY2NvdW50KHJlY2lwaWVudCkKCiAgICAgICAgLy8gR2V0IGEgcmVmZXJlbmNlIHRvIHRoZSByZWNpcGllbnQncyBSZWNlaXZlcgogICAgICAgIGxldCByZWNlaXZlclJlZiA9IHJlY2lwaWVudEFjY291bnQuY2FwYWJpbGl0aWVzLmJvcnJvdzwme0Z1bmdpYmxlVG9rZW4uVmF1bHR9Pig8VG9rZW5SZWNlaXZlclBhdGg+KSEKICAgICAgICAgICAgCiAgICAgICAgLy8gRGVwb3NpdCB0aGUgd2l0aGRyYXduIHRva2VucyBpbiB0aGUgcmVjaXBpZW50J3MgcmVjZWl2ZXIKICAgICAgICByZWNlaXZlclJlZi5kZXBvc2l0KGZyb206IDwtc2VsZi5zZW50VmF1bHQpCiAgICAgICAgU3RvcmFnZVJlbnQudHJ5UmVmaWxsKHJlY2lwaWVudCkKCiAgICB9Cn0="
        },
        "nft": {
          "checkNFTListEnabledNew": "",
          "checkNFTListEnabled": ""
        },
        "basic": {
          "accountStorage": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgYWNjb3VudFN0b3JhZ2UgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCiBhY2Nlc3MoYWxsKSBzdHJ1Y3QgU3RvcmFnZUluZm8gewogICAgYWNjZXNzKGFsbCkgIGxldCBjYXBhY2l0eTogVUludDY0CiAgICBhY2Nlc3MoYWxsKSAgbGV0IHVzZWQ6IFVJbnQ2NAogICAgYWNjZXNzKGFsbCkgIGxldCBhdmFpbGFibGU6IFVJbnQ2NAoKICAgIGluaXQoY2FwYWNpdHk6IFVJbnQ2NCwgdXNlZDogVUludDY0LCBhdmFpbGFibGU6IFVJbnQ2NCkgewogICAgICAgIHNlbGYuY2FwYWNpdHkgPSBjYXBhY2l0eQogICAgICAgIHNlbGYudXNlZCA9IHVzZWQKICAgICAgICBzZWxmLmF2YWlsYWJsZSA9IGF2YWlsYWJsZQogICAgfQp9CgphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyOiBBZGRyZXNzKTogU3RvcmFnZUluZm8gewogICAgbGV0IGFjY3QgPSBnZXRBY2NvdW50KGFkZHIpCiAgICB2YXIgYXZhaWxhYmxlOiBVSW50NjQgPSAwCiAgICBpZiBhY2N0LnN0b3JhZ2UuY2FwYWNpdHkgPiAwIHsKICAgICAgICBhdmFpbGFibGUgPSBhY2N0LnN0b3JhZ2UuY2FwYWNpdHkgLSBhY2N0LnN0b3JhZ2UudXNlZAogICAgfQogICAgcmV0dXJuIFN0b3JhZ2VJbmZvKGNhcGFjaXR5OiBhY2N0LnN0b3JhZ2UuY2FwYWNpdHksCiAgICAgICAgICAgIHVzZWQ6IGFjY3Quc3RvcmFnZS51c2VkLAogICAgICAgICAgICBhdmFpbGFibGU6IGF2YWlsYWJsZSkKfQ==",
          "addContractToAccount": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgYWRkQ29udHJhY3RUb0FjY291bnQgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCnRyYW5zYWN0aW9uKG5hbWU6IFN0cmluZywgY29kZTogU3RyaW5nKSB7CiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChDb250cmFjdHMsIEFkZENvbnRyYWN0KSAmQWNjb3VudCkgewogICAgICAgIHNpZ25lci5jb250cmFjdHMuYWRkKG5hbWU6IG5hbWUsIGNvZGU6IGNvZGUudXRmOCkKICAgIH0KfQ==",
          "addKey": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgYWRkS2V5IC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgQ3J5cHRvCgp0cmFuc2FjdGlvbihwdWJsaWNLZXk6IFN0cmluZywgc2lnbmF0dXJlQWxnb3JpdGhtOiBVSW50OCwgaGFzaEFsZ29yaXRobTogVUludDgsIHdlaWdodDogVUZpeDY0KSB7CiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChLZXlzKSAmQWNjb3VudCkgewogICAgICAgIGxldCBrZXkgPSBQdWJsaWNLZXkoCiAgICAgICAgICAgIHB1YmxpY0tleTogcHVibGljS2V5LmRlY29kZUhleCgpLAogICAgICAgICAgICBzaWduYXR1cmVBbGdvcml0aG06IFNpZ25hdHVyZUFsZ29yaXRobShyYXdWYWx1ZTogc2lnbmF0dXJlQWxnb3JpdGhtKSEKICAgICAgICApCgogICAgICAgIHNpZ25lci5rZXlzLmFkZCgKICAgICAgICAgICAgcHVibGljS2V5OiBrZXksCiAgICAgICAgICAgIGhhc2hBbGdvcml0aG06IEhhc2hBbGdvcml0aG0ocmF3VmFsdWU6IGhhc2hBbGdvcml0aG0pISwKICAgICAgICAgICAgd2VpZ2h0OiB3ZWlnaHQKICAgICAgICApCiAgICB9Cn0=",
          "addKeyTemp": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgYWRkS2V5VGVtcCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IENyeXB0bwoKdHJhbnNhY3Rpb24ocHVibGljS2V5czogW0NyeXB0by5LZXlMaXN0RW50cnldLCBjb250cmFjdHM6IHtTdHJpbmc6IFN0cmluZ30pIHsKCXByZXBhcmUoc2lnbmVyOiBhdXRoKEJvcnJvd1ZhbHVlIHwgU3RvcmFnZSkgJkFjY291bnQpIHsKCgkJbGV0IGFjY291bnQgPSBBY2NvdW50KHBheWVyOiBzaWduZXIpCgoJCS8vIGFkZCBhbGwgdGhlIGtleXMgdG8gdGhlIGFjY291bnQKCQlmb3Iga2V5IGluIHB1YmxpY0tleXMgewoJCQlhY2NvdW50LmtleXMuYWRkKHB1YmxpY0tleToga2V5LnB1YmxpY0tleSwgaGFzaEFsZ29yaXRobToga2V5Lmhhc2hBbGdvcml0aG0sIHdlaWdodDoga2V5LndlaWdodCkKCQl9CgkJCgkJLy8gYWRkIGNvbnRyYWN0cyBpZiBwcm92aWRlZAoJCWZvciBjb250cmFjdCBpbiBjb250cmFjdHMua2V5cyB7CgkJCWFjY291bnQuY29udHJhY3RzLmFkZChuYW1lOiBjb250cmFjdCwgY29kZTogY29udHJhY3RzW2NvbnRyYWN0XSEuZGVjb2RlSGV4KCkpCgkJfQoJfQp9",
          "createAccount": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgY3JlYXRlQWNjb3VudCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IENyeXB0bwppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHg3ZTYwZGYwNDJhOWMwODY4CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4OWEwNzY2ZDkzYjY2MDhiNwoKCiB0cmFuc2FjdGlvbihwdWJsaWNLZXlzOiBbQ3J5cHRvLktleUxpc3RFbnRyeV0sIGNvbnRyYWN0czoge1N0cmluZzogU3RyaW5nfSwgZnVuZEFtb3VudDogVUZpeDY0KSB7CiAgICBsZXQgdG9rZW5SZWNlaXZlcjogJntGdW5naWJsZVRva2VuLlJlY2VpdmVyfQogICAgbGV0IHNlbnRWYXVsdDogQEZ1bmdpYmxlVG9rZW4uVmF1bHQKCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChCb3Jyb3dWYWx1ZSB8IFN0b3JhZ2UpICZBY2NvdW50KSB7CiAgICAgICAgbGV0IGFjY291bnQgPSBBY2NvdW50KHBheWVyOiBzaWduZXIpCiAgICAgICAgZm9yIGtleSBpbiBwdWJsaWNLZXlzIHsKICAgICAgICAgICAgYWNjb3VudC5rZXlzLmFkZChwdWJsaWNLZXk6IGtleS5wdWJsaWNLZXksIGhhc2hBbGdvcml0aG06IGtleS5oYXNoQWxnb3JpdGhtLCB3ZWlnaHQ6IGtleS53ZWlnaHQpCiAgICAgICAgfQogICAgICAgIGZvciBjb250cmFjdCBpbiBjb250cmFjdHMua2V5cyB7CiAgICAgICAgICAgIGFjY291bnQuY29udHJhY3RzLmFkZChuYW1lOiBjb250cmFjdCwgY29kZTogY29udHJhY3RzW2NvbnRyYWN0XSEuZGVjb2RlSGV4KCkpCiAgICAgICAgfQogICAgICAgIHNlbGYudG9rZW5SZWNlaXZlciA9IGFjY291bnQuY2FwYWJpbGl0aWVzLmJvcnJvdzwme0Z1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9PigvcHVibGljL2Zsb3dUb2tlblJlY2VpdmVyKSA/PyBwYW5pYygiVW5hYmxlIHRvIGJvcnJvdyByZWNlaXZlciByZWZlcmVuY2UiKQogICAgICAgIGxldCB2YXVsdFJlZiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZGbG93VG9rZW4uVmF1bHQ+KGZyb206IC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0KSA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyByZWZlcmVuY2UgdG8gdGhlIG93bmVyJydzIFZhdWx0ISIpCiAgICAgICAgc2VsZi5zZW50VmF1bHQgPC0gdmF1bHRSZWYud2l0aGRyYXcoYW1vdW50OiBmdW5kQW1vdW50KQogICAgfQogICAgZXhlY3V0ZSB7CiAgICAgICAgc2VsZi50b2tlblJlY2VpdmVyLmRlcG9zaXQoZnJvbTogPC1zZWxmLnNlbnRWYXVsdCkKICAgIH0KIH0=",
          "createAccountSdk": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgY3JlYXRlQWNjb3VudFNkayAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IENyeXB0bwoKdHJhbnNhY3Rpb24ocHVibGljS2V5OiBTdHJpbmcsIHNpZ25hdHVyZUFsZ29yaXRobTogVUludDgsIGhhc2hBbGdvcml0aG06IFVJbnQ4LCB3ZWlnaHQ6IFVGaXg2NCwgY29udHJhY3RzOiB7U3RyaW5nOiBTdHJpbmd9KSB7CiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChCb3Jyb3dWYWx1ZSB8IFN0b3JhZ2UpICZBY2NvdW50KSB7CiAgICAgICAgbGV0IGFjY291bnQgPSBBY2NvdW50KHBheWVyOiBzaWduZXIpCgogICAgICAgIGxldCBrZXkgPSBQdWJsaWNLZXkoCiAgICAgICAgICAgIHB1YmxpY0tleTogcHVibGljS2V5LmRlY29kZUhleCgpLAogICAgICAgICAgICBzaWduYXR1cmVBbGdvcml0aG06IFNpZ25hdHVyZUFsZ29yaXRobShyYXdWYWx1ZTogc2lnbmF0dXJlQWxnb3JpdGhtKSEKICAgICAgICApCgogICAgICAgIGFjY291bnQua2V5cy5hZGQoCiAgICAgICAgICAgIHB1YmxpY0tleToga2V5LAogICAgICAgICAgICBoYXNoQWxnb3JpdGhtOiBIYXNoQWxnb3JpdGhtKHJhd1ZhbHVlOiBoYXNoQWxnb3JpdGhtKSEsCiAgICAgICAgICAgIHdlaWdodDogd2VpZ2h0CiAgICAgICAgKQoKICAgICAgICBmb3IgY29udHJhY3QgaW4gY29udHJhY3RzLmtleXMgewogICAgICAgICAgICBhY2NvdW50LmNvbnRyYWN0cy5hZGQobmFtZTogY29udHJhY3QsIGNvZGU6IGNvbnRyYWN0c1tjb250cmFjdF0hLmRlY29kZUhleCgpKQogICAgICAgIH0KICAgIH0KfQ==",
          "getAccountInfo": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0QWNjb3VudEluZm8gLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmFjY2VzcyhhbGwpIHN0cnVjdCBSZXN1bHQgewogIGFjY2VzcyhhbGwpIGxldCBhZGRyZXNzOiBBZGRyZXNzCiAgYWNjZXNzKGFsbCkgbGV0IGJhbGFuY2U6IFVGaXg2NAogIGFjY2VzcyhhbGwpIGxldCBhdmFpbGFibGVCYWxhbmNlOiBVRml4NjQKICBhY2Nlc3MoYWxsKSBsZXQgc3RvcmFnZVVzZWQ6IFVJbnQ2NAogIGFjY2VzcyhhbGwpIGxldCBzdG9yYWdlQ2FwYWNpdHk6IFVJbnQ2NAogIGFjY2VzcyhhbGwpIGxldCBzdG9yYWdlRmxvdzogVUZpeDY0CgogIGluaXQoCiAgICBhZGRyZXNzOiBBZGRyZXNzLAogICAgYmFsYW5jZTogVUZpeDY0LAogICAgYXZhaWxhYmxlQmFsYW5jZTogVUZpeDY0LAogICAgc3RvcmFnZVVzZWQ6IFVJbnQ2NCwKICAgIHN0b3JhZ2VDYXBhY2l0eTogVUludDY0LAogICAgc3RvcmFnZUZsb3c6IFVGaXg2NCwKICApIHsKICAgIHNlbGYuYWRkcmVzcyA9IGFkZHJlc3MKICAgIHNlbGYuYmFsYW5jZSA9IGJhbGFuY2UKICAgIHNlbGYuYXZhaWxhYmxlQmFsYW5jZSA9IGF2YWlsYWJsZUJhbGFuY2UKICAgIHNlbGYuc3RvcmFnZVVzZWQgPSBzdG9yYWdlVXNlZAogICAgc2VsZi5zdG9yYWdlQ2FwYWNpdHkgPSBzdG9yYWdlQ2FwYWNpdHkKICAgIHNlbGYuc3RvcmFnZUZsb3cgPSBzdG9yYWdlRmxvdwogIH0KfQoKYWNjZXNzKGFsbCkgZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcyk6IFJlc3VsdCB7CiAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgcmV0dXJuIFJlc3VsdCgKICAgIGFkZHJlc3M6IGFjY291bnQuYWRkcmVzcywKICAgIGJhbGFuY2U6IGFjY291bnQuYmFsYW5jZSwKICAgIGF2YWlsYWJsZUJhbGFuY2U6IGFjY291bnQuYXZhaWxhYmxlQmFsYW5jZSwKICAgIHN0b3JhZ2VVc2VkOiBhY2NvdW50LnN0b3JhZ2UudXNlZCwKICAgIHN0b3JhZ2VDYXBhY2l0eTogYWNjb3VudC5zdG9yYWdlLmNhcGFjaXR5LAogICAgc3RvcmFnZUZsb3c6IGFjY291bnQuYmFsYW5jZSAtIGFjY291bnQuYXZhaWxhYmxlQmFsYW5jZQogICkKfQ==",
          "getAccountMinFlow": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0QWNjb3VudE1pbkZsb3cgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MpOiBVRml4NjQgewogIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogIHJldHVybiBhY2NvdW50LmJhbGFuY2UgLSBhY2NvdW50LmF2YWlsYWJsZUJhbGFuY2UKfQ==",
          "getAccountTotalFlowBalance": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0QWNjb3VudFRvdGFsRmxvd0JhbGFuY2UgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHg5YTA3NjZkOTNiNjYwOGI3CgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHg3ZTYwZGYwNDJhOWMwODY4CgppbXBvcnQgTG9ja2VkVG9rZW5zIGZyb20gMHg5NWUwMTlhMTdkMGUyM2Q3CgovLyBpbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4OWEwNzY2ZDkzYjY2MDhiNwoKLy8gaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4N2U2MGRmMDQyYTljMDg2OAoKLy8gaW1wb3J0IExvY2tlZFRva2VucyBmcm9tIDB4OTVlMDE5YTE3ZDBlMjNkNwoKCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MpOiBVRml4NjQgewogICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgICBsZXQgdW5sb2NrZWRWYXVsdCA9IGFjY291bnQKICAgICAgLmNhcGFiaWxpdGllcy5nZXQ8JntGdW5naWJsZVRva2VuLkJhbGFuY2V9PigvcHVibGljL2Zsb3dUb2tlbkJhbGFuY2UpIQogICAgICAuYm9ycm93KCkKICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBCYWxhbmNlIHJlZmVyZW5jZSB0byB0aGUgVmF1bHQiKQogICAgbGV0IHVubG9ja2VkQmFsYW5jZSA9IHVubG9ja2VkVmF1bHQuYmFsYW5jZQogICAgICAgIAogICAgbGV0IGxvY2tlZEFjY291bnRJbmZvQ2FwID0gYWNjb3VudAogICAgICAuY2FwYWJpbGl0aWVzLmdldAogICAgICA8JkxvY2tlZFRva2Vucy5Ub2tlbkhvbGRlcj4KICAgICAgKExvY2tlZFRva2Vucy5Mb2NrZWRBY2NvdW50SW5mb1B1YmxpY1BhdGgpCiAgICBpZiBsb2NrZWRBY2NvdW50SW5mb0NhcCA9PSBuaWwgfHwgIShsb2NrZWRBY2NvdW50SW5mb0NhcCEuY2hlY2soKSkgewogICAgICAgIHJldHVybiB1bmxvY2tlZEJhbGFuY2UKICAgIH0KICAgIAogICAgbGV0IGxvY2tlZEFjY291bnRJbmZvUmVmID0gbG9ja2VkQWNjb3VudEluZm9DYXAhLmJvcnJvdygpIQogICAgbGV0IGxvY2tlZEJhbGFuY2UgPSBsb2NrZWRBY2NvdW50SW5mb1JlZi5nZXRMb2NrZWRBY2NvdW50QmFsYW5jZSgpCiAgICAKICAgIHJldHVybiBsb2NrZWRCYWxhbmNlICsgdW5sb2NrZWRCYWxhbmNlCn0=",
          "getAccountTotalLockedFlowBalance": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0QWNjb3VudFRvdGFsTG9ja2VkRmxvd0JhbGFuY2UgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHg5YTA3NjZkOTNiNjYwOGI3CgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHg3ZTYwZGYwNDJhOWMwODY4CgppbXBvcnQgTG9ja2VkVG9rZW5zIGZyb20gMHg5NWUwMTlhMTdkMGUyM2Q3CgoKLy8gaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweDlhMDc2NmQ5M2I2NjA4YjcKCi8vIGltcG9ydCBGbG93VG9rZW4gZnJvbSAweDdlNjBkZjA0MmE5YzA4NjgKCi8vIGltcG9ydCBMb2NrZWRUb2tlbnMgZnJvbSAweDk1ZTAxOWExN2QwZTIzZDcKCgphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzKTogVUZpeDY0IHsKICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQoKICAgIGxldCBsb2NrZWRBY2NvdW50SW5mb0NhcCA9IGFjY291bnQKICAgICAgLmNhcGFiaWxpdGllcy5nZXQKICAgICAgPCZMb2NrZWRUb2tlbnMuVG9rZW5Ib2xkZXI+CiAgICAgIChMb2NrZWRUb2tlbnMuTG9ja2VkQWNjb3VudEluZm9QdWJsaWNQYXRoKQogICAgaWYgbG9ja2VkQWNjb3VudEluZm9DYXAgPT0gbmlsIHx8ICEobG9ja2VkQWNjb3VudEluZm9DYXAhLmNoZWNrKCkpIHsKICAgICAgICByZXR1cm4gVUZpeDY0KDApCiAgICB9CiAgICAKICAgIGxldCBsb2NrZWRBY2NvdW50SW5mb1JlZiA9IGxvY2tlZEFjY291bnRJbmZvQ2FwIS5ib3Jyb3coKSEKICAgIGxldCBsb2NrZWRCYWxhbmNlID0gbG9ja2VkQWNjb3VudEluZm9SZWYuZ2V0TG9ja2VkQWNjb3VudEJhbGFuY2UoKQogICAgCiAgICByZXR1cm4gbG9ja2VkQmFsYW5jZQp9",
          "getAccountTotalUnlockedFlowBalance": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0QWNjb3VudFRvdGFsVW5sb2NrZWRGbG93QmFsYW5jZSAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKLy8gaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweDlhMDc2NmQ5M2I2NjA4YjcKCi8vIGltcG9ydCBGbG93VG9rZW4gZnJvbSAweDdlNjBkZjA0MmE5YzA4NjgKCi8vIGltcG9ydCBMb2NrZWRUb2tlbnMgZnJvbSAweDk1ZTAxOWExN2QwZTIzZDcKCgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4OWEwNzY2ZDkzYjY2MDhiNwoKaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4N2U2MGRmMDQyYTljMDg2OAoKaW1wb3J0IExvY2tlZFRva2VucyBmcm9tIDB4OTVlMDE5YTE3ZDBlMjNkNwoKCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MpOiBVRml4NjQgewogICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCgogICAgbGV0IHVubG9ja2VkVmF1bHQgPSBhY2NvdW50CiAgICAgIC5jYXBhYmlsaXRpZXMuZ2V0PCZGbG93VG9rZW4uVmF1bHQ+KC9wdWJsaWMvZmxvd1Rva2VuQmFsYW5jZSkhCiAgICAgIC5ib3Jyb3coKQogICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IEJhbGFuY2UgcmVmZXJlbmNlIHRvIHRoZSBWYXVsdCIpCiAgICBsZXQgdW5sb2NrZWRCYWxhbmNlID0gdW5sb2NrZWRWYXVsdC5iYWxhbmNlCgogICAgbGV0IGxvY2tlZEFjY291bnRJbmZvQ2FwID0gYWNjb3VudAogICAgICAuY2FwYWJpbGl0aWVzLmdldAogICAgICA8JkxvY2tlZFRva2Vucy5Ub2tlbkhvbGRlcj4KICAgICAgKExvY2tlZFRva2Vucy5Mb2NrZWRBY2NvdW50SW5mb1B1YmxpY1BhdGgpCiAgICBpZiBsb2NrZWRBY2NvdW50SW5mb0NhcCA9PSBuaWwgfHwgIShsb2NrZWRBY2NvdW50SW5mb0NhcCEuY2hlY2soKSkgewogICAgICAgIHJldHVybiB1bmxvY2tlZEJhbGFuY2UKICAgIH0KICAgIAogICAgbGV0IGxvY2tlZEFjY291bnRJbmZvUmVmID0gbG9ja2VkQWNjb3VudEluZm9DYXAhLmJvcnJvdygpIQogICAgbGV0IGxvY2tlZEJhbGFuY2UgPSBsb2NrZWRBY2NvdW50SW5mb1JlZi5nZXRMb2NrZWRBY2NvdW50QmFsYW5jZSgpCiAgICBsZXQgbG9ja2VkQmFsYW5jZVVubG9ja2VkID0gbG9ja2VkQWNjb3VudEluZm9SZWYuZ2V0VW5sb2NrTGltaXQoKQoKICAgIGlmIGxvY2tlZEJhbGFuY2UgPT0gVUZpeDY0KDApIHsKICAgICAgICByZXR1cm4gdW5sb2NrZWRCYWxhbmNlCiAgICB9CgogICAgaWYgbG9ja2VkQmFsYW5jZVVubG9ja2VkID4gbG9ja2VkQmFsYW5jZSB7CiAgICAgICAgcmV0dXJuIHVubG9ja2VkQmFsYW5jZSArIGxvY2tlZEJhbGFuY2UKICAgIH0KCiAgICByZXR1cm4gbG9ja2VkQmFsYW5jZVVubG9ja2VkICsgdW5sb2NrZWRCYWxhbmNlCn0=",
          "getFindAddress": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0RmluZEFkZHJlc3MgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGSU5EIGZyb20gMHhhMTZhYjFkMGFiZGUzNjI1CgovL0NoZWNrIHRoZSBzdGF0dXMgb2YgYSBmaW4gdXNlcgphY2Nlc3MoYWxsKSBmdW4gbWFpbihuYW1lOiBTdHJpbmcpIDogQWRkcmVzcz8gewogICAgbGV0IHN0YXR1cyA9IEZJTkQuc3RhdHVzKG5hbWUpCiAgICByZXR1cm4gc3RhdHVzLm93bmVyCn0=",
          "getFindDomainByAddress": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0RmluZERvbWFpbkJ5QWRkcmVzcyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZJTkQgZnJvbSAweGExNmFiMWQwYWJkZTM2MjUKCgphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzKSA6IFN0cmluZz97CiAgICByZXR1cm4gRklORC5yZXZlcnNlTG9va3VwKGFkZHJlc3MpCn0=",
          "getFlowBalanceForAnyAccounts": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0Rmxvd0JhbGFuY2VGb3JBbnlBY2NvdW50cyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEVWTSBmcm9tIDB4OGM1MzAzZWFhMjYyMDJkNgoKCi8vIEdldCB0aGUgYWNjb3VudCBiYWxhbmNlIGZvciBhIENPQSBhY2NvdW50CmFjY2VzcyhhbGwpIGZ1biBnZXRFVk1CYWxhbmNlKF8gYWRkcmVzczogU3RyaW5nKTogVUZpeDY0PyB7CiAgICByZXR1cm4gRVZNLmFkZHJlc3NGcm9tU3RyaW5nKGFkZHJlc3MpLmJhbGFuY2UoKS5pbkZMT1coKQp9CgovLyBHZXQgdGhlIGF2YWlsYWJsZSBhY2NvdW50IGJhbGFuY2UgZm9yIGEgRmxvdyBhY2NvdW50CmFjY2VzcyhhbGwpIGZ1biBnZXRGbG93QmFsYW5jZShfIGFkZHJlc3M6IFN0cmluZyk6IFVGaXg2ND8gewogICAgaWYgbGV0IGFjY291bnQgPSBBZGRyZXNzLmZyb21TdHJpbmcoYWRkcmVzcykgewogICAgICAgIC8vIFVzZSBhdmFpbGFibGUgYmFsYW5jZSBpbnN0ZWFkIG9mIHRvdGFsIGJhbGFuY2UKICAgICAgICByZXR1cm4gZ2V0QWNjb3VudChhY2NvdW50KS5hdmFpbGFibGVCYWxhbmNlCiAgICB9CiAgICByZXR1cm4gbmlsCn0KCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHJlc3NlczogW1N0cmluZ10pOiB7U3RyaW5nOiBVRml4NjQ/fSB7CiAgICBsZXQgcmVzOiB7U3RyaW5nOiBVRml4NjQ/fSA9IHt9CgogICAgZm9yIGFkZHIgaW4gYWRkcmVzc2VzIHsKICAgICAgICBsZXQgaGV4ID0gYWRkclsxXSA9PSAieCIgPyBhZGRyIDogIjB4Ii5jb25jYXQoYWRkcikKICAgICAgICBpZiBsZXQgZmxvd0JhbGFuY2UgPSBnZXRGbG93QmFsYW5jZShoZXgpIHsKICAgICAgICAgICAgcmVzW2hleF0gPSBmbG93QmFsYW5jZQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmIGxldCBldm1CYWxhbmNlID0gZ2V0RVZNQmFsYW5jZShoZXgpIHsKICAgICAgICAgICAgICAgIHJlc1toZXhdID0gZXZtQmFsYW5jZQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIHJlcwp9",
          "getFlownsAddress": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0Rmxvd25zQWRkcmVzcyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZsb3ducyBmcm9tIDB4YjA1YjJhYmI0MjMzNWU4OAoKaW1wb3J0IERvbWFpbnMgZnJvbSAweGIwNWIyYWJiNDIzMzVlODgKCgphY2Nlc3MoYWxsKSBmdW4gbWFpbihuYW1lOiBTdHJpbmcsIHJvb3Q6IFN0cmluZykgOiBBZGRyZXNzPyB7CiAgICBsZXQgcHJlZml4ID0gIjB4IgogICAgbGV0IHJvb3RIYWhzaCA9IEZsb3ducy5oYXNoKG5vZGU6ICIiLCBsYWJsZTogcm9vdCkKICAgIGxldCBuYW1laGFzaCA9IHByZWZpeC5jb25jYXQoRmxvd25zLmhhc2gobm9kZTogcm9vdEhhaHNoLCBsYWJsZTogbmFtZSkpCiAgICB2YXIgYWRkcmVzcyA9IERvbWFpbnMuZ2V0UmVjb3JkcyhuYW1laGFzaCkKICAgIHJldHVybiBhZGRyZXNzCn0=",
          "getFlownsDomainsByAddress": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0Rmxvd25zRG9tYWluc0J5QWRkcmVzcyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IERvbWFpbnMgZnJvbSAweGIwNWIyYWJiNDIzMzVlODgKCi8vIGFkZHJlc3M6IEZsb3cgYWRkcmVzcwoKYWNjZXNzKGFsbCkgZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcyk6IFtEb21haW5zLkRvbWFpbkRldGFpbF0gewogICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgICBsZXQgY29sbGVjdGlvbkNhcCA9IGFjY291bnQuZ2V0Q2FwYWJpbGl0eTwme0RvbWFpbnMuQ29sbGVjdGlvblB1YmxpY30+KERvbWFpbnMuQ29sbGVjdGlvblB1YmxpY1BhdGgpCiAgICBsZXQgY29sbGVjdGlvbiA9IGNvbGxlY3Rpb25DYXAuYm9ycm93KCkhCiAgICBsZXQgZG9tYWluczpbRG9tYWlucy5Eb21haW5EZXRhaWxdID0gW10KICAgIGxldCBpZHMgPSBjb2xsZWN0aW9uLmdldElEcygpCgogICAgZm9yIGlkIGluIGlkcyB7CiAgICAgICAgbGV0IGRvbWFpbiA9IGNvbGxlY3Rpb24uYm9ycm93RG9tYWluKGlkOiBpZCkKICAgICAgICBsZXQgZGV0YWlsID0gZG9tYWluLmdldERldGFpbCgpCiAgICAgICAgZG9tYWlucy5hcHBlbmQoZGV0YWlsKQogICAgfQoKICAgIHJldHVybiBkb21haW5zCn0=",
          "getStorageInfo": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0U3RvcmFnZUluZm8gLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCiBhY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyOiBBZGRyZXNzKToge1N0cmluZzogVUludDY0fSB7CiAgICBsZXQgYWNjdCA9IGdldEFjY291bnQoYWRkcikKICAgIGxldCByZXQ6IHtTdHJpbmc6IFVJbnQ2NH0gPSB7fQogICAgcmV0WyJjYXBhY2l0eSJdID0gYWNjdC5zdG9yYWdlLmNhcGFjaXR5CiAgICByZXRbInVzZWQiXSA9IGFjY3Quc3RvcmFnZS51c2VkCiAgICBpZiBhY2N0LnN0b3JhZ2UuY2FwYWNpdHkgPiAwIHsKICAgICAgICByZXRbImF2YWlsYWJsZSJdID0gYWNjdC5zdG9yYWdlLmNhcGFjaXR5IC0gIGFjY3Quc3RvcmFnZS51c2VkCiAgICB9IGVsc2UgewogICAgICAgIHJldFsiYXZhaWxhYmxlIl0gPSAwCiAgICB9CiAgICAKICAgIHJldHVybiByZXQKfQ==",
          "getTokenBalanceWithModel": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0VG9rZW5CYWxhbmNlV2l0aE1vZGVsIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4OWEwNzY2ZDkzYjY2MDhiNwoKaW1wb3J0IDxUb2tlbj4gZnJvbSA8VG9rZW5BZGRyZXNzPgoKYWNjZXNzKGFsbCkgZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcyk6IFVGaXg2NCB7CiAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKCiAgICBsZXQgdmF1bHRSZWYgPSBhY2NvdW50LmNhcGFiaWxpdGllcy5ib3Jyb3c8JntGdW5naWJsZVRva2VuLkJhbGFuY2V9Pig8VG9rZW5CYWxhbmNlUGF0aD4pCiAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBCYWxhbmNlIGNhcGFiaWxpdHkiKQoKICAgIHJldHVybiB2YXVsdFJlZi5iYWxhbmNlCn0=",
          "isKeyHasFullAuth": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgaXNLZXlIYXNGdWxsQXV0aCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MsIHB1YmxpY0tleTogU3RyaW5nKTogQm9vbCB7CiAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgdmFyIGZsYWcgPSBmYWxzZQogIGZ1biBhY2NvdW50Rm4oYWNjb3VudEtleTogQWNjb3VudEtleSk6IEJvb2wgewogICAgbGV0IGtleSA9IFN0cmluZy5lbmNvZGVIZXgoYWNjb3VudEtleS5wdWJsaWNLZXkucHVibGljS2V5KQogICAgaWYgcHVibGljS2V5ID09IGtleSB7CiAgICAgIGZsYWcgPSBhY2NvdW50S2V5LndlaWdodCA+PSBVRml4NjQoMTAwMCkgJiYgIWFjY291bnRLZXkuaXNSZXZva2VkCiAgICB9CiAgICByZXR1cm4gZmFsc2UKICB9CiAgYWNjb3VudC5rZXlzLmZvckVhY2goYWNjb3VudEZuKQoKICByZXR1cm4gZmxhZwp9Cg==",
          "isKeysHasFullAuth": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgaXNLZXlzSGFzRnVsbEF1dGggLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCgphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzLCBwdWJsaWNLZXlzOiBbU3RyaW5nXSk6IEJvb2wgewogIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogIHZhciB3ZWlnaHQ6IFVGaXg2NCA9IDAuMAogIGZ1biBhY2NvdW50Rm4oYWNjb3VudEtleTogQWNjb3VudEtleSk6IEJvb2wgewogICAgbGV0IGtleSA9IFN0cmluZy5lbmNvZGVIZXgoYWNjb3VudEtleS5wdWJsaWNLZXkucHVibGljS2V5KQogICAgaWYgcHVibGljS2V5cy5jb250YWlucyhrZXkpICYmICFhY2NvdW50S2V5LmlzUmV2b2tlZCB7CiAgICAgIHdlaWdodCA9IHdlaWdodCArIGFjY291bnRLZXkud2VpZ2h0IAogICAgfQogICAgcmV0dXJuIGZhbHNlCiAgfQogIGFjY291bnQua2V5cy5mb3JFYWNoKGFjY291bnRGbikKCiAgcmV0dXJuIHdlaWdodCA+PSBVRml4NjQoMTAwMCkKfQo=",
          "isLockedFlowEnable": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgaXNMb2NrZWRGbG93RW5hYmxlIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgTG9ja2VkVG9rZW5zIGZyb20gMHg5NWUwMTlhMTdkMGUyM2Q3CgoKYWNjZXNzKGFsbCkgZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcyk6IEJvb2wgewogICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgICByZXR1cm4gYWNjb3VudC5jYXBhYmlsaXRpZXMuZXhpc3RzKExvY2tlZFRva2Vucy5Mb2NrZWRBY2NvdW50SW5mb1B1YmxpY1BhdGgpCn0=",
          "isTokenStorageEnabled": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgaXNUb2tlblN0b3JhZ2VFbmFibGVkIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4OWEwNzY2ZDkzYjY2MDhiNwoKaW1wb3J0IDxUb2tlbj4gZnJvbSA8VG9rZW5BZGRyZXNzPgoKYWNjZXNzKGFsbCkgZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcykgOiBCb29sIHsKICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAKICAgIGxldCByZWNlaXZlciA9IGFjY291bnQuY2FwYWJpbGl0aWVzLmV4aXN0cyg8VG9rZW5SZWNlaXZlclBhdGg+KQogICAgbGV0IGJhbGFuY2UgPSBhY2NvdW50LmNhcGFiaWxpdGllcy5leGlzdHMoPFRva2VuQmFsYW5jZVBhdGg+KQoKICAgIHJldHVybiByZWNlaXZlciAmJiBiYWxhbmNlCn0=",
          "queryCustomFT": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgcXVlcnlDdXN0b21GVCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgppbXBvcnQgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MgZnJvbSAweDlhMDc2NmQ5M2I2NjA4YjcKTWV0YWRhdGFWaWV3cwoKCmFjY2VzcyhhbGwpIGZ1biBtYWluKGNvbnRyYWN0QWRkcmVzczogQWRkcmVzcywgY29udHJhY3ROYW1lOiBTdHJpbmcpOiBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YSB7CiAgICAKICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KGNvbnRyYWN0QWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IGNvbnRyYWN0TmFtZSkKICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZpZXdSZXNvbHZlciBmcm9tIEZ1bmdpYmxlVG9rZW4gY29udHJhY3QiKQogICAgbGV0IHZhdWx0RGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgIHJlc291cmNlVHlwZTogbmlsLAogICAgICAgIHZpZXdUeXBlOiBUeXBlPEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPigpCiAgICApIGFzISBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT8gPz8gcGFuaWMoIkNvdWxkIG5vdCByZXNvbHZlIEZUVmF1bHREYXRhIHZpZXciKQoKICAgIHJldHVybiB2YXVsdERhdGEKfQ==",
          "queryCustomNFT": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgcXVlcnlDdXN0b21ORlQgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKCmFjY2VzcyhhbGwpIGZ1biBtYWluKGNvbnRyYWN0QWRkcmVzczogQWRkcmVzcywgY29udHJhY3ROYW1lOiBTdHJpbmcpOiBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhIHsKCiAgICBsZXQgdmlld1Jlc29sdmVyID0gZ2V0QWNjb3VudChjb250cmFjdEFkZHJlc3MpLmNvbnRyYWN0cy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXJ9PihuYW1lOiBjb250cmFjdE5hbWUpCiAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gTkZUIGNvbnRyYWN0IikKICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICByZXNvdXJjZVR5cGU6IG5pbCwKICAgICAgICAgICAgdmlld1R5cGU6IFR5cGU8TWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT4oKQogICAgICAgICkgYXMhIE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE/ID8/IHBhbmljKCJDb3VsZCBub3QgcmVzb2x2ZSBORlRDb2xsZWN0aW9uRGF0YSB2aWV3IikKICAgIAogICAgcmV0dXJuIGNvbGxlY3Rpb25EYXRhCn0=",
          "queryFlowBalance": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgcXVlcnlGbG93QmFsYW5jZSAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweDlhMDc2NmQ5M2I2NjA4YjcKCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweDdlNjBkZjA0MmE5YzA4NjgKCgphY2Nlc3MoYWxsKSBmdW4gY2hlY2tGbG93VG9rZW5CYWxhbmNlKGFkZHJlc3M6IEFkZHJlc3MpIDogVUZpeDY0IHsKICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgbGV0IHZhdWx0UmVmID0gYWNjb3VudC5jYXBhYmlsaXRpZXMuYm9ycm93PCZ7RnVuZ2libGVUb2tlbi5CYWxhbmNlfT4oL3B1YmxpYy9mbG93VG9rZW5CYWxhbmNlKQogICAgPz8gbmlsCgogICAgCiAgICBpZiB2YXVsdFJlZiAhPSBuaWwgewogICAgICAgIHJldHVybiB2YXVsdFJlZiEuYmFsYW5jZQogICAgfQogICAgCiAgICByZXR1cm4gMC4wCn0KCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHJzOiBbQWRkcmVzc10pOiBbVUZpeDY0XSB7CiAgICBsZXQgYmFsczogW1VGaXg2NF0gPSBbXQoKICAgIGZvciBhZGRyIGluIGFkZHJzIHsKICAgICAgICBsZXQgYmFsID0gY2hlY2tGbG93VG9rZW5CYWxhbmNlKGFkZHJlc3M6IGFkZHIpCiAgICAgICAgYmFscy5hcHBlbmQoYmFsKQogICAgfQogICAgCiAgICByZXR1cm4gYmFscwp9",
          "removeAccountKeyByIndex": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgcmVtb3ZlQWNjb3VudEtleUJ5SW5kZXggLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCnRyYW5zYWN0aW9uKGtleUluZGV4OiBJbnQpIHsKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKEtleXMpICZBY2NvdW50KSB7CiAgICAgICAgc2lnbmVyLmtleXMucmV2b2tlKGtleUluZGV4OiBrZXlJbmRleCkKICAgIH0KfQ==",
          "removeContractFromAccount": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgcmVtb3ZlQ29udHJhY3RGcm9tQWNjb3VudCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKdHJhbnNhY3Rpb24obmFtZTogU3RyaW5nKSB7CiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChSZW1vdmVDb250cmFjdCkgJkFjY291bnQpIHsKICAgICAgICBzaWduZXIuY29udHJhY3RzLnJlbW92ZShuYW1lOiBuYW1lKQogICAgfQp9",
          "revokeKey": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgcmV2b2tlS2V5IC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+Cgp0cmFuc2FjdGlvbihpbmRleDogSW50KSB7CiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChLZXlzKSAmQWNjb3VudCkgewogICAgICAgIC8vIEdldCBhIGtleSBmcm9tIGFuIGF1dGggYWNjb3VudC4KICAgICAgICBsZXQga2V5QSA9IHNpZ25lci5rZXlzLnJldm9rZShrZXlJbmRleDogaW5kZXgpCiAgICB9Cn0=",
          "test": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgdGVzdCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweDlhMDc2NmQ5M2I2NjA4YjcKCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweDdlNjBkZjA0MmE5YzA4NjgKCgp0cmFuc2FjdGlvbihhbW91bnQ6IFVGaXg2NCwgcmVjaXBpZW50OiBBZGRyZXNzKSB7CgogICAgLy8gVGhlIFZhdWx0IHJlc291cmNlIHRoYXQgaG9sZHMgdGhlIHRva2VucyB0aGF0IGFyZSBiZWluZyB0cmFuc2ZlcmVkCiAgICBsZXQgc2VudFZhdWx0OiBAe0Z1bmdpYmxlVG9rZW4uVmF1bHR9CgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSwgQm9ycm93VmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3Mgc3RvcmVkIHZhdWx0CiAgICAgICAgbGV0IHZhdWx0UmVmID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJkZsb3dUb2tlbi5WYXVsdD4oZnJvbTogL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlZmVyZW5jZSB0byB0aGUgb3duZXIncyBWYXVsdCEiKQoKICAgICAgICAvLyBXaXRoZHJhdyB0b2tlbnMgZnJvbSB0aGUgc2lnbmVyJ3Mgc3RvcmVkIHZhdWx0CiAgICAgICAgc2VsZi5zZW50VmF1bHQgPC0gdmF1bHRSZWYud2l0aGRyYXcoYW1vdW50OiBhbW91bnQpCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgLy8gR2V0IHRoZSByZWNpcGllbnQncyBwdWJsaWMgYWNjb3VudCBvYmplY3QKICAgICAgICBsZXQgcmVjaXBpZW50QWNjb3VudCA9IGdldEFjY291bnQocmVjaXBpZW50KQoKICAgICAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIHJlY2lwaWVudCdzIFJlY2VpdmVyCiAgICAgICAgbGV0IHJlY2VpdmVyUmVmID0gcmVjaXBpZW50QWNjb3VudC5jYXBhYmlsaXRpZXMuYm9ycm93PCZ7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KC9wdWJsaWMvZmxvd1Rva2VuUmVjZWl2ZXIpIQogICAgICAgICAgICAKICAgICAgICAvLyBEZXBvc2l0IHRoZSB3aXRoZHJhd24gdG9rZW5zIGluIHRoZSByZWNpcGllbnQncyByZWNlaXZlcgogICAgICAgIHJlY2VpdmVyUmVmLmRlcG9zaXQoZnJvbTogPC1zZWxmLnNlbnRWYXVsdCkKICAgIH0KfQ==",
          "updateContractOfAccount": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgdXBkYXRlQ29udHJhY3RPZkFjY291bnQgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCnRyYW5zYWN0aW9uKG5hbWU6IFN0cmluZywgY29kZTogU3RyaW5nKSB7CiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChVcGRhdGVDb250cmFjdCkgJkFjY291bnQpIHsKICAgICAgICBzaWduZXIuY29udHJhY3RzLnVwZGF0ZShuYW1lOiBuYW1lLCBjb2RlOiBjb2RlLnV0ZjgpCiAgICB9Cn0=",
          "verifyUserSignature": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgdmVyaWZ5VXNlclNpZ25hdHVyZSAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IENyeXB0bwoKYWNjZXNzKGFsbCkgZnVuIG1haW4oCiAgICBtZXNzYWdlOiBTdHJpbmcsCiAgICByYXdQdWJsaWNLZXlzOiBbU3RyaW5nXSwKICAgIHdlaWdodHM6IFtVRml4NjRdLAogICAgc2lnbkFsZ29zOiBbVUludDhdLAogICAgaGFzaEFsZ29zOiBbVUludDhdLAogICAgc2lnbmF0dXJlczogW1N0cmluZ10sCik6IEJvb2wgewoKICAgIGxldCBrZXlMaXN0ID0gQ3J5cHRvLktleUxpc3QoKQoKICAgIHZhciBpID0gMAogICAgZm9yIHJhd1B1YmxpY0tleSBpbiByYXdQdWJsaWNLZXlzIHsKICAgIGtleUxpc3QuYWRkKAogICAgICAgIFB1YmxpY0tleSgKICAgICAgICBwdWJsaWNLZXk6IHJhd1B1YmxpY0tleS5kZWNvZGVIZXgoKSwKICAgICAgICBzaWduYXR1cmVBbGdvcml0aG06IFNpZ25hdHVyZUFsZ29yaXRobShyYXdWYWx1ZTogc2lnbkFsZ29zW2ldKSEKICAgICAgICApLAogICAgICAgIGhhc2hBbGdvcml0aG06IEhhc2hBbGdvcml0aG0ocmF3VmFsdWU6IGhhc2hBbGdvc1tpXSkhLAogICAgICAgIHdlaWdodDogd2VpZ2h0c1tpXSwKICAgICkKICAgIGkgPSBpICsgMQogICAgfQoKICAgIGxldCBzaWduYXR1cmVTZXQ6IFtDcnlwdG8uS2V5TGlzdFNpZ25hdHVyZV0gPSBbXQoKICAgIHZhciBqID0gMAogICAgZm9yIHNpZ25hdHVyZSBpbiBzaWduYXR1cmVzIHsKICAgIHNpZ25hdHVyZVNldC5hcHBlbmQoCiAgICAgICAgQ3J5cHRvLktleUxpc3RTaWduYXR1cmUoCiAgICAgICAgICAgIGtleUluZGV4OiBqLAogICAgICAgICAgICBzaWduYXR1cmU6IHNpZ25hdHVyZS5kZWNvZGVIZXgoKQogICAgICAgICkKICAgICkKICAgICAgICBqID0gaiArIDEKICAgIH0KCiAgICBsZXQgc2lnbmVkRGF0YSA9IG1lc3NhZ2UuZGVjb2RlSGV4KCkKCiAgICByZXR1cm4ga2V5TGlzdC52ZXJpZnkoCiAgICAgICAgc2lnbmF0dXJlU2V0OiBzaWduYXR1cmVTZXQsCiAgICAgICAgc2lnbmVkRGF0YTogc2lnbmVkRGF0YSwKICAgICAgICBkb21haW5TZXBhcmF0aW9uVGFnOiAiRkxPVy1WMC4wLXVzZXIiCiAgICApCn0=",
          "withdrawAllUnlockedFlow": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgd2l0aGRyYXdBbGxVbmxvY2tlZEZsb3cgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHg5YTA3NjZkOTNiNjYwOGI3CgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHg3ZTYwZGYwNDJhOWMwODY4CgppbXBvcnQgTG9ja2VkVG9rZW5zIGZyb20gMHg5NWUwMTlhMTdkMGUyM2Q3CgovLyBpbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4OWEwNzY2ZDkzYjY2MDhiNwoKLy8gaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4N2U2MGRmMDQyYTljMDg2OAoKLy8gaW1wb3J0IExvY2tlZFRva2VucyBmcm9tIDB4OTVlMDE5YTE3ZDBlMjNkNwoKCnRyYW5zYWN0aW9uKCkgewoKICAgIGxldCBob2xkZXJSZWY6IGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJkxvY2tlZFRva2Vucy5Ub2tlbkhvbGRlcgogICAgbGV0IHZhdWx0UmVmOiAmRmxvd1Rva2VuLlZhdWx0CiAgICBsZXQgYW1vdW50OiBVRml4NjQKCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChCb3Jyb3dWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICAgc2VsZi5ob2xkZXJSZWYgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAmTG9ja2VkVG9rZW5zLlRva2VuSG9sZGVyPihmcm9tOiBMb2NrZWRUb2tlbnMuVG9rZW5Ib2xkZXJTdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgYSByZWZlcmVuY2UgdG8gVG9rZW5Ib2xkZXIiKQoKCQkJCXNlbGYudmF1bHRSZWYgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8JkZsb3dUb2tlbi5WYXVsdD4oZnJvbTogL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IGZsb3cgdG9rZW4gdmF1bHQgcmVmIikKCiAgICAgICAgbGV0IGxvY2tlZEFjY291bnRJbmZvQ2FwID0gc2lnbmVyCiAgICAgICAgLmNhcGFiaWxpdGllcy5nZXQ8JkxvY2tlZFRva2Vucy5Ub2tlbkhvbGRlcj4KICAgICAgICAoTG9ja2VkVG9rZW5zLkxvY2tlZEFjY291bnRJbmZvUHVibGljUGF0aCkKCiAgICAgICAgaWYgbG9ja2VkQWNjb3VudEluZm9DYXAgPT0gbmlsIHx8ICEobG9ja2VkQWNjb3VudEluZm9DYXAhLmNoZWNrKCkpIHsKICAgICAgICAgICAgcGFuaWMoIkNvdWxkIG5vdCBnZXQgZmxvdyBsb2NrZWQgdG9rZW4gdmF1bHQiKQogICAgICAgIH0KCiAgICAgICAgbGV0IGxvY2tlZEFjY291bnRJbmZvUmVmID0gbG9ja2VkQWNjb3VudEluZm9DYXAhLmJvcnJvdygpIQogICAgICAgIGxldCBsb2NrZWRCYWxhbmNlID0gbG9ja2VkQWNjb3VudEluZm9SZWYuZ2V0TG9ja2VkQWNjb3VudEJhbGFuY2UoKQogICAgICAgIGxldCBsb2NrZWRCYWxhbmNlVW5sb2NrZWQgPSBsb2NrZWRBY2NvdW50SW5mb1JlZi5nZXRVbmxvY2tMaW1pdCgpCgogICAgICAgIC8vIGlmIGxvY2tlZEJhbGFuY2UgPT0gVUZpeDY0KDApIHsKICAgICAgICAvLyAgICAgcGFuaWMoIk5vdCBlbm91Z2ggYW1vdW50IHRvIHdpdGhkcmF3IikKICAgICAgICAvLyB9CgogICAgICAgIHNlbGYuYW1vdW50ID0gbG9ja2VkQmFsYW5jZVVubG9ja2VkCiAgICAKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICBzZWxmLnZhdWx0UmVmLmRlcG9zaXQoZnJvbTogPC1zZWxmLmhvbGRlclJlZi53aXRoZHJhdyhhbW91bnQ6IHNlbGYuYW1vdW50KSkKICAgIH0KfQ==",
          "withdrawUnlockedFlow": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgd2l0aGRyYXdVbmxvY2tlZEZsb3cgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCi8vIGltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHg5YTA3NjZkOTNiNjYwOGI3CgovLyBpbXBvcnQgRmxvd1Rva2VuIGZyb20gMHg3ZTYwZGYwNDJhOWMwODY4CgovLyBpbXBvcnQgTG9ja2VkVG9rZW5zIGZyb20gMHg5NWUwMTlhMTdkMGUyM2Q3CgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweDlhMDc2NmQ5M2I2NjA4YjcKCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweDdlNjBkZjA0MmE5YzA4NjgKCmltcG9ydCBMb2NrZWRUb2tlbnMgZnJvbSAweDk1ZTAxOWExN2QwZTIzZDcKCgp0cmFuc2FjdGlvbihhbW91bnQ6IFVGaXg2NCkgewoKICAgIGxldCBob2xkZXJSZWY6IGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgICZMb2NrZWRUb2tlbnMuVG9rZW5Ib2xkZXIKICAgIGxldCB2YXVsdFJlZjogJkZsb3dUb2tlbi5WYXVsdAoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKEJvcnJvd1ZhbHVlKSAmQWNjb3VudCkgewogICAgICAgIHNlbGYuaG9sZGVyUmVmID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJkxvY2tlZFRva2Vucy5Ub2tlbkhvbGRlcj4oZnJvbTogTG9ja2VkVG9rZW5zLlRva2VuSG9sZGVyU3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IGEgcmVmZXJlbmNlIHRvIFRva2VuSG9sZGVyIikKCiAgICAgICAgc2VsZi52YXVsdFJlZiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzwmRmxvd1Rva2VuLlZhdWx0Pihmcm9tOiAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdCkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgZmxvdyB0b2tlbiB2YXVsdCByZWYiKQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIHNlbGYudmF1bHRSZWYuZGVwb3NpdChmcm9tOiA8LXNlbGYuaG9sZGVyUmVmLndpdGhkcmF3KGFtb3VudDogYW1vdW50KSkKICAgIH0KfQ=="
        },
        "bridge": {
          "batchBridgeNFTFromEvm": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgYmF0Y2hCcmlkZ2VORlRGcm9tRXZtIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4OWEwNzY2ZDkzYjY2MDhiNwoKaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4N2U2MGRmMDQyYTljMDg2OAoKaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgppbXBvcnQgU2NvcGVkRlRQcm92aWRlcnMgZnJvbSAweGRmYzIwYWVlNjUwZmNiZGYKCgppbXBvcnQgRVZNIGZyb20gMHg4YzUzMDNlYWEyNjIwMmQ2CgoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VVdGlscyBmcm9tIDB4ZGZjMjBhZWU2NTBmY2JkZgoKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweGRmYzIwYWVlNjUwZmNiZGYKCmltcG9ydCBGbG93RVZNQnJpZGdlQ29uZmlnIGZyb20gMHhkZmMyMGFlZTY1MGZjYmRmCgoKCi8vLyBUaGlzIHRyYW5zYWN0aW9uIGJyaWRnZXMgYW4gTkZUIGZyb20gRVZNIHRvIENhZGVuY2UgYXNzdW1pbmcgaXQgaGFzIGFscmVhZHkgYmVlbiBvbmJvYXJkZWQgdG8gdGhlIEZsb3dFVk1CcmlkZ2UKLy8vIE5PVEU6IFRoZSBFUkM3MjEgbXVzdCBoYXZlIGZpcnN0IGJlZW4gb25ib2FyZGVkIHRvIHRoZSBicmlkZ2UuIFRoaXMgY2FuIGJlIGNoZWNrZWQgdmlhIHRoZSBtZXRob2QKLy8vICAgICBGbG93RVZNQnJpZGdlLmV2bUFkZHJlc3NSZXF1aXJlc09uYm9hcmRpbmcoYWRkcmVzczogc2VsZi5ldm1Db250cmFjdEFkZHJlc3MpCi8vLwovLy8gQHBhcmFtIG5mdENvbnRyYWN0QWRkcmVzczogVGhlIEZsb3cgYWNjb3VudCBhZGRyZXNzIGhvc3RpbmcgdGhlIE5GVC1kZWZpbmluZyBDYWRlbmNlIGNvbnRyYWN0Ci8vLyBAcGFyYW0gbmZ0Q29udHJhY3ROYW1lOiBUaGUgbmFtZSBvZiB0aGUgTkZULWRlZmluaW5nIENhZGVuY2UgY29udHJhY3QKLy8vIEBwYXJhbSBpZDogVGhlIEVSQzcyMSBpZCBvZiB0aGUgTkZUIHRvIGJyaWRnZSB0byBDYWRlbmNlIGZyb20gRVZNCi8vLwp0cmFuc2FjdGlvbihuZnRDb250cmFjdEFkZHJlc3M6IEFkZHJlc3MsIG5mdENvbnRyYWN0TmFtZTogU3RyaW5nLCBpZHM6IFtVSW50MjU2XSkgewoKICAgIGxldCBuZnRUeXBlOiBUeXBlCiAgICBsZXQgY29sbGVjdGlvbjogJntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259CiAgICBsZXQgc2NvcGVkUHJvdmlkZXI6IEBTY29wZWRGVFByb3ZpZGVycy5TY29wZWRGVFByb3ZpZGVyCiAgICBsZXQgY29hOiBhdXRoKEVWTS5CcmlkZ2UpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudAogICAgCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChCb3Jyb3dWYWx1ZSwgQ29weVZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSwgVW5wdWJsaXNoQ2FwYWJpbGl0eSkgJkFjY291bnQpIHsKICAgICAgICAvKiAtLS0gUmVmZXJlbmNlIHRoZSBzaWduZXIncyBDYWRlbmNlT3duZWRBY2NvdW50IC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBDT0EKICAgICAgICBzZWxmLmNvYSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEVWTS5CcmlkZ2UpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oZnJvbTogL3N0b3JhZ2UvZXZtKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBDT0EgZnJvbSBwcm92aWRlZCBnYXRld2F5IGFkZHJlc3MiKQoKICAgICAgICAvLyBHZXQgdGhlIEVSQzcyMSBjb250cmFjdCBhZGRyZXNzIGZvciB0aGUgZ2l2ZW4gTkZUIHR5cGUKICAgICAgICBzZWxmLm5mdFR5cGUgPSBGbG93RVZNQnJpZGdlVXRpbHMuYnVpbGRDb21wb3NpdGVUeXBlKAogICAgICAgICAgICAgICAgYWRkcmVzczogbmZ0Q29udHJhY3RBZGRyZXNzLAogICAgICAgICAgICAgICAgY29udHJhY3ROYW1lOiBuZnRDb250cmFjdE5hbWUsCiAgICAgICAgICAgICAgICByZXNvdXJjZU5hbWU6ICJORlQiCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkNvdWxkIG5vdCBjb25zdHJ1Y3QgTkZUIHR5cGUiKQoKICAgICAgICAvKiAtLS0gUmVmZXJlbmNlIHRoZSBzaWduZXIncyBORlQgQ29sbGVjdGlvbiAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgTkZUIGNvbGxlY3Rpb24sIGNvbmZpZ3VyaW5nIGlmIG5lY2Vzc2FyeQogICAgICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KG5mdENvbnRyYWN0QWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IG5mdENvbnRyYWN0TmFtZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gTkZUIGNvbnRyYWN0IikKICAgICAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgICAgIHJlc291cmNlVHlwZTogc2VsZi5uZnRUeXBlLAogICAgICAgICAgICAgICAgdmlld1R5cGU6IFR5cGU8TWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT4oKQogICAgICAgICAgICApIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgTkZUQ29sbGVjdGlvbkRhdGEgdmlldyIpCiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UuYm9ycm93PCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufT4oZnJvbTogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUoPC1jb2xsZWN0aW9uRGF0YS5jcmVhdGVFbXB0eUNvbGxlY3Rpb24oKSwgdG86IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgICAgICBzaWduZXIuY2FwYWJpbGl0aWVzLnVucHVibGlzaChjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKQogICAgICAgICAgICBsZXQgY29sbGVjdGlvbkNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgICAgICBzaWduZXIuY2FwYWJpbGl0aWVzLnB1Ymxpc2goY29sbGVjdGlvbkNhcCwgYXQ6IGNvbGxlY3Rpb25EYXRhLnB1YmxpY1BhdGgpCiAgICAgICAgfQogICAgICAgIHNlbGYuY29sbGVjdGlvbiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KGZyb206IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBjb2xsZWN0aW9uIGZyb20gc3RvcmFnZSBwYXRoIikKCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGJyaWRnZSBmZWUgLSBicmlkZ2luZyBmcm9tIEVWTSBjb25zdW1lcyBubyBzdG9yYWdlLCBzbyBmbGF0IGZlZQogICAgICAgIGxldCBhcHByb3hGZWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuY2FsY3VsYXRlQnJpZGdlRmVlKGJ5dGVzOiA0MDBfMDAwKSAqIFVGaXg2NChpZHMubGVuZ3RoKQogICAgICAgIC8vIElzc3VlIGFuZCBzdG9yZSBicmlkZ2UtZGVkaWNhdGVkIFByb3ZpZGVyIENhcGFiaWxpdHkgaW4gc3RvcmFnZSBpZiBuZWNlc3NhcnkKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS50eXBlKGF0OiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigKICAgICAgICAgICAgICAgIC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICAgICAgICkKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZShwcm92aWRlckNhcCwgdG86IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpCiAgICAgICAgfQogICAgICAgIC8vIENvcHkgdGhlIHN0b3JlZCBQcm92aWRlciBjYXBhYmlsaXR5IGFuZCBjcmVhdGUgYSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgbGV0IHByb3ZpZGVyQ2FwQ29weSA9IHNpZ25lci5zdG9yYWdlLmNvcHk8Q2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+PigKICAgICAgICAgICAgICAgIGZyb206IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiSW52YWxpZCBQcm92aWRlciBDYXBhYmlsaXR5IGZvdW5kIGluIHN0b3JhZ2UuIikKICAgICAgICBsZXQgcHJvdmlkZXJGaWx0ZXIgPSBTY29wZWRGVFByb3ZpZGVycy5BbGxvd2FuY2VGaWx0ZXIoYXBwcm94RmVlKQogICAgICAgIHNlbGYuc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgICAgICAgICBmaWx0ZXJzOiBbIHByb3ZpZGVyRmlsdGVyIF0sCiAgICAgICAgICAgICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICAgICAgICAgKQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIC8vIEV4ZWN1dGUgdGhlIGJyaWRnZQogICAgICAgIGZvciBpZCBpbiBpZHMgewogICAgICAgICAgICBsZXQgbmZ0OiBAe05vbkZ1bmdpYmxlVG9rZW4uTkZUfSA8LSBzZWxmLmNvYS53aXRoZHJhd05GVCgKICAgICAgICAgICAgICAgIHR5cGU6IHNlbGYubmZ0VHlwZSwKICAgICAgICAgICAgICAgIGlkOiBpZCwKICAgICAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICAgICAgKQogICAgICAgICAgICBzZWxmLmNvbGxlY3Rpb24uZGVwb3NpdCh0b2tlbjogPC1uZnQpCiAgICAgICAgfQogICAgICAgIAogICAgICAgIC8vIERlcG9zaXQgdGhlIGJyaWRnZWQgTkZUIGludG8gdGhlIHNpZ25lcidzIGNvbGxlY3Rpb24KICAgICAgICAvLyBEZXN0cm95IHRoZSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgZGVzdHJveSBzZWxmLnNjb3BlZFByb3ZpZGVyCiAgICB9Cn0K",
          "batchBridgeNFTFromEvmV2": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgYmF0Y2hCcmlkZ2VORlRGcm9tRXZtVjIgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweDlhMDc2NmQ5M2I2NjA4YjcKCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweDdlNjBkZjA0MmE5YzA4NjgKCmltcG9ydCBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cyBmcm9tIDB4OWEwNzY2ZDkzYjY2MDhiNwoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHhkZmMyMGFlZTY1MGZjYmRmCgppbXBvcnQgRVZNIGZyb20gMHg4YzUzMDNlYWEyNjIwMmQ2CgppbXBvcnQgRmxvd0VWTUJyaWRnZVV0aWxzIGZyb20gMHhkZmMyMGFlZTY1MGZjYmRmCgppbXBvcnQgRmxvd0VWTUJyaWRnZSBmcm9tIDB4ZGZjMjBhZWU2NTBmY2JkZgoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweGRmYzIwYWVlNjUwZmNiZGYKCmltcG9ydCBDcm9zc1ZNTWV0YWRhdGFWaWV3cyBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKCi8vLyBUaGlzIHRyYW5zYWN0aW9uIGJyaWRnZXMgYW4gTkZUIGZyb20gRVZNIHRvIENhZGVuY2UgYXNzdW1pbmcgaXQgaGFzIGFscmVhZHkgYmVlbiBvbmJvYXJkZWQgdG8gdGhlIEZsb3dFVk1CcmlkZ2UKLy8vIE5PVEU6IFRoZSBFUkM3MjEgbXVzdCBoYXZlIGZpcnN0IGJlZW4gb25ib2FyZGVkIHRvIHRoZSBicmlkZ2UuIFRoaXMgY2FuIGJlIGNoZWNrZWQgdmlhIHRoZSBtZXRob2QKLy8vICAgICBGbG93RVZNQnJpZGdlLmV2bUFkZHJlc3NSZXF1aXJlc09uYm9hcmRpbmcoYWRkcmVzczogc2VsZi5ldm1Db250cmFjdEFkZHJlc3MpCi8vLwovLy8gQHBhcmFtIG5mdElkZW50aWZpZXI6IFRoZSBDYWRlbmNlIHR5cGUgaWRlbnRpZmllciBvZiB0aGUgTkZUIHRvIGJyaWRnZSAtIGUuZy4gbmZ0LmdldFR5cGUoKS5pZGVudGlmaWVyCi8vLyBAcGFyYW0gaWQ6IFRoZSBFUkM3MjEgaWQgb2YgdGhlIE5GVCB0byBicmlkZ2UgdG8gQ2FkZW5jZSBmcm9tIEVWTQovLy8KdHJhbnNhY3Rpb24obmZ0SWRlbnRpZmllcjogU3RyaW5nLCBpZHM6IFtVSW50MjU2XSkgewoKICAgIGxldCBuZnRUeXBlOiBUeXBlCiAgICBsZXQgY29sbGVjdGlvbjogJntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259CiAgICBsZXQgc2NvcGVkUHJvdmlkZXI6IEBTY29wZWRGVFByb3ZpZGVycy5TY29wZWRGVFByb3ZpZGVyCiAgICBsZXQgY29hOiBhdXRoKEVWTS5DYWxsLCBFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQKICAgIGxldCB2aWV3UmVzb2x2ZXI6ICZ7Vmlld1Jlc29sdmVyfQoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKEJvcnJvd1ZhbHVlLCBDb3B5VmFsdWUsIElzc3VlU3RvcmFnZUNhcGFiaWxpdHlDb250cm9sbGVyLCBQdWJsaXNoQ2FwYWJpbGl0eSwgU2F2ZVZhbHVlLCBVbnB1Ymxpc2hDYXBhYmlsaXR5KSAmQWNjb3VudCkgewogICAgICAgIC8qIC0tLSBSZWZlcmVuY2UgdGhlIHNpZ25lcidzIENhZGVuY2VPd25lZEFjY291bnQgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIHNpZ25lcidzIENPQQogICAgICAgIHNlbGYuY29hID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRVZNLkNhbGwsIEVWTS5CcmlkZ2UpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oZnJvbTogL3N0b3JhZ2UvZXZtKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBDT0EgZnJvbSBwcm92aWRlZCBnYXRld2F5IGFkZHJlc3MiKQoKICAgICAgICAvKiAtLS0gQ29uc3RydWN0IHRoZSBORlQgdHlwZSAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIENvbnN0cnVjdCB0aGUgTkZUIHR5cGUgZnJvbSB0aGUgcHJvdmlkZWQgaWRlbnRpZmllcgogICAgICAgIHNlbGYubmZ0VHlwZSA9IENvbXBvc2l0ZVR5cGUobmZ0SWRlbnRpZmllcikKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBjb25zdHJ1Y3QgTkZUIHR5cGUgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdChuZnRJZGVudGlmaWVyKSkKICAgICAgICAvLyBQYXJzZSB0aGUgTkZUIGlkZW50aWZpZXIgaW50byBpdHMgY29tcG9uZW50cwogICAgICAgIGxldCBuZnRDb250cmFjdEFkZHJlc3MgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3RBZGRyZXNzKGZyb21UeXBlOiBzZWxmLm5mdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IGFkZHJlc3MgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdChuZnRJZGVudGlmaWVyKSkKICAgICAgICBsZXQgbmZ0Q29udHJhY3ROYW1lID0gRmxvd0VWTUJyaWRnZVV0aWxzLmdldENvbnRyYWN0TmFtZShmcm9tVHlwZTogc2VsZi5uZnRUeXBlKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCBjb250cmFjdCBuYW1lIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQobmZ0SWRlbnRpZmllcikpCgogICAgICAgIC8qIC0tLSBSZWZlcmVuY2UgdGhlIHNpZ25lcidzIE5GVCBDb2xsZWN0aW9uIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBORlQgY29sbGVjdGlvbiwgY29uZmlndXJpbmcgaWYgbmVjZXNzYXJ5CiAgICAgICAgc2VsZi52aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KG5mdENvbnRyYWN0QWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IG5mdENvbnRyYWN0TmFtZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gTkZUIGNvbnRyYWN0IikKICAgICAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSBzZWxmLnZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBzZWxmLm5mdFR5cGUsCiAgICAgICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPigpCiAgICAgICAgICAgICkgYXMhIE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE/ID8/IHBhbmljKCJDb3VsZCBub3QgcmVzb2x2ZSBORlRDb2xsZWN0aW9uRGF0YSB2aWV3IikKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8JntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259Pihmcm9tOiBjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZSg8LWNvbGxlY3Rpb25EYXRhLmNyZWF0ZUVtcHR5Q29sbGVjdGlvbigpLCB0bzogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpCiAgICAgICAgICAgIHNpZ25lci5jYXBhYmlsaXRpZXMudW5wdWJsaXNoKGNvbGxlY3Rpb25EYXRhLnB1YmxpY1BhdGgpCiAgICAgICAgICAgIGxldCBjb2xsZWN0aW9uQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufT4oY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpCiAgICAgICAgICAgIHNpZ25lci5jYXBhYmlsaXRpZXMucHVibGlzaChjb2xsZWN0aW9uQ2FwLCBhdDogY29sbGVjdGlvbkRhdGEucHVibGljUGF0aCkKICAgICAgICB9CiAgICAgICAgc2VsZi5jb2xsZWN0aW9uID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufT4oZnJvbTogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IGNvbGxlY3Rpb24gZnJvbSBzdG9yYWdlIHBhdGgiKQoKICAgICAgICAvKiAtLS0gQ29uZmlndXJlIGEgU2NvcGVkRlRQcm92aWRlciAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgYnJpZGdlIGZlZSAtIGJyaWRnaW5nIGZyb20gRVZNIGNvbnN1bWVzIG5vIHN0b3JhZ2UsIHNvIGZsYXQgZmVlCiAgICAgICAgbGV0IGFwcHJveEZlZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5jYWxjdWxhdGVCcmlkZ2VGZWUoYnl0ZXM6IDQwMF8wMDApICsgKEZsb3dFVk1CcmlkZ2VDb25maWcuYmFzZUZlZSAqIFVGaXg2NChpZHMubGVuZ3RoKSkKICAgICAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApCiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICAgIH0KICAgICAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkludmFsaWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBmb3VuZCBpbiBzdG9yYWdlLiIpCiAgICAgICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKGFwcHJveEZlZSkKICAgICAgICBzZWxmLnNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgICAgIGZpbHRlcnM6IFsgcHJvdmlkZXJGaWx0ZXIgXSwKICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgKQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIC8vIFVud3JhcCBORlRzIGZyb20gcHJvamVjdC1kZWZpbmVkIEVSQzcyMSB3cmFwcGVyIGNvbnRyYWN0IGlmIGFwcGxpY2FibGUKICAgICAgICB1bndyYXBORlRzSWZBcHBsaWNhYmxlKHNlbGYuY29hLCBuZnRJRHM6IGlkcywgbmZ0VHlwZTogc2VsZi5uZnRUeXBlLCB2aWV3UmVzb2x2ZXI6IHNlbGYudmlld1Jlc29sdmVyKQoKICAgICAgICAvLyBFeGVjdXRlIHRoZSBicmlkZ2UKICAgICAgICB2YXIgaWR4ID0gMAogICAgICAgIHdoaWxlIGlkeCA8IGlkcy5sZW5ndGggewogICAgICAgICAgICBsZXQgbmZ0SWQgPSBpZHNbaWR4XSEKICAgICAgICAgICAgLy8gRXhlY3V0ZSB0aGUgYnJpZGdlCiAgICAgICAgICAgIGxldCBuZnQ6IEB7Tm9uRnVuZ2libGVUb2tlbi5ORlR9IDwtIHNlbGYuY29hLndpdGhkcmF3TkZUKAogICAgICAgICAgICAgICAgdHlwZTogc2VsZi5uZnRUeXBlLAogICAgICAgICAgICAgICAgaWQ6IG5mdElkLAogICAgICAgICAgICAgICAgZmVlUHJvdmlkZXI6ICZzZWxmLnNjb3BlZFByb3ZpZGVyIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfQogICAgICAgICAgICApCiAgICAgICAgICAgIC8vIEVuc3VyZSB0aGUgYnJpZGdlZCBuZnQgaXMgdGhlIGNvcnJlY3QgdHlwZQogICAgICAgICAgICBhc3NlcnQoCiAgICAgICAgICAgICAgICBuZnQuZ2V0VHlwZSgpID09IHNlbGYubmZ0VHlwZSwKICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICJCcmlkZ2VkIG5mdCB0eXBlIG1pc21hdGNoIC0gcmVxdWVzdGVkOiAiLmNvbmNhdChzZWxmLm5mdFR5cGUuaWRlbnRpZmllcikKICAgICAgICAgICAgICAgICAgICAuY29uY2F0KCIsIHJlY2VpdmVkOiAiKS5jb25jYXQobmZ0LmdldFR5cGUoKS5pZGVudGlmaWVyKQogICAgICAgICAgICApCiAgICAgICAgICAgIC8vIERlcG9zaXQgdGhlIGJyaWRnZWQgTkZUIGludG8gdGhlIHNpZ25lcidzIGNvbGxlY3Rpb24KICAgICAgICAgICAgc2VsZi5jb2xsZWN0aW9uLmRlcG9zaXQodG9rZW46IDwtbmZ0KQogICAgICAgICAgICBpZHggPSBpZHggKyAxCiAgICAgICAgfQoKICAgICAgICAvLyBEZXN0cm95IHRoZSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgZGVzdHJveSBzZWxmLnNjb3BlZFByb3ZpZGVyCiAgICB9Cn0KCi8vLyBVbndyYXBzIE5GVHMgZnJvbSBhIHByb2plY3QncyBjdXN0b20gRVJDNzIxIHdyYXBwZXIgY29udHJhY3QgdG8gYnJpZGdlZCBORlRzIG9uIEVWTSwgaWYgYXBwbGljYWJsZS4KLy8vIEVuYWJsZXMgcHJvamVjdHMgdG8gdXNlIHRoZWlyIG93biBFUkM3MjEgY29udHJhY3Qgd2hpbGUgbGV2ZXJhZ2luZyB0aGUgYnJpZGdlJ3MgdW5kZXJseWluZyBjb250cmFjdCwKLy8vIHVudGlsIGRpcmVjdCBjdXN0b20gY29udHJhY3Qgc3VwcG9ydCBpcyBhZGRlZCB0byB0aGUgYnJpZGdlLgovLy8KLy8vIEBwYXJhbSBjb2E6IFRoZSBDT0Egb2YgdGhlIHNpZ25lcgovLy8gQHBhcmFtIG5mdElEczogVGhlIElEcyBvZiB0aGUgTkZUcyB0byB3cmFwCi8vLyBAcGFyYW0gbmZ0VHlwZTogVGhlIHR5cGUgb2YgdGhlIE5GVHMgdG8gd3JhcAovLy8gQHBhcmFtIHZpZXdSZXNvbHZlcjogVGhlIFZpZXdSZXNvbHZlciBvZiB0aGUgTkZUIGNvbnRyYWN0Ci8vLwphY2Nlc3MoYWxsKSBmdW4gdW53cmFwTkZUc0lmQXBwbGljYWJsZSgKICAgIF8gY29hOiBhdXRoKEVWTS5DYWxsKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQsCiAgICBuZnRJRHM6IFtVSW50MjU2XSwKICAgIG5mdFR5cGU6IFR5cGUsCiAgICB2aWV3UmVzb2x2ZXI6ICZ7Vmlld1Jlc29sdmVyfQopIHsKICAgIC8vIEdldCB0aGUgcHJvamVjdC1kZWZpbmVkIEVSQzcyMSBhZGRyZXNzIGlmIGl0IGV4aXN0cwogICAgaWYgbGV0IGNyb3NzVk1Qb2ludGVyID0gdmlld1Jlc29sdmVyLnJlc29sdmVDb250cmFjdFZpZXcoCiAgICAgICAgICAgIHJlc291cmNlVHlwZTogbmZ0VHlwZSwKICAgICAgICAgICAgdmlld1R5cGU6IFR5cGU8Q3Jvc3NWTU1ldGFkYXRhVmlld3MuRVZNUG9pbnRlcj4oKQogICAgKSBhcyEgQ3Jvc3NWTU1ldGFkYXRhVmlld3MuRVZNUG9pbnRlcj8gewogICAgICAgIC8vIEdldCB0aGUgdW5kZXJseWluZyBFUkM3MjEgYWRkcmVzcyBpZiBpdCBleGlzdHMKICAgICAgICBpZiBsZXQgdW5kZXJseWluZ0FkZHJlc3MgPSBnZXRVbmRlcmx5aW5nRVJDNzIxQWRkcmVzcyhjb2EsIGNyb3NzVk1Qb2ludGVyLmV2bUNvbnRyYWN0QWRkcmVzcykgewogICAgICAgICAgICBmb3IgaWQgaW4gbmZ0SURzIHsKICAgICAgICAgICAgICAgIC8vIFVud3JhcCBORlQgaWYgaXQgaXMgd3JhcHBlZAogICAgICAgICAgICAgICAgaWYgaXNORlRXcmFwcGVkKGNvYSwKICAgICAgICAgICAgICAgICAgICBuZnRJRDogaWQsCiAgICAgICAgICAgICAgICAgICAgdW5kZXJseWluZzogdW5kZXJseWluZ0FkZHJlc3MsCiAgICAgICAgICAgICAgICAgICAgd3JhcHBlcjogY3Jvc3NWTVBvaW50ZXIuZXZtQ29udHJhY3RBZGRyZXNzCiAgICAgICAgICAgICAgICApIHsKICAgICAgICAgICAgICAgICAgICBsZXQgcmVzID0gbXVzdENhbGwoY29hLCBjcm9zc1ZNUG9pbnRlci5ldm1Db250cmFjdEFkZHJlc3MsCiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uU2lnOiAid2l0aGRyYXdUbyhhZGRyZXNzLHVpbnQyNTZbXSkiLAogICAgICAgICAgICAgICAgICAgICAgICBhcmdzOiBbY29hLmFkZHJlc3MoKSwgW2lkXV0KICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgbGV0IGRlY29kZWRSZXMgPSBFVk0uZGVjb2RlQUJJKHR5cGVzOiBbVHlwZTxCb29sPigpXSwgZGF0YTogcmVzLmRhdGEpCiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0KGRlY29kZWRSZXMubGVuZ3RoID09IDEsIG1lc3NhZ2U6ICJJbnZhbGlkIHJlc3BvbnNlIGxlbmd0aCIpCiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0KGRlY29kZWRSZXNbMF0gYXMhIEJvb2wsIG1lc3NhZ2U6ICJGYWlsZWQgdG8gdW53cmFwIE5GVCIpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KCi8vLyBHZXRzIHRoZSB1bmRlcmx5aW5nIEVSQzcyMSBhZGRyZXNzIGlmIGl0IGV4aXN0cyAoaS5lLiBpZiB0aGUgRVJDNzIxIGlzIGEgd3JhcHBlcikKLy8vCmFjY2VzcyhhbGwpIGZ1biBnZXRVbmRlcmx5aW5nRVJDNzIxQWRkcmVzcygKICAgIF8gY29hOiBhdXRoKEVWTS5DYWxsKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQsCiAgICBfIHdyYXBwZXJBZGRyZXNzOiBFVk0uRVZNQWRkcmVzcwopOiBFVk0uRVZNQWRkcmVzcz8gewogICAgbGV0IHJlcyA9IGNvYS5jYWxsKAogICAgICAgIHRvOiB3cmFwcGVyQWRkcmVzcywKICAgICAgICBkYXRhOiBFVk0uZW5jb2RlQUJJV2l0aFNpZ25hdHVyZSgidW5kZXJseWluZygpIiwgW10pLAogICAgICAgIGdhc0xpbWl0OiAxMDBfMDAwLAogICAgICAgIHZhbHVlOiBFVk0uQmFsYW5jZShhdHRvZmxvdzogMCkKICAgICkKCiAgICAvLyBJZiB0aGUgY2FsbCBmYWlscywgcmV0dXJuIG5pbAogICAgaWYgcmVzLnN0YXR1cyAhPSBFVk0uU3RhdHVzLnN1Y2Nlc3NmdWwgfHwgcmVzLmRhdGEubGVuZ3RoID09IDAgewogICAgICAgIHJldHVybiBuaWwKICAgIH0KCiAgICAvLyBEZWNvZGUgYW5kIHJldHVybiB0aGUgdW5kZXJseWluZyBFUkM3MjEgYWRkcmVzcwogICAgbGV0IGRlY29kZWRSZXN1bHQgPSBFVk0uZGVjb2RlQUJJKAogICAgICAgIHR5cGVzOiBbVHlwZTxFVk0uRVZNQWRkcmVzcz4oKV0sCiAgICAgICAgZGF0YTogcmVzLmRhdGEKICAgICkKICAgIGFzc2VydChkZWNvZGVkUmVzdWx0Lmxlbmd0aCA9PSAxLCBtZXNzYWdlOiAiSW52YWxpZCByZXNwb25zZSBsZW5ndGgiKQogICAgcmV0dXJuIGRlY29kZWRSZXN1bHRbMF0gYXMhIEVWTS5FVk1BZGRyZXNzCn0KCi8vLyBDaGVja3MgaWYgdGhlIHByb3ZpZGVkIE5GVCBpcyB3cmFwcGVkIGluIHRoZSB1bmRlcmx5aW5nIEVSQzcyMSBjb250cmFjdAovLy8KYWNjZXNzKGFsbCkgZnVuIGlzTkZUV3JhcHBlZCgKICAgIF8gY29hOiBhdXRoKEVWTS5DYWxsKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQsCiAgICBuZnRJRDogVUludDI1NiwKICAgIHVuZGVybHlpbmc6IEVWTS5FVk1BZGRyZXNzLAogICAgd3JhcHBlcjogRVZNLkVWTUFkZHJlc3MKKTogQm9vbCB7CiAgICBsZXQgcmVzID0gY29hLmNhbGwoCiAgICAgICAgdG86IHVuZGVybHlpbmcsCiAgICAgICAgZGF0YTogRVZNLmVuY29kZUFCSVdpdGhTaWduYXR1cmUoIm93bmVyT2YodWludDI1NikiLCBbbmZ0SURdKSwKICAgICAgICBnYXNMaW1pdDogMTAwXzAwMCwKICAgICAgICB2YWx1ZTogRVZNLkJhbGFuY2UoYXR0b2Zsb3c6IDApCiAgICApCgogICAgLy8gSWYgdGhlIGNhbGwgZmFpbHMsIHJldHVybiBmYWxzZQogICAgaWYgcmVzLnN0YXR1cyAhPSBFVk0uU3RhdHVzLnN1Y2Nlc3NmdWwgfHwgcmVzLmRhdGEubGVuZ3RoID09IDB7CiAgICAgICAgcmV0dXJuIGZhbHNlCiAgICB9CgogICAgLy8gRGVjb2RlIGFuZCBjb21wYXJlIHRoZSBhZGRyZXNzZXMKICAgIGxldCBkZWNvZGVkUmVzdWx0ID0gRVZNLmRlY29kZUFCSSgKICAgICAgICB0eXBlczogW1R5cGU8RVZNLkVWTUFkZHJlc3M+KCldLAogICAgICAgIGRhdGE6IHJlcy5kYXRhCiAgICApCiAgICBhc3NlcnQoZGVjb2RlZFJlc3VsdC5sZW5ndGggPT0gMSwgbWVzc2FnZTogIkludmFsaWQgcmVzcG9uc2UgbGVuZ3RoIikKICAgIGxldCBvd25lciA9IGRlY29kZWRSZXN1bHRbMF0gYXMhIEVWTS5FVk1BZGRyZXNzCiAgICByZXR1cm4gb3duZXIudG9TdHJpbmcoKSA9PSB3cmFwcGVyLnRvU3RyaW5nKCkKfQoKLy8vIENhbGxzIGEgZnVuY3Rpb24gb24gYW4gRVZNIGNvbnRyYWN0IGZyb20gcHJvdmlkZWQgY29hCi8vLwphY2Nlc3MoYWxsKSBmdW4gbXVzdENhbGwoCiAgICBfIGNvYTogYXV0aChFVk0uQ2FsbCkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50LAogICAgXyBjb250cmFjdEFkZHI6IEVWTS5FVk1BZGRyZXNzLAogICAgZnVuY3Rpb25TaWc6IFN0cmluZywKICAgIGFyZ3M6IFtBbnlTdHJ1Y3RdCik6IEVWTS5SZXN1bHQgewogICAgbGV0IHJlcyA9IGNvYS5jYWxsKAogICAgICAgIHRvOiBjb250cmFjdEFkZHIsCiAgICAgICAgZGF0YTogRVZNLmVuY29kZUFCSVdpdGhTaWduYXR1cmUoZnVuY3Rpb25TaWcsIGFyZ3MpLAogICAgICAgIGdhc0xpbWl0OiA0XzAwMF8wMDAsCiAgICAgICAgdmFsdWU6IEVWTS5CYWxhbmNlKGF0dG9mbG93OiAwKQogICAgKQoKICAgIGFzc2VydChyZXMuc3RhdHVzID09IEVWTS5TdGF0dXMuc3VjY2Vzc2Z1bCwKICAgICAgICBtZXNzYWdlOiAiRmFpbGVkIHRvIGNhbGwgJyIuY29uY2F0KGZ1bmN0aW9uU2lnKQogICAgICAgICAgICAuY29uY2F0KCJcblx0IGVycm9yIGNvZGU6ICIpLmNvbmNhdChyZXMuZXJyb3JDb2RlLnRvU3RyaW5nKCkpCiAgICAgICAgICAgIC5jb25jYXQoIlxuXHQgZXJyb3IgbWVzc2FnZTogIikuY29uY2F0KHJlcy5lcnJvck1lc3NhZ2UpCiAgICAgICAgICAgIC5jb25jYXQoIlxuXHQgZ2FzIHVzZWQ6ICIpLmNvbmNhdChyZXMuZ2FzVXNlZC50b1N0cmluZygpKQogICAgICAgICAgICAuY29uY2F0KCJcblx0IGNhbGxlciBhZGRyZXNzOiAweCIpLmNvbmNhdChjb2EuYWRkcmVzcygpLnRvU3RyaW5nKCkpCiAgICAgICAgICAgIC5jb25jYXQoIlxuXHQgY29udHJhY3QgYWRkcmVzczogMHgiKS5jb25jYXQoY29udHJhY3RBZGRyLnRvU3RyaW5nKCkpCiAgICApCgogICAgcmV0dXJuIHJlcwp9Cg==",
          "batchBridgeNFTFromEvmWithPayer": "",
          "batchBridgeNFTToEvm": "",
          "batchBridgeNFTToEvmAddress": "",
          "batchBridgeNFTToEvmAddressWithPayer": "",
          "batchBridgeNFTToEvmV2": "",
          "batchBridgeNFTToEvmWithPayer": "",
          "batchEvmAddressRequiresOnboarding": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgYmF0Y2hFdm1BZGRyZXNzUmVxdWlyZXNPbmJvYXJkaW5nIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRVZNVXRpbHMgZnJvbSAweGRmYzIwYWVlNjUwZmNiZGYKCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHhkZmMyMGFlZTY1MGZjYmRmCgoKLy8vIFJldHVybnMgd2hldGhlciBhIEVWTSBjb250cmFjdCBuZWVkcyB0byBiZSBvbmJvYXJkZWQgdG8gdGhlIEZsb3dFVk1CcmlkZ2UKLy8vCi8vLyBAcGFyYW0gZXZtQWRkcmVzc2VzOiBBcnJheSBvZiBoZXgtZW5jb2RlZCBhZGRyZXNzIG9mIHRoZSBFVk0gY29udHJhY3QgYXMgYSBTdHJpbmcgd2l0aG91dCAweCBwcmVmaXggdG8gY2hlY2sgZm9yCi8vLyAgICAgb25ib2FyZGluZyBzdGF0dXMKLy8vCi8vLyBAcmV0dXJuIFdoZXRoZXIgdGhlIGNvbnRyYWN0IHJlcXVpcmVzIG9uYm9hcmRpbmcgdG8gdGhlIEZsb3dFVk1CcmlkZ2UgaWYgdGhlIHR5cGUgaXMgYnJpZGdlYWJsZSwgb3RoZXJ3aXNlIG5pbAovLy8gICAgIGluZGV4ZWQgb24gdGhlIGhleC1lbmNvZGVkIGFkZHJlc3Mgb2YgdGhlIEVWTSBjb250cmFjdCB3aXRob3V0IDB4IHByZWZpeAovLy8KYWNjZXNzKGFsbCkgZnVuIG1haW4oZXZtQWRkcmVzc2VzOiBbU3RyaW5nXSk6IHtTdHJpbmc6IEJvb2w/fSB7CiAgICBsZXQgcmVzdWx0czoge1N0cmluZzogQm9vbD99ID0ge30KICAgIGZvciBhZGRyZXNzSGV4IGluIGV2bUFkZHJlc3NlcyB7CiAgICAgICAgaWYgcmVzdWx0c1thZGRyZXNzSGV4XSAhPSBuaWwgewogICAgICAgICAgICBjb250aW51ZQogICAgICAgIH0KICAgICAgICBpZiBsZXQgYWRkcmVzcyA9IEVWTVV0aWxzLmdldEVWTUFkZHJlc3NGcm9tSGV4U3RyaW5nKGFkZHJlc3M6IGFkZHJlc3NIZXgpIHsKICAgICAgICAgICAgbGV0IHJlcXVpcmVzT25ib2FyZGluZyA9IEZsb3dFVk1CcmlkZ2UuZXZtQWRkcmVzc1JlcXVpcmVzT25ib2FyZGluZyhhZGRyZXNzKQogICAgICAgICAgICByZXN1bHRzLmluc2VydChrZXk6IGFkZHJlc3NIZXgsIHJlcXVpcmVzT25ib2FyZGluZykKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gcmVzdWx0cwp9Cg==",
          "batchIdentifierRequiresOnboarding": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgYmF0Y2hJZGVudGlmaWVyUmVxdWlyZXNPbmJvYXJkaW5nIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRmxvd0VWTUJyaWRnZSBmcm9tIDB4ZGZjMjBhZWU2NTBmY2JkZgoKCi8vLyBSZXR1cm5zIHdoZXRoZXIgYSB0eXBlIG5lZWRzIHRvIGJlIG9uYm9hcmRlZCB0byB0aGUgRmxvd0VWTUJyaWRnZQovLy8KLy8vIEBwYXJhbSBUeXBlczogVGhlIGFycmF5IG9mIHR5cGVzIHRvIGNoZWNrIGZvciBvbmJvYXJkaW5nIHN0YXR1cwovLy8KLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHlwZSByZXF1aXJlcyBvbmJvYXJkaW5nIHRvIHRoZSBGbG93RVZNQnJpZGdlIGlmIHRoZSB0eXBlIGlzIGJyaWRnZWFibGUsIG90aGVyd2lzZSBuaWwgaW5kZXhlZAovLy8gICAgIG9uIHRoZSB0eXBlCi8vLwphY2Nlc3MoYWxsKSBmdW4gbWFpbihpZGVudGlmaWVyczogW1N0cmluZ10pOiB7U3RyaW5nOiBCb29sP30gewogICAgbGV0IHJlc3VsdHM6IHtTdHJpbmc6IEJvb2w/fSA9IHt9CgogICAgZm9yIGlkZW50aWZpZXIgaW4gaWRlbnRpZmllcnMgewogICAgICAgIGlmIHJlc3VsdHNbaWRlbnRpZmllcl0gIT0gbmlsIHsKICAgICAgICAgICAgY29udGludWUKICAgICAgICB9CiAgICAgICAgbGV0IHR5cGU6IFR5cGUgPSBDb21wb3NpdGVUeXBlKGlkZW50aWZpZXIpID8/IHBhbmljKCJJbnZhbGlkIHR5cGUgaWRlbnRpZmllciIpCiAgICAgICAgcmVzdWx0cy5pbnNlcnQoa2V5OiBpZGVudGlmaWVyLCBGbG93RVZNQnJpZGdlLnR5cGVSZXF1aXJlc09uYm9hcmRpbmcodHlwZSkpCiAgICB9CiAgICByZXR1cm4gcmVzdWx0cwp9Cg==",
          "batchOnboardByEvmAddress": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgYmF0Y2hPbmJvYXJkQnlFdm1BZGRyZXNzIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4OWEwNzY2ZDkzYjY2MDhiNwoKaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4N2U2MGRmMDQyYTljMDg2OAoKCmltcG9ydCBTY29wZWRGVFByb3ZpZGVycyBmcm9tIDB4ZGZjMjBhZWU2NTBmY2JkZgoKCmltcG9ydCBFVk0gZnJvbSAweDhjNTMwM2VhYTI2MjAyZDYKCgppbXBvcnQgRVZNVXRpbHMgZnJvbSAweGRmYzIwYWVlNjUwZmNiZGYKCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHhkZmMyMGFlZTY1MGZjYmRmCgppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4ZGZjMjBhZWU2NTBmY2JkZgoKCi8vLyBUaGlzIHRyYW5zYWN0aW9uIG9uYm9hcmRzIHRoZSBORlQgdHlwZSB0byB0aGUgYnJpZGdlLCBjb25maWd1cmluZyB0aGUgYnJpZGdlIHRvIG1vdmUgTkZUcyBiZXR3ZWVuIGVudmlyb25tZW50cwovLy8gTk9URTogVGhpcyBtdXN0IGJlIGRvbmUgYmVmb3JlIGJyaWRnaW5nIGEgQ2FkZW5jZS1uYXRpdmUgTkZUIHRvIEVWTQovLy8KLy8vIEBwYXJhbSBhZGRyZXNzZXNBc0hleDogQXJyYXkgb2YgRVZNIGNvbnRyYWN0IGFkZHJlc3NlcyAoYXMgaGV4IHN0cmluZyB3aXRob3V0IDB4IHByZWZpeCkgZGVmaW5pbmcgdGhlIAovLy8gICAgIGJyaWRnZWFibGUgYXNzZXQgdG8gYmUgb25ib2FyZGVkCi8vLwp0cmFuc2FjdGlvbihhZGRyZXNzZXNBc0hleDogW1N0cmluZ10pIHsKCiAgICBsZXQgc2NvcGVkUHJvdmlkZXI6IEBTY29wZWRGVFByb3ZpZGVycy5TY29wZWRGVFByb3ZpZGVyCiAgICAKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKENvcHlWYWx1ZSwgQm9ycm93VmFsdWUsIElzc3VlU3RvcmFnZUNhcGFiaWxpdHlDb250cm9sbGVyLCBQdWJsaXNoQ2FwYWJpbGl0eSwgU2F2ZVZhbHVlKSAmQWNjb3VudCkgewoKICAgICAgICAvKiAtLS0gQ29uZmlndXJlIGEgU2NvcGVkRlRQcm92aWRlciAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIElzc3VlIGFuZCBzdG9yZSBicmlkZ2UtZGVkaWNhdGVkIFByb3ZpZGVyIENhcGFiaWxpdHkgaW4gc3RvcmFnZSBpZiBuZWNlc3NhcnkKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS50eXBlKGF0OiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigKICAgICAgICAgICAgICAgIC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICAgICAgICkKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZShwcm92aWRlckNhcCwgdG86IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpCiAgICAgICAgfQogICAgICAgIC8vIENvcHkgdGhlIHN0b3JlZCBQcm92aWRlciBjYXBhYmlsaXR5IGFuZCBjcmVhdGUgYSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgbGV0IHByb3ZpZGVyQ2FwQ29weSA9IHNpZ25lci5zdG9yYWdlLmNvcHk8Q2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+PigKICAgICAgICAgICAgICAgIGZyb206IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiSW52YWxpZCBQcm92aWRlciBDYXBhYmlsaXR5IGZvdW5kIGluIHN0b3JhZ2UuIikKICAgICAgICAvLyBTZXQgYSB3aXRoZHJhd2FsIGxpbWl0IGZvciB0aGUgcHJvdmlkZXIKICAgICAgICBsZXQgcHJvdmlkZXJMaW1pdCA9IEZsb3dFVk1CcmlkZ2VDb25maWcub25ib2FyZEZlZSAqIFVGaXg2NChhZGRyZXNzZXNBc0hleC5sZW5ndGgpCiAgICAgICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKHByb3ZpZGVyTGltaXQpCiAgICAgICAgLy8gQ3JlYXRlIFNjb3BlZEZUUHJvdmlkZXIgdG8gZXhwaXJlIGp1c3QgYWZ0ZXIgdGhpcyB0cmFuc2FjdGlvbgogICAgICAgIHNlbGYuc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgICAgICAgICBmaWx0ZXJzOiBbIHByb3ZpZGVyRmlsdGVyIF0sCiAgICAgICAgICAgICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICAgICAgICAgKQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIC8vIEl0ZXJhdGUgb3ZlciBwcm92aWRlZCBhcnJheQogICAgICAgIGZvciBhZGRyZXNzSGV4IGluIGFkZHJlc3Nlc0FzSGV4IHsKICAgICAgICAgICAgLy8gQ29udmVydCBoZXggc3RyaW5nIHRvIEVWTUFkZHJlc3MKICAgICAgICAgICAgbGV0IGFkZHJlc3MgPSBFVk1VdGlscy5nZXRFVk1BZGRyZXNzRnJvbUhleFN0cmluZyhhZGRyZXNzOiBhZGRyZXNzSGV4KQogICAgICAgICAgICAvLyBDb250aW51ZSBpZiB0aGUgaGV4IGlzIG5vdCBhIHZhbGlkIEVWTSBhZGRyZXNzIG9yIGlmIHRoZSBhZGRyZXNzIGlzIGFscmVhZHkgb25ib2FyZGVkCiAgICAgICAgICAgIGlmIGFkZHJlc3MgPT0gbmlsIHx8IEZsb3dFVk1CcmlkZ2UuZXZtQWRkcmVzc1JlcXVpcmVzT25ib2FyZGluZyhhZGRyZXNzISkgIT0gdHJ1ZSB7CiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICB9CgogICAgICAgICAgICBGbG93RVZNQnJpZGdlLm9uYm9hcmRCeUVWTUFkZHJlc3MoCiAgICAgICAgICAgICAgICBhZGRyZXNzISwKICAgICAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICAgICAgKQogICAgICAgIH0KICAgICAgICBkZXN0cm95IHNlbGYuc2NvcGVkUHJvdmlkZXIKICAgIH0KfQo=",
          "batchOnboardByIdentifier": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgYmF0Y2hPbmJvYXJkQnlJZGVudGlmaWVyIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4OWEwNzY2ZDkzYjY2MDhiNwoKaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4N2U2MGRmMDQyYTljMDg2OAoKCmltcG9ydCBTY29wZWRGVFByb3ZpZGVycyBmcm9tIDB4ZGZjMjBhZWU2NTBmY2JkZgoKCmltcG9ydCBFVk0gZnJvbSAweDhjNTMwM2VhYTI2MjAyZDYKCgppbXBvcnQgRmxvd0VWTUJyaWRnZSBmcm9tIDB4ZGZjMjBhZWU2NTBmY2JkZgoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweGRmYzIwYWVlNjUwZmNiZGYKCgovLy8gVGhpcyB0cmFuc2FjdGlvbiBvbmJvYXJkcyB0aGUgYXNzZXQgdHlwZSB0byB0aGUgYnJpZGdlLCBjb25maWd1cmluZyB0aGUgYnJpZGdlIHRvIG1vdmUgYXNzZXRzIGJldHdlZW4gZW52aXJvbm1lbnRzCi8vLyBOT1RFOiBUaGlzIG11c3QgYmUgZG9uZSBiZWZvcmUgYnJpZGdpbmcgYSBDYWRlbmNlLW5hdGl2ZSBhc3NldCB0byBFVk0KLy8vCi8vLyBAcGFyYW0gdHlwZXM6IFRoZSBDYWRlbmNlIHR5cGVzIG9mIHRoZSBicmlkZ2VhYmxlIGFzc2V0IHRvIG9uYm9hcmQgdG8gdGhlIGJyaWRnZQovLy8KdHJhbnNhY3Rpb24oaWRlbnRpZmllcnM6IFtTdHJpbmddKSB7CgogICAgbGV0IHNjb3BlZFByb3ZpZGVyOiBAU2NvcGVkRlRQcm92aWRlcnMuU2NvcGVkRlRQcm92aWRlcgogICAgCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChDb3B5VmFsdWUsIEJvcnJvd1ZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsKCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApCiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICAgIH0KICAgICAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkludmFsaWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBmb3VuZCBpbiBzdG9yYWdlLiIpCiAgICAgICAgLy8gU2V0IGEgd2l0aGRyYXdhbCBsaW1pdCBmb3IgdGhlIHByb3ZpZGVyCiAgICAgICAgbGV0IHByb3ZpZGVyTGltaXQgPSBGbG93RVZNQnJpZGdlQ29uZmlnLm9uYm9hcmRGZWUgKiBVRml4NjQodHlwZXMubGVuZ3RoKQogICAgICAgIGxldCBwcm92aWRlckZpbHRlciA9IFNjb3BlZEZUUHJvdmlkZXJzLkFsbG93YW5jZUZpbHRlcihwcm92aWRlckxpbWl0KQogICAgICAgIC8vIENyZWF0ZSBTY29wZWRGVFByb3ZpZGVyIHRvIGV4cGlyZSBqdXN0IGFmdGVyIHRoaXMgdHJhbnNhY3Rpb24KICAgICAgICBzZWxmLnNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICAgICAgICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgICAgICkKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICBmb3IgaWRlbnRpZmllcnMgaW4gaWRlbnRpZmllcnMgeyAKICAgICAgICAgICAgbGV0IHR5cGUgPSBDb21wb3NpdGVUeXBlKGlkZW50aWZpZXIpID8/IHBhbmljKCJJbnZhbGlkIHR5cGUgaWRlbnRpZmllciIpCiAgICAgICAgICAgIC8vIENvbnRpbnVlIG9uIGlmIHRoZSB0eXBlIGRvZXMgbm90IHJlcXVpcmUgb25ib2FyZGluZwogICAgICAgICAgICBpZiBGbG93RVZNQnJpZGdlLnR5cGVSZXF1aXJlc09uYm9hcmRpbmcodHlwZSkgIT0gdHJ1ZSB7CiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIE9uYm9hcmQgdGhlIGFzc2V0IFR5cGUKICAgICAgICAgICAgRmxvd0VWTUJyaWRnZS5vbmJvYXJkQnlUeXBlKAogICAgICAgICAgICAgICAgdHlwZSwKICAgICAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICAgICAgKQogICAgICAgIH0KICAgICAgICBkZXN0cm95IHNlbGYuc2NvcGVkUHJvdmlkZXIKICAgIH0KfQo=",
          "batchOnboardByType": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgYmF0Y2hPbmJvYXJkQnlUeXBlIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4OWEwNzY2ZDkzYjY2MDhiNwoKaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4N2U2MGRmMDQyYTljMDg2OAoKCmltcG9ydCBTY29wZWRGVFByb3ZpZGVycyBmcm9tIDB4ZGZjMjBhZWU2NTBmY2JkZgoKCmltcG9ydCBFVk0gZnJvbSAweDhjNTMwM2VhYTI2MjAyZDYKCgppbXBvcnQgRmxvd0VWTUJyaWRnZSBmcm9tIDB4ZGZjMjBhZWU2NTBmY2JkZgoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweGRmYzIwYWVlNjUwZmNiZGYKCgovLy8gVGhpcyB0cmFuc2FjdGlvbiBvbmJvYXJkcyB0aGUgYXNzZXQgdHlwZSB0byB0aGUgYnJpZGdlLCBjb25maWd1cmluZyB0aGUgYnJpZGdlIHRvIG1vdmUgYXNzZXRzIGJldHdlZW4gZW52aXJvbm1lbnRzCi8vLyBOT1RFOiBUaGlzIG11c3QgYmUgZG9uZSBiZWZvcmUgYnJpZGdpbmcgYSBDYWRlbmNlLW5hdGl2ZSBhc3NldCB0byBFVk0KLy8vCi8vLyBAcGFyYW0gdHlwZXM6IFRoZSBDYWRlbmNlIHR5cGVzIG9mIHRoZSBicmlkZ2VhYmxlIGFzc2V0IHRvIG9uYm9hcmQgdG8gdGhlIGJyaWRnZQovLy8KdHJhbnNhY3Rpb24odHlwZXM6IFtUeXBlXSkgewoKICAgIGxldCBzY29wZWRQcm92aWRlcjogQFNjb3BlZEZUUHJvdmlkZXJzLlNjb3BlZEZUUHJvdmlkZXIKICAgIAogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQ29weVZhbHVlLCBCb3Jyb3dWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUpICZBY2NvdW50KSB7CgogICAgICAgIC8qIC0tLSBDb25maWd1cmUgYSBTY29wZWRGVFByb3ZpZGVyIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gSXNzdWUgYW5kIHN0b3JlIGJyaWRnZS1kZWRpY2F0ZWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBpbiBzdG9yYWdlIGlmIG5lY2Vzc2FyeQogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLnR5cGUoYXQ6IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIGxldCBwcm92aWRlckNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KAogICAgICAgICAgICAgICAgL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgICAgICAgKQogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKHByb3ZpZGVyQ2FwLCB0bzogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkKICAgICAgICB9CiAgICAgICAgLy8gQ29weSB0aGUgc3RvcmVkIFByb3ZpZGVyIGNhcGFiaWxpdHkgYW5kIGNyZWF0ZSBhIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBsZXQgcHJvdmlkZXJDYXBDb3B5ID0gc2lnbmVyLnN0b3JhZ2UuY29weTxDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4+KAogICAgICAgICAgICAgICAgZnJvbTogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJJbnZhbGlkIFByb3ZpZGVyIENhcGFiaWxpdHkgZm91bmQgaW4gc3RvcmFnZS4iKQogICAgICAgIC8vIFNldCBhIHdpdGhkcmF3YWwgbGltaXQgZm9yIHRoZSBwcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckxpbWl0ID0gRmxvd0VWTUJyaWRnZUNvbmZpZy5vbmJvYXJkRmVlICogVUZpeDY0KHR5cGVzLmxlbmd0aCkKICAgICAgICBsZXQgcHJvdmlkZXJGaWx0ZXIgPSBTY29wZWRGVFByb3ZpZGVycy5BbGxvd2FuY2VGaWx0ZXIocHJvdmlkZXJMaW1pdCkKICAgICAgICAvLyBDcmVhdGUgU2NvcGVkRlRQcm92aWRlciB0byBleHBpcmUganVzdCBhZnRlciB0aGlzIHRyYW5zYWN0aW9uCiAgICAgICAgc2VsZi5zY29wZWRQcm92aWRlciA8LSBTY29wZWRGVFByb3ZpZGVycy5jcmVhdGVTY29wZWRGVFByb3ZpZGVyKAogICAgICAgICAgICAgICAgcHJvdmlkZXI6IHByb3ZpZGVyQ2FwQ29weSwKICAgICAgICAgICAgICAgIGZpbHRlcnM6IFsgcHJvdmlkZXJGaWx0ZXIgXSwKICAgICAgICAgICAgICAgIGV4cGlyYXRpb246IGdldEN1cnJlbnRCbG9jaygpLnRpbWVzdGFtcCArIDEuMAogICAgICAgICAgICApCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgZm9yIHR5cGUgaW4gdHlwZXMgeyAKICAgICAgICAgICAgLy8gQ29udGludWUgb24gaWYgdGhlIHR5cGUgZG9lcyBub3QgcmVxdWlyZSBvbmJvYXJkaW5nCiAgICAgICAgICAgIGlmIEZsb3dFVk1CcmlkZ2UudHlwZVJlcXVpcmVzT25ib2FyZGluZyh0eXBlKSAhPSB0cnVlIHsKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8gT25ib2FyZCB0aGUgYXNzZXQgVHlwZQogICAgICAgICAgICBGbG93RVZNQnJpZGdlLm9uYm9hcmRCeVR5cGUoCiAgICAgICAgICAgICAgICB0eXBlLAogICAgICAgICAgICAgICAgZmVlUHJvdmlkZXI6ICZzZWxmLnNjb3BlZFByb3ZpZGVyIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfQogICAgICAgICAgICApCiAgICAgICAgfQogICAgICAgIGRlc3Ryb3kgc2VsZi5zY29wZWRQcm92aWRlcgogICAgfQp9Cg==",
          "batchTypeRequiresOnboarding": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgYmF0Y2hUeXBlUmVxdWlyZXNPbmJvYXJkaW5nIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRmxvd0VWTUJyaWRnZSBmcm9tIDB4ZGZjMjBhZWU2NTBmY2JkZgoKCi8vLyBSZXR1cm5zIHdoZXRoZXIgYSB0eXBlIG5lZWRzIHRvIGJlIG9uYm9hcmRlZCB0byB0aGUgRmxvd0VWTUJyaWRnZQovLy8KLy8vIEBwYXJhbSBUeXBlczogVGhlIGFycmF5IG9mIHR5cGVzIHRvIGNoZWNrIGZvciBvbmJvYXJkaW5nIHN0YXR1cwovLy8KLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHlwZSByZXF1aXJlcyBvbmJvYXJkaW5nIHRvIHRoZSBGbG93RVZNQnJpZGdlIGlmIHRoZSB0eXBlIGlzIGJyaWRnZWFibGUsIG90aGVyd2lzZSBuaWwgaW5kZXhlZAovLy8gICAgIG9uIHRoZSB0eXBlCi8vLwphY2Nlc3MoYWxsKSBmdW4gbWFpbih0eXBlczogW1R5cGVdKToge1R5cGU6IEJvb2w/fSB7CiAgICBsZXQgcmVzdWx0czoge1R5cGU6IEJvb2w/fSA9IHt9CiAgICBmb3IgdHlwZSBpbiB0eXBlcyB7CiAgICAgICAgaWYgcmVzdWx0c1t0eXBlXSAhPSBuaWwgewogICAgICAgICAgICBjb250aW51ZQogICAgICAgIH0KICAgICAgICByZXN1bHRzLmluc2VydChrZXk6IHR5cGUsIEZsb3dFVk1CcmlkZ2UudHlwZVJlcXVpcmVzT25ib2FyZGluZyh0eXBlKSkKICAgIH0KICAgIHJldHVybiByZXN1bHRzCn0K",
          "bridgeNFTFromEvm": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgYnJpZGdlTkZURnJvbUV2bSAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweDlhMDc2NmQ5M2I2NjA4YjcKCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweDdlNjBkZjA0MmE5YzA4NjgKCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHhkZmMyMGFlZTY1MGZjYmRmCgoKaW1wb3J0IEVWTSBmcm9tIDB4OGM1MzAzZWFhMjYyMDJkNgoKCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweGRmYzIwYWVlNjUwZmNiZGYKCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHhkZmMyMGFlZTY1MGZjYmRmCgppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4ZGZjMjBhZWU2NTBmY2JkZgoKCi8vLyBUaGlzIHRyYW5zYWN0aW9uIGJyaWRnZXMgYW4gTkZUIGZyb20gRVZNIHRvIENhZGVuY2UgYXNzdW1pbmcgaXQgaGFzIGFscmVhZHkgYmVlbiBvbmJvYXJkZWQgdG8gdGhlIEZsb3dFVk1CcmlkZ2UKLy8vIE5PVEU6IFRoZSBFUkM3MjEgbXVzdCBoYXZlIGZpcnN0IGJlZW4gb25ib2FyZGVkIHRvIHRoZSBicmlkZ2UuIFRoaXMgY2FuIGJlIGNoZWNrZWQgdmlhIHRoZSBtZXRob2QKLy8vICAgICBGbG93RVZNQnJpZGdlLmV2bUFkZHJlc3NSZXF1aXJlc09uYm9hcmRpbmcoYWRkcmVzczogc2VsZi5ldm1Db250cmFjdEFkZHJlc3MpCi8vLwovLy8gQHBhcmFtIG5mdENvbnRyYWN0QWRkcmVzczogVGhlIEZsb3cgYWNjb3VudCBhZGRyZXNzIGhvc3RpbmcgdGhlIE5GVC1kZWZpbmluZyBDYWRlbmNlIGNvbnRyYWN0Ci8vLyBAcGFyYW0gbmZ0Q29udHJhY3ROYW1lOiBUaGUgbmFtZSBvZiB0aGUgTkZULWRlZmluaW5nIENhZGVuY2UgY29udHJhY3QKLy8vIEBwYXJhbSBpZDogVGhlIEVSQzcyMSBpZCBvZiB0aGUgTkZUIHRvIGJyaWRnZSB0byBDYWRlbmNlIGZyb20gRVZNCi8vLwp0cmFuc2FjdGlvbihuZnRDb250cmFjdEFkZHJlc3M6IEFkZHJlc3MsIG5mdENvbnRyYWN0TmFtZTogU3RyaW5nLCBpZDogVUludDI1NikgewoKICAgIGxldCBuZnRUeXBlOiBUeXBlCiAgICBsZXQgY29sbGVjdGlvbjogJntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259CiAgICBsZXQgc2NvcGVkUHJvdmlkZXI6IEBTY29wZWRGVFByb3ZpZGVycy5TY29wZWRGVFByb3ZpZGVyCiAgICBsZXQgY29hOiBhdXRoKEVWTS5CcmlkZ2UpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudAogICAgCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChCb3Jyb3dWYWx1ZSwgQ29weVZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSwgVW5wdWJsaXNoQ2FwYWJpbGl0eSkgJkFjY291bnQpIHsKICAgICAgICAvKiAtLS0gUmVmZXJlbmNlIHRoZSBzaWduZXIncyBDYWRlbmNlT3duZWRBY2NvdW50IC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBDT0EKICAgICAgICBzZWxmLmNvYSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEVWTS5CcmlkZ2UpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oZnJvbTogL3N0b3JhZ2UvZXZtKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBDT0EgZnJvbSBwcm92aWRlZCBnYXRld2F5IGFkZHJlc3MiKQoKICAgICAgICAvLyBHZXQgdGhlIEVSQzcyMSBjb250cmFjdCBhZGRyZXNzIGZvciB0aGUgZ2l2ZW4gTkZUIHR5cGUKICAgICAgICBzZWxmLm5mdFR5cGUgPSBGbG93RVZNQnJpZGdlVXRpbHMuYnVpbGRDb21wb3NpdGVUeXBlKAogICAgICAgICAgICAgICAgYWRkcmVzczogbmZ0Q29udHJhY3RBZGRyZXNzLAogICAgICAgICAgICAgICAgY29udHJhY3ROYW1lOiBuZnRDb250cmFjdE5hbWUsCiAgICAgICAgICAgICAgICByZXNvdXJjZU5hbWU6ICJORlQiCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkNvdWxkIG5vdCBjb25zdHJ1Y3QgTkZUIHR5cGUiKQoKICAgICAgICAvKiAtLS0gUmVmZXJlbmNlIHRoZSBzaWduZXIncyBORlQgQ29sbGVjdGlvbiAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgTkZUIGNvbGxlY3Rpb24sIGNvbmZpZ3VyaW5nIGlmIG5lY2Vzc2FyeQogICAgICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KG5mdENvbnRyYWN0QWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IG5mdENvbnRyYWN0TmFtZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gTkZUIGNvbnRyYWN0IikKICAgICAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgICAgIHJlc291cmNlVHlwZTogc2VsZi5uZnRUeXBlLAogICAgICAgICAgICAgICAgdmlld1R5cGU6IFR5cGU8TWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT4oKQogICAgICAgICAgICApIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgTkZUQ29sbGVjdGlvbkRhdGEgdmlldyIpCiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UuYm9ycm93PCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufT4oZnJvbTogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUoPC1jb2xsZWN0aW9uRGF0YS5jcmVhdGVFbXB0eUNvbGxlY3Rpb24oKSwgdG86IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgICAgICBzaWduZXIuY2FwYWJpbGl0aWVzLnVucHVibGlzaChjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKQogICAgICAgICAgICBsZXQgY29sbGVjdGlvbkNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgICAgICBzaWduZXIuY2FwYWJpbGl0aWVzLnB1Ymxpc2goY29sbGVjdGlvbkNhcCwgYXQ6IGNvbGxlY3Rpb25EYXRhLnB1YmxpY1BhdGgpCiAgICAgICAgfQogICAgICAgIHNlbGYuY29sbGVjdGlvbiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KGZyb206IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBjb2xsZWN0aW9uIGZyb20gc3RvcmFnZSBwYXRoIikKCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGJyaWRnZSBmZWUgLSBicmlkZ2luZyBmcm9tIEVWTSBjb25zdW1lcyBubyBzdG9yYWdlLCBzbyBmbGF0IGZlZQogICAgICAgIGxldCBhcHByb3hGZWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuY2FsY3VsYXRlQnJpZGdlRmVlKGJ5dGVzOiA0MDBfMDAwKQogICAgICAgIC8vIElzc3VlIGFuZCBzdG9yZSBicmlkZ2UtZGVkaWNhdGVkIFByb3ZpZGVyIENhcGFiaWxpdHkgaW4gc3RvcmFnZSBpZiBuZWNlc3NhcnkKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS50eXBlKGF0OiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigKICAgICAgICAgICAgICAgIC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICAgICAgICkKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZShwcm92aWRlckNhcCwgdG86IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpCiAgICAgICAgfQogICAgICAgIC8vIENvcHkgdGhlIHN0b3JlZCBQcm92aWRlciBjYXBhYmlsaXR5IGFuZCBjcmVhdGUgYSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgbGV0IHByb3ZpZGVyQ2FwQ29weSA9IHNpZ25lci5zdG9yYWdlLmNvcHk8Q2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+PigKICAgICAgICAgICAgICAgIGZyb206IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiSW52YWxpZCBQcm92aWRlciBDYXBhYmlsaXR5IGZvdW5kIGluIHN0b3JhZ2UuIikKICAgICAgICBsZXQgcHJvdmlkZXJGaWx0ZXIgPSBTY29wZWRGVFByb3ZpZGVycy5BbGxvd2FuY2VGaWx0ZXIoYXBwcm94RmVlKQogICAgICAgIHNlbGYuc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgICAgICAgICBmaWx0ZXJzOiBbIHByb3ZpZGVyRmlsdGVyIF0sCiAgICAgICAgICAgICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICAgICAgICAgKQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIC8vIEV4ZWN1dGUgdGhlIGJyaWRnZQogICAgICAgIGxldCBuZnQ6IEB7Tm9uRnVuZ2libGVUb2tlbi5ORlR9IDwtIHNlbGYuY29hLndpdGhkcmF3TkZUKAogICAgICAgICAgICB0eXBlOiBzZWxmLm5mdFR5cGUsCiAgICAgICAgICAgIGlkOiBpZCwKICAgICAgICAgICAgZmVlUHJvdmlkZXI6ICZzZWxmLnNjb3BlZFByb3ZpZGVyIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfQogICAgICAgICkKICAgICAgICAvLyBEZXBvc2l0IHRoZSBicmlkZ2VkIE5GVCBpbnRvIHRoZSBzaWduZXIncyBjb2xsZWN0aW9uCiAgICAgICAgc2VsZi5jb2xsZWN0aW9uLmRlcG9zaXQodG9rZW46IDwtbmZ0KQogICAgICAgIC8vIERlc3Ryb3kgdGhlIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBkZXN0cm95IHNlbGYuc2NvcGVkUHJvdmlkZXIKICAgIH0KfQo=",
          "bridgeNFTFromEvmToFlow": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgYnJpZGdlTkZURnJvbUV2bVRvRmxvdyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweDlhMDc2NmQ5M2I2NjA4YjcKCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweDdlNjBkZjA0MmE5YzA4NjgKCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHhkZmMyMGFlZTY1MGZjYmRmCgoKaW1wb3J0IEVWTSBmcm9tIDB4OGM1MzAzZWFhMjYyMDJkNgoKCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweGRmYzIwYWVlNjUwZmNiZGYKCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHhkZmMyMGFlZTY1MGZjYmRmCgppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4ZGZjMjBhZWU2NTBmY2JkZgoKCi8vLyBUaGlzIHRyYW5zYWN0aW9uIGJyaWRnZXMgYW4gTkZUIGZyb20gRVZNIHRvIENhZGVuY2UgYXNzdW1pbmcgaXQgaGFzIGFscmVhZHkgYmVlbiBvbmJvYXJkZWQgdG8gdGhlIEZsb3dFVk1CcmlkZ2UKLy8vIE5PVEU6IFRoZSBFUkM3MjEgbXVzdCBoYXZlIGZpcnN0IGJlZW4gb25ib2FyZGVkIHRvIHRoZSBicmlkZ2UuIFRoaXMgY2FuIGJlIGNoZWNrZWQgdmlhIHRoZSBtZXRob2QKLy8vICAgICBGbG93RVZNQnJpZGdlLmV2bUFkZHJlc3NSZXF1aXJlc09uYm9hcmRpbmcoYWRkcmVzczogc2VsZi5ldm1Db250cmFjdEFkZHJlc3MpCi8vLwovLy8gQHBhcmFtIG5mdENvbnRyYWN0QWRkcmVzczogVGhlIEZsb3cgYWNjb3VudCBhZGRyZXNzIGhvc3RpbmcgdGhlIE5GVC1kZWZpbmluZyBDYWRlbmNlIGNvbnRyYWN0Ci8vLyBAcGFyYW0gbmZ0Q29udHJhY3ROYW1lOiBUaGUgbmFtZSBvZiB0aGUgTkZULWRlZmluaW5nIENhZGVuY2UgY29udHJhY3QKLy8vIEBwYXJhbSBpZDogVGhlIEVSQzcyMSBpZCBvZiB0aGUgTkZUIHRvIGJyaWRnZSB0byBDYWRlbmNlIGZyb20gRVZNCi8vLwp0cmFuc2FjdGlvbihuZnRDb250cmFjdEFkZHJlc3M6IEFkZHJlc3MsIG5mdENvbnRyYWN0TmFtZTogU3RyaW5nLCBpZDogVUludDI1NiwgcmVjZWl2ZXI6IEFkZHJlc3MpIHsKCiAgICBsZXQgbmZ0VHlwZTogVHlwZQogICAgbGV0IGNvbGxlY3Rpb246ICZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufQogICAgbGV0IHNjb3BlZFByb3ZpZGVyOiBAU2NvcGVkRlRQcm92aWRlcnMuU2NvcGVkRlRQcm92aWRlcgogICAgbGV0IGNvYTogYXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQKICAgIAogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQm9ycm93VmFsdWUsIENvcHlWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUsIFVucHVibGlzaENhcGFiaWxpdHkpICZBY2NvdW50KSB7CiAgICAgICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgQ2FkZW5jZU93bmVkQWNjb3VudCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3MgQ09BCiAgICAgICAgc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgQ09BIGZyb20gcHJvdmlkZWQgZ2F0ZXdheSBhZGRyZXNzIikKCiAgICAgICAgLy8gR2V0IHRoZSBFUkM3MjEgY29udHJhY3QgYWRkcmVzcyBmb3IgdGhlIGdpdmVuIE5GVCB0eXBlCiAgICAgICAgc2VsZi5uZnRUeXBlID0gRmxvd0VWTUJyaWRnZVV0aWxzLmJ1aWxkQ29tcG9zaXRlVHlwZSgKICAgICAgICAgICAgICAgIGFkZHJlc3M6IG5mdENvbnRyYWN0QWRkcmVzcywKICAgICAgICAgICAgICAgIGNvbnRyYWN0TmFtZTogbmZ0Q29udHJhY3ROYW1lLAogICAgICAgICAgICAgICAgcmVzb3VyY2VOYW1lOiAiTkZUIgogICAgICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgY29uc3RydWN0IE5GVCB0eXBlIikKCiAgICAgICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgTkZUIENvbGxlY3Rpb24gLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIE5GVCBjb2xsZWN0aW9uLCBjb25maWd1cmluZyBpZiBuZWNlc3NhcnkKICAgICAgICBsZXQgdmlld1Jlc29sdmVyID0gZ2V0QWNjb3VudChuZnRDb250cmFjdEFkZHJlc3MpLmNvbnRyYWN0cy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXJ9PihuYW1lOiBuZnRDb250cmFjdE5hbWUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZpZXdSZXNvbHZlciBmcm9tIE5GVCBjb250cmFjdCIpCiAgICAgICAgbGV0IGNvbGxlY3Rpb25EYXRhID0gdmlld1Jlc29sdmVyLnJlc29sdmVDb250cmFjdFZpZXcoCiAgICAgICAgICAgICAgICByZXNvdXJjZVR5cGU6IHNlbGYubmZ0VHlwZSwKICAgICAgICAgICAgICAgIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkKICAgICAgICAgICAgKSBhcyEgTWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT8gPz8gcGFuaWMoIkNvdWxkIG5vdCByZXNvbHZlIE5GVENvbGxlY3Rpb25EYXRhIHZpZXciKQogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KGZyb206IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKDwtY29sbGVjdGlvbkRhdGEuY3JlYXRlRW1wdHlDb2xsZWN0aW9uKCksIHRvOiBjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy51bnB1Ymxpc2goY29sbGVjdGlvbkRhdGEucHVibGljUGF0aCkKICAgICAgICAgICAgbGV0IGNvbGxlY3Rpb25DYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259Pihjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy5wdWJsaXNoKGNvbGxlY3Rpb25DYXAsIGF0OiBjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKQogICAgICAgIH0KCiAgICAgICAgbGV0IHJlY2VpdmVyQWNjdCA9IGdldEFjY291bnQocmVjZWl2ZXIpCiAgICAgICAgc2VsZi5jb2xsZWN0aW9uID0gcmVjZWl2ZXJBY2N0LmNhcGFiaWxpdGllcy5ib3Jyb3c8JntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259Pihjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBjb2xsZWN0aW9uIGNhcGFiaWxpdGllcyBmcm9tIHB1YmxpYyBwYXRoIikKCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGJyaWRnZSBmZWUgLSBicmlkZ2luZyBmcm9tIEVWTSBjb25zdW1lcyBubyBzdG9yYWdlLCBzbyBmbGF0IGZlZQogICAgICAgIGxldCBhcHByb3hGZWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuY2FsY3VsYXRlQnJpZGdlRmVlKGJ5dGVzOiA0MDBfMDAwKQogICAgICAgIC8vIElzc3VlIGFuZCBzdG9yZSBicmlkZ2UtZGVkaWNhdGVkIFByb3ZpZGVyIENhcGFiaWxpdHkgaW4gc3RvcmFnZSBpZiBuZWNlc3NhcnkKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS50eXBlKGF0OiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigKICAgICAgICAgICAgICAgIC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICAgICAgICkKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZShwcm92aWRlckNhcCwgdG86IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpCiAgICAgICAgfQogICAgICAgIC8vIENvcHkgdGhlIHN0b3JlZCBQcm92aWRlciBjYXBhYmlsaXR5IGFuZCBjcmVhdGUgYSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgbGV0IHByb3ZpZGVyQ2FwQ29weSA9IHNpZ25lci5zdG9yYWdlLmNvcHk8Q2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+PigKICAgICAgICAgICAgICAgIGZyb206IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiSW52YWxpZCBQcm92aWRlciBDYXBhYmlsaXR5IGZvdW5kIGluIHN0b3JhZ2UuIikKICAgICAgICBsZXQgcHJvdmlkZXJGaWx0ZXIgPSBTY29wZWRGVFByb3ZpZGVycy5BbGxvd2FuY2VGaWx0ZXIoYXBwcm94RmVlKQogICAgICAgIHNlbGYuc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgICAgICAgICBmaWx0ZXJzOiBbIHByb3ZpZGVyRmlsdGVyIF0sCiAgICAgICAgICAgICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICAgICAgICAgKQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIC8vIEV4ZWN1dGUgdGhlIGJyaWRnZQogICAgICAgIGxldCBuZnQ6IEB7Tm9uRnVuZ2libGVUb2tlbi5ORlR9IDwtIHNlbGYuY29hLndpdGhkcmF3TkZUKAogICAgICAgICAgICB0eXBlOiBzZWxmLm5mdFR5cGUsCiAgICAgICAgICAgIGlkOiBpZCwKICAgICAgICAgICAgZmVlUHJvdmlkZXI6ICZzZWxmLnNjb3BlZFByb3ZpZGVyIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfQogICAgICAgICkKICAgICAgICAvLyBEZXBvc2l0IHRoZSBicmlkZ2VkIE5GVCBpbnRvIHRoZSBzaWduZXIncyBjb2xsZWN0aW9uCiAgICAgICAgc2VsZi5jb2xsZWN0aW9uLmRlcG9zaXQodG9rZW46IDwtbmZ0KQogICAgICAgIC8vIERlc3Ryb3kgdGhlIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBkZXN0cm95IHNlbGYuc2NvcGVkUHJvdmlkZXIKICAgIH0KfQo=",
          "bridgeNFTFromEvmToFlowV2": "",
          "bridgeNFTFromEvmToFlowV3": "",
          "bridgeNFTFromEvmToFlowWithPayer": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgYnJpZGdlTkZURnJvbUV2bVRvRmxvd1dpdGhQYXllciAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4OWEwNzY2ZDkzYjY2MDhiNwoKaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4N2U2MGRmMDQyYTljMDg2OAoKaW1wb3J0IEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzIGZyb20gMHg5YTA3NjZkOTNiNjYwOGI3CgppbXBvcnQgU2NvcGVkRlRQcm92aWRlcnMgZnJvbSAweGRmYzIwYWVlNjUwZmNiZGYKCmltcG9ydCBFVk0gZnJvbSAweDhjNTMwM2VhYTI2MjAyZDYKCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweGRmYzIwYWVlNjUwZmNiZGYKCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHhkZmMyMGFlZTY1MGZjYmRmCgppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4ZGZjMjBhZWU2NTBmY2JkZgoKaW1wb3J0IFN0b3JhZ2VSZW50IGZyb20gMHhkNTAwODRhMWE0M2IxNTA3CgppbXBvcnQgQ3Jvc3NWTU1ldGFkYXRhVmlld3MgZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCgovLy8gVGhpcyB0cmFuc2FjdGlvbiBicmlkZ2VzIGFuIE5GVCBmcm9tIEVWTSB0byBDYWRlbmNlIGFzc3VtaW5nIGl0IGhhcyBhbHJlYWR5IGJlZW4gb25ib2FyZGVkIHRvIHRoZSBGbG93RVZNQnJpZGdlLgovLy8gQWxzbyBrbm93IHRoYXQgdGhlIHJlY2lwaWVudCBGbG93IGFjY291bnQgbXVzdCBoYXZlIGEgUmVjZWl2ZXIgY2FwYWJsZSBvZiByZWNlaXZpbmcgdGhlIHRoaXMgYnJpZGdlZCBORlQgYWNjZXNzaWJsZQovLy8gdmlhIHB1Ymxpc2hlZCBDYXBhYmlsaXR5IGF0IHRoZSB0b2tlbidzIHN0YW5kYXJkIHBhdGguCi8vLyBOT1RFOiBUaGUgRVJDNzIxIG11c3QgaGF2ZSBmaXJzdCBiZWVuIG9uYm9hcmRlZCB0byB0aGUgYnJpZGdlLiBUaGlzIGNhbiBiZSBjaGVja2VkIHZpYSB0aGUgbWV0aG9kCi8vLyAgICAgRmxvd0VWTUJyaWRnZS5ldm1BZGRyZXNzUmVxdWlyZXNPbmJvYXJkaW5nKGFkZHJlc3M6IHNlbGYuZXZtQ29udHJhY3RBZGRyZXNzKQovLy8KLy8vIEBwYXJhbSBuZnRJZGVudGlmaWVyOiBUaGUgQ2FkZW5jZSB0eXBlIGlkZW50aWZpZXIgb2YgdGhlIE5GVCB0byBicmlkZ2UgLSBlLmcuIG5mdC5nZXRUeXBlKCkuaWRlbnRpZmllcgovLy8gQHBhcmFtIGlkOiBUaGUgRVJDNzIxIGlkIG9mIHRoZSBORlQgdG8gYnJpZGdlIHRvIENhZGVuY2UgZnJvbSBFVk0KLy8vIEBwYXJhbSByZWNpcGllbnQ6IFRoZSBGbG93IGFjY291bnQgYWRkcmVzcyB0byByZWNlaXZlIHRoZSBicmlkZ2VkIE5GVAovLy8KdHJhbnNhY3Rpb24obmZ0SWRlbnRpZmllcjogU3RyaW5nLCBpZDogVUludDI1NiwgcmVjaXBpZW50OiBBZGRyZXNzKSB7CiAgICBsZXQgbmZ0VHlwZTogVHlwZQogICAgbGV0IHJlY2VpdmVyOiAme05vbkZ1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9CiAgICBsZXQgc2NvcGVkUHJvdmlkZXI6IEBTY29wZWRGVFByb3ZpZGVycy5TY29wZWRGVFByb3ZpZGVyCiAgICBsZXQgY29hOiBhdXRoKEVWTS5DYWxsLCBFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQKICAgIGxldCB2aWV3UmVzb2x2ZXI6ICZ7Vmlld1Jlc29sdmVyfQoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKEJvcnJvd1ZhbHVlLCBDb3B5VmFsdWUsIElzc3VlU3RvcmFnZUNhcGFiaWxpdHlDb250cm9sbGVyLCBQdWJsaXNoQ2FwYWJpbGl0eSwgU2F2ZVZhbHVlLCBVbnB1Ymxpc2hDYXBhYmlsaXR5KSAmQWNjb3VudCwgcGF5ZXI6IGF1dGgoQm9ycm93VmFsdWUsIENvcHlWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUsIFVucHVibGlzaENhcGFiaWxpdHkpICZBY2NvdW50KSB7CiAgICAgICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgQ2FkZW5jZU93bmVkQWNjb3VudCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3MgQ09BCiAgICAgICAgc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uQ2FsbCwgRVZNLkJyaWRnZSkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50Pihmcm9tOiAvc3RvcmFnZS9ldm0pCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IENPQSBmcm9tIHByb3ZpZGVkIGdhdGV3YXkgYWRkcmVzcyIpCgogICAgICAgIC8qIC0tLSBDb25zdHJ1Y3QgdGhlIE5GVCB0eXBlIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQ29uc3RydWN0IHRoZSBORlQgdHlwZSBmcm9tIHRoZSBwcm92aWRlZCBpZGVudGlmaWVyCiAgICAgICAgc2VsZi5uZnRUeXBlID0gQ29tcG9zaXRlVHlwZShuZnRJZGVudGlmaWVyKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGNvbnN0cnVjdCBORlQgdHlwZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQogICAgICAgIC8vIFBhcnNlIHRoZSBORlQgaWRlbnRpZmllciBpbnRvIGl0cyBjb21wb25lbnRzCiAgICAgICAgbGV0IG5mdENvbnRyYWN0QWRkcmVzcyA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdEFkZHJlc3MoZnJvbVR5cGU6IHNlbGYubmZ0VHlwZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgYWRkcmVzcyBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQogICAgICAgIGxldCBuZnRDb250cmFjdE5hbWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3ROYW1lKGZyb21UeXBlOiBzZWxmLm5mdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IG5hbWUgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdChuZnRJZGVudGlmaWVyKSkKCiAgICAgICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgcmVjaXBpZW50J3MgTkZUIFJlY2VpdmVyIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBORlQgY29sbGVjdGlvbiwgY29uZmlndXJpbmcgaWYgbmVjZXNzYXJ5CiAgICAgICAgc2VsZi52aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KG5mdENvbnRyYWN0QWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IG5mdENvbnRyYWN0TmFtZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gTkZUIGNvbnRyYWN0IikKICAgICAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSBzZWxmLnZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBzZWxmLm5mdFR5cGUsCiAgICAgICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPigpCiAgICAgICAgICAgICkgYXMhIE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE/ID8/IHBhbmljKCJDb3VsZCBub3QgcmVzb2x2ZSBORlRDb2xsZWN0aW9uRGF0YSB2aWV3IikKICAgICAgICAvLyBDb25maWd1cmUgdGhlIHNpZ25lcidzIGFjY291bnQgZm9yIHRoaXMgTkZUCiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UuYm9ycm93PCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufT4oZnJvbTogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUoPC1jb2xsZWN0aW9uRGF0YS5jcmVhdGVFbXB0eUNvbGxlY3Rpb24oKSwgdG86IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgICAgICBzaWduZXIuY2FwYWJpbGl0aWVzLnVucHVibGlzaChjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKQogICAgICAgICAgICBsZXQgY29sbGVjdGlvbkNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgICAgICBzaWduZXIuY2FwYWJpbGl0aWVzLnB1Ymxpc2goY29sbGVjdGlvbkNhcCwgYXQ6IGNvbGxlY3Rpb25EYXRhLnB1YmxpY1BhdGgpCiAgICAgICAgfQogICAgICAgIHNlbGYucmVjZWl2ZXIgPSBnZXRBY2NvdW50KHJlY2lwaWVudCkuY2FwYWJpbGl0aWVzLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9Pihjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBSZWNlaXZlciBmcm9tIHJlY2lwaWVudCdzIHB1YmxpYyBjYXBhYmlsaXR5IHBhdGgiKQoKICAgICAgICAvKiAtLS0gQ29uZmlndXJlIGEgU2NvcGVkRlRQcm92aWRlciAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgYnJpZGdlIGZlZSAtIGJyaWRnaW5nIGZyb20gRVZNIGNvbnN1bWVzIG5vIHN0b3JhZ2UsIHNvIGZsYXQgZmVlCiAgICAgICAgbGV0IGFwcHJveEZlZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5jYWxjdWxhdGVCcmlkZ2VGZWUoYnl0ZXM6IDQwMF8wMDApCiAgICAgICAgLy8gSXNzdWUgYW5kIHN0b3JlIGJyaWRnZS1kZWRpY2F0ZWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBpbiBzdG9yYWdlIGlmIG5lY2Vzc2FyeQogICAgICAgIGlmIHBheWVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gcGF5ZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigKICAgICAgICAgICAgICAgIC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICAgICAgICkKICAgICAgICAgICAgcGF5ZXIuc3RvcmFnZS5zYXZlKHByb3ZpZGVyQ2FwLCB0bzogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkKICAgICAgICB9CiAgICAgICAgLy8gQ29weSB0aGUgc3RvcmVkIFByb3ZpZGVyIGNhcGFiaWxpdHkgYW5kIGNyZWF0ZSBhIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBsZXQgcHJvdmlkZXJDYXBDb3B5ID0gcGF5ZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkludmFsaWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBmb3VuZCBpbiBzdG9yYWdlLiIpCiAgICAgICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKGFwcHJveEZlZSkKICAgICAgICBzZWxmLnNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICAgICAgICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgICAgICkKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICAvLyBVbndyYXAgTkZUcyBmcm9tIHByb2plY3QtZGVmaW5lZCBFUkM3MjEgd3JhcHBlciBjb250cmFjdCBpZiBhcHBsaWNhYmxlCiAgICAgICAgdW53cmFwTkZUc0lmQXBwbGljYWJsZShzZWxmLmNvYSwgbmZ0SURzOiBbaWRdLCBuZnRUeXBlOiBzZWxmLm5mdFR5cGUsIHZpZXdSZXNvbHZlcjogc2VsZi52aWV3UmVzb2x2ZXIpCgogICAgICAgIC8vIEV4ZWN1dGUgdGhlIGJyaWRnZQogICAgICAgIGxldCBuZnQ6IEB7Tm9uRnVuZ2libGVUb2tlbi5ORlR9IDwtIHNlbGYuY29hLndpdGhkcmF3TkZUKAogICAgICAgICAgICB0eXBlOiBzZWxmLm5mdFR5cGUsCiAgICAgICAgICAgIGlkOiBpZCwKICAgICAgICAgICAgZmVlUHJvdmlkZXI6ICZzZWxmLnNjb3BlZFByb3ZpZGVyIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfQogICAgICAgICkKICAgICAgICAvLyBFbnN1cmUgdGhlIGJyaWRnZWQgbmZ0IGlzIHRoZSBjb3JyZWN0IHR5cGUKICAgICAgICBhc3NlcnQoCiAgICAgICAgICAgIG5mdC5nZXRUeXBlKCkgPT0gc2VsZi5uZnRUeXBlLAogICAgICAgICAgICBtZXNzYWdlOiAiQnJpZGdlZCBuZnQgdHlwZSBtaXNtYXRjaCAtIHJlcXVlc3d0ZWQ6ICIuY29uY2F0KHNlbGYubmZ0VHlwZS5pZGVudGlmaWVyKQogICAgICAgICAgICAgICAgLmNvbmNhdCgiLCByZWNlaXZlZDogIikuY29uY2F0KG5mdC5nZXRUeXBlKCkuaWRlbnRpZmllcikKICAgICAgICApCiAgICAgICAgLy8gRGVwb3NpdCB0aGUgYnJpZGdlZCBORlQgaW50byB0aGUgc2lnbmVyJ3MgY29sbGVjdGlvbgogICAgICAgIHNlbGYucmVjZWl2ZXIuZGVwb3NpdCh0b2tlbjogPC1uZnQpCiAgICAgICAgLy8gRGVzdHJveSB0aGUgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGRlc3Ryb3kgc2VsZi5zY29wZWRQcm92aWRlcgogICAgICAgIFN0b3JhZ2VSZW50LnRyeVJlZmlsbChyZWNpcGllbnQpCgogICAgfQp9CgovLy8gVW53cmFwcyBORlRzIGZyb20gYSBwcm9qZWN0J3MgY3VzdG9tIEVSQzcyMSB3cmFwcGVyIGNvbnRyYWN0IHRvIGJyaWRnZWQgTkZUcyBvbiBFVk0sIGlmIGFwcGxpY2FibGUuCi8vLyBFbmFibGVzIHByb2plY3RzIHRvIHVzZSB0aGVpciBvd24gRVJDNzIxIGNvbnRyYWN0IHdoaWxlIGxldmVyYWdpbmcgdGhlIGJyaWRnZSdzIHVuZGVybHlpbmcgY29udHJhY3QsCi8vLyB1bnRpbCBkaXJlY3QgY3VzdG9tIGNvbnRyYWN0IHN1cHBvcnQgaXMgYWRkZWQgdG8gdGhlIGJyaWRnZS4KLy8vCi8vLyBAcGFyYW0gY29hOiBUaGUgQ09BIG9mIHRoZSBzaWduZXIKLy8vIEBwYXJhbSBuZnRJRHM6IFRoZSBJRHMgb2YgdGhlIE5GVHMgdG8gd3JhcAovLy8gQHBhcmFtIG5mdFR5cGU6IFRoZSB0eXBlIG9mIHRoZSBORlRzIHRvIHdyYXAKLy8vIEBwYXJhbSB2aWV3UmVzb2x2ZXI6IFRoZSBWaWV3UmVzb2x2ZXIgb2YgdGhlIE5GVCBjb250cmFjdAovLy8KYWNjZXNzKGFsbCkgZnVuIHVud3JhcE5GVHNJZkFwcGxpY2FibGUoCiAgICBfIGNvYTogYXV0aChFVk0uQ2FsbCkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50LAogICAgbmZ0SURzOiBbVUludDI1Nl0sCiAgICBuZnRUeXBlOiBUeXBlLAogICAgdmlld1Jlc29sdmVyOiAme1ZpZXdSZXNvbHZlcn0KKSB7CiAgICAvLyBHZXQgdGhlIHByb2plY3QtZGVmaW5lZCBFUkM3MjEgYWRkcmVzcyBpZiBpdCBleGlzdHMKICAgIGlmIGxldCBjcm9zc1ZNUG9pbnRlciA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICByZXNvdXJjZVR5cGU6IG5mdFR5cGUsCiAgICAgICAgICAgIHZpZXdUeXBlOiBUeXBlPENyb3NzVk1NZXRhZGF0YVZpZXdzLkVWTVBvaW50ZXI+KCkKICAgICkgYXMhIENyb3NzVk1NZXRhZGF0YVZpZXdzLkVWTVBvaW50ZXI/IHsKICAgICAgICAvLyBHZXQgdGhlIHVuZGVybHlpbmcgRVJDNzIxIGFkZHJlc3MgaWYgaXQgZXhpc3RzCiAgICAgICAgaWYgbGV0IHVuZGVybHlpbmdBZGRyZXNzID0gZ2V0VW5kZXJseWluZ0VSQzcyMUFkZHJlc3MoY29hLCBjcm9zc1ZNUG9pbnRlci5ldm1Db250cmFjdEFkZHJlc3MpIHsKICAgICAgICAgICAgZm9yIGlkIGluIG5mdElEcyB7CiAgICAgICAgICAgICAgICAvLyBVbndyYXAgTkZUIGlmIGl0IGlzIHdyYXBwZWQKICAgICAgICAgICAgICAgIGlmIGlzTkZUV3JhcHBlZChjb2EsCiAgICAgICAgICAgICAgICAgICAgbmZ0SUQ6IGlkLAogICAgICAgICAgICAgICAgICAgIHVuZGVybHlpbmc6IHVuZGVybHlpbmdBZGRyZXNzLAogICAgICAgICAgICAgICAgICAgIHdyYXBwZXI6IGNyb3NzVk1Qb2ludGVyLmV2bUNvbnRyYWN0QWRkcmVzcwogICAgICAgICAgICAgICAgKSB7CiAgICAgICAgICAgICAgICAgICAgbGV0IHJlcyA9IG11c3RDYWxsKGNvYSwgY3Jvc3NWTVBvaW50ZXIuZXZtQ29udHJhY3RBZGRyZXNzLAogICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvblNpZzogIndpdGhkcmF3VG8oYWRkcmVzcyx1aW50MjU2W10pIiwKICAgICAgICAgICAgICAgICAgICAgICAgYXJnczogW2NvYS5hZGRyZXNzKCksIFtpZF1dCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIGxldCBkZWNvZGVkUmVzID0gRVZNLmRlY29kZUFCSSh0eXBlczogW1R5cGU8Qm9vbD4oKV0sIGRhdGE6IHJlcy5kYXRhKQogICAgICAgICAgICAgICAgICAgIGFzc2VydChkZWNvZGVkUmVzLmxlbmd0aCA9PSAxLCBtZXNzYWdlOiAiSW52YWxpZCByZXNwb25zZSBsZW5ndGgiKQogICAgICAgICAgICAgICAgICAgIGFzc2VydChkZWNvZGVkUmVzWzBdIGFzISBCb29sLCBtZXNzYWdlOiAiRmFpbGVkIHRvIHVud3JhcCBORlQiKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgovLy8gR2V0cyB0aGUgdW5kZXJseWluZyBFUkM3MjEgYWRkcmVzcyBpZiBpdCBleGlzdHMgKGkuZS4gaWYgdGhlIEVSQzcyMSBpcyBhIHdyYXBwZXIpCi8vLwphY2Nlc3MoYWxsKSBmdW4gZ2V0VW5kZXJseWluZ0VSQzcyMUFkZHJlc3MoCiAgICBfIGNvYTogYXV0aChFVk0uQ2FsbCkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50LAogICAgXyB3cmFwcGVyQWRkcmVzczogRVZNLkVWTUFkZHJlc3MKKTogRVZNLkVWTUFkZHJlc3M/IHsKICAgIGxldCByZXMgPSBjb2EuY2FsbCgKICAgICAgICB0bzogd3JhcHBlckFkZHJlc3MsCiAgICAgICAgZGF0YTogRVZNLmVuY29kZUFCSVdpdGhTaWduYXR1cmUoInVuZGVybHlpbmcoKSIsIFtdKSwKICAgICAgICBnYXNMaW1pdDogMTAwXzAwMCwKICAgICAgICB2YWx1ZTogRVZNLkJhbGFuY2UoYXR0b2Zsb3c6IDApCiAgICApCgogICAgLy8gSWYgdGhlIGNhbGwgZmFpbHMsIHJldHVybiBuaWwKICAgIGlmIHJlcy5zdGF0dXMgIT0gRVZNLlN0YXR1cy5zdWNjZXNzZnVsIHx8IHJlcy5kYXRhLmxlbmd0aCA9PSAwIHsKICAgICAgICByZXR1cm4gbmlsCiAgICB9CgogICAgLy8gRGVjb2RlIGFuZCByZXR1cm4gdGhlIHVuZGVybHlpbmcgRVJDNzIxIGFkZHJlc3MKICAgIGxldCBkZWNvZGVkUmVzdWx0ID0gRVZNLmRlY29kZUFCSSgKICAgICAgICB0eXBlczogW1R5cGU8RVZNLkVWTUFkZHJlc3M+KCldLAogICAgICAgIGRhdGE6IHJlcy5kYXRhCiAgICApCiAgICBhc3NlcnQoZGVjb2RlZFJlc3VsdC5sZW5ndGggPT0gMSwgbWVzc2FnZTogIkludmFsaWQgcmVzcG9uc2UgbGVuZ3RoIikKICAgIHJldHVybiBkZWNvZGVkUmVzdWx0WzBdIGFzISBFVk0uRVZNQWRkcmVzcwp9CgovLy8gQ2hlY2tzIGlmIHRoZSBwcm92aWRlZCBORlQgaXMgd3JhcHBlZCBpbiB0aGUgdW5kZXJseWluZyBFUkM3MjEgY29udHJhY3QKLy8vCmFjY2VzcyhhbGwpIGZ1biBpc05GVFdyYXBwZWQoCiAgICBfIGNvYTogYXV0aChFVk0uQ2FsbCkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50LAogICAgbmZ0SUQ6IFVJbnQyNTYsCiAgICB1bmRlcmx5aW5nOiBFVk0uRVZNQWRkcmVzcywKICAgIHdyYXBwZXI6IEVWTS5FVk1BZGRyZXNzCik6IEJvb2wgewogICAgbGV0IHJlcyA9IGNvYS5jYWxsKAogICAgICAgIHRvOiB1bmRlcmx5aW5nLAogICAgICAgIGRhdGE6IEVWTS5lbmNvZGVBQklXaXRoU2lnbmF0dXJlKCJvd25lck9mKHVpbnQyNTYpIiwgW25mdElEXSksCiAgICAgICAgZ2FzTGltaXQ6IDEwMF8wMDAsCiAgICAgICAgdmFsdWU6IEVWTS5CYWxhbmNlKGF0dG9mbG93OiAwKQogICAgKQoKICAgIC8vIElmIHRoZSBjYWxsIGZhaWxzLCByZXR1cm4gZmFsc2UKICAgIGlmIHJlcy5zdGF0dXMgIT0gRVZNLlN0YXR1cy5zdWNjZXNzZnVsIHx8IHJlcy5kYXRhLmxlbmd0aCA9PSAwewogICAgICAgIHJldHVybiBmYWxzZQogICAgfQoKICAgIC8vIERlY29kZSBhbmQgY29tcGFyZSB0aGUgYWRkcmVzc2VzCiAgICBsZXQgZGVjb2RlZFJlc3VsdCA9IEVWTS5kZWNvZGVBQkkoCiAgICAgICAgdHlwZXM6IFtUeXBlPEVWTS5FVk1BZGRyZXNzPigpXSwKICAgICAgICBkYXRhOiByZXMuZGF0YQogICAgKQogICAgYXNzZXJ0KGRlY29kZWRSZXN1bHQubGVuZ3RoID09IDEsIG1lc3NhZ2U6ICJJbnZhbGlkIHJlc3BvbnNlIGxlbmd0aCIpCgogICAgbGV0IG93bmVyID0gZGVjb2RlZFJlc3VsdFswXSBhcyEgRVZNLkVWTUFkZHJlc3MKICAgIHJldHVybiBvd25lci50b1N0cmluZygpID09IHdyYXBwZXIudG9TdHJpbmcoKQp9CgovLy8gQ2FsbHMgYSBmdW5jdGlvbiBvbiBhbiBFVk0gY29udHJhY3QgZnJvbSBwcm92aWRlZCBjb2EKLy8vCmFjY2VzcyhhbGwpIGZ1biBtdXN0Q2FsbCgKICAgIF8gY29hOiBhdXRoKEVWTS5DYWxsKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQsCiAgICBfIGNvbnRyYWN0QWRkcjogRVZNLkVWTUFkZHJlc3MsCiAgICBmdW5jdGlvblNpZzogU3RyaW5nLAogICAgYXJnczogW0FueVN0cnVjdF0KKTogRVZNLlJlc3VsdCB7CiAgICBsZXQgcmVzID0gY29hLmNhbGwoCiAgICAgICAgdG86IGNvbnRyYWN0QWRkciwKICAgICAgICBkYXRhOiBFVk0uZW5jb2RlQUJJV2l0aFNpZ25hdHVyZShmdW5jdGlvblNpZywgYXJncyksCiAgICAgICAgZ2FzTGltaXQ6IDRfMDAwXzAwMCwKICAgICAgICB2YWx1ZTogRVZNLkJhbGFuY2UoYXR0b2Zsb3c6IDApCiAgICApCgogICAgYXNzZXJ0KHJlcy5zdGF0dXMgPT0gRVZNLlN0YXR1cy5zdWNjZXNzZnVsLAogICAgICAgIG1lc3NhZ2U6ICJGYWlsZWQgdG8gY2FsbCAnIi5jb25jYXQoZnVuY3Rpb25TaWcpCiAgICAgICAgICAgIC5jb25jYXQoIlxuXHQgZXJyb3IgY29kZTogIikuY29uY2F0KHJlcy5lcnJvckNvZGUudG9TdHJpbmcoKSkKICAgICAgICAgICAgLmNvbmNhdCgiXG5cdCBlcnJvciBtZXNzYWdlOiAiKS5jb25jYXQocmVzLmVycm9yTWVzc2FnZSkKICAgICAgICAgICAgLmNvbmNhdCgiXG5cdCBnYXMgdXNlZDogIikuY29uY2F0KHJlcy5nYXNVc2VkLnRvU3RyaW5nKCkpCiAgICAgICAgICAgIC5jb25jYXQoIlxuXHQgY2FsbGVyIGFkZHJlc3M6IDB4IikuY29uY2F0KGNvYS5hZGRyZXNzKCkudG9TdHJpbmcoKSkKICAgICAgICAgICAgLmNvbmNhdCgiXG5cdCBjb250cmFjdCBhZGRyZXNzOiAweCIpLmNvbmNhdChjb250cmFjdEFkZHIudG9TdHJpbmcoKSkKICAgICkKCiAgICByZXR1cm4gcmVzCn0K",
          "bridgeNFTFromEvmV2": "",
          "bridgeNFTFromEvmWithPayer": "",
          "bridgeNFTToEvm": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgYnJpZGdlTkZUVG9Fdm0gLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHg5YTA3NjZkOTNiNjYwOGI3CgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHg3ZTYwZGYwNDJhOWMwODY4CgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCgppbXBvcnQgU2NvcGVkRlRQcm92aWRlcnMgZnJvbSAweGRmYzIwYWVlNjUwZmNiZGYKCgppbXBvcnQgRVZNIGZyb20gMHg4YzUzMDNlYWEyNjIwMmQ2CgoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VVdGlscyBmcm9tIDB4ZGZjMjBhZWU2NTBmY2JkZgoKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweGRmYzIwYWVlNjUwZmNiZGYKCmltcG9ydCBGbG93RVZNQnJpZGdlQ29uZmlnIGZyb20gMHhkZmMyMGFlZTY1MGZjYmRmCgoKCnRyYW5zYWN0aW9uKG5mdENvbnRyYWN0QWRkcmVzczogQWRkcmVzcywgbmZ0Q29udHJhY3ROYW1lOiBTdHJpbmcsIGlkOiBVSW50NjQpIHsKICAgIAogICAgbGV0IG5mdDogQHtOb25GdW5naWJsZVRva2VuLk5GVH0KICAgIGxldCBjb2E6IGF1dGgoRVZNLkJyaWRnZSkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50CiAgICBsZXQgc2NvcGVkUHJvdmlkZXI6IEBTY29wZWRGVFByb3ZpZGVycy5TY29wZWRGVFByb3ZpZGVyCiAgICAKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKENvcHlWYWx1ZSwgQm9ycm93VmFsdWUsIElzc3VlU3RvcmFnZUNhcGFiaWxpdHlDb250cm9sbGVyLCBQdWJsaXNoQ2FwYWJpbGl0eSwgU2F2ZVZhbHVlKSAmQWNjb3VudCkgewogICAgICAgIC8qIC0tLSBSZWZlcmVuY2UgdGhlIHNpZ25lcidzIENhZGVuY2VPd25lZEFjY291bnQgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIHNpZ25lcidzIENPQQogICAgICAgIHNlbGYuY29hID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRVZNLkJyaWRnZSkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50Pihmcm9tOiAvc3RvcmFnZS9ldm0pCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IENPQSBmcm9tIHByb3ZpZGVkIGdhdGV3YXkgYWRkcmVzcyIpCiAgICAgICAgCiAgICAgICAgLyogLS0tIFJldHJpZXZlIHRoZSBORlQgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIE5GVCBjb2xsZWN0aW9uLCBjb25maWd1cmluZyBpZiBuZWNlc3NhcnkKICAgICAgICBsZXQgdmlld1Jlc29sdmVyID0gZ2V0QWNjb3VudChuZnRDb250cmFjdEFkZHJlc3MpLmNvbnRyYWN0cy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXJ9PihuYW1lOiBuZnRDb250cmFjdE5hbWUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZpZXdSZXNvbHZlciBmcm9tIE5GVCBjb250cmFjdCIpCiAgICAgICAgbGV0IGNvbGxlY3Rpb25EYXRhID0gdmlld1Jlc29sdmVyLnJlc29sdmVDb250cmFjdFZpZXcoCiAgICAgICAgICAgICAgICByZXNvdXJjZVR5cGU6IG5pbCwKICAgICAgICAgICAgICAgIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkKICAgICAgICAgICAgKSBhcyEgTWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT8gPz8gcGFuaWMoIkNvdWxkIG5vdCByZXNvbHZlIE5GVENvbGxlY3Rpb25EYXRhIHZpZXciKQogICAgICAgIGxldCBjb2xsZWN0aW9uID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259PigKICAgICAgICAgICAgICAgIGZyb206IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkNvdWxkIG5vdCBhY2Nlc3Mgc2lnbmVyJ3MgTkZUIENvbGxlY3Rpb24iKQoKICAgICAgICAvLyBXaXRoZHJhdyB0aGUgcmVxdWVzdGVkIE5GVCAmIGNhbGN1bGF0ZSB0aGUgYXBwcm94aW1hdGUgYnJpZGdlIGZlZSBiYXNlZCBvbiBORlQgc3RvcmFnZSB1c2FnZQogICAgICAgIGxldCBjdXJyZW50U3RvcmFnZVVzYWdlID0gc2lnbmVyLnN0b3JhZ2UudXNlZAogICAgICAgIHNlbGYubmZ0IDwtIGNvbGxlY3Rpb24ud2l0aGRyYXcod2l0aGRyYXdJRDogaWQpCiAgICAgICAgbGV0IHdpdGhkcmF3blN0b3JhZ2VVc2FnZSA9IHNpZ25lci5zdG9yYWdlLnVzZWQKICAgICAgICBsZXQgYXBwcm94RmVlID0gRmxvd0VWTUJyaWRnZVV0aWxzLmNhbGN1bGF0ZUJyaWRnZUZlZSgKICAgICAgICAgICAgICAgIGJ5dGVzOiBjdXJyZW50U3RvcmFnZVVzYWdlIC0gd2l0aGRyYXduU3RvcmFnZVVzYWdlCiAgICAgICAgICAgICkgKiAxLjEwCgogICAgICAgIC8qIC0tLSBDb25maWd1cmUgYSBTY29wZWRGVFByb3ZpZGVyIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gSXNzdWUgYW5kIHN0b3JlIGJyaWRnZS1kZWRpY2F0ZWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBpbiBzdG9yYWdlIGlmIG5lY2Vzc2FyeQogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLnR5cGUoYXQ6IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIGxldCBwcm92aWRlckNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KAogICAgICAgICAgICAgICAgL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgICAgICAgKQogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKHByb3ZpZGVyQ2FwLCB0bzogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkKICAgICAgICB9CiAgICAgICAgLy8gQ29weSB0aGUgc3RvcmVkIFByb3ZpZGVyIGNhcGFiaWxpdHkgYW5kIGNyZWF0ZSBhIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBsZXQgcHJvdmlkZXJDYXBDb3B5ID0gc2lnbmVyLnN0b3JhZ2UuY29weTxDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4+KAogICAgICAgICAgICAgICAgZnJvbTogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJJbnZhbGlkIFByb3ZpZGVyIENhcGFiaWxpdHkgZm91bmQgaW4gc3RvcmFnZS4iKQogICAgICAgIGxldCBwcm92aWRlckZpbHRlciA9IFNjb3BlZEZUUHJvdmlkZXJzLkFsbG93YW5jZUZpbHRlcihhcHByb3hGZWUpCiAgICAgICAgc2VsZi5zY29wZWRQcm92aWRlciA8LSBTY29wZWRGVFByb3ZpZGVycy5jcmVhdGVTY29wZWRGVFByb3ZpZGVyKAogICAgICAgICAgICAgICAgcHJvdmlkZXI6IHByb3ZpZGVyQ2FwQ29weSwKICAgICAgICAgICAgICAgIGZpbHRlcnM6IFsgcHJvdmlkZXJGaWx0ZXIgXSwKICAgICAgICAgICAgICAgIGV4cGlyYXRpb246IGdldEN1cnJlbnRCbG9jaygpLnRpbWVzdGFtcCArIDEuMAogICAgICAgICAgICApCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgLy8gRXhlY3V0ZSB0aGUgYnJpZGdlCiAgICAgICAgc2VsZi5jb2EuZGVwb3NpdE5GVCgKICAgICAgICAgICAgbmZ0OiA8LXNlbGYubmZ0LAogICAgICAgICAgICBmZWVQcm92aWRlcjogJnNlbGYuc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgKQogICAgICAgIC8vIERlc3Ryb3kgdGhlIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBkZXN0cm95IHNlbGYuc2NvcGVkUHJvdmlkZXIKICAgIH0KfQo=",
          "bridgeNFTToEvmAddress": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgYnJpZGdlTkZUVG9Fdm1BZGRyZXNzIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4OWEwNzY2ZDkzYjY2MDhiNwoKaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4N2U2MGRmMDQyYTljMDg2OAoKaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHhkZmMyMGFlZTY1MGZjYmRmCgoKaW1wb3J0IEVWTSBmcm9tIDB4OGM1MzAzZWFhMjYyMDJkNgoKCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweGRmYzIwYWVlNjUwZmNiZGYKCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHhkZmMyMGFlZTY1MGZjYmRmCgppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4ZGZjMjBhZWU2NTBmY2JkZgoKCgp0cmFuc2FjdGlvbihuZnRDb250cmFjdEFkZHJlc3M6IEFkZHJlc3MsIG5mdENvbnRyYWN0TmFtZTogU3RyaW5nLCBpZDogVUludDY0LCBjb250cmFjdEVWTUFkZHJlc3M6IFN0cmluZywgZGF0YTogW1VJbnQ4XSwgZ2FzTGltaXQ6IFVJbnQ2NCkgewogICAgCiAgICBsZXQgbmZ0OiBAe05vbkZ1bmdpYmxlVG9rZW4uTkZUfQogICAgbGV0IGNvYTogYXV0aChFVk0uQnJpZGdlLCBFVk0uQ2FsbCwgRVZNLk93bmVyKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQKICAgIGxldCBzY29wZWRQcm92aWRlcjogQFNjb3BlZEZUUHJvdmlkZXJzLlNjb3BlZEZUUHJvdmlkZXIKICAgIAogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQ29weVZhbHVlLCBCb3Jyb3dWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgQ2FkZW5jZU93bmVkQWNjb3VudCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3MgQ09BCiAgICAgICAgc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uQnJpZGdlLCBFVk0uQ2FsbCwgRVZNLk93bmVyKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgQ09BIGZyb20gcHJvdmlkZWQgZ2F0ZXdheSBhZGRyZXNzIikKICAgICAgICAKICAgICAgICAvKiAtLS0gUmV0cmlldmUgdGhlIE5GVCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgTkZUIGNvbGxlY3Rpb24sIGNvbmZpZ3VyaW5nIGlmIG5lY2Vzc2FyeQogICAgICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KG5mdENvbnRyYWN0QWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IG5mdENvbnRyYWN0TmFtZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gTkZUIGNvbnRyYWN0IikKICAgICAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgICAgIHJlc291cmNlVHlwZTogbmlsLAogICAgICAgICAgICAgICAgdmlld1R5cGU6IFR5cGU8TWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT4oKQogICAgICAgICAgICApIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgTkZUQ29sbGVjdGlvbkRhdGEgdmlldyIpCiAgICAgICAgbGV0IGNvbGxlY3Rpb24gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KAogICAgICAgICAgICAgICAgZnJvbTogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGFjY2VzcyBzaWduZXIncyBORlQgQ29sbGVjdGlvbiIpCgogICAgICAgIC8vIFdpdGhkcmF3IHRoZSByZXF1ZXN0ZWQgTkZUICYgY2FsY3VsYXRlIHRoZSBhcHByb3hpbWF0ZSBicmlkZ2UgZmVlIGJhc2VkIG9uIE5GVCBzdG9yYWdlIHVzYWdlCiAgICAgICAgbGV0IGN1cnJlbnRTdG9yYWdlVXNhZ2UgPSBzaWduZXIuc3RvcmFnZS51c2VkCiAgICAgICAgc2VsZi5uZnQgPC0gY29sbGVjdGlvbi53aXRoZHJhdyh3aXRoZHJhd0lEOiBpZCkKICAgICAgICBsZXQgd2l0aGRyYXduU3RvcmFnZVVzYWdlID0gc2lnbmVyLnN0b3JhZ2UudXNlZAogICAgICAgIGxldCBhcHByb3hGZWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuY2FsY3VsYXRlQnJpZGdlRmVlKAogICAgICAgICAgICAgICAgYnl0ZXM6IGN1cnJlbnRTdG9yYWdlVXNhZ2UgLSB3aXRoZHJhd25TdG9yYWdlVXNhZ2UKICAgICAgICAgICAgKSAqIDEuMTAKCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApCiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICAgIH0KICAgICAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkludmFsaWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBmb3VuZCBpbiBzdG9yYWdlLiIpCiAgICAgICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKGFwcHJveEZlZSkKICAgICAgICBzZWxmLnNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICAgICAgICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgICAgICkKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICAvLyBFeGVjdXRlIHRoZSBicmlkZ2UKICAgICAgICBzZWxmLmNvYS5kZXBvc2l0TkZUKAogICAgICAgICAgICBuZnQ6IDwtc2VsZi5uZnQsCiAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICApCiAgICAgICAgdmFyIGFkZHJlc3NCeXRlczogW1VJbnQ4XSA9IGNvbnRyYWN0RVZNQWRkcmVzcy5kZWNvZGVIZXgoKQogICAgICAgIGxldCBldm1Ub2tlbkFkZHIgPSBFVk0uRVZNQWRkcmVzcyhieXRlczogWwogICAgICAgICAgICBhZGRyZXNzQnl0ZXNbMF0sIGFkZHJlc3NCeXRlc1sxXSwgYWRkcmVzc0J5dGVzWzJdLCBhZGRyZXNzQnl0ZXNbM10sCiAgICAgICAgICAgIGFkZHJlc3NCeXRlc1s0XSwgYWRkcmVzc0J5dGVzWzVdLCBhZGRyZXNzQnl0ZXNbNl0sIGFkZHJlc3NCeXRlc1s3XSwKICAgICAgICAgICAgYWRkcmVzc0J5dGVzWzhdLCBhZGRyZXNzQnl0ZXNbOV0sIGFkZHJlc3NCeXRlc1sxMF0sIGFkZHJlc3NCeXRlc1sxMV0sCiAgICAgICAgICAgIGFkZHJlc3NCeXRlc1sxMl0sIGFkZHJlc3NCeXRlc1sxM10sIGFkZHJlc3NCeXRlc1sxNF0sIGFkZHJlc3NCeXRlc1sxNV0sCiAgICAgICAgICAgIGFkZHJlc3NCeXRlc1sxNl0sIGFkZHJlc3NCeXRlc1sxN10sIGFkZHJlc3NCeXRlc1sxOF0sIGFkZHJlc3NCeXRlc1sxOV0KICAgICAgICBdKQogICAgICAgIGxldCB2YWx1ZUJhbGFuY2UgPSBFVk0uQmFsYW5jZShhdHRvZmxvdzogMCkKICAgICAgICAvLyBsZXQgZGF0YSA9IGRhdGFTdHIuZGVjb2RlSGV4KCkKCiAgICAgICAgbGV0IHR4UmVzdWx0ID0gc2VsZi5jb2EuY2FsbCgKICAgICAgICAgICAgdG86IGV2bVRva2VuQWRkciwKICAgICAgICAgICAgZGF0YTogZGF0YSwKICAgICAgICAgICAgZ2FzTGltaXQ6IGdhc0xpbWl0LAogICAgICAgICAgICB2YWx1ZTogdmFsdWVCYWxhbmNlCiAgICAgICAgKQoKICAgICAgICBhc3NlcnQoCiAgICAgICAgICAgIHR4UmVzdWx0LnN0YXR1cyA9PSBFVk0uU3RhdHVzLmZhaWxlZCB8fCB0eFJlc3VsdC5zdGF0dXMgPT0gRVZNLlN0YXR1cy5zdWNjZXNzZnVsLAogICAgICAgICAgICBtZXNzYWdlOiAiZXZtX2Vycm9yPSIuY29uY2F0KHR4UmVzdWx0LmVycm9yTWVzc2FnZSkuY29uY2F0KCJcbiIpCiAgICAgICAgKQogICAgICAgIC8vIERlc3Ryb3kgdGhlIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBkZXN0cm95IHNlbGYuc2NvcGVkUHJvdmlkZXIKICAgIH0KfQo=",
          "bridgeNFTToEvmAddressV2": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgYnJpZGdlTkZUVG9Fdm1BZGRyZXNzVjIgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweDlhMDc2NmQ5M2I2NjA4YjcKCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweDdlNjBkZjA0MmE5YzA4NjgKCmltcG9ydCBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cyBmcm9tIDB4OWEwNzY2ZDkzYjY2MDhiNwoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHhkZmMyMGFlZTY1MGZjYmRmCgppbXBvcnQgRVZNIGZyb20gMHg4YzUzMDNlYWEyNjIwMmQ2CgppbXBvcnQgRmxvd0VWTUJyaWRnZVV0aWxzIGZyb20gMHhkZmMyMGFlZTY1MGZjYmRmCgppbXBvcnQgRmxvd0VWTUJyaWRnZSBmcm9tIDB4ZGZjMjBhZWU2NTBmY2JkZgoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweGRmYzIwYWVlNjUwZmNiZGYKCmltcG9ydCBDcm9zc1ZNTWV0YWRhdGFWaWV3cyBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKCi8vLyBCcmlkZ2VzIGFuIE5GVCBmcm9tIHRoZSBzaWduZXIncyBjb2xsZWN0aW9uIGluIENhZGVuY2UgdG8gdGhlIG5hbWVkIHJlY2lwaWVudCBpbiBFVk0uCi8vLwovLy8gTk9URTogVGhpcyB0cmFuc2FjdGlvbiBhbHNvIG9uYm9hcmRzIHRoZSBORlQgdG8gdGhlIGJyaWRnZSBpZiBuZWNlc3Nhcnkgd2hpY2ggbWF5IGluY3VyIGFkZGl0aW9uYWwgZmVlcwovLy8gICAgIHRoYW4gYnJpZGdpbmcgYW4gYXNzZXQgdGhhdCBoYXMgYWxyZWFkeSBiZWVuIG9uYm9hcmRlZC4KLy8vCi8vLyBAcGFyYW0gbmZ0SWRlbnRpZmllcjogVGhlIENhZGVuY2UgdHlwZSBpZGVudGlmaWVyIG9mIHRoZSBORlQgdG8gYnJpZGdlIC0gZS5nLiBuZnQuZ2V0VHlwZSgpLmlkZW50aWZpZXIKLy8vIEBwYXJhbSBpZDogVGhlIENhZGVuY2UgTkZULmlkIG9mIHRoZSBORlQgdG8gYnJpZGdlIHRvIEVWTQovLy8gQHBhcmFtIHJlY2lwaWVudDogVGhlIGhleC1lbmNvZGVkIEVWTSBhZGRyZXNzIHRvIHJlY2VpdmUgdGhlIE5GVAovLy8KdHJhbnNhY3Rpb24obmZ0SWRlbnRpZmllcjogU3RyaW5nLCBpZDogVUludDY0LCByZWNpcGllbnQ6IFN0cmluZykgewogICAgbGV0IG5mdDogQHtOb25GdW5naWJsZVRva2VuLk5GVH0KICAgIGxldCByZXF1aXJlc09uYm9hcmRpbmc6IEJvb2wKICAgIGxldCBzY29wZWRQcm92aWRlcjogQFNjb3BlZEZUUHJvdmlkZXJzLlNjb3BlZEZUUHJvdmlkZXIKICAgIGxldCBjb2E6IGF1dGgoRVZNLkNhbGwpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudAogICAgbGV0IG5mdFR5cGU6IFR5cGUKICAgIGxldCB2aWV3UmVzb2x2ZXI6ICZ7Vmlld1Jlc29sdmVyfQoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKENvcHlWYWx1ZSwgQm9ycm93VmFsdWUsIElzc3VlU3RvcmFnZUNhcGFiaWxpdHlDb250cm9sbGVyLCBQdWJsaXNoQ2FwYWJpbGl0eSwgU2F2ZVZhbHVlKSAmQWNjb3VudCkgewogICAgICAgIC8vIFJldHJpZXZlIG9yIGNyZWF0ZSBDT0EKICAgICAgICBpZiBsZXQgY29hID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRVZNLkNhbGwpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oZnJvbTogL3N0b3JhZ2UvZXZtKSB7CiAgICAgICAgICAgIHNlbGYuY29hID0gY29hCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZTxARVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KDwtIEVWTS5jcmVhdGVDYWRlbmNlT3duZWRBY2NvdW50KCksIHRvOiAvc3RvcmFnZS9ldm0pCiAgICAgICAgICAgIHNpZ25lci5jYXBhYmlsaXRpZXMucHVibGlzaCgKICAgICAgICAgICAgICAgIHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KC9zdG9yYWdlL2V2bSksCiAgICAgICAgICAgICAgICBhdDogL3B1YmxpYy9ldm0KICAgICAgICAgICAgKQogICAgICAgICAgICBzZWxmLmNvYSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEVWTS5DYWxsKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSkhCiAgICAgICAgfQoKICAgICAgICAvKiAtLS0gQ29uc3RydWN0IHRoZSBORlQgdHlwZSAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIENvbnN0cnVjdCB0aGUgTkZUIHR5cGUgZnJvbSB0aGUgcHJvdmlkZWQgaWRlbnRpZmllcgogICAgICAgIHNlbGYubmZ0VHlwZSA9IENvbXBvc2l0ZVR5cGUobmZ0SWRlbnRpZmllcikKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBjb25zdHJ1Y3QgTkZUIHR5cGUgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdChuZnRJZGVudGlmaWVyKSkKICAgICAgICAvLyBQYXJzZSB0aGUgTkZUIGlkZW50aWZpZXIgaW50byBpdHMgY29tcG9uZW50cwogICAgICAgIGxldCBuZnRDb250cmFjdEFkZHJlc3MgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3RBZGRyZXNzKGZyb21UeXBlOiBzZWxmLm5mdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IGFkZHJlc3MgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdChuZnRJZGVudGlmaWVyKSkKICAgICAgICBsZXQgbmZ0Q29udHJhY3ROYW1lID0gRmxvd0VWTUJyaWRnZVV0aWxzLmdldENvbnRyYWN0TmFtZShmcm9tVHlwZTogc2VsZi5uZnRUeXBlKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCBjb250cmFjdCBuYW1lIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQobmZ0SWRlbnRpZmllcikpCgogICAgICAgIC8qIC0tLSBSZXRyaWV2ZSB0aGUgTkZUIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBORlQgY29sbGVjdGlvbiwgY29uZmlndXJpbmcgaWYgbmVjZXNzYXJ5CiAgICAgICAgc2VsZi52aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KG5mdENvbnRyYWN0QWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IG5mdENvbnRyYWN0TmFtZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gTkZUIGNvbnRyYWN0IikKICAgICAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSBzZWxmLnZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBuaWwsCiAgICAgICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPigpCiAgICAgICAgICAgICkgYXMhIE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE/ID8/IHBhbmljKCJDb3VsZCBub3QgcmVzb2x2ZSBORlRDb2xsZWN0aW9uRGF0YSB2aWV3IikKICAgICAgICBsZXQgY29sbGVjdGlvbiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufT4oCiAgICAgICAgICAgICAgICBmcm9tOiBjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYWNjZXNzIHNpZ25lcidzIE5GVCBDb2xsZWN0aW9uIikKCiAgICAgICAgLy8gV2l0aGRyYXcgdGhlIHJlcXVlc3RlZCBORlQgJiBjYWxjdWxhdGUgdGhlIGFwcHJveGltYXRlIGJyaWRnZSBmZWUgYmFzZWQgb24gTkZUIHN0b3JhZ2UgdXNhZ2UKICAgICAgICBsZXQgY3VycmVudFN0b3JhZ2VVc2FnZSA9IHNpZ25lci5zdG9yYWdlLnVzZWQKICAgICAgICBzZWxmLm5mdCA8LSBjb2xsZWN0aW9uLndpdGhkcmF3KHdpdGhkcmF3SUQ6IGlkKQogICAgICAgIGxldCB3aXRoZHJhd25TdG9yYWdlVXNhZ2UgPSBzaWduZXIuc3RvcmFnZS51c2VkCiAgICAgICAgdmFyIGFwcHJveEZlZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5jYWxjdWxhdGVCcmlkZ2VGZWUoYnl0ZXM6IDQwMF8wMDApICsgRmxvd0VWTUJyaWRnZUNvbmZpZy5iYXNlRmVlCiAgICAgICAgLy8gRGV0ZXJtaW5lIGlmIHRoZSBORlQgcmVxdWlyZXMgb25ib2FyZGluZyAtIHRoaXMgaW1wYWN0cyB0aGUgZmVlIHJlcXVpcmVkCiAgICAgICAgc2VsZi5yZXF1aXJlc09uYm9hcmRpbmcgPSBGbG93RVZNQnJpZGdlLnR5cGVSZXF1aXJlc09uYm9hcmRpbmcoc2VsZi5uZnQuZ2V0VHlwZSgpKQogICAgICAgICAgICA/PyBwYW5pYygiQnJpZGdlIGRvZXMgbm90IHN1cHBvcnQgdGhpcyBhc3NldCB0eXBlIikKICAgICAgICBpZiBzZWxmLnJlcXVpcmVzT25ib2FyZGluZyB7CiAgICAgICAgICAgIGFwcHJveEZlZSA9IGFwcHJveEZlZSArIEZsb3dFVk1CcmlkZ2VDb25maWcub25ib2FyZEZlZQogICAgICAgIH0KCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApCiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICAgIH0KICAgICAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkludmFsaWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBmb3VuZCBpbiBzdG9yYWdlLiIpCiAgICAgICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKGFwcHJveEZlZSkKICAgICAgICBzZWxmLnNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICAgICAgICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgICAgICkKICAgIH0KCiAgICBwcmUgewogICAgICAgIHNlbGYubmZ0LmdldFR5cGUoKS5pZGVudGlmaWVyID09IG5mdElkZW50aWZpZXI6CiAgICAgICAgICAgICJBdHRlbXB0aW5nIHRvIHNlbmQgaW52YWxpZCBuZnQgdHlwZSAtIHJlcXVlc3RlZDogIi5jb25jYXQobmZ0SWRlbnRpZmllcikKICAgICAgICAgICAgLmNvbmNhdCgiLCBzZW5kaW5nOiAiKS5jb25jYXQoc2VsZi5uZnQuZ2V0VHlwZSgpLmlkZW50aWZpZXIpCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgaWYgc2VsZi5yZXF1aXJlc09uYm9hcmRpbmcgewogICAgICAgICAgICAvLyBPbmJvYXJkIHRoZSBORlQgdG8gdGhlIGJyaWRnZQogICAgICAgICAgICBGbG93RVZNQnJpZGdlLm9uYm9hcmRCeVR5cGUoCiAgICAgICAgICAgICAgICBzZWxmLm5mdC5nZXRUeXBlKCksCiAgICAgICAgICAgICAgICBmZWVQcm92aWRlcjogJnNlbGYuc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgICAgICkKICAgICAgICB9CgogICAgICAgIC8vIEV4ZWN1dGUgdGhlIGJyaWRnZSB0cmFuc2FjdGlvbgogICAgICAgIHNlbGYuY29hLmRlcG9zaXRORlQoCiAgICAgICAgICAgIG5mdDogPC1zZWxmLm5mdCwKICAgICAgICAgICAgZmVlUHJvdmlkZXI6ICZzZWxmLnNjb3BlZFByb3ZpZGVyIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfQogICAgICAgICkKCiAgICAgICAgLy8gRGVzdHJveSB0aGUgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGRlc3Ryb3kgc2VsZi5zY29wZWRQcm92aWRlcgoKICAgICAgICAvLyBXcmFwIE5GVHMgaWYgYXBwbGljYWJsZQogICAgICAgIHdyYXBBbmRUcmFuc2Zlck5GVHNJZkFwcGxpY2FibGUoc2VsZi5jb2EsCiAgICAgICAgICAgIG5mdElEczogW2lkXSwKICAgICAgICAgICAgbmZ0VHlwZTogc2VsZi5uZnRUeXBlLAogICAgICAgICAgICB2aWV3UmVzb2x2ZXI6IHNlbGYudmlld1Jlc29sdmVyLAogICAgICAgICAgICByZWNpcGllbnRJZk5vdENvYTogRVZNLmFkZHJlc3NGcm9tU3RyaW5nKHJlY2lwaWVudCkKICAgICAgICApCiAgICB9Cn0KCi8vLyBXcmFwcyBhbmQgdHJhbnNmZXJzIGJyaWRnZWQgTkZUcyBpbnRvIGEgcHJvamVjdCdzIGN1c3RvbSBFUkM3MjEgd3JhcHBlciBjb250cmFjdCBvbiBFVk0sIGlmIGFwcGxpY2FibGUuCi8vLyBFbmFibGVzIHByb2plY3RzIHRvIHVzZSB0aGVpciBvd24gRVJDNzIxIGNvbnRyYWN0IHdoaWxlIGxldmVyYWdpbmcgdGhlIGJyaWRnZSdzIHVuZGVybHlpbmcgY29udHJhY3QsCi8vLyB1bnRpbCBkaXJlY3QgY3VzdG9tIGNvbnRyYWN0IHN1cHBvcnQgaXMgYWRkZWQgdG8gdGhlIGJyaWRnZS4KLy8vCi8vLyBAcGFyYW0gY29hOiBUaGUgQ09BIG9mIHRoZSBzaWduZXIKLy8vIEBwYXJhbSBuZnRJRHM6IFRoZSBJRHMgb2YgdGhlIE5GVHMgdG8gd3JhcAovLy8gQHBhcmFtIG5mdFR5cGU6IFRoZSB0eXBlIG9mIHRoZSBORlRzIHRvIHdyYXAKLy8vIEBwYXJhbSB2aWV3UmVzb2x2ZXI6IFRoZSBWaWV3UmVzb2x2ZXIgb2YgdGhlIE5GVCBjb250cmFjdAovLy8gQHBhcmFtIHJlY2lwaWVudElmTm90Q29hOiBUaGUgRVZNIGFkZHJlc3MgdG8gdHJhbnNmZXIgdGhlIHdyYXBwZWQgTkZUcyB0bywgbmlsIGlmIHRoZSBORlRzIHNob3VsZCBzdGF5IGluIHNpZ25lcidzIENPQQovLy8KYWNjZXNzKGFsbCkgZnVuIHdyYXBBbmRUcmFuc2Zlck5GVHNJZkFwcGxpY2FibGUoCiAgICBfIGNvYTogYXV0aChFVk0uQ2FsbCkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50LAogICAgbmZ0SURzOiBbVUludDY0XSwKICAgIG5mdFR5cGU6IFR5cGUsCiAgICB2aWV3UmVzb2x2ZXI6ICZ7Vmlld1Jlc29sdmVyfSwKICAgIHJlY2lwaWVudElmTm90Q29hOiBFVk0uRVZNQWRkcmVzcz8KKSB7CiAgICAvLyBHZXQgdGhlIHByb2plY3QtZGVmaW5lZCBFUkM3MjEgYWRkcmVzcyBpZiBpdCBleGlzdHMKICAgIGlmIGxldCBjcm9zc1ZNUG9pbnRlciA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICByZXNvdXJjZVR5cGU6IG5mdFR5cGUsCiAgICAgICAgICAgIHZpZXdUeXBlOiBUeXBlPENyb3NzVk1NZXRhZGF0YVZpZXdzLkVWTVBvaW50ZXI+KCkKICAgICkgYXMhIENyb3NzVk1NZXRhZGF0YVZpZXdzLkVWTVBvaW50ZXI/IHsKICAgICAgICAvLyBHZXQgdGhlIHVuZGVybHlpbmcgRVJDNzIxIGFkZHJlc3MgaWYgaXQgZXhpc3RzCiAgICAgICAgaWYgbGV0IHVuZGVybHlpbmdBZGRyZXNzID0gZ2V0VW5kZXJseWluZ0VSQzcyMUFkZHJlc3MoY29hLCBjcm9zc1ZNUG9pbnRlci5ldm1Db250cmFjdEFkZHJlc3MpIHsKICAgICAgICAgICAgLy8gV3JhcCBORlRzIGlmIHVuZGVybHlpbmcgRVJDNzIxIGFkZHJlc3MgbWF0Y2hlcyBicmlkZ2UncyBhc3NvY2lhdGVkIGFkZHJlc3MgZm9yIE5GVCB0eXBlCiAgICAgICAgICAgIGlmIHVuZGVybHlpbmdBZGRyZXNzLmVxdWFscyhGbG93RVZNQnJpZGdlQ29uZmlnLmdldEVWTUFkZHJlc3NBc3NvY2lhdGVkKHdpdGg6IG5mdFR5cGUpISkgewogICAgICAgICAgICAgICAgLy8gQXBwcm92ZSBjb250cmFjdCB0byB3aXRoZHJhdyB1bmRlcmx5aW5nIE5GVHMgZnJvbSBzaWduZXIncyBjb2EKICAgICAgICAgICAgICAgIG11c3RDYWxsKGNvYSwgdW5kZXJseWluZ0FkZHJlc3MsCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb25TaWc6ICJzZXRBcHByb3ZhbEZvckFsbChhZGRyZXNzLGJvb2wpIiwKICAgICAgICAgICAgICAgICAgICBhcmdzOiBbY3Jvc3NWTVBvaW50ZXIuZXZtQ29udHJhY3RBZGRyZXNzLCB0cnVlXQogICAgICAgICAgICAgICAgKQoKICAgICAgICAgICAgICAgIC8vIFdyYXAgTkZUcyB3aXRoIHByb3ZpZGVkIElEcywgYW5kIGNoZWNrIGlmIHRoZSBjYWxsIHdhcyBzdWNjZXNzZnVsCiAgICAgICAgICAgICAgICBsZXQgcmVzID0gbXVzdENhbGwoY29hLCBjcm9zc1ZNUG9pbnRlci5ldm1Db250cmFjdEFkZHJlc3MsCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb25TaWc6ICJkZXBvc2l0Rm9yKGFkZHJlc3MsdWludDI1NltdKSIsCiAgICAgICAgICAgICAgICAgICAgYXJnczogW2NvYS5hZGRyZXNzKCksIG5mdElEc10KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIGxldCBkZWNvZGVkUmVzID0gRVZNLmRlY29kZUFCSSh0eXBlczogW1R5cGU8Qm9vbD4oKV0sIGRhdGE6IHJlcy5kYXRhKQogICAgICAgICAgICAgICAgYXNzZXJ0KGRlY29kZWRSZXMubGVuZ3RoID09IDEsIG1lc3NhZ2U6ICJJbnZhbGlkIHJlc3BvbnNlIGxlbmd0aCIpCiAgICAgICAgICAgICAgICBhc3NlcnQoZGVjb2RlZFJlc1swXSBhcyEgQm9vbCwgbWVzc2FnZTogIkZhaWxlZCB0byB3cmFwIE5GVHMiKQoKICAgICAgICAgICAgICAgIC8vIFRyYW5zZmVyIE5GVHMgdG8gcmVjaXBpZW50IGlmIHByb3ZpZGVkCiAgICAgICAgICAgICAgICBpZiBsZXQgdG8gPSByZWNpcGllbnRJZk5vdENvYSB7CiAgICAgICAgICAgICAgICAgICAgbXVzdFRyYW5zZmVyTkZUcyhjb2EsIGNyb3NzVk1Qb2ludGVyLmV2bUNvbnRyYWN0QWRkcmVzcywgbmZ0SURzOiBuZnRJRHMsIHRvOiB0bykKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBSZXZva2UgYXBwcm92YWwgZm9yIGNvbnRyYWN0IHRvIHdpdGhkcmF3IHVuZGVybHlpbmcgTkZUcyBmcm9tIHNpZ25lcidzIGNvYQogICAgICAgICAgICAgICAgbXVzdENhbGwoY29hLCB1bmRlcmx5aW5nQWRkcmVzcywKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvblNpZzogInNldEFwcHJvdmFsRm9yQWxsKGFkZHJlc3MsYm9vbCkiLAogICAgICAgICAgICAgICAgICAgIGFyZ3M6IFtjcm9zc1ZNUG9pbnRlci5ldm1Db250cmFjdEFkZHJlc3MsIGZhbHNlXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgovLy8gR2V0cyB0aGUgdW5kZXJseWluZyBFUkM3MjEgYWRkcmVzcyBpZiBpdCBleGlzdHMgKGkuZS4gaWYgdGhlIEVSQzcyMSBpcyBhIHdyYXBwZXIpCi8vLwphY2Nlc3MoYWxsKSBmdW4gZ2V0VW5kZXJseWluZ0VSQzcyMUFkZHJlc3MoCiAgICBfIGNvYTogYXV0aChFVk0uQ2FsbCkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50LAogICAgXyB3cmFwcGVyQWRkcmVzczogRVZNLkVWTUFkZHJlc3MKKTogRVZNLkVWTUFkZHJlc3M/IHsKICAgIGxldCByZXMgPSBjb2EuY2FsbCgKICAgICAgICB0bzogd3JhcHBlckFkZHJlc3MsCiAgICAgICAgZGF0YTogRVZNLmVuY29kZUFCSVdpdGhTaWduYXR1cmUoInVuZGVybHlpbmcoKSIsIFtdKSwKICAgICAgICBnYXNMaW1pdDogMTAwXzAwMCwKICAgICAgICB2YWx1ZTogRVZNLkJhbGFuY2UoYXR0b2Zsb3c6IDApCiAgICApCgogICAgLy8gSWYgdGhlIGNhbGwgZmFpbHMsIHJldHVybiBuaWwKICAgIGlmIHJlcy5zdGF0dXMgIT0gRVZNLlN0YXR1cy5zdWNjZXNzZnVsIHx8IHJlcy5kYXRhLmxlbmd0aCA9PSAwIHsKICAgICAgICByZXR1cm4gbmlsCiAgICB9CgogICAgLy8gRGVjb2RlIGFuZCByZXR1cm4gdGhlIHVuZGVybHlpbmcgRVJDNzIxIGFkZHJlc3MKICAgIGxldCBkZWNvZGVkUmVzdWx0ID0gRVZNLmRlY29kZUFCSSgKICAgICAgICB0eXBlczogW1R5cGU8RVZNLkVWTUFkZHJlc3M+KCldLAogICAgICAgIGRhdGE6IHJlcy5kYXRhCiAgICApCiAgICBhc3NlcnQoZGVjb2RlZFJlc3VsdC5sZW5ndGggPT0gMSwgbWVzc2FnZTogIkludmFsaWQgcmVzcG9uc2UgbGVuZ3RoIikKICAgIHJldHVybiBkZWNvZGVkUmVzdWx0WzBdIGFzISBFVk0uRVZNQWRkcmVzcwp9CgovLy8gQ2hlY2tzIGlmIHRoZSBwcm92aWRlZCBORlQgaXMgb3duZWQgYnkgdGhlIHByb3ZpZGVkIEVWTSBhZGRyZXNzCi8vLwphY2Nlc3MoYWxsKSBmdW4gaXNPd25lcigKICAgIF8gY29hOiBhdXRoKEVWTS5DYWxsKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQsCiAgICBfIGVyYzcyMUFkZHJlc3M6IEVWTS5FVk1BZGRyZXNzLAogICAgXyBuZnRJRDogVUludDY0LAogICAgXyBvd25lclRvQ2hlY2s6IEVWTS5FVk1BZGRyZXNzCik6IEJvb2wgewogICAgbGV0IHJlcyA9IGNvYS5jYWxsKAogICAgICAgIHRvOiBlcmM3MjFBZGRyZXNzLAogICAgICAgIGRhdGE6IEVWTS5lbmNvZGVBQklXaXRoU2lnbmF0dXJlKCJvd25lck9mKHVpbnQyNTYpIiwgW25mdElEXSksCiAgICAgICAgZ2FzTGltaXQ6IDEwMF8wMDAsCiAgICAgICAgdmFsdWU6IEVWTS5CYWxhbmNlKGF0dG9mbG93OiAwKQogICAgKQogICAgYXNzZXJ0KHJlcy5zdGF0dXMgPT0gRVZNLlN0YXR1cy5zdWNjZXNzZnVsLCBtZXNzYWdlOiAiQ2FsbCB0byBFUkM3MjEub3duZXJPZih1aW50MjU2KSBmYWlsZWQiKQogICAgbGV0IGRlY29kZWRSZXMgPSBFVk0uZGVjb2RlQUJJKHR5cGVzOiBbVHlwZTxFVk0uRVZNQWRkcmVzcz4oKV0sIGRhdGE6IHJlcy5kYXRhKQogICAgaWYgZGVjb2RlZFJlcy5sZW5ndGggPT0gMSB7CiAgICAgICAgbGV0IGFjdHVhbE93bmVyID0gZGVjb2RlZFJlc1swXSBhcyEgRVZNLkVWTUFkZHJlc3MKICAgICAgICByZXR1cm4gYWN0dWFsT3duZXIuZXF1YWxzKG93bmVyVG9DaGVjaykKICAgIH0KICAgIHJldHVybiBmYWxzZQp9CgovLy8gVHJhbnNmZXJzIE5GVHMgZnJvbSB0aGUgcHJvdmlkZWQgQ09BIHRvIHRoZSBwcm92aWRlZCBFVk0gYWRkcmVzcwovLy8KYWNjZXNzKGFsbCkgZnVuIG11c3RUcmFuc2Zlck5GVHMoCiAgICBfIGNvYTogYXV0aChFVk0uQ2FsbCkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50LAogICAgXyBlcmM3MjFBZGRyZXNzOiBFVk0uRVZNQWRkcmVzcywKICAgIG5mdElEczogW1VJbnQ2NF0sCiAgICB0bzogRVZNLkVWTUFkZHJlc3MKKSB7CiAgICBmb3IgaWQgaW4gbmZ0SURzIHsKICAgICAgICBhc3NlcnQoaXNPd25lcihjb2EsIGVyYzcyMUFkZHJlc3MsIGlkLCBjb2EuYWRkcmVzcygpKSwgbWVzc2FnZTogIk5GVCBub3Qgb3duZWQgYnkgc2lnbmVyJ3MgQ09BIikKICAgICAgICBtdXN0Q2FsbChjb2EsIGVyYzcyMUFkZHJlc3MsCiAgICAgICAgICAgIGZ1bmN0aW9uU2lnOiAic2FmZVRyYW5zZmVyRnJvbShhZGRyZXNzLGFkZHJlc3MsdWludDI1NikiLAogICAgICAgICAgICBhcmdzOiBbY29hLmFkZHJlc3MoKSwgdG8sIGlkXQogICAgICAgICkKICAgICAgICBhc3NlcnQoaXNPd25lcihjb2EsIGVyYzcyMUFkZHJlc3MsIGlkLCB0byksIG1lc3NhZ2U6ICJORlQgbm90IHRyYW5zZmVycmVkIHRvIHJlY2lwaWVudCIpCiAgICB9Cn0KCi8vLyBDYWxscyBhIGZ1bmN0aW9uIG9uIGFuIEVWTSBjb250cmFjdCBmcm9tIHByb3ZpZGVkIGNvYQovLy8KYWNjZXNzKGFsbCkgZnVuIG11c3RDYWxsKAogICAgXyBjb2E6IGF1dGgoRVZNLkNhbGwpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudCwKICAgIF8gY29udHJhY3RBZGRyOiBFVk0uRVZNQWRkcmVzcywKICAgIGZ1bmN0aW9uU2lnOiBTdHJpbmcsCiAgICBhcmdzOiBbQW55U3RydWN0XQopOiBFVk0uUmVzdWx0IHsKICAgIGxldCByZXMgPSBjb2EuY2FsbCgKICAgICAgICB0bzogY29udHJhY3RBZGRyLAogICAgICAgIGRhdGE6IEVWTS5lbmNvZGVBQklXaXRoU2lnbmF0dXJlKGZ1bmN0aW9uU2lnLCBhcmdzKSwKICAgICAgICBnYXNMaW1pdDogNF8wMDBfMDAwLAogICAgICAgIHZhbHVlOiBFVk0uQmFsYW5jZShhdHRvZmxvdzogMCkKICAgICkKCiAgICBhc3NlcnQocmVzLnN0YXR1cyA9PSBFVk0uU3RhdHVzLnN1Y2Nlc3NmdWwsCiAgICAgICAgbWVzc2FnZTogIkZhaWxlZCB0byBjYWxsICciLmNvbmNhdChmdW5jdGlvblNpZykKICAgICAgICAgICAgLmNvbmNhdCgiXG5cdCBlcnJvciBjb2RlOiAiKS5jb25jYXQocmVzLmVycm9yQ29kZS50b1N0cmluZygpKQogICAgICAgICAgICAuY29uY2F0KCJcblx0IGVycm9yIG1lc3NhZ2U6ICIpLmNvbmNhdChyZXMuZXJyb3JNZXNzYWdlKQogICAgICAgICAgICAuY29uY2F0KCJcblx0IGdhcyB1c2VkOiAiKS5jb25jYXQocmVzLmdhc1VzZWQudG9TdHJpbmcoKSkKICAgICAgICAgICAgLmNvbmNhdCgiXG5cdCBjYWxsZXIgYWRkcmVzczogMHgiKS5jb25jYXQoY29hLmFkZHJlc3MoKS50b1N0cmluZygpKQogICAgICAgICAgICAuY29uY2F0KCJcblx0IGNvbnRyYWN0IGFkZHJlc3M6IDB4IikuY29uY2F0KGNvbnRyYWN0QWRkci50b1N0cmluZygpKQogICAgKQoKICAgIHJldHVybiByZXMKfQo=",
          "bridgeNFTToEvmAddressWithPayer": "",
          "bridgeNFTToEvmV2": "",
          "bridgeNFTToEvmWithPayer": "",
          "bridgeTokensFromEvm": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgYnJpZGdlVG9rZW5zRnJvbUV2bSAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweDlhMDc2NmQ5M2I2NjA4YjcKCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweDdlNjBkZjA0MmE5YzA4NjgKCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKaW1wb3J0IEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzIGZyb20gMHg5YTA3NjZkOTNiNjYwOGI3CgoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHhkZmMyMGFlZTY1MGZjYmRmCgoKaW1wb3J0IEVWTSBmcm9tIDB4OGM1MzAzZWFhMjYyMDJkNgoKCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweGRmYzIwYWVlNjUwZmNiZGYKCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHhkZmMyMGFlZTY1MGZjYmRmCgppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4ZGZjMjBhZWU2NTBmY2JkZgoKCi8vLy8gVGhpcyB0cmFuc2FjdGlvbiBicmlkZ2VzIGZ1bmdpYmxlIHRva2VucyBmcm9tIEVWTSB0byBDYWRlbmNlIGFzc3VtaW5nIGl0IGhhcyBhbHJlYWR5IGJlZW4gb25ib2FyZGVkIHRvIHRoZQovLy8gRmxvd0VWTUJyaWRnZS4KLy8vCi8vLyBOT1RFOiBUaGUgRVJDNzIxIG11c3QgaGF2ZSBmaXJzdCBiZWVuIG9uYm9hcmRlZCB0byB0aGUgYnJpZGdlLiBUaGlzIGNhbiBiZSBjaGVja2VkIHZpYSB0aGUgbWV0aG9kCi8vLyAgICAgRmxvd0VWTUJyaWRnZS5ldm1BZGRyZXNzUmVxdWlyZXNPbmJvYXJkaW5nKGFkZHJlc3M6IHNlbGYuZXZtQ29udHJhY3RBZGRyZXNzKQovLy8KLy8vIEBwYXJhbSB0b2tlbkNvbnRyYWN0QWRkcmVzczogVGhlIEZsb3cgYWNjb3VudCBhZGRyZXNzIGhvc3RpbmcgdGhlIEZULWRlZmluaW5nIENhZGVuY2UgY29udHJhY3QKLy8vIEBwYXJhbSB0b2tlbkNvbnRyYWN0TmFtZTogVGhlIG5hbWUgb2YgdGhlIFZhdWx0LWRlZmluaW5nIENhZGVuY2UgY29udHJhY3QKLy8vIEBwYXJhbSBhbW91bnQ6IFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJyaWRnZSBmcm9tIEVWTQovLy8KdHJhbnNhY3Rpb24odG9rZW5Db250cmFjdEFkZHJlc3M6IEFkZHJlc3MsIHRva2VuQ29udHJhY3ROYW1lOiBTdHJpbmcsIGFtb3VudDogVUludDI1NikgewoKICAgIGxldCB2YXVsdFR5cGU6IFR5cGUKICAgIGxldCByZWNlaXZlcjogJntGdW5naWJsZVRva2VuLlZhdWx0fQogICAgbGV0IHNjb3BlZFByb3ZpZGVyOiBAU2NvcGVkRlRQcm92aWRlcnMuU2NvcGVkRlRQcm92aWRlcgogICAgbGV0IGNvYTogYXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQKCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChCb3Jyb3dWYWx1ZSwgQ29weVZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSwgVW5wdWJsaXNoQ2FwYWJpbGl0eSkgJkFjY291bnQpIHsKICAgICAgICAvKiAtLS0gUmVmZXJlbmNlIHRoZSBzaWduZXIncyBDYWRlbmNlT3duZWRBY2NvdW50IC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBDT0EKICAgICAgICBzZWxmLmNvYSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEVWTS5CcmlkZ2UpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oZnJvbTogL3N0b3JhZ2UvZXZtKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBDT0EgZnJvbSBwcm92aWRlZCBnYXRld2F5IGFkZHJlc3MiKQoKICAgICAgICAvLyBHZXQgdGhlIEVSQzIwIGNvbnRyYWN0IGFkZHJlc3MgZm9yIHRoZSBnaXZlbiBGdW5naWJsZVRva2VuIFZhdWx0IHR5cGUKICAgICAgICBzZWxmLnZhdWx0VHlwZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5idWlsZENvbXBvc2l0ZVR5cGUoCiAgICAgICAgICAgICAgICBhZGRyZXNzOiB0b2tlbkNvbnRyYWN0QWRkcmVzcywKICAgICAgICAgICAgICAgIGNvbnRyYWN0TmFtZTogdG9rZW5Db250cmFjdE5hbWUsCiAgICAgICAgICAgICAgICByZXNvdXJjZU5hbWU6ICJWYXVsdCIKICAgICAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGNvbnN0cnVjdCBWYXVsdCB0eXBlIG9mOiAiIC5jb25jYXQodG9rZW5Db250cmFjdEFkZHJlc3MudG9TdHJpbmcoKSkuY29uY2F0KCIuIikuY29uY2F0KHRva2VuQ29udHJhY3ROYW1lKS5jb25jYXQoIi5WYXVsdCIpKQoKICAgICAgICAvKiAtLS0gUmVmZXJlbmNlIHRoZSBzaWduZXIncyBWYXVsdCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgRnVuZ2libGVUb2tlbiBWYXVsdCwgY29uZmlndXJpbmcgaWYgbmVjZXNzYXJ5CiAgICAgICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQodG9rZW5Db250cmFjdEFkZHJlc3MpLmNvbnRyYWN0cy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXJ9PihuYW1lOiB0b2tlbkNvbnRyYWN0TmFtZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gRnVuZ2libGVUb2tlbiBjb250cmFjdCIpCiAgICAgICAgbGV0IHZhdWx0RGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBzZWxmLnZhdWx0VHlwZSwKICAgICAgICAgICAgICAgIHZpZXdUeXBlOiBUeXBlPEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPigpCiAgICAgICAgICAgICkgYXMhIEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgRlRWYXVsdERhdGEgdmlldyIpCiAgICAgICAgLy8gSWYgdGhlIHZhdWx0IGRvZXMgbm90IGV4aXN0LCBjcmVhdGUgaXQgYW5kIHB1Ymxpc2ggYWNjb3JkaW5nIHRvIHRoZSBjb250cmFjdCdzIGRlZmluZWQgY29uZmlndXJhdGlvbgogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLmJvcnJvdzwme0Z1bmdpYmxlVG9rZW4uVmF1bHR9Pihmcm9tOiB2YXVsdERhdGEuc3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUoPC12YXVsdERhdGEuY3JlYXRlRW1wdHlWYXVsdCgpLCB0bzogdmF1bHREYXRhLnN0b3JhZ2VQYXRoKQoKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy51bnB1Ymxpc2godmF1bHREYXRhLnJlY2VpdmVyUGF0aCkKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy51bnB1Ymxpc2godmF1bHREYXRhLm1ldGFkYXRhUGF0aCkKCiAgICAgICAgICAgIGxldCByZWNlaXZlckNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwme0Z1bmdpYmxlVG9rZW4uVmF1bHR9Pih2YXVsdERhdGEuc3RvcmFnZVBhdGgpCiAgICAgICAgICAgIGxldCBtZXRhZGF0YUNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwme0Z1bmdpYmxlVG9rZW4uVmF1bHR9Pih2YXVsdERhdGEuc3RvcmFnZVBhdGgpCgogICAgICAgICAgICBzaWduZXIuY2FwYWJpbGl0aWVzLnB1Ymxpc2gocmVjZWl2ZXJDYXAsIGF0OiB2YXVsdERhdGEucmVjZWl2ZXJQYXRoKQogICAgICAgICAgICBzaWduZXIuY2FwYWJpbGl0aWVzLnB1Ymxpc2gobWV0YWRhdGFDYXAsIGF0OiB2YXVsdERhdGEubWV0YWRhdGFQYXRoKQogICAgICAgIH0KICAgICAgICBzZWxmLnJlY2VpdmVyID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PCZ7RnVuZ2libGVUb2tlbi5WYXVsdH0+KGZyb206IHZhdWx0RGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmF1bHQgZnJvbSBzdG9yYWdlIHBhdGgiKQoKICAgICAgICAvKiAtLS0gQ29uZmlndXJlIGEgU2NvcGVkRlRQcm92aWRlciAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgYnJpZGdlIGZlZSAtIGJyaWRnaW5nIGZyb20gRVZNIGNvbnN1bWVzIG5vIHN0b3JhZ2UsIHNvIGZsYXQgZmVlCiAgICAgICAgbGV0IGFwcHJveEZlZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5jYWxjdWxhdGVCcmlkZ2VGZWUoYnl0ZXM6IDQwMF8wMDApCiAgICAgICAgLy8gSXNzdWUgYW5kIHN0b3JlIGJyaWRnZS1kZWRpY2F0ZWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBpbiBzdG9yYWdlIGlmIG5lY2Vzc2FyeQogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLnR5cGUoYXQ6IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIGxldCBwcm92aWRlckNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KAogICAgICAgICAgICAgICAgL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgICAgICAgKQogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKHByb3ZpZGVyQ2FwLCB0bzogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkKICAgICAgICB9CiAgICAgICAgLy8gQ29weSB0aGUgc3RvcmVkIFByb3ZpZGVyIGNhcGFiaWxpdHkgYW5kIGNyZWF0ZSBhIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBsZXQgcHJvdmlkZXJDYXBDb3B5ID0gc2lnbmVyLnN0b3JhZ2UuY29weTxDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4+KAogICAgICAgICAgICAgICAgZnJvbTogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJJbnZhbGlkIFByb3ZpZGVyIENhcGFiaWxpdHkgZm91bmQgaW4gc3RvcmFnZS4iKQogICAgICAgIGxldCBwcm92aWRlckZpbHRlciA9IFNjb3BlZEZUUHJvdmlkZXJzLkFsbG93YW5jZUZpbHRlcihhcHByb3hGZWUpCiAgICAgICAgc2VsZi5zY29wZWRQcm92aWRlciA8LSBTY29wZWRGVFByb3ZpZGVycy5jcmVhdGVTY29wZWRGVFByb3ZpZGVyKAogICAgICAgICAgICAgICAgcHJvdmlkZXI6IHByb3ZpZGVyQ2FwQ29weSwKICAgICAgICAgICAgICAgIGZpbHRlcnM6IFsgcHJvdmlkZXJGaWx0ZXIgXSwKICAgICAgICAgICAgICAgIGV4cGlyYXRpb246IGdldEN1cnJlbnRCbG9jaygpLnRpbWVzdGFtcCArIDEuMAogICAgICAgICAgICApCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgLy8gRXhlY3V0ZSB0aGUgYnJpZGdlIHJlcXVlc3QKICAgICAgICBsZXQgdmF1bHQ6IEB7RnVuZ2libGVUb2tlbi5WYXVsdH0gPC0gc2VsZi5jb2Eud2l0aGRyYXdUb2tlbnMoCiAgICAgICAgICAgIHR5cGU6IHNlbGYudmF1bHRUeXBlLAogICAgICAgICAgICBhbW91bnQ6IGFtb3VudCwKICAgICAgICAgICAgZmVlUHJvdmlkZXI6ICZzZWxmLnNjb3BlZFByb3ZpZGVyIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfQogICAgICAgICkKICAgICAgICAvLyBEZXBvc2l0IHRoZSBicmlkZ2VkIHRva2VuIGludG8gdGhlIHNpZ25lcidzIHZhdWx0CiAgICAgICAgc2VsZi5yZWNlaXZlci5kZXBvc2l0KGZyb206IDwtdmF1bHQpCiAgICAgICAgLy8gRGVzdHJveSB0aGUgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGRlc3Ryb3kgc2VsZi5zY29wZWRQcm92aWRlcgogICAgfQp9Cg==",
          "bridgeTokensFromEvmToFlow": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgYnJpZGdlVG9rZW5zRnJvbUV2bVRvRmxvdyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweDlhMDc2NmQ5M2I2NjA4YjcKCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweDdlNjBkZjA0MmE5YzA4NjgKCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKaW1wb3J0IEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzIGZyb20gMHg5YTA3NjZkOTNiNjYwOGI3CgoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHhkZmMyMGFlZTY1MGZjYmRmCgoKaW1wb3J0IEVWTSBmcm9tIDB4OGM1MzAzZWFhMjYyMDJkNgoKCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweGRmYzIwYWVlNjUwZmNiZGYKCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHhkZmMyMGFlZTY1MGZjYmRmCgppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4ZGZjMjBhZWU2NTBmY2JkZgoKCi8vLy8gVGhpcyB0cmFuc2FjdGlvbiBicmlkZ2VzIGZ1bmdpYmxlIHRva2VucyBmcm9tIEVWTSB0byBDYWRlbmNlIGFzc3VtaW5nIGl0IGhhcyBhbHJlYWR5IGJlZW4gb25ib2FyZGVkIHRvIHRoZQovLy8gRmxvd0VWTUJyaWRnZS4KLy8vCi8vLyBOT1RFOiBUaGUgRVJDNzIxIG11c3QgaGF2ZSBmaXJzdCBiZWVuIG9uYm9hcmRlZCB0byB0aGUgYnJpZGdlLiBUaGlzIGNhbiBiZSBjaGVja2VkIHZpYSB0aGUgbWV0aG9kCi8vLyAgICAgRmxvd0VWTUJyaWRnZS5ldm1BZGRyZXNzUmVxdWlyZXNPbmJvYXJkaW5nKGFkZHJlc3M6IHNlbGYuZXZtQ29udHJhY3RBZGRyZXNzKQovLy8KLy8vIEBwYXJhbSB0b2tlbkNvbnRyYWN0QWRkcmVzczogVGhlIEZsb3cgYWNjb3VudCBhZGRyZXNzIGhvc3RpbmcgdGhlIEZULWRlZmluaW5nIENhZGVuY2UgY29udHJhY3QKLy8vIEBwYXJhbSB0b2tlbkNvbnRyYWN0TmFtZTogVGhlIG5hbWUgb2YgdGhlIFZhdWx0LWRlZmluaW5nIENhZGVuY2UgY29udHJhY3QKLy8vIEBwYXJhbSBhbW91bnQ6IFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJyaWRnZSBmcm9tIEVWTQovLy8KdHJhbnNhY3Rpb24odG9rZW5Db250cmFjdEFkZHJlc3M6IEFkZHJlc3MsIHRva2VuQ29udHJhY3ROYW1lOiBTdHJpbmcsIGFtb3VudDogVUludDI1NiwgcmVjZWl2ZXI6IEFkZHJlc3MpIHsKCiAgICBsZXQgdmF1bHRUeXBlOiBUeXBlCiAgICBsZXQgcmVjZWl2ZXI6ICZ7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0KICAgIGxldCBzY29wZWRQcm92aWRlcjogQFNjb3BlZEZUUHJvdmlkZXJzLlNjb3BlZEZUUHJvdmlkZXIKICAgIGxldCBjb2E6IGF1dGgoRVZNLkJyaWRnZSkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50CgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQm9ycm93VmFsdWUsIENvcHlWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUsIFVucHVibGlzaENhcGFiaWxpdHkpICZBY2NvdW50KSB7CiAgICAgICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgQ2FkZW5jZU93bmVkQWNjb3VudCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3MgQ09BCiAgICAgICAgc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgQ09BIGZyb20gcHJvdmlkZWQgZ2F0ZXdheSBhZGRyZXNzIikKCiAgICAgICAgLy8gR2V0IHRoZSBFUkMyMCBjb250cmFjdCBhZGRyZXNzIGZvciB0aGUgZ2l2ZW4gRnVuZ2libGVUb2tlbiBWYXVsdCB0eXBlCiAgICAgICAgc2VsZi52YXVsdFR5cGUgPSBGbG93RVZNQnJpZGdlVXRpbHMuYnVpbGRDb21wb3NpdGVUeXBlKAogICAgICAgICAgICAgICAgYWRkcmVzczogdG9rZW5Db250cmFjdEFkZHJlc3MsCiAgICAgICAgICAgICAgICBjb250cmFjdE5hbWU6IHRva2VuQ29udHJhY3ROYW1lLAogICAgICAgICAgICAgICAgcmVzb3VyY2VOYW1lOiAiVmF1bHQiCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkNvdWxkIG5vdCBjb25zdHJ1Y3QgVmF1bHQgdHlwZSBvZjogIiAuY29uY2F0KHRva2VuQ29udHJhY3RBZGRyZXNzLnRvU3RyaW5nKCkpLmNvbmNhdCgiLiIpLmNvbmNhdCh0b2tlbkNvbnRyYWN0TmFtZSkuY29uY2F0KCIuVmF1bHQiKSkKCiAgICAgICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgVmF1bHQgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIEZ1bmdpYmxlVG9rZW4gVmF1bHQsIGNvbmZpZ3VyaW5nIGlmIG5lY2Vzc2FyeQogICAgICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KHRva2VuQ29udHJhY3RBZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogdG9rZW5Db250cmFjdE5hbWUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZpZXdSZXNvbHZlciBmcm9tIEZ1bmdpYmxlVG9rZW4gY29udHJhY3QiKQogICAgICAgIGxldCB2YXVsdERhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgICAgIHJlc291cmNlVHlwZTogc2VsZi52YXVsdFR5cGUsCiAgICAgICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT4oKQogICAgICAgICAgICApIGFzISBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT8gPz8gcGFuaWMoIkNvdWxkIG5vdCByZXNvbHZlIEZUVmF1bHREYXRhIHZpZXciKQogICAgICAgIC8vIElmIHRoZSB2YXVsdCBkb2VzIG5vdCBleGlzdCwgY3JlYXRlIGl0IGFuZCBwdWJsaXNoIGFjY29yZGluZyB0byB0aGUgY29udHJhY3QncyBkZWZpbmVkIGNvbmZpZ3VyYXRpb24KICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8JntGdW5naWJsZVRva2VuLlZhdWx0fT4oZnJvbTogdmF1bHREYXRhLnN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKDwtdmF1bHREYXRhLmNyZWF0ZUVtcHR5VmF1bHQoKSwgdG86IHZhdWx0RGF0YS5zdG9yYWdlUGF0aCkKCiAgICAgICAgICAgIHNpZ25lci5jYXBhYmlsaXRpZXMudW5wdWJsaXNoKHZhdWx0RGF0YS5yZWNlaXZlclBhdGgpCiAgICAgICAgICAgIHNpZ25lci5jYXBhYmlsaXRpZXMudW5wdWJsaXNoKHZhdWx0RGF0YS5tZXRhZGF0YVBhdGgpCgogICAgICAgICAgICBsZXQgcmVjZWl2ZXJDYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JntGdW5naWJsZVRva2VuLlZhdWx0fT4odmF1bHREYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgICAgICBsZXQgbWV0YWRhdGFDYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JntGdW5naWJsZVRva2VuLlZhdWx0fT4odmF1bHREYXRhLnN0b3JhZ2VQYXRoKQoKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy5wdWJsaXNoKHJlY2VpdmVyQ2FwLCBhdDogdmF1bHREYXRhLnJlY2VpdmVyUGF0aCkKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy5wdWJsaXNoKG1ldGFkYXRhQ2FwLCBhdDogdmF1bHREYXRhLm1ldGFkYXRhUGF0aCkKICAgICAgICB9CiAgICAgICAgbGV0IHJlY2VpdmVyQWNjdCA9IGdldEFjY291bnQocmVjZWl2ZXIpCiAgICAgICAgc2VsZi5yZWNlaXZlciA9IHJlY2VpdmVyQWNjdC5jYXBhYmlsaXRpZXMuYm9ycm93PCZ7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KHZhdWx0RGF0YS5yZWNlaXZlclBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZhdWx0IHJlY2VpdmVyIGNhcGFiaWxpdGllcyBmcm9tIHB1YmxpYyBwYXRoIikKCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGJyaWRnZSBmZWUgLSBicmlkZ2luZyBmcm9tIEVWTSBjb25zdW1lcyBubyBzdG9yYWdlLCBzbyBmbGF0IGZlZQogICAgICAgIGxldCBhcHByb3hGZWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuY2FsY3VsYXRlQnJpZGdlRmVlKGJ5dGVzOiA0MDBfMDAwKQogICAgICAgIC8vIElzc3VlIGFuZCBzdG9yZSBicmlkZ2UtZGVkaWNhdGVkIFByb3ZpZGVyIENhcGFiaWxpdHkgaW4gc3RvcmFnZSBpZiBuZWNlc3NhcnkKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS50eXBlKGF0OiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigKICAgICAgICAgICAgICAgIC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICAgICAgICkKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZShwcm92aWRlckNhcCwgdG86IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpCiAgICAgICAgfQogICAgICAgIC8vIENvcHkgdGhlIHN0b3JlZCBQcm92aWRlciBjYXBhYmlsaXR5IGFuZCBjcmVhdGUgYSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgbGV0IHByb3ZpZGVyQ2FwQ29weSA9IHNpZ25lci5zdG9yYWdlLmNvcHk8Q2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+PigKICAgICAgICAgICAgICAgIGZyb206IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiSW52YWxpZCBQcm92aWRlciBDYXBhYmlsaXR5IGZvdW5kIGluIHN0b3JhZ2UuIikKICAgICAgICBsZXQgcHJvdmlkZXJGaWx0ZXIgPSBTY29wZWRGVFByb3ZpZGVycy5BbGxvd2FuY2VGaWx0ZXIoYXBwcm94RmVlKQogICAgICAgIHNlbGYuc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgICAgICAgICBmaWx0ZXJzOiBbIHByb3ZpZGVyRmlsdGVyIF0sCiAgICAgICAgICAgICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICAgICAgICAgKQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIC8vIEV4ZWN1dGUgdGhlIGJyaWRnZSByZXF1ZXN0CiAgICAgICAgbGV0IHZhdWx0OiBAe0Z1bmdpYmxlVG9rZW4uVmF1bHR9IDwtIHNlbGYuY29hLndpdGhkcmF3VG9rZW5zKAogICAgICAgICAgICB0eXBlOiBzZWxmLnZhdWx0VHlwZSwKICAgICAgICAgICAgYW1vdW50OiBhbW91bnQsCiAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICApCiAgICAgICAgLy8gRGVwb3NpdCB0aGUgYnJpZGdlZCB0b2tlbiBpbnRvIHRoZSBzaWduZXIncyB2YXVsdAogICAgICAgIHNlbGYucmVjZWl2ZXIuZGVwb3NpdChmcm9tOiA8LXZhdWx0KQogICAgICAgIC8vIERlc3Ryb3kgdGhlIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBkZXN0cm95IHNlbGYuc2NvcGVkUHJvdmlkZXIKICAgIH0KfQo=",
          "bridgeTokensFromEvmToFlowV2": "",
          "bridgeTokensFromEvmToFlowV3": "",
          "bridgeTokensFromEvmV2": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgYnJpZGdlVG9rZW5zRnJvbUV2bVYyIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4OWEwNzY2ZDkzYjY2MDhiNwoKaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4N2U2MGRmMDQyYTljMDg2OAoKaW1wb3J0IEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzIGZyb20gMHg5YTA3NjZkOTNiNjYwOGI3CgoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHhkZmMyMGFlZTY1MGZjYmRmCgoKaW1wb3J0IEVWTSBmcm9tIDB4OGM1MzAzZWFhMjYyMDJkNgoKCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweGRmYzIwYWVlNjUwZmNiZGYKCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHhkZmMyMGFlZTY1MGZjYmRmCgppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4ZGZjMjBhZWU2NTBmY2JkZgoKCi8vLyBUaGlzIHRyYW5zYWN0aW9uIGJyaWRnZXMgZnVuZ2libGUgdG9rZW5zIGZyb20gRVZNIHRvIENhZGVuY2UgYXNzdW1pbmcgaXQgaGFzIGFscmVhZHkgYmVlbiBvbmJvYXJkZWQgdG8gdGhlCi8vLyBGbG93RVZNQnJpZGdlLgovLy8KLy8vIE5PVEU6IFRoZSBFUkMyMCBtdXN0IGhhdmUgZmlyc3QgYmVlbiBvbmJvYXJkZWQgdG8gdGhlIGJyaWRnZS4gVGhpcyBjYW4gYmUgY2hlY2tlZCB2aWEgdGhlIG1ldGhvZAovLy8gICAgIEZsb3dFVk1CcmlkZ2UuZXZtQWRkcmVzc1JlcXVpcmVzT25ib2FyZGluZyhhZGRyZXNzOiBzZWxmLmV2bUNvbnRyYWN0QWRkcmVzcykKLy8vCi8vLyBAcGFyYW0gdmF1bHRJZGVudGlmaWVyOiBUaGUgQ2FkZW5jZSB0eXBlIGlkZW50aWZpZXIgb2YgdGhlIEZ1bmdpYmxlVG9rZW4gVmF1bHQgdG8gYnJpZGdlCi8vLyAgICAgLSBlLmcuIHZhdWx0LmdldFR5cGUoKS5pZGVudGlmaWVyCi8vLyBAcGFyYW0gYW1vdW50OiBUaGUgYW1vdW50IG9mIHRva2VucyB0byBicmlkZ2UgZnJvbSBFVk0KLy8vCnRyYW5zYWN0aW9uKHZhdWx0SWRlbnRpZmllcjogU3RyaW5nLCBhbW91bnQ6IFVJbnQyNTYpIHsKICAgIGxldCB2YXVsdFR5cGU6IFR5cGUKICAgIGxldCByZWNlaXZlcjogJntGdW5naWJsZVRva2VuLlZhdWx0fQogICAgbGV0IHNjb3BlZFByb3ZpZGVyOiBAU2NvcGVkRlRQcm92aWRlcnMuU2NvcGVkRlRQcm92aWRlcgogICAgbGV0IGNvYTogYXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQKCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChCb3Jyb3dWYWx1ZSwgQ29weVZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSwgVW5wdWJsaXNoQ2FwYWJpbGl0eSkgJkFjY291bnQpIHsKICAgICAgICAvKiAtLS0gUmVmZXJlbmNlIHRoZSBzaWduZXIncyBDYWRlbmNlT3duZWRBY2NvdW50IC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBDT0EKICAgICAgICBzZWxmLmNvYSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEVWTS5CcmlkZ2UpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oZnJvbTogL3N0b3JhZ2UvZXZtKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBDT0EgZnJvbSBwcm92aWRlZCBnYXRld2F5IGFkZHJlc3MiKQoKICAgICAgICAvKiAtLS0gQ29uc3RydWN0IHRoZSBWYXVsdCB0eXBlIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQ29uc3RydWN0IHRoZSBWYXVsdCB0eXBlIGZyb20gdGhlIHByb3ZpZGVkIGlkZW50aWZpZXIKICAgICAgICBzZWxmLnZhdWx0VHlwZSA9IENvbXBvc2l0ZVR5cGUodmF1bHRJZGVudGlmaWVyKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGNvbnN0cnVjdCBWYXVsdCB0eXBlIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQodmF1bHRJZGVudGlmaWVyKSkKICAgICAgICAvLyBQYXJzZSB0aGUgVmF1bHQgaWRlbnRpZmllciBpbnRvIGl0cyBjb21wb25lbnRzCiAgICAgICAgbGV0IHRva2VuQ29udHJhY3RBZGRyZXNzID0gRmxvd0VWTUJyaWRnZVV0aWxzLmdldENvbnRyYWN0QWRkcmVzcyhmcm9tVHlwZTogc2VsZi52YXVsdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IGFkZHJlc3MgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdCh2YXVsdElkZW50aWZpZXIpKQogICAgICAgIGxldCB0b2tlbkNvbnRyYWN0TmFtZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdE5hbWUoZnJvbVR5cGU6IHNlbGYudmF1bHRUeXBlKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCBjb250cmFjdCBuYW1lIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQodmF1bHRJZGVudGlmaWVyKSkKCiAgICAgICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgVmF1bHQgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIEZ1bmdpYmxlVG9rZW4gVmF1bHQsIGNvbmZpZ3VyaW5nIGlmIG5lY2Vzc2FyeQogICAgICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KHRva2VuQ29udHJhY3RBZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogdG9rZW5Db250cmFjdE5hbWUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZpZXdSZXNvbHZlciBmcm9tIEZ1bmdpYmxlVG9rZW4gY29udHJhY3QiKQogICAgICAgIGxldCB2YXVsdERhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgICAgIHJlc291cmNlVHlwZTogc2VsZi52YXVsdFR5cGUsCiAgICAgICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT4oKQogICAgICAgICAgICApIGFzISBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT8gPz8gcGFuaWMoIkNvdWxkIG5vdCByZXNvbHZlIEZUVmF1bHREYXRhIHZpZXciKQogICAgICAgIC8vIElmIHRoZSB2YXVsdCBkb2VzIG5vdCBleGlzdCwgY3JlYXRlIGl0IGFuZCBwdWJsaXNoIGFjY29yZGluZyB0byB0aGUgY29udHJhY3QncyBkZWZpbmVkIGNvbmZpZ3VyYXRpb24KICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8JntGdW5naWJsZVRva2VuLlZhdWx0fT4oZnJvbTogdmF1bHREYXRhLnN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKDwtdmF1bHREYXRhLmNyZWF0ZUVtcHR5VmF1bHQoKSwgdG86IHZhdWx0RGF0YS5zdG9yYWdlUGF0aCkKCiAgICAgICAgICAgIHNpZ25lci5jYXBhYmlsaXRpZXMudW5wdWJsaXNoKHZhdWx0RGF0YS5yZWNlaXZlclBhdGgpCiAgICAgICAgICAgIHNpZ25lci5jYXBhYmlsaXRpZXMudW5wdWJsaXNoKHZhdWx0RGF0YS5tZXRhZGF0YVBhdGgpCgogICAgICAgICAgICBsZXQgcmVjZWl2ZXJDYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JntGdW5naWJsZVRva2VuLlZhdWx0fT4odmF1bHREYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgICAgICBsZXQgbWV0YWRhdGFDYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JntGdW5naWJsZVRva2VuLlZhdWx0fT4odmF1bHREYXRhLnN0b3JhZ2VQYXRoKQoKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy5wdWJsaXNoKHJlY2VpdmVyQ2FwLCBhdDogdmF1bHREYXRhLnJlY2VpdmVyUGF0aCkKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy5wdWJsaXNoKG1ldGFkYXRhQ2FwLCBhdDogdmF1bHREYXRhLm1ldGFkYXRhUGF0aCkKICAgICAgICB9CiAgICAgICAgc2VsZi5yZWNlaXZlciA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzwme0Z1bmdpYmxlVG9rZW4uVmF1bHR9Pihmcm9tOiB2YXVsdERhdGEuc3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZhdWx0IGZyb20gc3RvcmFnZSBwYXRoIikKCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGJyaWRnZSBmZWUgLSBicmlkZ2luZyBmcm9tIEVWTSBjb25zdW1lcyBubyBzdG9yYWdlLCBzbyBmbGF0IGZlZQogICAgICAgIGxldCBhcHByb3hGZWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuY2FsY3VsYXRlQnJpZGdlRmVlKGJ5dGVzOiA0MDBfMDAwKQogICAgICAgIC8vIElzc3VlIGFuZCBzdG9yZSBicmlkZ2UtZGVkaWNhdGVkIFByb3ZpZGVyIENhcGFiaWxpdHkgaW4gc3RvcmFnZSBpZiBuZWNlc3NhcnkKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS50eXBlKGF0OiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigKICAgICAgICAgICAgICAgIC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICAgICAgICkKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZShwcm92aWRlckNhcCwgdG86IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpCiAgICAgICAgfQogICAgICAgIC8vIENvcHkgdGhlIHN0b3JlZCBQcm92aWRlciBjYXBhYmlsaXR5IGFuZCBjcmVhdGUgYSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgbGV0IHByb3ZpZGVyQ2FwQ29weSA9IHNpZ25lci5zdG9yYWdlLmNvcHk8Q2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+PigKICAgICAgICAgICAgICAgIGZyb206IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiSW52YWxpZCBQcm92aWRlciBDYXBhYmlsaXR5IGZvdW5kIGluIHN0b3JhZ2UuIikKICAgICAgICBsZXQgcHJvdmlkZXJGaWx0ZXIgPSBTY29wZWRGVFByb3ZpZGVycy5BbGxvd2FuY2VGaWx0ZXIoYXBwcm94RmVlKQogICAgICAgIHNlbGYuc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgICAgICAgICBmaWx0ZXJzOiBbIHByb3ZpZGVyRmlsdGVyIF0sCiAgICAgICAgICAgICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICAgICAgICAgKQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIC8vIEV4ZWN1dGUgdGhlIGJyaWRnZSByZXF1ZXN0CiAgICAgICAgbGV0IHZhdWx0OiBAe0Z1bmdpYmxlVG9rZW4uVmF1bHR9IDwtIHNlbGYuY29hLndpdGhkcmF3VG9rZW5zKAogICAgICAgICAgICB0eXBlOiBzZWxmLnZhdWx0VHlwZSwKICAgICAgICAgICAgYW1vdW50OiBhbW91bnQsCiAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICApCiAgICAgICAgLy8gRW5zdXJlIHRoZSBicmlkZ2VkIHZhdWx0IGlzIHRoZSBjb3JyZWN0IHR5cGUKICAgICAgICBhc3NlcnQodmF1bHQuZ2V0VHlwZSgpID09IHNlbGYudmF1bHRUeXBlLCBtZXNzYWdlOiAiQnJpZGdlZCB2YXVsdCB0eXBlIG1pc21hdGNoIikKICAgICAgICAvLyBEZXBvc2l0IHRoZSBicmlkZ2VkIHRva2VuIGludG8gdGhlIHNpZ25lcidzIHZhdWx0CiAgICAgICAgc2VsZi5yZWNlaXZlci5kZXBvc2l0KGZyb206IDwtdmF1bHQpCiAgICAgICAgLy8gRGVzdHJveSB0aGUgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGRlc3Ryb3kgc2VsZi5zY29wZWRQcm92aWRlcgogICAgfQp9",
          "bridgeTokensToEvm": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgYnJpZGdlVG9rZW5zVG9Fdm0gLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHg5YTA3NjZkOTNiNjYwOGI3CgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHg3ZTYwZGYwNDJhOWMwODY4CgppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKaW1wb3J0IEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzIGZyb20gMHg5YTA3NjZkOTNiNjYwOGI3CgoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHhkZmMyMGFlZTY1MGZjYmRmCgoKaW1wb3J0IEVWTSBmcm9tIDB4OGM1MzAzZWFhMjYyMDJkNgoKCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweGRmYzIwYWVlNjUwZmNiZGYKCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHhkZmMyMGFlZTY1MGZjYmRmCgppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4ZGZjMjBhZWU2NTBmY2JkZgoKCgp0cmFuc2FjdGlvbih0b2tlbkNvbnRyYWN0QWRkcmVzczogQWRkcmVzcywgdG9rZW5Db250cmFjdE5hbWU6IFN0cmluZywgYW1vdW50OiBVRml4NjQpIHsKCiAgICBsZXQgc2VudFZhdWx0OiBAe0Z1bmdpYmxlVG9rZW4uVmF1bHR9CiAgICBsZXQgY29hOiBhdXRoKEVWTS5CcmlkZ2UpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudAogICAgbGV0IHNjb3BlZFByb3ZpZGVyOiBAU2NvcGVkRlRQcm92aWRlcnMuU2NvcGVkRlRQcm92aWRlcgoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKENvcHlWYWx1ZSwgQm9ycm93VmFsdWUsIElzc3VlU3RvcmFnZUNhcGFiaWxpdHlDb250cm9sbGVyLCBQdWJsaXNoQ2FwYWJpbGl0eSwgU2F2ZVZhbHVlKSAmQWNjb3VudCkgewogICAgICAgIC8qIC0tLSBSZWZlcmVuY2UgdGhlIHNpZ25lcidzIENhZGVuY2VPd25lZEFjY291bnQgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIHNpZ25lcidzIENPQQogICAgICAgIHNlbGYuY29hID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRVZNLkJyaWRnZSkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50Pihmcm9tOiAvc3RvcmFnZS9ldm0pCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IENPQSBmcm9tIHByb3ZpZGVkIGdhdGV3YXkgYWRkcmVzcyIpCgogICAgICAgIC8qIC0tLSBSZXRyaWV2ZSB0aGUgZnVuZHMgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIEZ1bmdpYmxlVG9rZW4gVmF1bHQKICAgICAgICBsZXQgdmlld1Jlc29sdmVyID0gZ2V0QWNjb3VudCh0b2tlbkNvbnRyYWN0QWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IHRva2VuQ29udHJhY3ROYW1lKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBWaWV3UmVzb2x2ZXIgZnJvbSBGdW5naWJsZVRva2VuIGNvbnRyYWN0IikKICAgICAgICBsZXQgdmF1bHREYXRhID0gdmlld1Jlc29sdmVyLnJlc29sdmVDb250cmFjdFZpZXcoCiAgICAgICAgICAgICAgICByZXNvdXJjZVR5cGU6IG5pbCwKICAgICAgICAgICAgICAgIHZpZXdUeXBlOiBUeXBlPEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPigpCiAgICAgICAgICAgICkgYXMhIEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgRlRWYXVsdERhdGEgdmlldyIpCiAgICAgICAgbGV0IHZhdWx0ID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlZhdWx0fT4oCiAgICAgICAgICAgICAgICBmcm9tOiB2YXVsdERhdGEuc3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGFjY2VzcyBzaWduZXIncyBGdW5naWJsZVRva2VuIFZhdWx0IikKCiAgICAgICAgLy8gV2l0aGRyYXcgdGhlIHJlcXVlc3RlZCBiYWxhbmNlICYgY2FsY3VsYXRlIHRoZSBhcHByb3hpbWF0ZSBicmlkZ2UgZmVlIGJhc2VkIG9uIHN0b3JhZ2UgdXNhZ2UKICAgICAgICBsZXQgY3VycmVudFN0b3JhZ2VVc2FnZSA9IHNpZ25lci5zdG9yYWdlLnVzZWQKICAgICAgICBzZWxmLnNlbnRWYXVsdCA8LSB2YXVsdC53aXRoZHJhdyhhbW91bnQ6IGFtb3VudCkKICAgICAgICBsZXQgd2l0aGRyYXduU3RvcmFnZVVzYWdlID0gc2lnbmVyLnN0b3JhZ2UudXNlZAogICAgICAgIC8vIEFwcHJveGltYXRlIHRoZSBicmlkZ2UgZmVlIGJhc2VkIG9uIHRoZSBkaWZmZXJlbmNlIGluIHN0b3JhZ2UgdXNhZ2Ugd2l0aCBzb21lIGJ1ZmZlcgogICAgICAgIGxldCBhcHByb3hGZWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuY2FsY3VsYXRlQnJpZGdlRmVlKAogICAgICAgICAgICAgICAgYnl0ZXM6IGN1cnJlbnRTdG9yYWdlVXNhZ2UgLSB3aXRoZHJhd25TdG9yYWdlVXNhZ2UKICAgICAgICAgICAgKSAqIDEuMTAKCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApCiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICAgIH0KICAgICAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkludmFsaWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBmb3VuZCBpbiBzdG9yYWdlLiIpCiAgICAgICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKGFwcHJveEZlZSkKICAgICAgICBzZWxmLnNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICAgICAgICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgICAgICkKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICAvLyBFeGVjdXRlIHRoZSBicmlkZ2UKICAgICAgICBzZWxmLmNvYS5kZXBvc2l0VG9rZW5zKAogICAgICAgICAgICB2YXVsdDogPC1zZWxmLnNlbnRWYXVsdCwKICAgICAgICAgICAgZmVlUHJvdmlkZXI6ICZzZWxmLnNjb3BlZFByb3ZpZGVyIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfQogICAgICAgICkKICAgICAgICAvLyBEZXN0cm95IHRoZSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgZGVzdHJveSBzZWxmLnNjb3BlZFByb3ZpZGVyCiAgICB9Cn0K",
          "bridgeTokensToEvmAddress": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgYnJpZGdlVG9rZW5zVG9Fdm1BZGRyZXNzIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4OWEwNzY2ZDkzYjY2MDhiNwoKaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4N2U2MGRmMDQyYTljMDg2OAoKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCmltcG9ydCBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cyBmcm9tIDB4OWEwNzY2ZDkzYjY2MDhiNwoKCmltcG9ydCBTY29wZWRGVFByb3ZpZGVycyBmcm9tIDB4ZGZjMjBhZWU2NTBmY2JkZgoKCmltcG9ydCBFVk0gZnJvbSAweDhjNTMwM2VhYTI2MjAyZDYKCgppbXBvcnQgRmxvd0VWTUJyaWRnZVV0aWxzIGZyb20gMHhkZmMyMGFlZTY1MGZjYmRmCgppbXBvcnQgRmxvd0VWTUJyaWRnZSBmcm9tIDB4ZGZjMjBhZWU2NTBmY2JkZgoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweGRmYzIwYWVlNjUwZmNiZGYKCgoKdHJhbnNhY3Rpb24odG9rZW5Db250cmFjdEFkZHJlc3M6IEFkZHJlc3MsIHRva2VuQ29udHJhY3ROYW1lOiBTdHJpbmcsIGFtb3VudDogVUZpeDY0LCBjb250cmFjdEVWTUFkZHJlc3M6IFN0cmluZywgZGF0YTogW1VJbnQ4XSwgZ2FzTGltaXQ6IFVJbnQ2NCkgewoKICAgIGxldCBzZW50VmF1bHQ6IEB7RnVuZ2libGVUb2tlbi5WYXVsdH0KICAgIGxldCBjb2E6IGF1dGgoRVZNLkJyaWRnZSwgRVZNLkNhbGwsIEVWTS5Pd25lcikgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50CiAgICBsZXQgc2NvcGVkUHJvdmlkZXI6IEBTY29wZWRGVFByb3ZpZGVycy5TY29wZWRGVFByb3ZpZGVyCgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQ29weVZhbHVlLCBCb3Jyb3dWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgQ2FkZW5jZU93bmVkQWNjb3VudCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3MgQ09BCiAgICAgICAgc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uQnJpZGdlLCBFVk0uQ2FsbCwgRVZNLk93bmVyKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgQ09BIGZyb20gcHJvdmlkZWQgZ2F0ZXdheSBhZGRyZXNzIikKCiAgICAgICAgLyogLS0tIFJldHJpZXZlIHRoZSBmdW5kcyAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgRnVuZ2libGVUb2tlbiBWYXVsdAogICAgICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KHRva2VuQ29udHJhY3RBZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogdG9rZW5Db250cmFjdE5hbWUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZpZXdSZXNvbHZlciBmcm9tIEZ1bmdpYmxlVG9rZW4gY29udHJhY3QiKQogICAgICAgIGxldCB2YXVsdERhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgICAgIHJlc291cmNlVHlwZTogbmlsLAogICAgICAgICAgICAgICAgdmlld1R5cGU6IFR5cGU8RnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE+KCkKICAgICAgICAgICAgKSBhcyEgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE/ID8/IHBhbmljKCJDb3VsZCBub3QgcmVzb2x2ZSBGVFZhdWx0RGF0YSB2aWV3IikKICAgICAgICBsZXQgdmF1bHQgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uVmF1bHR9PigKICAgICAgICAgICAgICAgIGZyb206IHZhdWx0RGF0YS5zdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYWNjZXNzIHNpZ25lcidzIEZ1bmdpYmxlVG9rZW4gVmF1bHQiKQoKICAgICAgICAvLyBXaXRoZHJhdyB0aGUgcmVxdWVzdGVkIGJhbGFuY2UgJiBjYWxjdWxhdGUgdGhlIGFwcHJveGltYXRlIGJyaWRnZSBmZWUgYmFzZWQgb24gc3RvcmFnZSB1c2FnZQogICAgICAgIGxldCBjdXJyZW50U3RvcmFnZVVzYWdlID0gc2lnbmVyLnN0b3JhZ2UudXNlZAogICAgICAgIHNlbGYuc2VudFZhdWx0IDwtIHZhdWx0LndpdGhkcmF3KGFtb3VudDogYW1vdW50KQogICAgICAgIGxldCB3aXRoZHJhd25TdG9yYWdlVXNhZ2UgPSBzaWduZXIuc3RvcmFnZS51c2VkCiAgICAgICAgLy8gQXBwcm94aW1hdGUgdGhlIGJyaWRnZSBmZWUgYmFzZWQgb24gdGhlIGRpZmZlcmVuY2UgaW4gc3RvcmFnZSB1c2FnZSB3aXRoIHNvbWUgYnVmZmVyCiAgICAgICAgbGV0IGFwcHJveEZlZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5jYWxjdWxhdGVCcmlkZ2VGZWUoCiAgICAgICAgICAgICAgICBieXRlczogY3VycmVudFN0b3JhZ2VVc2FnZSAtIHdpdGhkcmF3blN0b3JhZ2VVc2FnZQogICAgICAgICAgICApICogMS4xMAoKICAgICAgICAvKiAtLS0gQ29uZmlndXJlIGEgU2NvcGVkRlRQcm92aWRlciAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIElzc3VlIGFuZCBzdG9yZSBicmlkZ2UtZGVkaWNhdGVkIFByb3ZpZGVyIENhcGFiaWxpdHkgaW4gc3RvcmFnZSBpZiBuZWNlc3NhcnkKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS50eXBlKGF0OiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigKICAgICAgICAgICAgICAgIC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICAgICAgICkKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZShwcm92aWRlckNhcCwgdG86IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpCiAgICAgICAgfQogICAgICAgIC8vIENvcHkgdGhlIHN0b3JlZCBQcm92aWRlciBjYXBhYmlsaXR5IGFuZCBjcmVhdGUgYSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgbGV0IHByb3ZpZGVyQ2FwQ29weSA9IHNpZ25lci5zdG9yYWdlLmNvcHk8Q2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+PigKICAgICAgICAgICAgICAgIGZyb206IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiSW52YWxpZCBQcm92aWRlciBDYXBhYmlsaXR5IGZvdW5kIGluIHN0b3JhZ2UuIikKICAgICAgICBsZXQgcHJvdmlkZXJGaWx0ZXIgPSBTY29wZWRGVFByb3ZpZGVycy5BbGxvd2FuY2VGaWx0ZXIoYXBwcm94RmVlKQogICAgICAgIHNlbGYuc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgICAgICAgICBmaWx0ZXJzOiBbIHByb3ZpZGVyRmlsdGVyIF0sCiAgICAgICAgICAgICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICAgICAgICAgKQogICAgfQoKICAgIGV4ZWN1dGUgewoKICAgICAgICBsZXQgdmF1bHRUeXBlID0gRmxvd0VWTUJyaWRnZVV0aWxzLmJ1aWxkQ29tcG9zaXRlVHlwZSgKICAgICAgICAgICAgYWRkcmVzczogdG9rZW5Db250cmFjdEFkZHJlc3MsCiAgICAgICAgICAgIGNvbnRyYWN0TmFtZTogdG9rZW5Db250cmFjdE5hbWUsCiAgICAgICAgICAgIHJlc291cmNlTmFtZTogIlZhdWx0IgogICAgICAgICkgPz8gcGFuaWMoIkNvdWxkIG5vdCBjb25zdHJ1Y3QgVmF1bHQgdHlwZSBvZjogIiAuY29uY2F0KHRva2VuQ29udHJhY3RBZGRyZXNzLnRvU3RyaW5nKCkpLmNvbmNhdCgiLiIpLmNvbmNhdCh0b2tlbkNvbnRyYWN0TmFtZSkuY29uY2F0KCIuVmF1bHQiKSkKCiAgICAgICAgc2VsZi5jb2EuZGVwb3NpdFRva2VucygKICAgICAgICAgICAgdmF1bHQ6IDwtc2VsZi5zZW50VmF1bHQsCiAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICApCgogICAgICAgIHZhciBhZGRyZXNzQnl0ZXM6IFtVSW50OF0gPSBjb250cmFjdEVWTUFkZHJlc3MuZGVjb2RlSGV4KCkKICAgICAgICBsZXQgZXZtVG9rZW5BZGRyID0gRVZNLkVWTUFkZHJlc3MoYnl0ZXM6IFsKICAgICAgICAgICAgYWRkcmVzc0J5dGVzWzBdLCBhZGRyZXNzQnl0ZXNbMV0sIGFkZHJlc3NCeXRlc1syXSwgYWRkcmVzc0J5dGVzWzNdLAogICAgICAgICAgICBhZGRyZXNzQnl0ZXNbNF0sIGFkZHJlc3NCeXRlc1s1XSwgYWRkcmVzc0J5dGVzWzZdLCBhZGRyZXNzQnl0ZXNbN10sCiAgICAgICAgICAgIGFkZHJlc3NCeXRlc1s4XSwgYWRkcmVzc0J5dGVzWzldLCBhZGRyZXNzQnl0ZXNbMTBdLCBhZGRyZXNzQnl0ZXNbMTFdLAogICAgICAgICAgICBhZGRyZXNzQnl0ZXNbMTJdLCBhZGRyZXNzQnl0ZXNbMTNdLCBhZGRyZXNzQnl0ZXNbMTRdLCBhZGRyZXNzQnl0ZXNbMTVdLAogICAgICAgICAgICBhZGRyZXNzQnl0ZXNbMTZdLCBhZGRyZXNzQnl0ZXNbMTddLCBhZGRyZXNzQnl0ZXNbMThdLCBhZGRyZXNzQnl0ZXNbMTldCiAgICAgICAgXSkKICAgICAgICBsZXQgdmFsdWVCYWxhbmNlID0gRVZNLkJhbGFuY2UoYXR0b2Zsb3c6IDApCiAgICAgICAgLy8gbGV0IGRhdGEgPSBkYXRhU3RyLmRlY29kZUhleCgpCiAgICAgICAgIGxldCB0eFJlc3VsdCA9IHNlbGYuY29hLmNhbGwoCiAgICAgICAgICAgIHRvOiBldm1Ub2tlbkFkZHIsCiAgICAgICAgICAgIGRhdGE6IGRhdGEsCiAgICAgICAgICAgIGdhc0xpbWl0OiBnYXNMaW1pdCwKICAgICAgICAgICAgdmFsdWU6IHZhbHVlQmFsYW5jZQogICAgICAgICkKCiAgICAgICAgYXNzZXJ0KAogICAgICAgICAgICB0eFJlc3VsdC5zdGF0dXMgPT0gRVZNLlN0YXR1cy5mYWlsZWQgfHwgdHhSZXN1bHQuc3RhdHVzID09IEVWTS5TdGF0dXMuc3VjY2Vzc2Z1bCwKICAgICAgICAgICAgbWVzc2FnZTogImV2bV9lcnJvcj0iLmNvbmNhdCh0eFJlc3VsdC5lcnJvck1lc3NhZ2UpLmNvbmNhdCgiXG4iKQogICAgICAgICkKICAgICAgICAvLyBEZXN0cm95IHRoZSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgZGVzdHJveSBzZWxmLnNjb3BlZFByb3ZpZGVyCiAgICB9Cn0K",
          "bridgeTokensToEvmAddressV2": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgYnJpZGdlVG9rZW5zVG9Fdm1BZGRyZXNzVjIgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHg5YTA3NjZkOTNiNjYwOGI3CgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHg3ZTYwZGYwNDJhOWMwODY4CgppbXBvcnQgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MgZnJvbSAweDlhMDc2NmQ5M2I2NjA4YjcKCgppbXBvcnQgU2NvcGVkRlRQcm92aWRlcnMgZnJvbSAweGRmYzIwYWVlNjUwZmNiZGYKCgppbXBvcnQgRVZNIGZyb20gMHg4YzUzMDNlYWEyNjIwMmQ2CgoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VVdGlscyBmcm9tIDB4ZGZjMjBhZWU2NTBmY2JkZgoKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweGRmYzIwYWVlNjUwZmNiZGYKCmltcG9ydCBGbG93RVZNQnJpZGdlQ29uZmlnIGZyb20gMHhkZmMyMGFlZTY1MGZjYmRmCgoKCnRyYW5zYWN0aW9uKHZhdWx0SWRlbnRpZmllcjogU3RyaW5nLCBhbW91bnQ6IFVGaXg2NCwgcmVjaXBpZW50OiBTdHJpbmcpIHsKICAgIGxldCBzZW50VmF1bHQ6IEB7RnVuZ2libGVUb2tlbi5WYXVsdH0KICAgIGxldCByZXF1aXJlc09uYm9hcmRpbmc6IEJvb2wKICAgIGxldCBzY29wZWRQcm92aWRlcjogQFNjb3BlZEZUUHJvdmlkZXJzLlNjb3BlZEZUUHJvdmlkZXIKCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChDb3B5VmFsdWUsIEJvcnJvd1ZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICAvKiAtLS0gQ29uc3RydWN0IHRoZSBWYXVsdCB0eXBlIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQ29uc3RydWN0IHRoZSBWYXVsdCB0eXBlIGZyb20gdGhlIHByb3ZpZGVkIGlkZW50aWZpZXIKICAgICAgICBsZXQgdmF1bHRUeXBlID0gQ29tcG9zaXRlVHlwZSh2YXVsdElkZW50aWZpZXIpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgY29uc3RydWN0IFZhdWx0IHR5cGUgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdCh2YXVsdElkZW50aWZpZXIpKQogICAgICAgIC8vIFBhcnNlIHRoZSBWYXVsdCBpZGVudGlmaWVyIGludG8gaXRzIGNvbXBvbmVudHMKICAgICAgICBsZXQgdG9rZW5Db250cmFjdEFkZHJlc3MgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3RBZGRyZXNzKGZyb21UeXBlOiB2YXVsdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IGFkZHJlc3MgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdCh2YXVsdElkZW50aWZpZXIpKQogICAgICAgIGxldCB0b2tlbkNvbnRyYWN0TmFtZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdE5hbWUoZnJvbVR5cGU6IHZhdWx0VHlwZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgbmFtZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KHZhdWx0SWRlbnRpZmllcikpCiAgICAgICAgCiAgICAgICAgLyogLS0tIFJldHJpZXZlIHRoZSBmdW5kcyAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgRnVuZ2libGVUb2tlbiBWYXVsdAogICAgICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KHRva2VuQ29udHJhY3RBZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogdG9rZW5Db250cmFjdE5hbWUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZpZXdSZXNvbHZlciBmcm9tIEZ1bmdpYmxlVG9rZW4gY29udHJhY3QiKQogICAgICAgIGxldCB2YXVsdERhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgICAgIHJlc291cmNlVHlwZTogbmlsLAogICAgICAgICAgICAgICAgdmlld1R5cGU6IFR5cGU8RnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE+KCkKICAgICAgICAgICAgKSBhcyEgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE/ID8/IHBhbmljKCJDb3VsZCBub3QgcmVzb2x2ZSBGVFZhdWx0RGF0YSB2aWV3IikKICAgICAgICBsZXQgdmF1bHQgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uVmF1bHR9PigKICAgICAgICAgICAgICAgIGZyb206IHZhdWx0RGF0YS5zdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYWNjZXNzIHNpZ25lcidzIEZ1bmdpYmxlVG9rZW4gVmF1bHQiKQoKICAgICAgICAvLyBXaXRoZHJhdyB0aGUgcmVxdWVzdGVkIGJhbGFuY2UgJiBjYWxjdWxhdGUgdGhlIGFwcHJveGltYXRlIGJyaWRnZSBmZWUgYmFzZWQgb24gc3RvcmFnZSB1c2FnZQogICAgICAgIGxldCBjdXJyZW50U3RvcmFnZVVzYWdlID0gc2lnbmVyLnN0b3JhZ2UudXNlZAogICAgICAgIHNlbGYuc2VudFZhdWx0IDwtIHZhdWx0LndpdGhkcmF3KGFtb3VudDogYW1vdW50KQogICAgICAgIGxldCB3aXRoZHJhd25TdG9yYWdlVXNhZ2UgPSBzaWduZXIuc3RvcmFnZS51c2VkCiAgICAgICAgLy8gQXBwcm94aW1hdGUgdGhlIGJyaWRnZSBmZWUgYmFzZWQgb24gdGhlIGRpZmZlcmVuY2UgaW4gc3RvcmFnZSB1c2FnZSB3aXRoIHNvbWUgYnVmZmVyCiAgICAgICAgdmFyIGFwcHJveEZlZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5jYWxjdWxhdGVCcmlkZ2VGZWUoCiAgICAgICAgICAgICAgICBieXRlczogY3VycmVudFN0b3JhZ2VVc2FnZSAtIHdpdGhkcmF3blN0b3JhZ2VVc2FnZQogICAgICAgICAgICApICogMS4xMAogICAgICAgIC8vIERldGVybWluZSBpZiB0aGUgVmF1bHQgcmVxdWlyZXMgb25ib2FyZGluZyAtIHRoaXMgaW1wYWN0cyB0aGUgZmVlIHJlcXVpcmVkCiAgICAgICAgc2VsZi5yZXF1aXJlc09uYm9hcmRpbmcgPSBGbG93RVZNQnJpZGdlLnR5cGVSZXF1aXJlc09uYm9hcmRpbmcoc2VsZi5zZW50VmF1bHQuZ2V0VHlwZSgpKQogICAgICAgICAgICA/PyBwYW5pYygiQnJpZGdlIGRvZXMgbm90IHN1cHBvcnQgdGhpcyBhc3NldCB0eXBlIikKICAgICAgICBpZiBzZWxmLnJlcXVpcmVzT25ib2FyZGluZyB7CiAgICAgICAgICAgIGFwcHJveEZlZSA9IGFwcHJveEZlZSArIEZsb3dFVk1CcmlkZ2VDb25maWcub25ib2FyZEZlZQogICAgICAgIH0KCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApCiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICAgIH0KICAgICAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkludmFsaWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBmb3VuZCBpbiBzdG9yYWdlLiIpCiAgICAgICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKGFwcHJveEZlZSkKICAgICAgICBzZWxmLnNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICAgICAgICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgICAgICkKICAgIH0KCiAgICBwcmUgewogICAgICAgIHNlbGYuc2VudFZhdWx0LmdldFR5cGUoKS5pZGVudGlmaWVyID09IHZhdWx0SWRlbnRpZmllcjoKICAgICAgICAgICAgIkF0dGVtcHRpbmcgdG8gc2VuZCBpbnZhbGlkIHZhdWx0IHR5cGUgLSByZXF1ZXN0ZWQ6ICIuY29uY2F0KHZhdWx0SWRlbnRpZmllcikKICAgICAgICAgICAgLmNvbmNhdCgiLCBzZW5kaW5nOiAiKS5jb25jYXQoc2VsZi5zZW50VmF1bHQuZ2V0VHlwZSgpLmlkZW50aWZpZXIpCiAgICAgICAgc2VsZi5zZW50VmF1bHQuYmFsYW5jZSA9PSBhbW91bnQ6ICJBbW91bnQgdG8gYmUgdHJhbnNmZXJyZWQgZG9lcyBub3QgbWF0Y2ggdGhlIHJlcXVlc3RlZCBhbW91bnQiCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgaWYgc2VsZi5yZXF1aXJlc09uYm9hcmRpbmcgewogICAgICAgICAgICAvLyBPbmJvYXJkIHRoZSBWYXVsdCB0byB0aGUgYnJpZGdlCiAgICAgICAgICAgIEZsb3dFVk1CcmlkZ2Uub25ib2FyZEJ5VHlwZSgKICAgICAgICAgICAgICAgIHNlbGYuc2VudFZhdWx0LmdldFR5cGUoKSwKICAgICAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICAgICAgKQogICAgICAgIH0KICAgICAgICAvLyBFeGVjdXRlIHRoZSBicmlkZ2UgdHJhbnNhY3Rpb24KICAgICAgICBsZXQgcmVjaXBpZW50RVZNQWRkcmVzcyA9IEVWTS5hZGRyZXNzRnJvbVN0cmluZyhyZWNpcGllbnQpCiAgICAgICAgRmxvd0VWTUJyaWRnZS5icmlkZ2VUb2tlbnNUb0VWTSgKICAgICAgICAgICAgdmF1bHQ6IDwtc2VsZi5zZW50VmF1bHQsCiAgICAgICAgICAgIHRvOiByZWNpcGllbnRFVk1BZGRyZXNzLAogICAgICAgICAgICBmZWVQcm92aWRlcjogJnNlbGYuc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgKQogICAgICAgIC8vIERlc3Ryb3kgdGhlIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBkZXN0cm95IHNlbGYuc2NvcGVkUHJvdmlkZXIKICAgIH0KfQ==",
          "bridgeTokensToEvmV2": "",
          "calculateBridgeFee": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgY2FsY3VsYXRlQnJpZGdlRmVlIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRmxvd0VWTUJyaWRnZVV0aWxzIGZyb20gMHhkZmMyMGFlZTY1MGZjYmRmCgoKLy8vIFJldHVybnMgdGhlIGNhbGN1bGF0ZWQgZmVlIGJhc2VkIG9uIHRoZSBudW1iZXIgb2YgYnl0ZXMgdXNlZCB0byBlc2Nyb3cgYW4gYXNzZXQgcGx1cyB0aGUgYmFzZSBmZWUuCi8vLwovLy8gQHBhcmFtIGJ5dGVzOiBUaGUgbnVtYmVyIG9mIGJ5dGVzIHVzZWQgdG8gZXNjcm93IGFuIGFzc2V0LgovLy8KLy8vIEByZXR1cm4gVGhlIGNhbGN1bGF0ZWQgZmVlIHRvIGJlIHBhaWQgaW4gRmxvd1Rva2VuCi8vLwphY2Nlc3MoYWxsKQpmdW4gbWFpbihieXRlcyB1c2VkOiBVSW50NjQpOiBVRml4NjQgewogICAgcmV0dXJuIEZsb3dFVk1CcmlkZ2VVdGlscy5jYWxjdWxhdGVCcmlkZ2VGZWUoYnl0ZXM6IHVzZWQpCn0K",
          "evmAddressRequiresOnboarding": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZXZtQWRkcmVzc1JlcXVpcmVzT25ib2FyZGluZyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEVWTVV0aWxzIGZyb20gMHhkZmMyMGFlZTY1MGZjYmRmCgppbXBvcnQgRmxvd0VWTUJyaWRnZSBmcm9tIDB4ZGZjMjBhZWU2NTBmY2JkZgoKCi8vLyBSZXR1cm5zIHdoZXRoZXIgYSBFVk0gY29udHJhY3QgbmVlZHMgdG8gYmUgb25ib2FyZGVkIHRvIHRoZSBGbG93RVZNQnJpZGdlCi8vLwovLy8gQHBhcmFtIGV2bUFkZHJlc3NIZXg6IFRoZSBoZXgtZW5jb2RlZCBhZGRyZXNzIG9mIHRoZSBFVk0gY29udHJhY3QgYXMgYSBTdHJpbmcgd2l0aG91dCAweCBwcmVmaXgKLy8vCi8vLyBAcmV0dXJuIFdoZXRoZXIgdGhlIGNvbnRyYWN0IHJlcXVpcmVzIG9uYm9hcmRpbmcgdG8gdGhlIEZsb3dFVk1CcmlkZ2UgaWYgdGhlIHR5cGUgaXMgYnJpZGdlYWJsZSwgb3RoZXJ3aXNlIG5pbAovLy8KYWNjZXNzKGFsbCkgZnVuIG1haW4oZXZtQWRkcmVzc0hleDogU3RyaW5nKTogQm9vbD8gewogICAgaWYgbGV0IGFkZHJlc3MgPSBFVk1VdGlscy5nZXRFVk1BZGRyZXNzRnJvbUhleFN0cmluZyhhZGRyZXNzOiBldm1BZGRyZXNzSGV4KSB7CiAgICAgICAgcmV0dXJuIEZsb3dFVk1CcmlkZ2UuZXZtQWRkcmVzc1JlcXVpcmVzT25ib2FyZGluZyhhZGRyZXNzKQogICAgfQogICAgcmV0dXJuIG5pbAp9Cg==",
          "getAssociatedEvmAddress": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0QXNzb2NpYXRlZEV2bUFkZHJlc3MgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBFVk0gZnJvbSAweDhjNTMwM2VhYTI2MjAyZDYKCgppbXBvcnQgRVZNVXRpbHMgZnJvbSAweGRmYzIwYWVlNjUwZmNiZGYKCmltcG9ydCBGbG93RVZNQnJpZGdlQ29uZmlnIGZyb20gMHhkZmMyMGFlZTY1MGZjYmRmCgoKLy8vIFJldHVybnMgdGhlIEVWTSBhZGRyZXNzIGFzc29jaWF0ZWQgd2l0aCB0aGUgZ2l2ZW4gQ2FkZW5jZSB0eXBlIChhcyBpdHMgaWRlbnRpZmllciBTdHJpbmcpCi8vLwovLy8gQHBhcmFtIHR5cGVJZGVudGlmaWVyIFRoZSBDYWRlbmNlIHR5cGUgaWRlbnRpZmllciBTdHJpbmcKLy8vCi8vLyBAcmV0dXJuIFRoZSBFVk0gYWRkcmVzcyBhcyBhIGhleCBzdHJpbmcgaWYgdGhlIHR5cGUgaGFzIGFuIGFzc29jaWF0ZWQgRVZNQWRkcmVzcywgb3RoZXJ3aXNlIG5pbAovLy8KYWNjZXNzKGFsbCkKZnVuIG1haW4oaWRlbnRpZmllcjogU3RyaW5nKTogU3RyaW5nPyB7CiAgICBpZiBsZXQgdHlwZSA9IENvbXBvc2l0ZVR5cGUoaWRlbnRpZmllcikgewogICAgICAgIGlmIGxldCBhZGRyZXNzID0gRmxvd0VWTUJyaWRnZUNvbmZpZy5nZXRFVk1BZGRyZXNzQXNzb2NpYXRlZCh3aXRoOiB0eXBlKSB7CiAgICAgICAgICAgIHJldHVybiBFVk1VdGlscy5nZXRFVk1BZGRyZXNzQXNIZXhTdHJpbmcoYWRkcmVzczogYWRkcmVzcykKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gbmlsCn0=",
          "getAssociatedFlowIdentifier": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0QXNzb2NpYXRlZEZsb3dJZGVudGlmaWVyIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRVZNIGZyb20gMHg4YzUzMDNlYWEyNjIwMmQ2CgppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4ZGZjMjBhZWU2NTBmY2JkZgoKCmFjY2VzcyhhbGwpCmZ1biBtYWluKGFkZHJlc3M6IFN0cmluZyk6IFN0cmluZz8gewogICAgaWYgbGV0IHR5cGVJbmZvID0gRmxvd0VWTUJyaWRnZUNvbmZpZy5nZXRUeXBlQXNzb2NpYXRlZCh3aXRoOiBFVk0uYWRkcmVzc0Zyb21TdHJpbmcoYWRkcmVzcykpIHsKICAgICAgICByZXR1cm4gdHlwZUluZm8uaWRlbnRpZmllcgogICAgfQogICAgcmV0dXJuIG5pbAp9",
          "getBridgeCoaAddress": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0QnJpZGdlQ29hQWRkcmVzcyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEVWTSBmcm9tIDB4OGM1MzAzZWFhMjYyMDJkNgoKCmltcG9ydCBFVk1VdGlscyBmcm9tIDB4ZGZjMjBhZWU2NTBmY2JkZgoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweGRmYzIwYWVlNjUwZmNiZGYKCgovLy8gUmV0dXJucyB0aGUgRVZNIGFkZHJlc3MgYXNzb2NpYXRlZCB3aXRoIHRoZSBGbG93RVZNQnJpZGdlCi8vLwovLy8gQHJldHVybiBUaGUgRVZNIGFkZHJlc3MgYXNzb2NpYXRlZCB3aXRoIHRoZSBGbG93RVZNQnJpZGdlJ3MgY29vcmRpbmF0aW5nIENhZGVuY2VPd25lZEFjY291bnQKLy8vCmFjY2VzcyhhbGwpIGZ1biBtYWluKCk6IFN0cmluZyB7CiAgICBsZXQgYWRkcmVzczogRVZNLkVWTUFkZHJlc3MgPSBGbG93RVZNQnJpZGdlLmdldEJyaWRnZUNPQUVWTUFkZHJlc3MoKQogICAgcmV0dXJuIEVWTVV0aWxzLmdldEVWTUFkZHJlc3NBc0hleFN0cmluZyhhZGRyZXNzOiBhZGRyZXNzKQp9",
          "onboardByEvmAddress": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgb25ib2FyZEJ5RXZtQWRkcmVzcyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweDlhMDc2NmQ5M2I2NjA4YjcKCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweDdlNjBkZjA0MmE5YzA4NjgKCgppbXBvcnQgU2NvcGVkRlRQcm92aWRlcnMgZnJvbSAweGRmYzIwYWVlNjUwZmNiZGYKCgppbXBvcnQgRVZNIGZyb20gMHg4YzUzMDNlYWEyNjIwMmQ2CgoKaW1wb3J0IEVWTVV0aWxzIGZyb20gMHhkZmMyMGFlZTY1MGZjYmRmCgppbXBvcnQgRmxvd0VWTUJyaWRnZSBmcm9tIDB4ZGZjMjBhZWU2NTBmY2JkZgoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweGRmYzIwYWVlNjUwZmNiZGYKCgovLy8gVGhpcyB0cmFuc2FjdGlvbiBvbmJvYXJkcyB0aGUgTkZUIHR5cGUgdG8gdGhlIGJyaWRnZSwgY29uZmlndXJpbmcgdGhlIGJyaWRnZSB0byBtb3ZlIE5GVHMgYmV0d2VlbiBlbnZpcm9ubWVudHMKLy8vIE5PVEU6IFRoaXMgbXVzdCBiZSBkb25lIGJlZm9yZSBicmlkZ2luZyBhIENhZGVuY2UtbmF0aXZlIE5GVCB0byBFVk0KLy8vCi8vLyBAcGFyYW0gY29udHJhY3RBZGRyZXNzSGV4OiBUaGUgRVZNIGFkZHJlc3Mgb2YgdGhlIGNvbnRyYWN0IChhcyBoZXggc3RyaW5nIHdpdGhvdXQgMHggcHJlZml4KSBkZWZpbmluZyB0aGUgCi8vLyAgICAgYnJpZGdlYWJsZSBhc3NldCB0byBiZSBvbmJvYXJkZWQKLy8vCnRyYW5zYWN0aW9uKGNvbnRyYWN0QWRkcmVzc0hleDogU3RyaW5nKSB7CgogICAgbGV0IGNvbnRyYWN0QWRkcmVzczogRVZNLkVWTUFkZHJlc3MKICAgIGxldCBzY29wZWRQcm92aWRlcjogQFNjb3BlZEZUUHJvdmlkZXJzLlNjb3BlZEZUUHJvdmlkZXIKICAgIAogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQ29weVZhbHVlLCBCb3Jyb3dWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgLyogLS0tIENvbnN0cnVjdCBFVk1BZGRyZXNzIGZyb20gaGV4IHN0cmluZyAobm8gbGVhZGluZyBgIjB4ImApIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgc2VsZi5jb250cmFjdEFkZHJlc3MgPSBFVk1VdGlscy5nZXRFVk1BZGRyZXNzRnJvbUhleFN0cmluZyhhZGRyZXNzOiBjb250cmFjdEFkZHJlc3NIZXgpCiAgICAgICAgICAgID8/IHBhbmljKCJJbnZhbGlkIEVWTSBhZGRyZXNzIHN0cmluZyBwcm92aWRlZCIpCgogICAgICAgIC8qIC0tLSBDb25maWd1cmUgYSBTY29wZWRGVFByb3ZpZGVyIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gSXNzdWUgYW5kIHN0b3JlIGJyaWRnZS1kZWRpY2F0ZWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBpbiBzdG9yYWdlIGlmIG5lY2Vzc2FyeQogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLnR5cGUoYXQ6IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIGxldCBwcm92aWRlckNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KAogICAgICAgICAgICAgICAgL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgICAgICAgKQogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKHByb3ZpZGVyQ2FwLCB0bzogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkKICAgICAgICB9CiAgICAgICAgLy8gQ29weSB0aGUgc3RvcmVkIFByb3ZpZGVyIGNhcGFiaWxpdHkgYW5kIGNyZWF0ZSBhIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBsZXQgcHJvdmlkZXJDYXBDb3B5ID0gc2lnbmVyLnN0b3JhZ2UuY29weTxDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4+KAogICAgICAgICAgICAgICAgZnJvbTogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJJbnZhbGlkIFByb3ZpZGVyIENhcGFiaWxpdHkgZm91bmQgaW4gc3RvcmFnZS4iKQogICAgICAgIGxldCBwcm92aWRlckZpbHRlciA9IFNjb3BlZEZUUHJvdmlkZXJzLkFsbG93YW5jZUZpbHRlcihGbG93RVZNQnJpZGdlQ29uZmlnLm9uYm9hcmRGZWUpCiAgICAgICAgc2VsZi5zY29wZWRQcm92aWRlciA8LSBTY29wZWRGVFByb3ZpZGVycy5jcmVhdGVTY29wZWRGVFByb3ZpZGVyKAogICAgICAgICAgICAgICAgcHJvdmlkZXI6IHByb3ZpZGVyQ2FwQ29weSwKICAgICAgICAgICAgICAgIGZpbHRlcnM6IFsgcHJvdmlkZXJGaWx0ZXIgXSwKICAgICAgICAgICAgICAgIGV4cGlyYXRpb246IGdldEN1cnJlbnRCbG9jaygpLnRpbWVzdGFtcCArIDEuMAogICAgICAgICAgICApCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgLy8gT25ib2FyZCB0aGUgRVZNIGNvbnRyYWN0CiAgICAgICAgRmxvd0VWTUJyaWRnZS5vbmJvYXJkQnlFVk1BZGRyZXNzKAogICAgICAgICAgICBzZWxmLmNvbnRyYWN0QWRkcmVzcywKICAgICAgICAgICAgZmVlUHJvdmlkZXI6ICZzZWxmLnNjb3BlZFByb3ZpZGVyIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfQogICAgICAgICkKICAgICAgICBkZXN0cm95IHNlbGYuc2NvcGVkUHJvdmlkZXIKICAgIH0KfQo=",
          "onboardByType": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgb25ib2FyZEJ5VHlwZSAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweDlhMDc2NmQ5M2I2NjA4YjcKCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweDdlNjBkZjA0MmE5YzA4NjgKCgppbXBvcnQgU2NvcGVkRlRQcm92aWRlcnMgZnJvbSAweGRmYzIwYWVlNjUwZmNiZGYKCgppbXBvcnQgRVZNIGZyb20gMHg4YzUzMDNlYWEyNjIwMmQ2CgoKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweGRmYzIwYWVlNjUwZmNiZGYKCmltcG9ydCBGbG93RVZNQnJpZGdlQ29uZmlnIGZyb20gMHhkZmMyMGFlZTY1MGZjYmRmCgoKLy8vIFRoaXMgdHJhbnNhY3Rpb24gb25ib2FyZHMgdGhlIGFzc2V0IHR5cGUgdG8gdGhlIGJyaWRnZSwgY29uZmlndXJpbmcgdGhlIGJyaWRnZSB0byBtb3ZlIGFzc2V0cyBiZXR3ZWVuIGVudmlyb25tZW50cwovLy8gTk9URTogVGhpcyBtdXN0IGJlIGRvbmUgYmVmb3JlIGJyaWRnaW5nIGEgQ2FkZW5jZS1uYXRpdmUgYXNzZXQgdG8gRVZNCi8vLwovLy8gQHBhcmFtIHR5cGU6IFRoZSBDYWRlbmNlIHR5cGUgb2YgdGhlIGJyaWRnZWFibGUgYXNzZXQgdG8gb25ib2FyZCB0byB0aGUgYnJpZGdlCi8vLwp0cmFuc2FjdGlvbih0eXBlOiBUeXBlKSB7CgogICAgbGV0IHNjb3BlZFByb3ZpZGVyOiBAU2NvcGVkRlRQcm92aWRlcnMuU2NvcGVkRlRQcm92aWRlcgogICAgCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChDb3B5VmFsdWUsIEJvcnJvd1ZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsKCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApCiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICAgIH0KICAgICAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkludmFsaWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBmb3VuZCBpbiBzdG9yYWdlLiIpCiAgICAgICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKEZsb3dFVk1CcmlkZ2VDb25maWcub25ib2FyZEZlZSkKICAgICAgICBzZWxmLnNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICAgICAgICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgICAgICkKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICAvLyBPbmJvYXJkIHRoZSBhc3NldCBUeXBlCiAgICAgICAgRmxvd0VWTUJyaWRnZS5vbmJvYXJkQnlUeXBlKAogICAgICAgICAgICB0eXBlLAogICAgICAgICAgICBmZWVQcm92aWRlcjogJnNlbGYuc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgKQogICAgICAgIGRlc3Ryb3kgc2VsZi5zY29wZWRQcm92aWRlcgogICAgfQp9Cg==",
          "onboardByTypeIdentifier": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgb25ib2FyZEJ5VHlwZUlkZW50aWZpZXIgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHg5YTA3NjZkOTNiNjYwOGI3CgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHg3ZTYwZGYwNDJhOWMwODY4CgoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHhkZmMyMGFlZTY1MGZjYmRmCgoKaW1wb3J0IEVWTSBmcm9tIDB4OGM1MzAzZWFhMjYyMDJkNgoKCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHhkZmMyMGFlZTY1MGZjYmRmCgppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4ZGZjMjBhZWU2NTBmY2JkZgoKCi8vLyBUaGlzIHRyYW5zYWN0aW9uIG9uYm9hcmRzIHRoZSBhc3NldCB0eXBlIHRvIHRoZSBicmlkZ2UsIGNvbmZpZ3VyaW5nIHRoZSBicmlkZ2UgdG8gbW92ZSBhc3NldHMgYmV0d2VlbiBlbnZpcm9ubWVudHMKLy8vIE5PVEU6IFRoaXMgbXVzdCBiZSBkb25lIGJlZm9yZSBicmlkZ2luZyBhIENhZGVuY2UtbmF0aXZlIGFzc2V0IHRvIEVWTQovLy8KLy8vIEBwYXJhbSBpZGVudGlmZXI6IFRoZSBDYWRlbmNlIHR5cGUgaWRlbnRpZmllciBvZiB0aGUgYnJpZGdlYWJsZSBhc3NldCB0byBvbmJvYXJkZWQgdG8gdGhlIGJyaWRnZQovLy8KdHJhbnNhY3Rpb24oaWRlbnRpZmllcjogU3RyaW5nKSB7CgogICAgbGV0IHR5cGU6IFR5cGUKICAgIGxldCBzY29wZWRQcm92aWRlcjogQFNjb3BlZEZUUHJvdmlkZXJzLlNjb3BlZEZUUHJvdmlkZXIKICAgIAogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQ29weVZhbHVlLCBCb3Jyb3dWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgLyogLS0tIENvbnN0cnVjdCB0aGUgdHlwZSBmcm9tIGlkZW50aWZpZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICBzZWxmLnR5cGUgPSBDb21wb3NpdGVUeXBlKGlkZW50aWZpZXIpID8/IHBhbmljKCJJbnZhbGlkIHR5cGUgaWRlbnRpZmllciIpCgogICAgICAgIC8qIC0tLSBDb25maWd1cmUgYSBTY29wZWRGVFByb3ZpZGVyIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gSXNzdWUgYW5kIHN0b3JlIGJyaWRnZS1kZWRpY2F0ZWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBpbiBzdG9yYWdlIGlmIG5lY2Vzc2FyeQogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLnR5cGUoYXQ6IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIGxldCBwcm92aWRlckNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KAogICAgICAgICAgICAgICAgL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgICAgICAgKQogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKHByb3ZpZGVyQ2FwLCB0bzogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkKICAgICAgICB9CiAgICAgICAgLy8gQ29weSB0aGUgc3RvcmVkIFByb3ZpZGVyIGNhcGFiaWxpdHkgYW5kIGNyZWF0ZSBhIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBsZXQgcHJvdmlkZXJDYXBDb3B5ID0gc2lnbmVyLnN0b3JhZ2UuY29weTxDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4+KAogICAgICAgICAgICAgICAgZnJvbTogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJJbnZhbGlkIFByb3ZpZGVyIENhcGFiaWxpdHkgZm91bmQgaW4gc3RvcmFnZS4iKQogICAgICAgIGxldCBwcm92aWRlckZpbHRlciA9IFNjb3BlZEZUUHJvdmlkZXJzLkFsbG93YW5jZUZpbHRlcihGbG93RVZNQnJpZGdlQ29uZmlnLm9uYm9hcmRGZWUpCiAgICAgICAgc2VsZi5zY29wZWRQcm92aWRlciA8LSBTY29wZWRGVFByb3ZpZGVycy5jcmVhdGVTY29wZWRGVFByb3ZpZGVyKAogICAgICAgICAgICAgICAgcHJvdmlkZXI6IHByb3ZpZGVyQ2FwQ29weSwKICAgICAgICAgICAgICAgIGZpbHRlcnM6IFsgcHJvdmlkZXJGaWx0ZXIgXSwKICAgICAgICAgICAgICAgIGV4cGlyYXRpb246IGdldEN1cnJlbnRCbG9jaygpLnRpbWVzdGFtcCArIDEuMAogICAgICAgICAgICApCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgLy8gT25ib2FyZCB0aGUgYXNzZXQgVHlwZQogICAgICAgIEZsb3dFVk1CcmlkZ2Uub25ib2FyZEJ5VHlwZSgKICAgICAgICAgICAgc2VsZi50eXBlLAogICAgICAgICAgICBmZWVQcm92aWRlcjogJnNlbGYuc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgKQogICAgICAgIGRlc3Ryb3kgc2VsZi5zY29wZWRQcm92aWRlcgogICAgfQp9Cg==",
          "typeRequiresOnboarding": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgdHlwZVJlcXVpcmVzT25ib2FyZGluZyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweGRmYzIwYWVlNjUwZmNiZGYKCgovLy8gUmV0dXJucyB3aGV0aGVyIGEgdHlwZSBuZWVkcyB0byBiZSBvbmJvYXJkZWQgdG8gdGhlIEZsb3dFVk1CcmlkZ2UKLy8vCi8vLyBAcGFyYW0gdHlwZTogVGhlIENhZGVuY2UgVHlwZSBpbiBxdWVzdGlvbgovLy8KLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHlwZSByZXF1aXJlcyBvbmJvYXJkaW5nIHRvIHRoZSBGbG93RVZNQnJpZGdlIGlmIHRoZSB0eXBlIGlzIGJyaWRnZWFibGUsIG90aGVyd2lzZSBuaWwKLy8vCmFjY2VzcyhhbGwpIGZ1biBtYWluKHR5cGU6IFR5cGUpOiBCb29sPyB7CiAgICByZXR1cm4gRmxvd0VWTUJyaWRnZS50eXBlUmVxdWlyZXNPbmJvYXJkaW5nKHR5cGUpCn0K",
          "typeRequiresOnboardingByIdentifier": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgdHlwZVJlcXVpcmVzT25ib2FyZGluZ0J5SWRlbnRpZmllciAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweGRmYzIwYWVlNjUwZmNiZGYKCgovLy8gUmV0dXJucyB3aGV0aGVyIGEgdHlwZSBuZWVkcyB0byBiZSBvbmJvYXJkZWQgdG8gdGhlIEZsb3dFVk1CcmlkZ2UKLy8vCi8vLyBAcGFyYW0gaWRlbnRpZmllcjogVGhlIGlkZW50aWZpZXIgb2YgdGhlIENhZGVuY2UgVHlwZSBpbiBxdWVzdGlvbgovLy8KLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHlwZSByZXF1aXJlcyBvbmJvYXJkaW5nIHRvIHRoZSBGbG93RVZNQnJpZGdlIGlmIHRoZSB0eXBlIGlzIGJyaWRnZWFibGUsIG90aGVyd2lzZSBuaWwKLy8vCmFjY2VzcyhhbGwpIGZ1biBtYWluKGlkZW50aWZpZXI6IFN0cmluZyk6IEJvb2w/IHsKICAgIGlmIGxldCB0eXBlID0gQ29tcG9zaXRlVHlwZShpZGVudGlmaWVyKSB7CiAgICAgICAgcmV0dXJuIEZsb3dFVk1CcmlkZ2UudHlwZVJlcXVpcmVzT25ib2FyZGluZyh0eXBlKQogICAgfQogICAgcmV0dXJuIG5pbAp9Cg=="
        },
        "collection": {
          "checkNFTCollection": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgY2hlY2tORlRDb2xsZWN0aW9uIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgogICAgaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCiAgICBpbXBvcnQgPE5GVD4gZnJvbSA8TkZUQWRkcmVzcz4KCiAgICAvLyBUaGlzIHRyYW5zYWN0aW9uIGlzIGZvciB0cmFuc2ZlcnJpbmcgYW5kIE5GVCBmcm9tCiAgICAvLyBvbmUgYWNjb3VudCB0byBhbm90aGVyCgogICAgYWNjZXNzKGFsbCkgZnVuIGNoZWNrPFRva2VuPlZhdWx0KGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgICAgICAgbGV0IHZhdWx0UmVmID0gYWNjb3VudC5jYXBhYmlsaXRpZXMuZXhpc3QoPFRva2VuQ29sbGVjdGlvblB1YmxpY1BhdGg+KQogICAgICAgIHJldHVybiB2YXVsdFJlZgogICAgfQoKICAgIGFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgICAgcmV0dXJuIGNoZWNrPFRva2VuPlZhdWx0KGFkZHJlc3M6IGFkZHJlc3MpCiAgICB9",
          "enableNFTStorage": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZW5hYmxlTkZUU3RvcmFnZSAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgppbXBvcnQgPE5GVD4gZnJvbSA8TkZUQWRkcmVzcz4KCnRyYW5zYWN0aW9uIHsKCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChDYXBhYmlsaXRpZXMsIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICBpZiBzaWduZXIuY2FwYWJpbGl0aWVzLmJvcnJvdzwmPE5GVD4uQ29sbGVjdGlvbj4oPENvbGxlY3Rpb25QdWJsaWNQYXRoPikgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IGNvbGxlY3Rpb24gPC0gPE5GVD4uY3JlYXRlRW1wdHlDb2xsZWN0aW9uKG5mdFR5cGU6IFR5cGU8QDxORlQ+Lk5GVD4oKSkKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZSg8LWNvbGxlY3Rpb24sIHRvOiA8Q29sbGVjdGlvblN0b3JhZ2VQYXRoPikKICAgICAgICB9CiAgICAgICAgaWYgKHNpZ25lci5jYXBhYmlsaXRpZXMuYm9ycm93PCY8TkZUPi5Db2xsZWN0aW9uPig8Q29sbGVjdGlvblB1YmxpY1BhdGg+KSA9PSBuaWwpIHsKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy51bnB1Ymxpc2goPENvbGxlY3Rpb25QdWJsaWNQYXRoPikKICAgICAgICAgICAgbGV0IGNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwmPE5GVD4uQ29sbGVjdGlvbj4oPENvbGxlY3Rpb25TdG9yYWdlUGF0aD4pICAgICAgICAgICAgCiAgICAgICAgICAgIHNpZ25lci5jYXBhYmlsaXRpZXMucHVibGlzaChjYXAsIGF0OiA8Q29sbGVjdGlvblB1YmxpY1BhdGg+KQoKICAgICAgICB9CiAgICB9Cn0=",
          "getCatalogTypeData": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0Q2F0YWxvZ1R5cGVEYXRhIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgTkZUQ2F0YWxvZyBmcm9tIDB4TkZUQ2F0YWxvZwoKYWNjZXNzKGFsbCkgZnVuIG1haW4oKToge1N0cmluZyA6IHtTdHJpbmcgOiBCb29sfX0gewogIGxldCBjYXRhbG9nID0gTkZUQ2F0YWxvZy5nZXRDYXRhbG9nVHlwZURhdGEoKQogIHJldHVybiBjYXRhbG9nCn0=",
          "getNFT": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0TkZUIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCgoKYWNjZXNzKGFsbCkgc3RydWN0IFZpZXdJbmZvIHsKICBhY2Nlc3MoYWxsKSBsZXQgbmFtZTogU3RyaW5nCiAgYWNjZXNzKGFsbCkgbGV0IGRlc2NyaXB0aW9uOiBTdHJpbmcKICBhY2Nlc3MoYWxsKSBsZXQgdGh1bWJuYWlsOiB7TWV0YWRhdGFWaWV3cy5GaWxlfQogIGFjY2VzcyhhbGwpIGxldCByYXJpdHk6IFN0cmluZz8KCiAgaW5pdChuYW1lOiBTdHJpbmcsIGRlc2NyaXB0aW9uOiBTdHJpbmcsIHRodW1ibmFpbDoge01ldGFkYXRhVmlld3MuRmlsZX0sIHJhcml0eTogU3RyaW5nPykgewogICAgc2VsZi5uYW1lID0gbmFtZQogICAgc2VsZi5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uCiAgICBzZWxmLnRodW1ibmFpbCA9IHRodW1ibmFpbAogICAgc2VsZi5yYXJpdHkgPSByYXJpdHkKICB9Cn0KCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MsIHBhdGhJZDogU3RyaW5nLCB0b2tlbklEczogW1VJbnQ2NF0pOiB7VUludDY0OiBWaWV3SW5mb30gewogIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogIGxldCByZXM6IHtVSW50NjQ6IFZpZXdJbmZvfSA9IHt9CiAgdmFyIGNvbGxlY3Rpb25EaXNwbGF5RmV0Y2hlZCA9IGZhbHNlCgogIGlmIHRva2VuSURzLmxlbmd0aCA9PSAwIHsKICAgIHJldHVybiByZXMKICB9CgogIGxldCBzdG9yYWdlUGF0aCA9IFN0b3JhZ2VQYXRoKGlkZW50aWZpZXI6IHBhdGhJZCkhCiAgbGV0IHB1YmxpY1BhdGggPSBQdWJsaWNQYXRoKGlkZW50aWZpZXI6IHBhdGhJZCkhCiAgbGV0IHR5cGUgPSBhY2NvdW50LnN0b3JhZ2UudHlwZShhdDogc3RvcmFnZVBhdGgpCiAgaWYgdHlwZSA9PSBuaWwgewogICAgcmV0dXJuIHJlcwogIH0KCiAgbGV0IG1ldGFkYXRhVmlld1R5cGUgPSBUeXBlPEB7Vmlld1Jlc29sdmVyLlJlc29sdmVyQ29sbGVjdGlvbn0+KCkKCiAgbGV0IGNvbmZvcm1lZE1ldGFkYXRhVmlld3MgPSB0eXBlIS5pc1N1YnR5cGUob2Y6IG1ldGFkYXRhVmlld1R5cGUpCiAgaWYgIWNvbmZvcm1lZE1ldGFkYXRhVmlld3MgewogICAgZm9yIHRva2VuSUQgaW4gdG9rZW5JRHMgewogICAgICByZXNbdG9rZW5JRF0gPSBWaWV3SW5mbygKICAgICAgICBuYW1lOiBwYXRoSWQsCiAgICAgICAgZGVzY3JpcHRpb246ICIiLAogICAgICAgIHRodW1ibmFpbDogTWV0YWRhdGFWaWV3cy5IVFRQRmlsZSh1cmw6ICIiKSwKICAgICAgICByYXJpdHk6IG5pbAogICAgICApCiAgICB9CiAgICByZXR1cm4gcmVzCiAgfQoKICBsZXQgY29sbGVjdGlvblJlZiA9IGFjY291bnQuY2FwYWJpbGl0aWVzLmJvcnJvdzwme1ZpZXdSZXNvbHZlci5SZXNvbHZlckNvbGxlY3Rpb24sIE5vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KHB1YmxpY1BhdGgpCiAgZm9yIHRva2VuSUQgaW4gdG9rZW5JRHMgewogICAgbGV0IHJlc29sdmVyID0gY29sbGVjdGlvblJlZiEuYm9ycm93Vmlld1Jlc29sdmVyKGlkOiB0b2tlbklEKQogICAgaWYgcmVzb2x2ZXIgIT0gbmlsIHsKICAgICAgIGlmIGxldCBkaXNwbGF5ID0gTWV0YWRhdGFWaWV3cy5nZXREaXNwbGF5KHJlc29sdmVyISkgewogICAgICAgIHZhciByYXJpdHlEZXNjOiBTdHJpbmc/ID0gbmlsCiAgICAgICAgaWYgbGV0IHJhcml0eVZpZXcgPSBNZXRhZGF0YVZpZXdzLmdldFJhcml0eShyZXNvbHZlciEpIHsKICAgICAgICAgIHJhcml0eURlc2MgPSByYXJpdHlWaWV3LmRlc2NyaXB0aW9uCiAgICAgICAgfQoKICAgICAgICByZXNbdG9rZW5JRF0gPSBWaWV3SW5mbygKICAgICAgICAgIG5hbWU6IGRpc3BsYXkubmFtZSwKICAgICAgICAgIGRlc2NyaXB0aW9uOiBkaXNwbGF5LmRlc2NyaXB0aW9uLAogICAgICAgICAgdGh1bWJuYWlsOiBkaXNwbGF5LnRodW1ibmFpbCwKICAgICAgICAgIHJhcml0eTogcmFyaXR5RGVzYwogICAgICAgICkKICAgICAgfSAKICAgIH0KICAgZWxzZSB7CiAgICAgIHJlc1t0b2tlbklEXSA9IFZpZXdJbmZvKAogICAgICAgIG5hbWU6IHBhdGhJZCwKICAgICAgICBkZXNjcmlwdGlvbjogIiIsCiAgICAgICAgdGh1bWJuYWlsOiBNZXRhZGF0YVZpZXdzLkhUVFBGaWxlKHVybDogIiIpLAogICAgICAgIHJhcml0eTogbmlsCiAgICAgICkKICAgIH0KICB9CiAgcmV0dXJuIHJlcwp9",
          "getNFTBalanceStorage": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0TkZUQmFsYW5jZVN0b3JhZ2UgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgoKLy8vIEhlbHBlciBmdW5jdGlvbiB0aGF0IHJldHJpZXZlcyBkYXRhIGFib3V0IGFsbCBwdWJsaWNseSBhY2Nlc3NpYmxlIE5GVHMgY291bnQgIGFuIGFjY291bnQKLy8vCmFjY2VzcyhhbGwpIGZ1biBtYWluKF8gYWRkcmVzczogQWRkcmVzcyk6IHtTdHJpbmc6IEludH0gewogICAgbGV0IGFjY291bnQgPSBnZXRBdXRoQWNjb3VudDxhdXRoKEJvcnJvd1ZhbHVlKSAmQWNjb3VudD4oYWRkcmVzcykKICAgIGxldCBkYXRhOiB7U3RyaW5nOiBJbnR9ID0ge30KICAgIGxldCBjb2xsZWN0aW9uVHlwZTogVHlwZSA9IFR5cGU8QHtOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259PigpCgogICAgLy8gSXRlcmF0ZSBvdmVyIGVhY2ggcHVibGljIHBhdGgKICAgIGFjY291bnQuc3RvcmFnZS5mb3JFYWNoU3RvcmVkKGZ1biAocGF0aDogU3RvcmFnZVBhdGgsIHR5cGU6IFR5cGUpOiBCb29sIHsKICAgICAgICAvLyBSZXR1cm4gZWFybHkgaWYgdGhlIGNvbGxlY3Rpb24gaXMgYnJva2VuIG9yIGlzIG5vdCB0aGUgdHlwZSB3ZSdyZSBsb29raW5nIGZvcgogICAgICAgIGlmIHR5cGUuaXNSZWNvdmVyZWQgfHwgKCF0eXBlLmlzSW5zdGFuY2UoY29sbGVjdGlvblR5cGUpICYmICF0eXBlLmlzU3VidHlwZShvZjogY29sbGVjdGlvblR5cGUpKSB7CiAgICAgICAgICAgIHJldHVybiB0cnVlCiAgICAgICAgfQogICAgICAgIGlmIGxldCBjb2xsZWN0aW9uUmVmID0gYWNjb3VudC5zdG9yYWdlLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KGZyb206IHBhdGgpIHsKICAgICAgICAgICAgLy8gUmV0dXJuIGVhcmx5IGlmIG5vIFJlc29sdmVyIGZvdW5kIGluIHRoZSBDb2xsZWN0aW9uCiAgICAgICAgICAgIGxldCBpZHM6IFtVSW50NjRdPSBjb2xsZWN0aW9uUmVmLmdldElEcygpCiAgICAgICAgICAgIGRhdGEuaW5zZXJ0KGtleTogdHlwZS5pZGVudGlmaWVyLCBpZHMubGVuZ3RoKQogICAgICAgIH0KICAgICAgICByZXR1cm4gdHJ1ZQogICAgfSkKICAgIHJldHVybiBkYXRhCn0=",
          "getNFTCollection": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0TkZUQ29sbGVjdGlvbiAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCQppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKCgphY2Nlc3MoYWxsKSBzdHJ1Y3QgQ29sbGVjdGlvbkRpc3BsYXkgewogIGFjY2VzcyhhbGwpIGxldCBuYW1lOiBTdHJpbmcKICBhY2Nlc3MoYWxsKSBsZXQgc3F1YXJlSW1hZ2U6IFN0cmluZwogIGFjY2VzcyhhbGwpIGxldCBtZWRpYVR5cGU6IFN0cmluZwoKICBpbml0KG5hbWU6IFN0cmluZywgc3F1YXJlSW1hZ2U6IFN0cmluZywgbWVkaWFUeXBlOiBTdHJpbmcpIHsKICAgIHNlbGYubmFtZSA9IG5hbWUKICAgIHNlbGYuc3F1YXJlSW1hZ2UgPSBzcXVhcmVJbWFnZQogICAgc2VsZi5tZWRpYVR5cGUgPSBtZWRpYVR5cGUKICB9Cn0KCmFjY2VzcyhhbGwpIHN0cnVjdCBORlRDb2xsZWN0aW9uIHsKICBhY2Nlc3MoYWxsKSBsZXQgaWQ6IFN0cmluZwogIGFjY2VzcyhhbGwpIGxldCBwYXRoOiBTdHJpbmcKICBhY2Nlc3MoYWxsKSBsZXQgZGlzcGxheTogQ29sbGVjdGlvbkRpc3BsYXk/CiAgYWNjZXNzKGFsbCkgbGV0IGlkTGlzdDogW1VJbnQ2NF0KCiAgaW5pdChpZDpTdHJpbmcsIHBhdGg6IFN0cmluZywgZGlzcGxheTogQ29sbGVjdGlvbkRpc3BsYXk/LCBpZExpc3Q6IFtVSW50NjRdKSB7CiAgICBzZWxmLmlkID0gaWQKICAgIHNlbGYucGF0aCA9IHBhdGgKICAgIHNlbGYuZGlzcGxheSA9IGRpc3BsYXkKICAgIHNlbGYuaWRMaXN0ID0gaWRMaXN0CiAgfQp9CgphY2Nlc3MoYWxsKSBmdW4gZ2V0RGlzcGxheShhZGRyZXNzOiBBZGRyZXNzLCBzdG9yYWdlUGF0aDogU3RvcmFnZVBhdGgsIHB1YmxpY1BhdGg6IFB1YmxpY1BhdGgpOiBDb2xsZWN0aW9uRGlzcGxheT8gewogIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogIGxldCByZXNvdXJjZVR5cGUgPSBUeXBlPEBBbnlSZXNvdXJjZT4oKQogIGxldCBjb2xsZWN0aW9uVHlwZSA9IFR5cGU8QHtOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259PigpCiAgbGV0IG1ldGFkYXRhVmlld1R5cGUgPSBUeXBlPEB7Vmlld1Jlc29sdmVyLlJlc29sdmVyQ29sbGVjdGlvbn0+KCkKICB2YXIgaXRlbTogQ29sbGVjdGlvbkRpc3BsYXk/ID0gIG5pbAoKICAgIGlmIGxldCB0eXBlID0gYWNjb3VudC5zdG9yYWdlLnR5cGUoYXQ6IHN0b3JhZ2VQYXRoKSB7CiAgICAgIGxldCBpc1Jlc291cmNlID0gdHlwZS5pc1N1YnR5cGUob2Y6IHJlc291cmNlVHlwZSkKICAgICAgbGV0IGlzTkZUQ29sbGVjdGlvbiA9IHR5cGUuaXNTdWJ0eXBlKG9mOiBjb2xsZWN0aW9uVHlwZSkKICAgICAgbGV0IGNvbmZvcm1lZE1ldGFkYXRhVmlld3MgPSB0eXBlLmlzU3VidHlwZShvZjogbWV0YWRhdGFWaWV3VHlwZSkKCiAgICAgIHZhciB0b2tlbklEczogW1VJbnQ2NF0gPSBbXQogICAgICBpZiBpc05GVENvbGxlY3Rpb24gJiYgY29uZm9ybWVkTWV0YWRhdGFWaWV3cyB7CiAgICAgICAgaWYgbGV0IGNvbGxlY3Rpb25SZWYgPSBhY2NvdW50LmNhcGFiaWxpdGllcy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXIuUmVzb2x2ZXJDb2xsZWN0aW9uLCBOb25GdW5naWJsZVRva2VuLlJlY2VpdmVyfT4ocHVibGljUGF0aCkgewogICAgICAgICAgdG9rZW5JRHMgPSBjb2xsZWN0aW9uUmVmLmdldElEcygpCgogICAgICAgICAgLy8gVE9ETzogbW92ZSB0byBhIGxpc3QKICAgICAgICAgIGlmIHRva2VuSURzLmxlbmd0aCA+IDAgewogICAgICAgICAgICBsZXQgcmVzb2x2ZXIgPSBjb2xsZWN0aW9uUmVmLmJvcnJvd1ZpZXdSZXNvbHZlcihpZDogdG9rZW5JRHNbMF0pCiAgICAgICAgICAgIGlmIHJlc29sdmVyICE9IG5pbCB7CiAgICAgICAgICAgICAgICBpZiBsZXQgZGlzcGxheSA9IE1ldGFkYXRhVmlld3MuZ2V0TkZUQ29sbGVjdGlvbkRpc3BsYXkocmVzb2x2ZXIhKSB7CiAgICAgICAgICAgICAgICBpdGVtID0gQ29sbGVjdGlvbkRpc3BsYXkoCiAgICAgICAgICAgICAgICAgIG5hbWU6IGRpc3BsYXkubmFtZSwKICAgICAgICAgICAgICAgICAgc3F1YXJlSW1hZ2U6IGRpc3BsYXkuc3F1YXJlSW1hZ2UuZmlsZS51cmkoKSwKICAgICAgICAgICAgICAgICAgbWVkaWFUeXBlOiBkaXNwbGF5LnNxdWFyZUltYWdlLm1lZGlhVHlwZQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgcmV0dXJuIGl0ZW0KfQoKCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MsIHBhdGhJRDogU3RyaW5nKTogTkZUQ29sbGVjdGlvbiB7CiAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgbGV0IHN0b3JhZ2VQYXRoID0gU3RvcmFnZVBhdGgoaWRlbnRpZmllcjogcGF0aElEKSEKICBsZXQgcHVibGljUGF0aCA9IFB1YmxpY1BhdGgoaWRlbnRpZmllcjogcGF0aElEKSEKICBsZXQgY29sbGVjdGlvbiA9IGFjY291bnQuY2FwYWJpbGl0aWVzLmJvcnJvdzwme1ZpZXdSZXNvbHZlci5SZXNvbHZlckNvbGxlY3Rpb259PihwdWJsaWNQYXRoKSEKICByZXR1cm4gTkZUQ29sbGVjdGlvbigKICAgIGlkOiBhY2NvdW50LnN0b3JhZ2UudHlwZShhdDogc3RvcmFnZVBhdGgpIS5pZGVudGlmaWVyLAogICAgcGF0aDogc3RvcmFnZVBhdGgudG9TdHJpbmcoKSwKICAgIGRpc3BsYXk6IGdldERpc3BsYXkoYWRkcmVzczogYWRkcmVzcywgc3RvcmFnZVBhdGg6IHN0b3JhZ2VQYXRoLCBwdWJsaWNQYXRoOiBwdWJsaWNQYXRoKSwKICAgIGlkTGlzdDogY29sbGVjdGlvbi5nZXRJRHMoKQogICkKfQ==",
          "getNFTDisplays": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0TkZURGlzcGxheXMgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKCmFjY2VzcyhhbGwpIHN0cnVjdCBWaWV3SW5mbyB7CmFjY2VzcyhhbGwpIGxldCBuYW1lOiBTdHJpbmcKYWNjZXNzKGFsbCkgbGV0IGRlc2NyaXB0aW9uOiBTdHJpbmcKYWNjZXNzKGFsbCkgbGV0IHRodW1ibmFpbDoge01ldGFkYXRhVmlld3MuRmlsZX0KYWNjZXNzKGFsbCkgbGV0IHJhcml0eTogU3RyaW5nPwphY2Nlc3MoYWxsKSBsZXQgY29sbGVjdGlvbkRpc3BsYXk6IE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRpc3BsYXk/Cgppbml0KG5hbWU6IFN0cmluZywgZGVzY3JpcHRpb246IFN0cmluZywgdGh1bWJuYWlsOiB7TWV0YWRhdGFWaWV3cy5GaWxlfSwgcmFyaXR5OiBTdHJpbmc/LCBjb2xsZWN0aW9uRGlzcGxheTogTWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGlzcGxheT8pIHsKICAgIHNlbGYubmFtZSA9IG5hbWUKICAgIHNlbGYuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbgogICAgc2VsZi50aHVtYm5haWwgPSB0aHVtYm5haWwKICAgIHNlbGYucmFyaXR5ID0gcmFyaXR5CiAgICBzZWxmLmNvbGxlY3Rpb25EaXNwbGF5ID0gY29sbGVjdGlvbkRpc3BsYXkKICB9Cn0KCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MsIHBhdGhJRDogU3RyaW5nLCB0b2tlbklEczogW1VJbnQ2NF0pOiB7VUludDY0OiBWaWV3SW5mb30gewogIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogIGxldCByZXM6IHtVSW50NjQ6IFZpZXdJbmZvfSA9IHt9CiAgdmFyIGNvbGxlY3Rpb25EaXNwbGF5RmV0Y2hlZCA9IGZhbHNlCgogIGlmIHRva2VuSURzLmxlbmd0aCA9PSAwIHsKICAgIHJldHVybiByZXMKICB9CgogIGxldCBzdG9yYWdlUGF0aCA9IFN0b3JhZ2VQYXRoKGlkZW50aWZpZXI6IHBhdGhJRCkhCiAgbGV0IHB1YmxpY1BhdGggPSBQdWJsaWNQYXRoKGlkZW50aWZpZXI6IHBhdGhJRCkhCiAgbGV0IHR5cGUgPSBhY2NvdW50LnN0b3JhZ2UudHlwZShhdDogc3RvcmFnZVBhdGgpCiAgaWYgdHlwZSA9PSBuaWwgewogICAgcmV0dXJuIHJlcwogIH0KCiAgbGV0IG1ldGFkYXRhVmlld1R5cGUgPSBUeXBlPEB7Vmlld1Jlc29sdmVyLlJlc29sdmVyQ29sbGVjdGlvbn0+KCkKCiAgbGV0IGNvbmZvcm1lZE1ldGFkYXRhVmlld3MgPSB0eXBlIS5pc1N1YnR5cGUob2Y6IG1ldGFkYXRhVmlld1R5cGUpCiAgaWYgIWNvbmZvcm1lZE1ldGFkYXRhVmlld3MgewogICAgZm9yIHRva2VuSUQgaW4gdG9rZW5JRHMgewogICAgICByZXNbdG9rZW5JRF0gPSBWaWV3SW5mbygKICAgICAgICBuYW1lOiBwYXRoSUQsCiAgICAgICAgZGVzY3JpcHRpb246ICIiLAogICAgICAgIHRodW1ibmFpbDogTWV0YWRhdGFWaWV3cy5IVFRQRmlsZSh1cmw6ICIiKSwKICAgICAgICByYXJpdHk6IG5pbCwKICAgICAgICBjb2xsZWN0aW9uRGlzcGxheTogbmlsCiAgICAgICkKICAgIH0KICAgIHJldHVybiByZXMKICB9CgogIGxldCBjb2xsZWN0aW9uUmVmID0gYWNjb3VudC5jYXBhYmlsaXRpZXMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyLlJlc29sdmVyQ29sbGVjdGlvbiwgTm9uRnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KHB1YmxpY1BhdGgpCiAgZm9yIHRva2VuSUQgaW4gdG9rZW5JRHMgewogICAgbGV0IHJlc29sdmVyID0gY29sbGVjdGlvblJlZiEuYm9ycm93Vmlld1Jlc29sdmVyKGlkOiB0b2tlbklEKQogICAgaWYgcmVzb2x2ZXIgIT0gbmlsIHsKICAgICAgaWYgbGV0IGRpc3BsYXkgPSBNZXRhZGF0YVZpZXdzLmdldERpc3BsYXkocmVzb2x2ZXIhKSB7CiAgICAgIHZhciByYXJpdHlEZXNjOiBTdHJpbmc/ID0gbmlsCiAgICAgIGlmIGxldCByYXJpdHlWaWV3ID0gTWV0YWRhdGFWaWV3cy5nZXRSYXJpdHkocmVzb2x2ZXIhKSB7CiAgICAgICAgICByYXJpdHlEZXNjID0gcmFyaXR5Vmlldy5kZXNjcmlwdGlvbgogICAgICAgIH0KCiAgICAgICAgdmFyIGNvbGxlY3Rpb25EaXNwbGF5OiBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EaXNwbGF5PyA9IG5pbAogICAgICAgIGlmICghY29sbGVjdGlvbkRpc3BsYXlGZXRjaGVkKSB7CiAgICAgICAgICBpZiBsZXQgY0Rpc3BsYXkgPSBNZXRhZGF0YVZpZXdzLmdldE5GVENvbGxlY3Rpb25EaXNwbGF5KHJlc29sdmVyISkgewogICAgICAgICAgICBjb2xsZWN0aW9uRGlzcGxheSA9IGNEaXNwbGF5CiAgICAgICAgICAgIGNvbGxlY3Rpb25EaXNwbGF5RmV0Y2hlZCA9IHRydWUKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHJlc1t0b2tlbklEXSA9IFZpZXdJbmZvKAogICAgICAgICAgbmFtZTogZGlzcGxheS5uYW1lLAogICAgICAgICAgZGVzY3JpcHRpb246IGRpc3BsYXkuZGVzY3JpcHRpb24sCiAgICAgICAgICB0aHVtYm5haWw6IGRpc3BsYXkudGh1bWJuYWlsLAogICAgICAgICAgcmFyaXR5OiByYXJpdHlEZXNjLAogICAgICAgICAgY29sbGVjdGlvbkRpc3BsYXk6IGNvbGxlY3Rpb25EaXNwbGF5CiAgICAgICAgKQogICAgICB9CiAgICB9IGVsc2UgewogICAgICByZXNbdG9rZW5JRF0gPSBWaWV3SW5mbygKICAgICAgICBuYW1lOiBwYXRoSUQsCiAgICAgICAgZGVzY3JpcHRpb246ICIiLAogICAgICAgIHRodW1ibmFpbDogTWV0YWRhdGFWaWV3cy5IVFRQRmlsZSh1cmw6ICIiKSwKICAgICAgICByYXJpdHk6IG5pbCwKICAgICAgICBjb2xsZWN0aW9uRGlzcGxheTogbmlsCiAgICAgICkKICAgIH0KICB9CiAgcmV0dXJuIHJlcwp9",
          "getNFTMetadataViews": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0TkZUTWV0YWRhdGFWaWV3cyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgoKCmFjY2VzcyhhbGwpIHN0cnVjdCBDb2xsZWN0aW9uRGF0YSB7CiAgYWNjZXNzKGFsbCkgbGV0IHN0b3JhZ2VQYXRoOiBTdG9yYWdlUGF0aAogIGFjY2VzcyhhbGwpIGxldCBwdWJsaWNQYXRoOiBQdWJsaWNQYXRoCiAgYWNjZXNzKGFsbCkgbGV0IHByb3ZpZGVyUGF0aDogUHJpdmF0ZVBhdGgKICBhY2Nlc3MoYWxsKSBsZXQgcHVibGljQ29sbGVjdGlvbjogVHlwZQogIGFjY2VzcyhhbGwpIGxldCBwdWJsaWNMaW5rZWRUeXBlOiBUeXBlCiAgYWNjZXNzKGFsbCkgbGV0IHByb3ZpZGVyTGlua2VkVHlwZTogVHlwZQoKICBpbml0KAogICAgc3RvcmFnZVBhdGg6IFN0b3JhZ2VQYXRoLAogICAgcHVibGljUGF0aDogUHVibGljUGF0aCwKICAgIHByb3ZpZGVyUGF0aDogUHJpdmF0ZVBhdGgsCiAgICBwdWJsaWNDb2xsZWN0aW9uOiBUeXBlLAogICAgcHVibGljTGlua2VkVHlwZTogVHlwZSwKICAgIHByb3ZpZGVyTGlua2VkVHlwZTogVHlwZQogICkgewogICAgc2VsZi5zdG9yYWdlUGF0aCA9IHN0b3JhZ2VQYXRoCiAgICBzZWxmLnB1YmxpY1BhdGggPSBwdWJsaWNQYXRoCiAgICBzZWxmLnByb3ZpZGVyUGF0aCA9IHByb3ZpZGVyUGF0aAogICAgc2VsZi5wdWJsaWNDb2xsZWN0aW9uID0gcHVibGljQ29sbGVjdGlvbgogICAgc2VsZi5wdWJsaWNMaW5rZWRUeXBlID0gcHVibGljTGlua2VkVHlwZQogICAgc2VsZi5wcm92aWRlckxpbmtlZFR5cGUgPSBwcm92aWRlckxpbmtlZFR5cGUKICB9Cn0KCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MsIHBhdGhJZDogU3RyaW5nLCB0b2tlbklEOiBVSW50NjQpOiB7U3RyaW5nOiBBbnlTdHJ1Y3R9IHsKICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICBsZXQgcmVzOiB7U3RyaW5nOiBBbnlTdHJ1Y3R9ID0ge30KCiAgbGV0IHN0b3JhZ2VQYXRoID0gU3RvcmFnZVBhdGgoaWRlbnRpZmllcjogcGF0aElkKSEKICBsZXQgcHVibGljUGF0aCA9IFB1YmxpY1BhdGgoaWRlbnRpZmllcjogcGF0aElkKSEKICBsZXQgY29sbGVjdGlvblJlZiA9IGFjY291bnQuY2FwYWJpbGl0aWVzLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbiwgVmlld1Jlc29sdmVyLlJlc29sdmVyQ29sbGVjdGlvbn0+KHB1YmxpY1BhdGgpCiAgaWYgY29sbGVjdGlvblJlZiA9PSBuaWwgewogICAgcGFuaWMoIkdldCBDb2xsZWN0aW9uIEZhaWxlZCIpCiAgfQoKICBsZXQgdHlwZSA9IGFjY291bnQuc3RvcmFnZS50eXBlKGF0OiBzdG9yYWdlUGF0aCkKICBpZiB0eXBlID09IG5pbCB7CiAgICByZXR1cm4gcmVzCiAgfQoKICBsZXQgbWV0YWRhdGFWaWV3VHlwZSA9IFR5cGU8QHtWaWV3UmVzb2x2ZXIuUmVzb2x2ZXJDb2xsZWN0aW9ufT4oKQogIGxldCBjb25mb3JtZWRNZXRhZGF0YVZpZXdzID0gdHlwZSEuaXNTdWJ0eXBlKG9mOiBtZXRhZGF0YVZpZXdUeXBlKQoKICBpZiAoIWNvbmZvcm1lZE1ldGFkYXRhVmlld3MpIHsKICAgIHJldHVybiByZXMKICB9CgogIGNvbGxlY3Rpb25SZWYhLmJvcnJvd05GVCh0b2tlbklEKQoKICBsZXQgcmVzb2x2ZXIgPSBjb2xsZWN0aW9uUmVmIS5ib3Jyb3dWaWV3UmVzb2x2ZXIoaWQ6IHRva2VuSUQpIQogIGlmIHJlc29sdmVyICE9IG5pbCB7CiAgICBpZiBsZXQgcmFyaXR5ID0gTWV0YWRhdGFWaWV3cy5nZXRSYXJpdHkocmVzb2x2ZXIpIHsKICAgICAgcmVzWyJyYXJpdHkiXSA9IHJhcml0eQogICAgfQoKICAgIGlmIGxldCBkaXNwbGF5ID0gTWV0YWRhdGFWaWV3cy5nZXREaXNwbGF5KHJlc29sdmVyKSB7CiAgICAgIHJlc1siZGlzcGxheSJdID0gZGlzcGxheQogICAgfQoKICAgIGlmIGxldCBlZGl0aW9ucyA9IE1ldGFkYXRhVmlld3MuZ2V0RWRpdGlvbnMocmVzb2x2ZXIpIHsKICAgICAgcmVzWyJlZGl0aW9ucyJdID0gZWRpdGlvbnMKICAgIH0KCiAgICBpZiBsZXQgc2VyaWFsID0gTWV0YWRhdGFWaWV3cy5nZXRTZXJpYWwocmVzb2x2ZXIpIHsKICAgICAgcmVzWyJzZXJpYWwiXSA9IHNlcmlhbAogICAgfQoKICAgIGlmIGxldCByb3lhbHRpZXMgPSBNZXRhZGF0YVZpZXdzLmdldFJveWFsdGllcyhyZXNvbHZlcikgewogICAgICByZXNbInJveWFsdGllcyJdID0gcm95YWx0aWVzCiAgICB9CgogICAgaWYgbGV0IGxpY2Vuc2UgPSBNZXRhZGF0YVZpZXdzLmdldExpY2Vuc2UocmVzb2x2ZXIpIHsKICAgICAgcmVzWyJsaWNlbnNlIl0gPSBsaWNlbnNlCiAgICB9CgogICAgaWYgbGV0IG1lZGlhcyA9IE1ldGFkYXRhVmlld3MuZ2V0TWVkaWFzKHJlc29sdmVyKSB7CiAgICAgIHJlc1sibWVkaWFzIl0gPSBtZWRpYXMKICAgIH0KCiAgICBpZiBsZXQgZXh0ZXJuYWxVUkwgPSBNZXRhZGF0YVZpZXdzLmdldEV4dGVybmFsVVJMKHJlc29sdmVyKSB7CiAgICAgIHJlc1siZXh0ZXJuYWxVUkwiXSA9IGV4dGVybmFsVVJMCiAgICB9CgogICAgaWYgbGV0IHRyYWl0cyA9IE1ldGFkYXRhVmlld3MuZ2V0VHJhaXRzKHJlc29sdmVyKSB7CiAgICAgIHJlc1sidHJhaXRzIl0gPSB0cmFpdHMKICAgIH0KCiAgICBpZiBsZXQgY29sbGVjdGlvbkRpc3BsYXkgPSBNZXRhZGF0YVZpZXdzLmdldE5GVENvbGxlY3Rpb25EaXNwbGF5KHJlc29sdmVyKSB7CiAgICAgIHJlc1siY29sbGVjdGlvbkRpc3BsYXkiXSA9IGNvbGxlY3Rpb25EaXNwbGF5CiAgICB9CgogICAgaWYgbGV0IGNvbGxlY3Rpb25EYXRhID0gTWV0YWRhdGFWaWV3cy5nZXRORlRDb2xsZWN0aW9uRGF0YShyZXNvbHZlcikgewogICAgICBsZXQgZGF0YSA9IENvbGxlY3Rpb25EYXRhKAogICAgICAgIHN0b3JhZ2VQYXRoOiBjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aCwKICAgICAgICBwdWJsaWNQYXRoOiBjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoLAogICAgICAgIHByb3ZpZGVyUGF0aDogY29sbGVjdGlvbkRhdGEucHJvdmlkZXJQYXRoLAogICAgICAgIHB1YmxpY0NvbGxlY3Rpb246IGNvbGxlY3Rpb25EYXRhLnB1YmxpY0NvbGxlY3Rpb24sCiAgICAgICAgcHVibGljTGlua2VkVHlwZTogY29sbGVjdGlvbkRhdGEucHVibGljTGlua2VkVHlwZSwKICAgICAgICBwcm92aWRlckxpbmtlZFR5cGU6IGNvbGxlY3Rpb25EYXRhLnByb3ZpZGVyTGlua2VkVHlwZQogICAgICApCiAgICAgIHJlc1siY29sbGVjdGlvbkRhdGEiXSA9IGRhdGEKICAgIH0KICB9CiAgcmVzWyJ0b2tlbklkIl0gPSB0b2tlbklECgogIHJldHVybiByZXMKfQ==",
          "getUserCollections": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0VXNlckNvbGxlY3Rpb25zIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCgphY2Nlc3MoYWxsKSBzdHJ1Y3QgQ29sbGVjdGlvbkRpc3BsYXkgewogIGFjY2VzcyhhbGwpIGxldCBuYW1lOiBTdHJpbmcKICBhY2Nlc3MoYWxsKSBsZXQgc3F1YXJlSW1hZ2U6IFN0cmluZwogIGFjY2VzcyhhbGwpIGxldCBtZWRpYVR5cGU6IFN0cmluZwoKICBpbml0KG5hbWU6IFN0cmluZywgc3F1YXJlSW1hZ2U6IFN0cmluZywgbWVkaWFUeXBlOiBTdHJpbmcpIHsKICAgIHNlbGYubmFtZSA9IG5hbWUKICAgIHNlbGYuc3F1YXJlSW1hZ2UgPSBzcXVhcmVJbWFnZQogICAgc2VsZi5tZWRpYVR5cGUgPSBtZWRpYVR5cGUKICB9Cn0KCmFjY2VzcyhhbGwpIHN0cnVjdCBORlRDb2xsZWN0aW9uIHsKICBhY2Nlc3MoYWxsKSBsZXQgaWQ6IFN0cmluZwogIGFjY2VzcyhhbGwpIGxldCBwYXRoOiBTdHJpbmcKICBhY2Nlc3MoYWxsKSBsZXQgZGlzcGxheTogQ29sbGVjdGlvbkRpc3BsYXk/CiAgYWNjZXNzKGFsbCkgbGV0IGlkTGlzdDogW1VJbnQ2NF0KCiAgaW5pdChpZDpTdHJpbmcsIHBhdGg6IFN0cmluZywgZGlzcGxheTogQ29sbGVjdGlvbkRpc3BsYXk/LCBpZExpc3Q6IFtVSW50NjRdKSB7CiAgICBzZWxmLmlkID0gaWQKICAgIHNlbGYucGF0aCA9IHBhdGgKICAgIHNlbGYuZGlzcGxheSA9IGRpc3BsYXkKICAgIHNlbGYuaWRMaXN0ID0gaWRMaXN0CiAgfQp9CgphY2Nlc3MoYWxsKSBmdW4gZ2V0RGlzcGxheShhZGRyZXNzOiBBZGRyZXNzLCBzdG9yYWdlUGF0aDogU3RvcmFnZVBhdGgsIHB1YmxpY1BhdGg6IFB1YmxpY1BhdGgpOiBDb2xsZWN0aW9uRGlzcGxheT8gewogIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogIGxldCByZXNvdXJjZVR5cGUgPSBUeXBlPEBBbnlSZXNvdXJjZT4oKQogIGxldCBjb2xsZWN0aW9uVHlwZSA9IFR5cGU8QHtOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259PigpCiAgbGV0IG1ldGFkYXRhVmlld1R5cGUgPSBUeXBlPEB7Vmlld1Jlc29sdmVyLlJlc29sdmVyQ29sbGVjdGlvbn0+KCkKICB2YXIgaXRlbTogQ29sbGVjdGlvbkRpc3BsYXk/ID0gIG5pbAoKICAgIGlmIGxldCB0eXBlID0gYWNjb3VudC5zdG9yYWdlLnR5cGUoYXQ6IHN0b3JhZ2VQYXRoKSB7CiAgICAgIGxldCBpc1Jlc291cmNlID0gdHlwZS5pc1N1YnR5cGUob2Y6IHJlc291cmNlVHlwZSkKICAgICAgbGV0IGlzTkZUQ29sbGVjdGlvbiA9IHR5cGUuaXNTdWJ0eXBlKG9mOiBjb2xsZWN0aW9uVHlwZSkKICAgICAgbGV0IGNvbmZvcm1lZE1ldGFkYXRhVmlld3MgPSB0eXBlLmlzU3VidHlwZShvZjogbWV0YWRhdGFWaWV3VHlwZSkKCiAgICAgIHZhciB0b2tlbklEczogW1VJbnQ2NF0gPSBbXQogICAgICBpZiBpc05GVENvbGxlY3Rpb24gJiYgY29uZm9ybWVkTWV0YWRhdGFWaWV3cyB7CiAgICAgICAgaWYgbGV0IGNvbGxlY3Rpb25SZWYgPSBhY2NvdW50LmNhcGFiaWxpdGllcy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXIuUmVzb2x2ZXJDb2xsZWN0aW9uLCBOb25GdW5naWJsZVRva2VuLlJlY2VpdmVyfT4ocHVibGljUGF0aCkgewogICAgICAgICAgdG9rZW5JRHMgPSBjb2xsZWN0aW9uUmVmLmdldElEcygpCgogICAgICAgICAgLy8gVE9ETzogbW92ZSB0byBhIGxpc3QKICAgICAgICAgIGlmIHRva2VuSURzLmxlbmd0aCA+IDAgCiAgICAgICAgICAmJiBzdG9yYWdlUGF0aCAhPSAvc3RvcmFnZS9SYXJpYmxlTkZUQ29sbGVjdGlvbiAKICAgICAgICAgICYmIHN0b3JhZ2VQYXRoICE9IC9zdG9yYWdlL0FSVElGQUNUUGFja1YzQ29sbGVjdGlvbgogICAgICAgICAgJiYgc3RvcmFnZVBhdGggIT0gL3N0b3JhZ2UvQXJsZWVTY2VuZSB7CiAgICAgICAgICAgIGxldCByZXNvbHZlciA9IGNvbGxlY3Rpb25SZWYuYm9ycm93Vmlld1Jlc29sdmVyKGlkOiB0b2tlbklEc1swXSkKICAgICAgICAgICAgaWYgcmVzb2x2ZXIgIT0gbmlsIHsKICAgICAgICAgICAgICAgIGlmIGxldCBkaXNwbGF5ID0gTWV0YWRhdGFWaWV3cy5nZXRORlRDb2xsZWN0aW9uRGlzcGxheShyZXNvbHZlciEpIHsKICAgICAgICAgICAgICAgIGl0ZW0gPSBDb2xsZWN0aW9uRGlzcGxheSgKICAgICAgICAgICAgICAgICAgbmFtZTogZGlzcGxheS5uYW1lLAogICAgICAgICAgICAgICAgICBzcXVhcmVJbWFnZTogZGlzcGxheS5zcXVhcmVJbWFnZS5maWxlLnVyaSgpLAogICAgICAgICAgICAgICAgICBtZWRpYVR5cGU6IGRpc3BsYXkuc3F1YXJlSW1hZ2UubWVkaWFUeXBlCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQoKICByZXR1cm4gaXRlbQp9CgphY2Nlc3MoYWxsKWZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MpOiBbTkZUQ29sbGVjdGlvbl0gewogIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogIGxldCBjb2xsZWN0aW9uVHlwZSA9IFR5cGU8QHtOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259PigpCiAgbGV0IGNvbGxlY3Rpb25QYXRoczogW1N0b3JhZ2VQYXRoXSA9IFtdCiAgbGV0IGNvbGxlY3Rpb25zOiBbTkZUQ29sbGVjdGlvbl0gPSBbXQoKICBmdW4gZWFjaFBhdGgocGF0aDogU3RvcmFnZVBhdGgsIFR5cGU6IFR5cGUpOiBCb29sIHsKICAgCiAgICBpZiBUeXBlICE9IG5pbCB7CiAgICAgIGlmIFR5cGUuaXNTdWJ0eXBlKG9mOiBjb2xsZWN0aW9uVHlwZSkgewogICAgICAgIGNvbGxlY3Rpb25QYXRocy5hcHBlbmQocGF0aCkKICAgICAgfQogICAgICAKICAgIH0KICAgCiAgICByZXR1cm4gdHJ1ZQogIH0KCiAgYWNjb3VudC5zdG9yYWdlLmZvckVhY2hTdG9yZWQoZWFjaFBhdGgpCgogIGZvciBwYXRoIGluIGNvbGxlY3Rpb25QYXRocyB7CiAgICBsZXQgcGF0aFN0ciA9IHBhdGgudG9TdHJpbmcoKQogICAgbGV0IHNwbGl0QXJyID0gcGF0aFN0ci5zcGxpdChzZXBhcmF0b3I6ICIvIikKICAgIGxldCBpZGVudGlmaWVyID0gc3BsaXRBcnJbMl0KICAgIGxldCBwdWJQYXRoID0gUHVibGljUGF0aChpZGVudGlmaWVyOiBpZGVudGlmaWVyKSEKICAgIGxldCBjb2xsZWN0aW9uID0gIGFjY291bnQuY2FwYWJpbGl0aWVzLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+KHB1YlBhdGgpIQoKICAgIGNvbGxlY3Rpb25zLmFwcGVuZCgKICAgICAgTkZUQ29sbGVjdGlvbigKICAgICAgaWQ6IGlkZW50aWZpZXIsCiAgICAgIHBhdGg6IHB1YlBhdGgudG9TdHJpbmcoKSwKICAgICAgZGlzcGxheTogZ2V0RGlzcGxheShhZGRyZXNzOiBhZGRyZXNzLCBzdG9yYWdlUGF0aDogcGF0aCwgcHVibGljUGF0aDogcHViUGF0aCksCiAgICAgIGlkTGlzdDogY29sbGVjdGlvbi5nZXRJRHMoKQogICAgICApCiAgICApCiAgfQoKCiAgcmV0dXJuIGNvbGxlY3Rpb25zCn0=",
          "getUserCollectionsPage": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0VXNlckNvbGxlY3Rpb25zUGFnZSAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKIGltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgogIGltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCiAgaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCiAgCiAgYWNjZXNzKGFsbCkgc3RydWN0IENvbGxlY3Rpb25EaXNwbGF5IHsKICAgIGFjY2VzcyhhbGwpIGxldCBuYW1lOiBTdHJpbmcKICAgIGFjY2VzcyhhbGwpIGxldCBzcXVhcmVJbWFnZTogU3RyaW5nCiAgICBhY2Nlc3MoYWxsKSBsZXQgbWVkaWFUeXBlOiBTdHJpbmcKICAKICAgIGluaXQobmFtZTogU3RyaW5nLCBzcXVhcmVJbWFnZTogU3RyaW5nLCBtZWRpYVR5cGU6IFN0cmluZykgewogICAgICBzZWxmLm5hbWUgPSBuYW1lCiAgICAgIHNlbGYuc3F1YXJlSW1hZ2UgPSBzcXVhcmVJbWFnZQogICAgICBzZWxmLm1lZGlhVHlwZSA9IG1lZGlhVHlwZQogICAgfQogIH0KICAKICBhY2Nlc3MoYWxsKSBzdHJ1Y3QgTkZUQ29sbGVjdGlvbiB7CiAgICBhY2Nlc3MoYWxsKSBsZXQgaWQ6IFN0cmluZwogICAgYWNjZXNzKGFsbCkgbGV0IHBhdGg6IFN0cmluZwogICAgYWNjZXNzKGFsbCkgbGV0IGRpc3BsYXk6IENvbGxlY3Rpb25EaXNwbGF5PwogICAgYWNjZXNzKGFsbCkgbGV0IGlkTGlzdDogW1VJbnQ2NF0KICAKICAgIGluaXQoaWQ6U3RyaW5nLCBwYXRoOiBTdHJpbmcsIGRpc3BsYXk6IENvbGxlY3Rpb25EaXNwbGF5PywgaWRMaXN0OiBbVUludDY0XSkgewogICAgICBzZWxmLmlkID0gaWQKICAgICAgc2VsZi5wYXRoID0gcGF0aAogICAgICBzZWxmLmRpc3BsYXkgPSBkaXNwbGF5CiAgICAgIHNlbGYuaWRMaXN0ID0gaWRMaXN0CiAgICB9CiAgfQogIAogIGFjY2VzcyhhbGwpIGZ1biBnZXREaXNwbGF5KGFkZHJlc3M6IEFkZHJlc3MsIHN0b3JhZ2VQYXRoOiBTdG9yYWdlUGF0aCwgcHVibGljUGF0aDogUHVibGljUGF0aCk6IENvbGxlY3Rpb25EaXNwbGF5PyB7CiAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICAgIGxldCByZXNvdXJjZVR5cGUgPSBUeXBlPEBBbnlSZXNvdXJjZT4oKQogICAgbGV0IGNvbGxlY3Rpb25UeXBlID0gVHlwZTxAe05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KCkKICAgIGxldCBtZXRhZGF0YVZpZXdUeXBlID0gVHlwZTxAe1ZpZXdSZXNvbHZlci5SZXNvbHZlckNvbGxlY3Rpb259PigpCiAgICB2YXIgaXRlbTogQ29sbGVjdGlvbkRpc3BsYXk/ID0gIG5pbAogIAogICAgICBpZiBsZXQgdHlwZSA9IGFjY291bnQuc3RvcmFnZS50eXBlKGF0OiBzdG9yYWdlUGF0aCkgewogICAgICAgIGxldCBpc1Jlc291cmNlID0gdHlwZS5pc1N1YnR5cGUob2Y6IHJlc291cmNlVHlwZSkKICAgICAgICBsZXQgaXNORlRDb2xsZWN0aW9uID0gdHlwZS5pc1N1YnR5cGUob2Y6IGNvbGxlY3Rpb25UeXBlKQogICAgICAgIGxldCBjb25mb3JtZWRNZXRhZGF0YVZpZXdzID0gdHlwZS5pc1N1YnR5cGUob2Y6IG1ldGFkYXRhVmlld1R5cGUpCiAgCiAgICAgICAgdmFyIHRva2VuSURzOiBbVUludDY0XSA9IFtdCiAgICAgICAgaWYgaXNORlRDb2xsZWN0aW9uICYmIGNvbmZvcm1lZE1ldGFkYXRhVmlld3MgewogICAgICAgICAgaWYgbGV0IGNvbGxlY3Rpb25SZWYgPSBhY2NvdW50LmNhcGFiaWxpdGllcy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXIuUmVzb2x2ZXJDb2xsZWN0aW9uLCBOb25GdW5naWJsZVRva2VuLlJlY2VpdmVyfT4ocHVibGljUGF0aCkgewogICAgICAgICAgICB0b2tlbklEcyA9IGNvbGxlY3Rpb25SZWYuZ2V0SURzKCkKICAKICAgICAgICAgICAgLy8gVE9ETzogbW92ZSB0byBhIGxpc3QKICAgICAgICAgICAgaWYgdG9rZW5JRHMubGVuZ3RoID4gMCAKICAgICAgICAgICAgJiYgc3RvcmFnZVBhdGggIT0gL3N0b3JhZ2UvUmFyaWJsZU5GVENvbGxlY3Rpb24gCiAgICAgICAgICAgICYmIHN0b3JhZ2VQYXRoICE9IC9zdG9yYWdlL0FSVElGQUNUUGFja1YzQ29sbGVjdGlvbgogICAgICAgICAgICAmJiBzdG9yYWdlUGF0aCAhPSAvc3RvcmFnZS9BcmxlZVNjZW5lIHsKICAgICAgICAgICAgICBsZXQgcmVzb2x2ZXIgPSBjb2xsZWN0aW9uUmVmLmJvcnJvd1ZpZXdSZXNvbHZlcihpZDogdG9rZW5JRHNbMF0pCiAgICAgICAgICAgICAgaWYgcmVzb2x2ZXIgIT0gbmlsIHsKICAgICAgICAgICAgICAgICAgaWYgbGV0IGRpc3BsYXkgPSBNZXRhZGF0YVZpZXdzLmdldE5GVENvbGxlY3Rpb25EaXNwbGF5KHJlc29sdmVyISkgewogICAgICAgICAgICAgICAgICBpdGVtID0gQ29sbGVjdGlvbkRpc3BsYXkoCiAgICAgICAgICAgICAgICAgICAgbmFtZTogZGlzcGxheS5uYW1lLAogICAgICAgICAgICAgICAgICAgIHNxdWFyZUltYWdlOiBkaXNwbGF5LnNxdWFyZUltYWdlLmZpbGUudXJpKCksCiAgICAgICAgICAgICAgICAgICAgbWVkaWFUeXBlOiBkaXNwbGF5LnNxdWFyZUltYWdlLm1lZGlhVHlwZQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIAogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgCiAgICByZXR1cm4gaXRlbQogIH0KICAKICBhY2Nlc3MoYWxsKWZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MsIHN0YXJ0OiBJbnQsIGVuZDogSW50KTogW05GVENvbGxlY3Rpb25dIHsKICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgbGV0IGNvbGxlY3Rpb25UeXBlID0gVHlwZTxAe05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KCkKICAgIGxldCBjb2xsZWN0aW9uUGF0aHM6IFtTdG9yYWdlUGF0aF0gPSBbXQogICAgbGV0IGNvbGxlY3Rpb25zOiBbTkZUQ29sbGVjdGlvbl0gPSBbXQogIAogICAgZnVuIGVhY2hQYXRoKHBhdGg6IFN0b3JhZ2VQYXRoLCBUeXBlOiBUeXBlKTogQm9vbCB7CiAgICAgCiAgICAgIGlmIFR5cGUgIT0gbmlsIHsKICAgICAgICBpZiBUeXBlLmlzU3VidHlwZShvZjogY29sbGVjdGlvblR5cGUpIHsKICAgICAgICAgIGNvbGxlY3Rpb25QYXRocy5hcHBlbmQocGF0aCkKICAgICAgICB9CiAgICAgICAgCiAgICAgIH0KICAgICAKICAgICAgcmV0dXJuIHRydWUKICAgIH0KICAKICAgIGFjY291bnQuc3RvcmFnZS5mb3JFYWNoU3RvcmVkKGVhY2hQYXRoKQogIAogICAgZm9yIHBhdGggaW4gY29sbGVjdGlvblBhdGhzIHsKICAgICAgbGV0IHBhdGhTdHIgPSBwYXRoLnRvU3RyaW5nKCkKICAgICAgbGV0IHNwbGl0QXJyID0gcGF0aFN0ci5zcGxpdChzZXBhcmF0b3I6ICIvIikKICAgICAgbGV0IGlkZW50aWZpZXIgPSBzcGxpdEFyclsyXQogICAgICBsZXQgcHViUGF0aCA9IFB1YmxpY1BhdGgoaWRlbnRpZmllcjogaWRlbnRpZmllcikhCiAgICAgIGxldCBjb2xsZWN0aW9uID0gIGFjY291bnQuY2FwYWJpbGl0aWVzLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+KHB1YlBhdGgpIQogIAogICAgICBjb2xsZWN0aW9ucy5hcHBlbmQoCiAgICAgICAgTkZUQ29sbGVjdGlvbigKICAgICAgICBpZDogaWRlbnRpZmllciwKICAgICAgICBwYXRoOiBwdWJQYXRoLnRvU3RyaW5nKCksCiAgICAgICAgZGlzcGxheTogZ2V0RGlzcGxheShhZGRyZXNzOiBhZGRyZXNzLCBzdG9yYWdlUGF0aDogcGF0aCwgcHVibGljUGF0aDogcHViUGF0aCksCiAgICAgICAgaWRMaXN0OiBjb2xsZWN0aW9uLmdldElEcygpCiAgICAgICAgKQogICAgICApCiAgICAgIAogICAgfQoKICAgIGxldCBsZW4gPSBjb2xsZWN0aW9ucy5sZW5ndGgKICAgIHZhciBlbmROdW4gPSBlbmQKICAgIGlmIGxlbiA8IHN0YXJ0IHsKICAgICAgcmV0dXJuIFtdCiAgICB9IGVsc2UgewogICAgICBpZiBsZW4gPCBlbmQgewogICAgICAgIGVuZE51biA9IGxlbgogICAgICB9CiAgICB9CiAgICAKICAgIHJldHVybiBjb2xsZWN0aW9ucy5zbGljZShmcm9tOiBzdGFydCwgdXBUbzogZW5kTnVuICkKICB9",
          "sendNbaNFT": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgc2VuZE5iYU5GVCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCgppbXBvcnQgPE5GVD4gZnJvbSA8TkZUQWRkcmVzcz4KCnRyYW5zYWN0aW9uKHJlY2lwaWVudEFkZHI6IEFkZHJlc3MsIHdpdGhkcmF3SUQ6IFVJbnQ2NCkgewogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSwgQm9ycm93VmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgLy8gZ2V0IHRoZSByZWNpcGllbnRzIHB1YmxpYyBhY2NvdW50IG9iamVjdAogICAgICAgIGxldCByZWNpcGllbnQgPSBnZXRBY2NvdW50KHJlY2lwaWVudEFkZHIpCiAgICAgICAgLy8gYm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXInJ3MgTkZUIGNvbGxlY3Rpb24KICAgICAgICBsZXQgY29sbGVjdGlvblJlZiA9IHNpZ25lci5zdG9yYWdlCiAgICAgICAgLmJvcnJvdzxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufT4oZnJvbTogL3N0b3JhZ2UvTW9tZW50Q29sbGVjdGlvbikKICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgb3duZXInJ3MgY29sbGVjdGlvbiIpCiAgICAgICAgbGV0IHNlbmRlclJlZiA9IHNpZ25lcgogICAgICAgIC5jYXBhYmlsaXRpZXMKICAgICAgICAuYm9ycm93PCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uUHVibGljfT4oL3B1YmxpYy9Nb21lbnRDb2xsZWN0aW9uKQogICAgICAgIC8vIGJvcnJvdyBhIHB1YmxpYyByZWZlcmVuY2UgdG8gdGhlIHJlY2VpdmVycyBjb2xsZWN0aW9uCiAgICAgICAgbGV0IHJlY2lwaWVudFJlZiA9IHJlY2lwaWVudAogICAgICAgIC5jYXBhYmlsaXRpZXMKICAgICAgICAuYm9ycm93PCZ7VG9wU2hvdC5Nb21lbnRDb2xsZWN0aW9uUHVibGljfT4oL3B1YmxpYy9Nb21lbnRDb2xsZWN0aW9uKSA/PyBwYW5pYygiVW5hYmxlIHRvIGJvcnJvdyByZWNlaXZlciByZWZlcmVuY2UiKQogICAgICAgIAogICAgICAgIC8vIHdpdGhkcmF3IHRoZSBORlQgZnJvbSB0aGUgb3duZXInJ3MgY29sbGVjdGlvbgogICAgICAgIGxldCBuZnQgPC0gY29sbGVjdGlvblJlZi53aXRoZHJhdyh3aXRoZHJhd0lEOiB3aXRoZHJhd0lEKQogICAgICAgIC8vIERlcG9zaXQgdGhlIE5GVCBpbiB0aGUgcmVjaXBpZW50JydzIGNvbGxlY3Rpb24KICAgICAgICByZWNpcGllbnRSZWYhLmRlcG9zaXQodG9rZW46IDwtbmZ0KQogICAgfQp9",
          "sendNbaNFTV3": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgc2VuZE5iYU5GVFYzIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKaW1wb3J0IFN0b3JhZ2VSZW50IGZyb20gMHhkNTAwODRhMWE0M2IxNTA3CgoKaW1wb3J0IDxORlQ+IGZyb20gPE5GVEFkZHJlc3M+Cgp0cmFuc2FjdGlvbihyZWNpcGllbnRBZGRyOiBBZGRyZXNzLCB3aXRoZHJhd0lEOiBVSW50NjQpIHsKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UsIEJvcnJvd1ZhbHVlKSAmQWNjb3VudCkgewogICAgICAgIC8vIGdldCB0aGUgcmVjaXBpZW50cyBwdWJsaWMgYWNjb3VudCBvYmplY3QKICAgICAgICBsZXQgcmVjaXBpZW50ID0gZ2V0QWNjb3VudChyZWNpcGllbnRBZGRyKQogICAgICAgIC8vIGJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJydzIE5GVCBjb2xsZWN0aW9uCiAgICAgICAgbGV0IGNvbGxlY3Rpb25SZWYgPSBzaWduZXIuc3RvcmFnZQogICAgICAgIC5ib3Jyb3c8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KGZyb206IC9zdG9yYWdlL01vbWVudENvbGxlY3Rpb24pCiAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIG93bmVyJydzIGNvbGxlY3Rpb24iKQogICAgICAgIGxldCBzZW5kZXJSZWYgPSBzaWduZXIKICAgICAgICAuY2FwYWJpbGl0aWVzCiAgICAgICAgLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+KC9wdWJsaWMvTW9tZW50Q29sbGVjdGlvbikKICAgICAgICAvLyBib3Jyb3cgYSBwdWJsaWMgcmVmZXJlbmNlIHRvIHRoZSByZWNlaXZlcnMgY29sbGVjdGlvbgogICAgICAgIGxldCByZWNpcGllbnRSZWYgPSByZWNpcGllbnQKICAgICAgICAuY2FwYWJpbGl0aWVzCiAgICAgICAgLmJvcnJvdzwme1RvcFNob3QuTW9tZW50Q29sbGVjdGlvblB1YmxpY30+KC9wdWJsaWMvTW9tZW50Q29sbGVjdGlvbikgPz8gcGFuaWMoIlVuYWJsZSB0byBib3Jyb3cgcmVjZWl2ZXIgcmVmZXJlbmNlIikKICAgICAgICAKICAgICAgICAvLyB3aXRoZHJhdyB0aGUgTkZUIGZyb20gdGhlIG93bmVyJydzIGNvbGxlY3Rpb24KICAgICAgICBsZXQgbmZ0IDwtIGNvbGxlY3Rpb25SZWYud2l0aGRyYXcod2l0aGRyYXdJRDogd2l0aGRyYXdJRCkKICAgICAgICAvLyBEZXBvc2l0IHRoZSBORlQgaW4gdGhlIHJlY2lwaWVudCcncyBjb2xsZWN0aW9uCiAgICAgICAgcmVjaXBpZW50UmVmIS5kZXBvc2l0KHRva2VuOiA8LW5mdCkKICAgICAgICBTdG9yYWdlUmVudC50cnlSZWZpbGwocmVjaXBpZW50QWRkcikKICAgIH0KfQ==",
          "sendNFT": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgc2VuZE5GVCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCmltcG9ydCA8TkZUPiBmcm9tIDxORlRBZGRyZXNzPgoKLy8gVGhpcyB0cmFuc2FjdGlvbiBpcyBmb3IgdHJhbnNmZXJyaW5nIGFuZCBORlQgZnJvbQovLyBvbmUgYWNjb3VudCB0byBhbm90aGVyCgp0cmFuc2FjdGlvbihyZWNpcGllbnRBZGRyOiBBZGRyZXNzLCB3aXRoZHJhd0lEOiBVSW50NjQpIHsKCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChTdG9yYWdlLCBCb3Jyb3dWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICAvLyBnZXQgdGhlIHJlY2lwaWVudHMgcHVibGljIGFjY291bnQgb2JqZWN0CiAgICAgICAgbGV0IHJlY2lwaWVudCA9IGdldEFjY291bnQocmVjaXBpZW50QWRkcikKCiAgICAgICAgLy8gYm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBORlQgY29sbGVjdGlvbgogICAgICAgIGxldCBjb2xsZWN0aW9uUmVmID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oZnJvbTogPENvbGxlY3Rpb25TdG9yYWdlUGF0aD4pCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBvd25lcidzIGNvbGxlY3Rpb24iKQoKICAgICAgICAvLyBib3Jyb3cgYSBwdWJsaWMgcmVmZXJlbmNlIHRvIHRoZSByZWNlaXZlcnMgY29sbGVjdGlvbgogICAgICAgIGxldCBkZXBvc2l0UmVmID0gcmVjaXBpZW50CiAgICAgICAgICAgIC5jYXBhYmlsaXRpZXMKICAgICAgICAgICAgLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KDxDb2xsZWN0aW9uUHVibGljUGF0aD4pCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSByZWNlaXZlcidzIGNvbGxlY3Rpb24iKQoKICAgICAgICAvLyB3aXRoZHJhdyB0aGUgTkZUIGZyb20gdGhlIG93bmVyJ3MgY29sbGVjdGlvbgogICAgICAgIGxldCBuZnQgPC0gY29sbGVjdGlvblJlZi53aXRoZHJhdyh3aXRoZHJhd0lEOiB3aXRoZHJhd0lEKQoKICAgICAgICAvLyBEZXBvc2l0IHRoZSBORlQgaW4gdGhlIHJlY2lwaWVudCdzIGNvbGxlY3Rpb24KICAgICAgICBkZXBvc2l0UmVmLmRlcG9zaXQodG9rZW46IDwtbmZ0KQoKICAgIH0KfQ==",
          "sendNFTV3": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgc2VuZE5GVFYzIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKaW1wb3J0IFN0b3JhZ2VSZW50IGZyb20gMHhkNTAwODRhMWE0M2IxNTA3CgppbXBvcnQgPE5GVD4gZnJvbSA8TkZUQWRkcmVzcz4KCi8vIFRoaXMgdHJhbnNhY3Rpb24gaXMgZm9yIHRyYW5zZmVycmluZyBhbmQgTkZUIGZyb20KLy8gb25lIGFjY291bnQgdG8gYW5vdGhlcgoKdHJhbnNhY3Rpb24ocmVjaXBpZW50QWRkcjogQWRkcmVzcywgd2l0aGRyYXdJRDogVUludDY0KSB7CgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSwgQm9ycm93VmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgLy8gZ2V0IHRoZSByZWNpcGllbnRzIHB1YmxpYyBhY2NvdW50IG9iamVjdAogICAgICAgIGxldCByZWNpcGllbnQgPSBnZXRBY2NvdW50KHJlY2lwaWVudEFkZHIpCgogICAgICAgIC8vIGJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3MgTkZUIGNvbGxlY3Rpb24KICAgICAgICBsZXQgY29sbGVjdGlvblJlZiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KGZyb206IDxDb2xsZWN0aW9uU3RvcmFnZVBhdGg+KQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgb3duZXIncyBjb2xsZWN0aW9uIikKCiAgICAgICAgLy8gYm9ycm93IGEgcHVibGljIHJlZmVyZW5jZSB0byB0aGUgcmVjZWl2ZXJzIGNvbGxlY3Rpb24KICAgICAgICBsZXQgZGVwb3NpdFJlZiA9IHJlY2lwaWVudAogICAgICAgICAgICAuY2FwYWJpbGl0aWVzCiAgICAgICAgICAgIC5ib3Jyb3c8JntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259Pig8Q29sbGVjdGlvblB1YmxpY1BhdGg+KQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgcmVjZWl2ZXIncyBjb2xsZWN0aW9uIikKCiAgICAgICAgLy8gd2l0aGRyYXcgdGhlIE5GVCBmcm9tIHRoZSBvd25lcidzIGNvbGxlY3Rpb24KICAgICAgICBsZXQgbmZ0IDwtIGNvbGxlY3Rpb25SZWYud2l0aGRyYXcod2l0aGRyYXdJRDogd2l0aGRyYXdJRCkKCiAgICAgICAgLy8gRGVwb3NpdCB0aGUgTkZUIGluIHRoZSByZWNpcGllbnQncyBjb2xsZWN0aW9uCiAgICAgICAgZGVwb3NpdFJlZi5kZXBvc2l0KHRva2VuOiA8LW5mdCkKICAgICAgICBTdG9yYWdlUmVudC50cnlSZWZpbGwocmVjaXBpZW50QWRkcikKCiAgICB9Cn0="
        },
        "contract": {
          "getContractByName": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0Q29udHJhY3RCeU5hbWUgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MsIGNvbnRyYWN0TmFtZTogU3RyaW5nKTogU3RyaW5nPyB7CiAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgbGV0IGRlcGxveWVkQ29udHJhY3QgPSBhY2NvdW50LmNvbnRyYWN0cy5nZXQobmFtZTogY29udHJhY3ROYW1lKQoKICByZXR1cm4gU3RyaW5nLmZyb21VVEY4KGRlcGxveWVkQ29udHJhY3Q/LmNvZGUhKQp9",
          "getContractNames": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0Q29udHJhY3ROYW1lcyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKYWNjZXNzKGFsbCkgZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcyk6ICZbU3RyaW5nXSB7CiAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgcmV0dXJuIGFjY291bnQuY29udHJhY3RzLm5hbWVzCn0="
        },
        "evm": {
          "call": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgY2FsbCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEVWTSBmcm9tIDB4OGM1MzAzZWFhMjYyMDJkNgoKCmFjY2VzcyhhbGwpCmZ1biBtYWluKGhleEVuY29kZWREYXRhOiBTdHJpbmcsIGhleEVuY29kZWRBZGRyZXNzOiBTdHJpbmcpOiBTdHJpbmcgewogICAgbGV0IGFjY291bnQgPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UpICZBY2NvdW50PihBZGRyZXNzKDB4Q09BKSkKCiAgICBsZXQgY29hID0gYWNjb3VudC5zdG9yYWdlLmJvcnJvdzxhdXRoKEVWTS5DYWxsKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KAogICAgICAgIGZyb206IC9zdG9yYWdlL2V2bQogICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyByZWZlcmVuY2UgdG8gdGhlIENPQSEiKQogICAgbGV0IGFkZHJlc3NCeXRlcyA9IGhleEVuY29kZWRBZGRyZXNzLmRlY29kZUhleCgpLnRvQ29uc3RhbnRTaXplZDxbVUludDg7IDIwXT4oKSEKCiAgICBsZXQgdHhSZXN1bHQgPSBjb2EuY2FsbCgKICAgICAgICB0bzogRVZNLkVWTUFkZHJlc3MoYnl0ZXM6IGFkZHJlc3NCeXRlcyksCiAgICAgICAgZGF0YTogaGV4RW5jb2RlZERhdGEuZGVjb2RlSGV4KCksCiAgICAgICAgZ2FzTGltaXQ6IDE1MDAwMDAwLCAvLyB0b2RvIG1ha2UgaXQgY29uZmlndXJhYmxlLCBtYXggZm9yIG5vdwogICAgICAgIHZhbHVlOiBFVk0uQmFsYW5jZShhdHRvZmxvdzogMCkKICAgICkKCiAgICBhc3NlcnQoCiAgICAgICAgdHhSZXN1bHQuc3RhdHVzID09IEVWTS5TdGF0dXMuZmFpbGVkIHx8IHR4UmVzdWx0LnN0YXR1cyA9PSBFVk0uU3RhdHVzLnN1Y2Nlc3NmdWwsCiAgICAgICAgbWVzc2FnZTogImV2bV9lcnJvcj0iLmNvbmNhdCh0eFJlc3VsdC5lcnJvck1lc3NhZ2UpLmNvbmNhdCgiXG4iKQogICAgKQoKICAgIHJldHVybiBTdHJpbmcuZW5jb2RlSGV4KGNhbGxSZXN1bHQuZGF0YSkKfQo=",
          "callContract": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgY2FsbENvbnRyYWN0IC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4OWEwNzY2ZDkzYjY2MDhiNwoKaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4N2U2MGRmMDQyYTljMDg2OAoKaW1wb3J0IEVWTSBmcm9tIDB4OGM1MzAzZWFhMjYyMDJkNgoKCi8vLyBUcmFuc2ZlcnMgJEZMT1cgZnJvbSB0aGUgc2lnbmVyJ3MgYWNjb3VudCBDYWRlbmNlIEZsb3cgYmFsYW5jZSB0byB0aGUgcmVjaXBpZW50J3MgaGV4LWVuY29kZWQgRVZNIGFkZHJlc3MuCi8vLyBOb3RlIHRoYXQgYSBDT0EgbXVzdCBoYXZlIGEgJEZMT1cgYmFsYW5jZSBpbiBFVk0gYmVmb3JlIHRyYW5zZmVycmluZyB2YWx1ZSB0byBhbm90aGVyIEVWTSBhZGRyZXNzLgovLy8KdHJhbnNhY3Rpb24odG9FVk1BZGRyZXNzSGV4OiBTdHJpbmcsIGFtb3VudDogVUZpeDY0LCBkYXRhOiBbVUludDhdLCBnYXNMaW1pdDogVUludDY0KSB7CgogICAgbGV0IGNvYTogYXV0aChFVk0uV2l0aGRyYXcsIEVWTS5DYWxsKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQKICAgIGxldCByZWNpcGllbnRFVk1BZGRyZXNzOiBFVk0uRVZNQWRkcmVzcwoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKEJvcnJvd1ZhbHVlLCBTYXZlVmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogL3N0b3JhZ2UvZXZtKSA9PSBuaWwgewogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKDwtRVZNLmNyZWF0ZUNhZGVuY2VPd25lZEFjY291bnQoKSwgdG86IC9zdG9yYWdlL2V2bSkKICAgICAgICB9CiAgICAgICAgc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uV2l0aGRyYXcsIEVWTS5DYWxsKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBicmlkZ2VkIGFjY291bnQiKQoKICAgICAgICBzZWxmLnJlY2lwaWVudEVWTUFkZHJlc3MgPSBFVk0uYWRkcmVzc0Zyb21TdHJpbmcodG9FVk1BZGRyZXNzSGV4KQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIGlmIHNlbGYucmVjaXBpZW50RVZNQWRkcmVzcy5ieXRlcyA9PSBzZWxmLmNvYS5hZGRyZXNzKCkuYnl0ZXMgewogICAgICAgICAgICByZXR1cm4KICAgICAgICB9CiAgICAgICAgbGV0IHZhbHVlQmFsYW5jZSA9IEVWTS5CYWxhbmNlKGF0dG9mbG93OiAwKQogICAgICAgIHZhbHVlQmFsYW5jZS5zZXRGTE9XKGZsb3c6IGFtb3VudCkKICAgICAgICBsZXQgdHhSZXN1bHQgPSBzZWxmLmNvYS5jYWxsKAogICAgICAgICAgICB0bzogc2VsZi5yZWNpcGllbnRFVk1BZGRyZXNzLAogICAgICAgICAgICBkYXRhOiBkYXRhLAogICAgICAgICAgICBnYXNMaW1pdDogZ2FzTGltaXQsCiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZUJhbGFuY2UKICAgICAgICApCiAgICAgICAgYXNzZXJ0KAogICAgICAgICAgICB0eFJlc3VsdC5zdGF0dXMgPT0gRVZNLlN0YXR1cy5mYWlsZWQgfHwgdHhSZXN1bHQuc3RhdHVzID09IEVWTS5TdGF0dXMuc3VjY2Vzc2Z1bCwKICAgICAgICAgICAgbWVzc2FnZTogImV2bV9lcnJvcj0iLmNvbmNhdCh0eFJlc3VsdC5lcnJvck1lc3NhZ2UpLmNvbmNhdCgiXG4iKQogICAgICAgICkKICAgIH0KfQ==",
          "callContractV2": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgY2FsbENvbnRyYWN0VjIgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHg5YTA3NjZkOTNiNjYwOGI3CgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHg3ZTYwZGYwNDJhOWMwODY4CgppbXBvcnQgRVZNIGZyb20gMHg4YzUzMDNlYWEyNjIwMmQ2CgoKLy8vIFRyYW5zZmVycyAkRkxPVyBmcm9tIHRoZSBzaWduZXIncyBhY2NvdW50IENhZGVuY2UgRmxvdyBiYWxhbmNlIHRvIHRoZSByZWNpcGllbnQncyBoZXgtZW5jb2RlZCBFVk0gYWRkcmVzcy4KLy8vIE5vdGUgdGhhdCBhIENPQSBtdXN0IGhhdmUgYSAkRkxPVyBiYWxhbmNlIGluIEVWTSBiZWZvcmUgdHJhbnNmZXJyaW5nIHZhbHVlIHRvIGFub3RoZXIgRVZNIGFkZHJlc3MuCi8vLwp0cmFuc2FjdGlvbih0b0VWTUFkZHJlc3NIZXg6IFN0cmluZywgYW1vdW50OiBVSW50MjU2LCBkYXRhOiBbVUludDhdLCBnYXNMaW1pdDogVUludDY0KSB7CgogICAgbGV0IGNvYTogYXV0aChFVk0uV2l0aGRyYXcsIEVWTS5DYWxsKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQKICAgIGxldCByZWNpcGllbnRFVk1BZGRyZXNzOiBFVk0uRVZNQWRkcmVzcwoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKEJvcnJvd1ZhbHVlLCBTYXZlVmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogL3N0b3JhZ2UvZXZtKSA9PSBuaWwgewogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKDwtRVZNLmNyZWF0ZUNhZGVuY2VPd25lZEFjY291bnQoKSwgdG86IC9zdG9yYWdlL2V2bSkKICAgICAgICB9CiAgICAgICAgc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uV2l0aGRyYXcsIEVWTS5DYWxsKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBicmlkZ2VkIGFjY291bnQiKQoKICAgICAgICBzZWxmLnJlY2lwaWVudEVWTUFkZHJlc3MgPSBFVk0uYWRkcmVzc0Zyb21TdHJpbmcodG9FVk1BZGRyZXNzSGV4KQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIGlmIHNlbGYucmVjaXBpZW50RVZNQWRkcmVzcy5ieXRlcyA9PSBzZWxmLmNvYS5hZGRyZXNzKCkuYnl0ZXMgewogICAgICAgICAgICByZXR1cm4KICAgICAgICB9CiAgICAgICAgbGV0IHZhbHVlQmFsYW5jZSA9IEVWTS5CYWxhbmNlKGF0dG9mbG93OiBVSW50KGFtb3VudCkpCgogICAgICAgIGxldCB0eFJlc3VsdCA9IHNlbGYuY29hLmNhbGwoCiAgICAgICAgICAgIHRvOiBzZWxmLnJlY2lwaWVudEVWTUFkZHJlc3MsCiAgICAgICAgICAgIGRhdGE6IGRhdGEsCiAgICAgICAgICAgIGdhc0xpbWl0OiBnYXNMaW1pdCwKICAgICAgICAgICAgdmFsdWU6IHZhbHVlQmFsYW5jZQogICAgICAgICkKICAgICAgICBhc3NlcnQoCiAgICAgICAgICAgIHR4UmVzdWx0LnN0YXR1cyA9PSBFVk0uU3RhdHVzLmZhaWxlZCB8fCB0eFJlc3VsdC5zdGF0dXMgPT0gRVZNLlN0YXR1cy5zdWNjZXNzZnVsLAogICAgICAgICAgICBtZXNzYWdlOiAiZXZtX2Vycm9yPSIuY29uY2F0KHR4UmVzdWx0LmVycm9yTWVzc2FnZSkuY29uY2F0KCJcbiIpCiAgICAgICAgKQogICAgfQp9",
          "checkCoaLink": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgY2hlY2tDb2FMaW5rIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRVZNIGZyb20gMHg4YzUzMDNlYWEyNjIwMmQ2CgoKLy8vIFJldHVybnMgd2hldGhlciBhIENPQSBpcyBzdG9yZWQgYW5kIGl0cyBwdWJsaWMgY2FwYWJpbGl0eSBpcyBwdWJsaXNoZWQKLy8vCi8vLyBAcGFyYW0gZmxvd0FkZHJlc3M6IFRoZSBGbG93IGFkZHJlc3MgdG8gY2hlY2sgZm9yIGEgQ09BCi8vLwovLy8gQHJldHVybiBCb29sOiBXaGV0aGVyIGEgQ09BIGlzIHN0b3JlZCBhbmQgaXRzIHB1YmxpYyBjYXBhYmlsaXR5IGlzIHB1Ymxpc2hlZCwgbmlsIGlmIG5vIENPQSBpcyBzdG9yZWQKLy8vCmFjY2VzcyhhbGwpIGZ1biBtYWluKGZsb3dBZGRyZXNzOiBBZGRyZXNzKTogQm9vbD8gewogICAgLy8gQm9ycm93IHRoZSBDT0EgdG8gY2hlY2sgaWYgb25lIGlzIHN0b3JlZAogICAgaWYgbGV0IGFkZHJlc3M6IEVWTS5FVk1BZGRyZXNzID0gZ2V0QXV0aEFjY291bnQ8YXV0aChCb3Jyb3dWYWx1ZSkgJkFjY291bnQ+KGZsb3dBZGRyZXNzKQogICAgICAgIC5zdG9yYWdlLmJvcnJvdzwmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSk/LmFkZHJlc3MoKSB7CiAgICAgICAgLy8gQ09BIGZvdW5kIC0gY2hlY2sgaWYgdGhlIHB1YmxpYyBjYXBhYmlsaXR5IGlzIHB1Ymxpc2hlZAogICAgICAgIHJldHVybiBnZXRBY2NvdW50KGZsb3dBZGRyZXNzKS5jYXBhYmlsaXRpZXMuYm9ycm93PCZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oL3B1YmxpYy9ldm0pICE9IG5pbAogICAgfQogICAgLy8gTm8gQ09BIGZvdW5kIC0gcmV0dXJuIG5pbAogICAgcmV0dXJuIG5pbAp9",
          "coaLink": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgY29hTGluayAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IENyeXB0bwppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4OWEwNzY2ZDkzYjY2MDhiNwoKaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4N2U2MGRmMDQyYTljMDg2OAoKaW1wb3J0IEVWTSBmcm9tIDB4OGM1MzAzZWFhMjYyMDJkNgoKCi8vLyBUaGlzIHRyYW5zYWN0aW9uIHB1Ymxpc2hlcyBhIHB1YmxpYyAqKnVuZW50aXRsZWQqKiBjYXBhYmlsaXR5IGZvciB0aGUgQ09BIHN0b3JlZCBpbiB0aGUgc2lnbmluZyBhY2NvdW50J3Mgc3RvcmFnZQovLy8gd2hlcmUgYSBDT0EgaGFzIGFscmVhZHkgYmVlbiBzdG9yZWQuCi8vLwp0cmFuc2FjdGlvbiB7CgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQm9ycm93VmFsdWUsIFN0b3JhZ2VDYXBhYmlsaXRpZXMsIFB1Ymxpc2hDYXBhYmlsaXR5LCBVbnB1Ymxpc2hDYXBhYmlsaXR5KSAmQWNjb3VudCkgewogICAgICAgIC8vIEVuc3VyZSBhIENPQSBpcyBzdG9yZWQKICAgICAgICBsZXQgY29hUGF0aCA9IC9zdG9yYWdlL2V2bQogICAgICAgIGxldCBjb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uQ2FsbCkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50Pihmcm9tOiAvc3RvcmFnZS9ldm0pCiAgICAgICAgICAgID8/IHBhbmljKAogICAgICAgICAgICAgICAgIkNvdWxkIG5vdCBmaW5kIENPQSBpbiBzdG9yYWdlIGF0IHBhdGggIi5jb25jYXQoY29hUGF0aC50b1N0cmluZygpKQogICAgICAgICAgICAgICAgLmNvbmNhdCgiLiBNYWtlIHN1cmUgdGhlIHNpZ25pbmcgYWNjb3VudCBoYXMgaW5pdGlhbGl6ZWQgYSBDT0EgYXQgdGhlIGV4cGVjdGVkIHBhdGguIikKICAgICAgICAgICAgKQoKICAgICAgICAvLyBQdWJsaXNoIGEgcHVibGljICoqdW5lbnRpdGxlZCoqIGNhcGFiaWxpdHkKICAgICAgICBsZXQgY29hUHVibGljUGF0aCA9IC9wdWJsaWMvZXZtCiAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy51bnB1Ymxpc2goY29hUHVibGljUGF0aCkKICAgICAgICBsZXQgY29hQ2FwYWJpbGl0eSA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGNvYVBhdGgpCiAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy5wdWJsaXNoKGNvYUNhcGFiaWxpdHksIGF0OiBjb2FQdWJsaWNQYXRoKQogICAgfQp9",
          "createCoa": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgY3JlYXRlQ29hIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4OWEwNzY2ZDkzYjY2MDhiNwoKaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4N2U2MGRmMDQyYTljMDg2OAoKaW1wb3J0IEVWTSBmcm9tIDB4OGM1MzAzZWFhMjYyMDJkNgoKCgovLy8gQ3JlYXRlcyBhIENPQSBhbmQgc2F2ZXMgaXQgaW4gdGhlIHNpZ25lcidzIEZsb3cgYWNjb3VudCAmIHBhc3NpbmcgdGhlIGdpdmVuIHZhbHVlIG9mIEZsb3cgaW50byBGbG93RVZNCnRyYW5zYWN0aW9uKGFtb3VudDogVUZpeDY0KSB7CiAgICBsZXQgc2VudFZhdWx0OiBARmxvd1Rva2VuLlZhdWx0CiAgICBsZXQgYXV0aDogYXV0aChJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUsIFVucHVibGlzaENhcGFiaWxpdHkpICZBY2NvdW50CgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQm9ycm93VmFsdWUsIElzc3VlU3RvcmFnZUNhcGFiaWxpdHlDb250cm9sbGVyLCBQdWJsaXNoQ2FwYWJpbGl0eSwgU2F2ZVZhbHVlLCBVbnB1Ymxpc2hDYXBhYmlsaXR5KSAmQWNjb3VudCkgewogICAgICAgIGxldCB2YXVsdFJlZiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZGbG93VG9rZW4uVmF1bHQ+KAogICAgICAgICAgICAgICAgZnJvbTogL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyByZWZlcmVuY2UgdG8gdGhlIG93bmVyJ3MgVmF1bHQhIikKCiAgICAgICAgc2VsZi5zZW50VmF1bHQgPC0gdmF1bHRSZWYud2l0aGRyYXcoYW1vdW50OiBhbW91bnQpIGFzISBARmxvd1Rva2VuLlZhdWx0CiAgICAgICAgc2VsZi5hdXRoID0gc2lnbmVyCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgbGV0IGNvYSA8LSBFVk0uY3JlYXRlQ2FkZW5jZU93bmVkQWNjb3VudCgpCiAgICAgICAgY29hLmRlcG9zaXQoZnJvbTogPC1zZWxmLnNlbnRWYXVsdCkKCiAgICAgICAgbG9nKGNvYS5iYWxhbmNlKCkuaW5GTE9XKCkpCiAgICAgICAgbGV0IHN0b3JhZ2VQYXRoID0gU3RvcmFnZVBhdGgoaWRlbnRpZmllcjogImV2bSIpIQogICAgICAgIGxldCBwdWJsaWNQYXRoID0gUHVibGljUGF0aChpZGVudGlmaWVyOiAiZXZtIikhCiAgICAgICAgc2VsZi5hdXRoLnN0b3JhZ2Uuc2F2ZTxARVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KDwtY29hLCB0bzogc3RvcmFnZVBhdGgpCiAgICAgICAgbGV0IGFkZHJlc3NhYmxlQ2FwID0gc2VsZi5hdXRoLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oc3RvcmFnZVBhdGgpCiAgICAgICAgc2VsZi5hdXRoLmNhcGFiaWxpdGllcy51bnB1Ymxpc2gocHVibGljUGF0aCkKICAgICAgICBzZWxmLmF1dGguY2FwYWJpbGl0aWVzLnB1Ymxpc2goYWRkcmVzc2FibGVDYXAsIGF0OiBwdWJsaWNQYXRoKQogICAgfQp9",
          "createCoaEmpty": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgY3JlYXRlQ29hRW1wdHkgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHg5YTA3NjZkOTNiNjYwOGI3CgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHg3ZTYwZGYwNDJhOWMwODY4CgppbXBvcnQgRVZNIGZyb20gMHg4YzUzMDNlYWEyNjIwMmQ2CgoKCi8vLyBDcmVhdGVzIGEgQ09BIGFuZCBzYXZlcyBpdCBpbiB0aGUgc2lnbmVyJ3MgRmxvdyBhY2NvdW50ICYgcGFzc2luZyB0aGUgZ2l2ZW4gdmFsdWUgb2YgRmxvdyBpbnRvIEZsb3dFVk0KdHJhbnNhY3Rpb24oKSB7CiAgICBsZXQgYXV0aDogYXV0aChJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUsIFVucHVibGlzaENhcGFiaWxpdHkpICZBY2NvdW50CgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQm9ycm93VmFsdWUsIElzc3VlU3RvcmFnZUNhcGFiaWxpdHlDb250cm9sbGVyLCBQdWJsaXNoQ2FwYWJpbGl0eSwgU2F2ZVZhbHVlLCBVbnB1Ymxpc2hDYXBhYmlsaXR5KSAmQWNjb3VudCkgewogICAgICAgIGxldCB2YXVsdFJlZiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZGbG93VG9rZW4uVmF1bHQ+KAogICAgICAgICAgICAgICAgZnJvbTogL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyByZWZlcmVuY2UgdG8gdGhlIG93bmVyJ3MgVmF1bHQhIikKICAgICAgICBzZWxmLmF1dGggPSBzaWduZXIKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICBsZXQgY29hIDwtIEVWTS5jcmVhdGVDYWRlbmNlT3duZWRBY2NvdW50KCkKICAgICAgICBsZXQgc3RvcmFnZVBhdGggPSBTdG9yYWdlUGF0aChpZGVudGlmaWVyOiAiZXZtIikhCiAgICAgICAgbGV0IHB1YmxpY1BhdGggPSBQdWJsaWNQYXRoKGlkZW50aWZpZXI6ICJldm0iKSEKICAgICAgICBzZWxmLmF1dGguc3RvcmFnZS5zYXZlPEBFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oPC1jb2EsIHRvOiBzdG9yYWdlUGF0aCkKICAgICAgICBsZXQgYWRkcmVzc2FibGVDYXAgPSBzZWxmLmF1dGguY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JkVWTS5DYWRlbmNlT3duZWRBY2NvdW50PihzdG9yYWdlUGF0aCkKICAgICAgICBzZWxmLmF1dGguY2FwYWJpbGl0aWVzLnVucHVibGlzaChwdWJsaWNQYXRoKQogICAgICAgIHNlbGYuYXV0aC5jYXBhYmlsaXRpZXMucHVibGlzaChhZGRyZXNzYWJsZUNhcCwgYXQ6IHB1YmxpY1BhdGgpCiAgICB9Cn0=",
          "deployContract": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZGVwbG95Q29udHJhY3QgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBFVk0gZnJvbSAweDhjNTMwM2VhYTI2MjAyZDYKCgoKdHJhbnNhY3Rpb24oY29kZTogU3RyaW5nKSB7CiAgICBsZXQgY29hOiBhdXRoKEVWTS5EZXBsb3kpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudAoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UpICZBY2NvdW50KSB7CiAgICAgICAgc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uRGVwbG95KSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KAogICAgICAgIGZyb206IC9zdG9yYWdlL2V2bSkgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVmZXJlbmNlIHRvIHRoZSBDT0EhIikKCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgIHNlbGYuY29hLmRlcGxveShjb2RlOiBjb2RlLmRlY29kZUhleCgpLCAgZ2FzTGltaXQ6IDE1MDAwMDAwLCB2YWx1ZTogRVZNLkJhbGFuY2UoYXR0b2Zsb3c6IDApKQogICAgfQp9Cg==",
          "estimateGas": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZXN0aW1hdGVHYXMgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBFVk0gZnJvbSAweDhjNTMwM2VhYTI2MjAyZDYKCgphY2Nlc3MoYWxsKQpmdW4gbWFpbihoZXhFbmNvZGVkVHg6IFN0cmluZywgYWRkcmVzczogQWRkcmVzcyk6IFtVSW50NjQ7IDJdIHsKICAgIGxldCBhY2NvdW50ID0gZ2V0QXV0aEFjY291bnQ8YXV0aChTdG9yYWdlKSAmQWNjb3VudD4oYWRkcmVzcykKCiAgICBsZXQgY29hID0gYWNjb3VudC5zdG9yYWdlLmJvcnJvdzwmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KAogICAgICAgIGZyb206IC9zdG9yYWdlL2V2bQogICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyByZWZlcmVuY2UgdG8gdGhlIENPQSEiKQogICAgbGV0IHR4UmVzdWx0ID0gRVZNLnJ1bih0eDogaGV4RW5jb2RlZFR4LmRlY29kZUhleCgpLCBjb2luYmFzZTogY29hLmFkZHJlc3MoKSkKCiAgICBhc3NlcnQoCiAgICAgICAgdHhSZXN1bHQuc3RhdHVzID09IEVWTS5TdGF0dXMuZmFpbGVkIHx8IHR4UmVzdWx0LnN0YXR1cyA9PSBFVk0uU3RhdHVzLnN1Y2Nlc3NmdWwsCiAgICAgICAgbWVzc2FnZTogImV2bV9lcnJvcj0iLmNvbmNhdCh0eFJlc3VsdC5lcnJvck1lc3NhZ2UpLmNvbmNhdCgiXG4iKQogICAgKQoKICAgIHJldHVybiBbdHhSZXN1bHQuZXJyb3JDb2RlLCB0eFJlc3VsdC5nYXNVc2VkXQp9Cg==",
          "fundCoa": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZnVuZENvYSAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweDlhMDc2NmQ5M2I2NjA4YjcKCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweDdlNjBkZjA0MmE5YzA4NjgKCmltcG9ydCBFVk0gZnJvbSAweDhjNTMwM2VhYTI2MjAyZDYKCgp0cmFuc2FjdGlvbihhbW91bnQ6IFVGaXg2NCkgewogICAgbGV0IHNlbnRWYXVsdDogQEZsb3dUb2tlbi5WYXVsdAogICAgbGV0IGF1dGg6IGF1dGgoU3RvcmFnZSkgJkFjY291bnQKICAgIGxldCBjb2E6ICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudAoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UpICZBY2NvdW50KSB7CiAgICAgICAgbGV0IHZhdWx0UmVmID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJkZsb3dUb2tlbi5WYXVsdD4oCiAgICAgICAgICAgIGZyb206IC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyByZWZlcmVuY2UgdG8gdGhlIG93bmVyJ3MgVmF1bHQhIikKCgogICAgICAgIGxldCBjb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8JkVWTS5DYWRlbmNlT3duZWRBY2NvdW50PigKICAgICAgICAgICAgZnJvbTogL3N0b3JhZ2UvZXZtCiAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyByZWZlcmVuY2UgdG8gdGhlIENPQSEiKQoKICAgICAgICBzZWxmLnNlbnRWYXVsdCA8LSB2YXVsdFJlZi53aXRoZHJhdyhhbW91bnQ6IGFtb3VudCkgYXMhIEBGbG93VG9rZW4uVmF1bHQKICAgICAgICBzZWxmLmF1dGggPSBzaWduZXIKICAgICAgICBzZWxmLmNvYSA9IGNvYQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIHNlbGYuY29hLmRlcG9zaXQoZnJvbTogPC1zZWxmLnNlbnRWYXVsdCkKICAgIH0KfQo=",
          "fundEvmAddr": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZnVuZEV2bUFkZHIgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHg5YTA3NjZkOTNiNjYwOGI3CgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHg3ZTYwZGYwNDJhOWMwODY4CgppbXBvcnQgRVZNIGZyb20gMHg4YzUzMDNlYWEyNjIwMmQ2CgoKdHJhbnNhY3Rpb24oZXZtQWRkcjogU3RyaW5nLCBhbW91bnQ6IFVGaXg2NCkgewoKICAgIC8vIFRoZSBWYXVsdCByZXNvdXJjZSB0aGF0IGhvbGRzIHRoZSB0b2tlbnMgdGhhdCBhcmUgYmVpbmcgdHJhbnNmZXJlZAogICAgbGV0IHNlbnRWYXVsdDogQHtGdW5naWJsZVRva2VuLlZhdWx0fQoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UsIEJvcnJvd1ZhbHVlKSAmQWNjb3VudCkgewogICAgICAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIHNpZ25lcidzIHN0b3JlZCB2YXVsdAogICAgICAgIGxldCB2YXVsdFJlZiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICY8VG9rZW4+LlZhdWx0Pihmcm9tOiA8VG9rZW5TdG9yYWdlUGF0aD4pCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlZmVyZW5jZSB0byB0aGUgb3duZXIncyBWYXVsdCEiKQoKICAgICAgICAvLyBXaXRoZHJhdyB0b2tlbnMgZnJvbSB0aGUgc2lnbmVyJ3Mgc3RvcmVkIHZhdWx0CiAgICAgICAgc2VsZi5zZW50VmF1bHQgPC0gdmF1bHRSZWYud2l0aGRyYXcoYW1vdW50OiBhbW91bnQpCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgLy8gR2V0IHRoZSByZWNpcGllbnQncyBwdWJsaWMgYWNjb3VudCBvYmplY3QKICAgICAgICBsZXQgcmVjaXBpZW50QWNjb3VudCA9IGdldEFjY291bnQocmVjaXBpZW50KQoKICAgICAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIHJlY2lwaWVudCdzIFJlY2VpdmVyCiAgICAgICAgbGV0IHJlY2VpdmVyUmVmID0gcmVjaXBpZW50QWNjb3VudC5jYXBhYmlsaXRpZXMuYm9ycm93PCZ7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KDxUb2tlblJlY2VpdmVyUGF0aD4pIQogICAgICAgICAgICAKICAgICAgICAvLyBEZXBvc2l0IHRoZSB3aXRoZHJhd24gdG9rZW5zIGluIHRoZSByZWNpcGllbnQncyByZWNlaXZlcgogICAgICAgIHJlY2VpdmVyUmVmLmRlcG9zaXQoZnJvbTogPC1zZWxmLnNlbnRWYXVsdCkKICAgIH0KfQ==",
          "getAddr": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0QWRkciAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEVWTSBmcm9tIDB4OGM1MzAzZWFhMjYyMDJkNgoKCmFjY2VzcyhhbGwpIGZ1biBtYWluKGZsb3dBZGRyZXNzOiBBZGRyZXNzKTogU3RyaW5nPyB7CiAgICBpZiBsZXQgYWRkcmVzczogRVZNLkVWTUFkZHJlc3MgPSBnZXRBdXRoQWNjb3VudDxhdXRoKEJvcnJvd1ZhbHVlKSAmQWNjb3VudD4oZmxvd0FkZHJlc3MpCiAgICAgICAgLnN0b3JhZ2UuYm9ycm93PCZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oZnJvbTogL3N0b3JhZ2UvZXZtKT8uYWRkcmVzcygpIHsKICAgICAgICBsZXQgYnl0ZXM6IFtVSW50OF0gPSBbXQogICAgICAgIGZvciBieXRlIGluIGFkZHJlc3MuYnl0ZXMgewogICAgICAgICAgICBieXRlcy5hcHBlbmQoYnl0ZSkKICAgICAgICB9CiAgICAgICAgcmV0dXJuIFN0cmluZy5lbmNvZGVIZXgoYnl0ZXMpCiAgICB9CiAgICByZXR1cm4gbmlsCn0=",
          "getBalance": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0QmFsYW5jZSAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEVWTSBmcm9tIDB4OGM1MzAzZWFhMjYyMDJkNgoKCmFjY2VzcyhhbGwpCmZ1biBtYWluKGhleEVuY29kZWRBZGRyZXNzOiBTdHJpbmcpOiBVSW50IHsKICAgIGxldCBhZGRyZXNzQnl0ZXMgPSBoZXhFbmNvZGVkQWRkcmVzcy5kZWNvZGVIZXgoKS50b0NvbnN0YW50U2l6ZWQ8W1VJbnQ4OyAyMF0+KCkhCiAgICBsZXQgYWRkcmVzcyA9IEVWTS5FVk1BZGRyZXNzKGJ5dGVzOiBhZGRyZXNzQnl0ZXMpCgogICAgcmV0dXJuIGFkZHJlc3MuYmFsYW5jZSgpLmluQXR0b0ZMT1coKQp9Cg==",
          "getCoaAddr": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0Q29hQWRkciAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEVWTSBmcm9tIDB4OGM1MzAzZWFhMjYyMDJkNgoKCmFjY2VzcyhhbGwpCmZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MpOiBTdHJpbmcgewogICAgbGV0IGFjY291bnQgPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UpICZBY2NvdW50PihhZGRyZXNzKQoKICAgIGxldCBjb2EgPSBhY2NvdW50LnN0b3JhZ2UuYm9ycm93PCZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oCiAgICAgICAgZnJvbTogL3N0b3JhZ2UvZXZtCiAgICApCgogICAgaWYgY29hID09IG5pbCB7IAogICAgICAgIHJldHVybiAiIgogICAgfSBlbHNlIHsKICAgICAgICBsZXQgY29hQWRkciA9IGNvYT8uYWRkcmVzcygpIAoKICAgICAgICBsZXQgYWRkckJ5dGU6IFtVSW50OF0gPSBbXQoKICAgICAgICBmb3IgYnl0ZSBpbiBjb2FBZGRyPy5ieXRlcyEgewogICAgICAgICAgICBhZGRyQnl0ZS5hcHBlbmQoYnl0ZSkKICAgICAgICB9CgogICAgICAgIHJldHVybiBTdHJpbmcuZW5jb2RlSGV4KGFkZHJCeXRlKQogICAgfQp9Cg==",
          "getCoaBalance": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0Q29hQmFsYW5jZSAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEVWTSBmcm9tIDB4OGM1MzAzZWFhMjYyMDJkNgoKCmFjY2VzcyhhbGwpCmZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MpOiBVRml4NjQgewogICAgIGxldCBhY2NvdW50ID0gZ2V0QXV0aEFjY291bnQ8YXV0aChTdG9yYWdlKSAmQWNjb3VudD4oYWRkcmVzcykKCiAgICBsZXQgY29hID0gYWNjb3VudC5zdG9yYWdlLmJvcnJvdzwmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KAogICAgICAgIGZyb206IC9zdG9yYWdlL2V2bQogICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyByZWZlcmVuY2UgdG8gdGhlIENPQSEiKQogICAgCiAgICByZXR1cm4gY29hLmJhbGFuY2UoKS5pbkZMT1coKQp9Cg==",
          "getCode": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0Q29kZSAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEVWTSBmcm9tIDB4OGM1MzAzZWFhMjYyMDJkNgoKCmFjY2VzcyhhbGwpCmZ1biBtYWluKGhleEVuY29kZWRBZGRyZXNzOiBTdHJpbmcpOiBTdHJpbmcgewogICAgbGV0IGFkZHJlc3NCeXRlcyA9IGhleEVuY29kZWRBZGRyZXNzLmRlY29kZUhleCgpLnRvQ29uc3RhbnRTaXplZDxbVUludDg7IDIwXT4oKSEKICAgIGxldCBhZGRyZXNzID0gRVZNLkVWTUFkZHJlc3MoYnl0ZXM6IGFkZHJlc3NCeXRlcykKCiAgICByZXR1cm4gU3RyaW5nLmVuY29kZUhleChhZGRyZXNzLmNvZGUoKSkKfQo=",
          "getNonce": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0Tm9uY2UgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBFVk0gZnJvbSAweDhjNTMwM2VhYTI2MjAyZDYKCgphY2Nlc3MoYWxsKQpmdW4gbWFpbihoZXhFbmNvZGVkQWRkcmVzczogU3RyaW5nKTogVUludDY0IHsKICAgIGxldCBhZGRyZXNzQnl0ZXMgPSBoZXhFbmNvZGVkQWRkcmVzcy5kZWNvZGVIZXgoKS50b0NvbnN0YW50U2l6ZWQ8W1VJbnQ4OyAyMF0+KCkhCiAgICBsZXQgYWRkcmVzcyA9IEVWTS5FVk1BZGRyZXNzKGJ5dGVzOiBhZGRyZXNzQnl0ZXMpCgogICAgcmV0dXJuIGFkZHJlc3Mubm9uY2UoKQp9Cg==",
          "newAccountAndCoa": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgbmV3QWNjb3VudEFuZENvYSAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IENyeXB0bwppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4OWEwNzY2ZDkzYjY2MDhiNwoKaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4N2U2MGRmMDQyYTljMDg2OAoKaW1wb3J0IEVWTSBmcm9tIDB4OGM1MzAzZWFhMjYyMDJkNgoKCnRyYW5zYWN0aW9uKHB1YmxpY0tleTogU3RyaW5nLCBzaWduYXR1cmVBbGdvcml0aG06IFVJbnQ4LCBoYXNoQWxnb3JpdGhtOiBVSW50OCwgd2VpZ2h0OiBVRml4NjQpIHsKICAgIGxldCBzZW50VmF1bHQ6IEBGbG93VG9rZW4uVmF1bHQKICAgIGxldCBhdXRoOiBhdXRoKFN0b3JhZ2UpICZBY2NvdW50CgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSkgJkFjY291bnQpIHsKCiAgICAgICAgbGV0IGFjY291bnQgPSBBY2NvdW50KHBheWVyOiBzaWduZXIpCgogICAgICAgIGxldCBrZXkgPSBQdWJsaWNLZXkoCiAgICAgICAgICAgIHB1YmxpY0tleTogcHVibGljS2V5LmRlY29kZUhleCgpLAogICAgICAgICAgICBzaWduYXR1cmVBbGdvcml0aG06IFNpZ25hdHVyZUFsZ29yaXRobShyYXdWYWx1ZTogc2lnbmF0dXJlQWxnb3JpdGhtKSEKICAgICAgICApCgogICAgICAgIGFjY291bnQua2V5cy5hZGQocHVibGljS2V5OiBrZXksIGhhc2hBbGdvcml0aG06IEhhc2hBbGdvcml0aG0ocmF3VmFsdWU6IGhhc2hBbGdvcml0aG0pISwgd2VpZ2h0OiB3ZWlnaHQpCgkJCiAgICAgICAgbGV0IHZhdWx0UmVmID0gYWNjb3VudC5zdG9yYWdlLmJvcnJvdzxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZGbG93VG9rZW4uVmF1bHQ+KAogICAgICAgICAgICBmcm9tOiAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICkgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVmZXJlbmNlIHRvIHRoZSBvd25lcidzIFZhdWx0ISIpCgogICAgICAgIHNlbGYuc2VudFZhdWx0IDwtIHZhdWx0UmVmLndpdGhkcmF3KGFtb3VudDogMC4wKSBhcyEgQEZsb3dUb2tlbi5WYXVsdAogICAgICAgIHNlbGYuYXV0aCA9IGFjY291bnQKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICBsZXQgYWNjb3VudCA8LSBFVk0uY3JlYXRlQ2FkZW5jZU93bmVkQWNjb3VudCgpCiAgICAgICAgbG9nKGFjY291bnQuYWRkcmVzcygpKQogICAgICAgIGFjY291bnQuZGVwb3NpdChmcm9tOiA8LXNlbGYuc2VudFZhdWx0KQoKICAgICAgICBsb2coYWNjb3VudC5iYWxhbmNlKCkpCiAgICAgICAgc2VsZi5hdXRoLnN0b3JhZ2Uuc2F2ZTxARVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KDwtYWNjb3VudCwgdG86IFN0b3JhZ2VQYXRoKGlkZW50aWZpZXI6ICJldm0iKSEpCiAgICB9Cn0K",
          "run": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgcnVuIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRVZNIGZyb20gMHg4YzUzMDNlYWEyNjIwMmQ2CgoKdHJhbnNhY3Rpb24oaGV4RW5jb2RlZFR4OiBTdHJpbmcpIHsKICAgIGxldCBjb2E6ICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudAoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UpICZBY2NvdW50KSB7CiAgICAgICAgc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8JkVWTS5DYWRlbmNlT3duZWRBY2NvdW50PigKICAgICAgICAgICAgZnJvbTogL3N0b3JhZ2UvZXZtCiAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyByZWZlcmVuY2UgdG8gdGhlIENPQSEiKQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIGxldCB0eFJlc3VsdCA9IEVWTS5ydW4odHg6IGhleEVuY29kZWRUeC5kZWNvZGVIZXgoKSwgY29pbmJhc2U6IHNlbGYuY29hLmFkZHJlc3MoKSkKICAgICAgICAvLyB0b2RvIG9ubHkgdGVtcG9yYXJ5IHVudGlsIHdlIGNvcnJlY3RseSBoYW5kbGUgZmFpbHVyZSBldmVudHMKICAgICAgICBhc3NlcnQoCiAgICAgICAgICAgIHR4UmVzdWx0LnN0YXR1cyA9PSBFVk0uU3RhdHVzLmZhaWxlZCB8fCB0eFJlc3VsdC5zdGF0dXMgPT0gRVZNLlN0YXR1cy5zdWNjZXNzZnVsLAogICAgICAgICAgICBtZXNzYWdlOiAiZXZtX2Vycm9yPSIuY29uY2F0KHR4UmVzdWx0LmVycm9yTWVzc2FnZSkuY29uY2F0KCJcbiIpCiAgICAgICAgKQogICAgfQp9Cg==",
          "transferCoa": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgdHJhbnNmZXJDb2EgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHg5YTA3NjZkOTNiNjYwOGI3CgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHg3ZTYwZGYwNDJhOWMwODY4CgppbXBvcnQgRVZNIGZyb20gMHg4YzUzMDNlYWEyNjIwMmQ2CgoKdHJhbnNhY3Rpb24oYW1vdW50OiBVRml4NjQsIGFkZHJlc3M6IEFkZHJlc3MpIHsKICAgIGxldCBzZW50VmF1bHQ6IEBGbG93VG9rZW4uVmF1bHQKCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChTdG9yYWdlLCBFVk0uV2l0aGRyYXcpICZBY2NvdW50KSB7CiAgICAgICAgbGV0IGNvYSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEVWTS5XaXRoZHJhdykgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50PigKICAgICAgICAgICAgZnJvbTogL3N0b3JhZ2UvZXZtCiAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyByZWZlcmVuY2UgdG8gdGhlIENPQSEiKQoKICAgICAgICBzZWxmLnNlbnRWYXVsdCA8LSBjb2Eud2l0aGRyYXcoYmFsYW5jZTogRVZNLkJhbGFuY2UoYXR0b2Zsb3c6IFVJbnQoYW1vdW50KSAqIDEwMDAwMDAwMDAwMDAwMDAwMCkpIGFzISBARmxvd1Rva2VuLlZhdWx0CiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgICAgICAgbGV0IHJlY2VpdmVyID0gYWNjb3VudC5jYXBhYmlsaXRpZXMuYm9ycm93PCZ7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KC9wdWJsaWMvZmxvd1Rva2VuUmVjZWl2ZXIpIQogICAgICAgIHJlY2VpdmVyLmRlcG9zaXQoZnJvbTogPC1zZWxmLnNlbnRWYXVsdCkKICAgIH0KfQo=",
          "transferFlowFromCoaToFlow": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgdHJhbnNmZXJGbG93RnJvbUNvYVRvRmxvdyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweDlhMDc2NmQ5M2I2NjA4YjcKCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweDdlNjBkZjA0MmE5YzA4NjgKCmltcG9ydCBFVk0gZnJvbSAweDhjNTMwM2VhYTI2MjAyZDYKCgp0cmFuc2FjdGlvbihhbW91bnQ6IFVGaXg2NCwgYWRkcmVzczogQWRkcmVzcykgewogICAgbGV0IHNlbnRWYXVsdDogQEZsb3dUb2tlbi5WYXVsdAoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UsIEVWTS5XaXRoZHJhdykgJkFjY291bnQpIHsKICAgICAgICBsZXQgY29hID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRVZNLldpdGhkcmF3KSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KAogICAgICAgICAgICBmcm9tOiAvc3RvcmFnZS9ldm0KICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlZmVyZW5jZSB0byB0aGUgQ09BISIpCiAgICAgICAgbGV0IHdpdGhkcmF3QmFsYW5jZSA9IEVWTS5CYWxhbmNlKGF0dG9mbG93OiAwKQogICAgICAgIHdpdGhkcmF3QmFsYW5jZS5zZXRGTE9XKGZsb3c6IGFtb3VudCkKICAgICAgICBzZWxmLnNlbnRWYXVsdCA8LSBjb2Eud2l0aGRyYXcoYmFsYW5jZTogd2l0aGRyYXdCYWxhbmNlKSBhcyEgQEZsb3dUb2tlbi5WYXVsdAogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgICAgIGxldCByZWNlaXZlciA9IGFjY291bnQuY2FwYWJpbGl0aWVzLmJvcnJvdzwme0Z1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9PigvcHVibGljL2Zsb3dUb2tlblJlY2VpdmVyKSEKICAgICAgICByZWNlaXZlci5kZXBvc2l0KGZyb206IDwtc2VsZi5zZW50VmF1bHQpCiAgICB9Cn0K",
          "transferFlowToEvmAddress": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgdHJhbnNmZXJGbG93VG9Fdm1BZGRyZXNzIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4OWEwNzY2ZDkzYjY2MDhiNwoKaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4N2U2MGRmMDQyYTljMDg2OAoKaW1wb3J0IEVWTSBmcm9tIDB4OGM1MzAzZWFhMjYyMDJkNgoKCi8vLyBUcmFuc2ZlcnMgJEZMT1cgZnJvbSB0aGUgc2lnbmVyJ3MgYWNjb3VudCBDYWRlbmNlIEZsb3cgYmFsYW5jZSB0byB0aGUgcmVjaXBpZW50J3MgaGV4LWVuY29kZWQgRVZNIGFkZHJlc3MuCi8vLyBOb3RlIHRoYXQgYSBDT0EgbXVzdCBoYXZlIGEgJEZMT1cgYmFsYW5jZSBpbiBFVk0gYmVmb3JlIHRyYW5zZmVycmluZyB2YWx1ZSB0byBhbm90aGVyIEVWTSBhZGRyZXNzLgovLy8KdHJhbnNhY3Rpb24ocmVjaXBpZW50RVZNQWRkcmVzc0hleDogU3RyaW5nLCBhbW91bnQ6IFVGaXg2NCwgZ2FzTGltaXQ6IFVJbnQ2NCkgewoKICAgIGxldCBjb2E6IGF1dGgoRVZNLldpdGhkcmF3LCBFVk0uQ2FsbCkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50CiAgICBsZXQgcmVjaXBpZW50RVZNQWRkcmVzczogRVZNLkVWTUFkZHJlc3MKICAgIHZhciBzZW50VmF1bHQ6IEBGbG93VG9rZW4uVmF1bHQKCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChCb3Jyb3dWYWx1ZSwgU2F2ZVZhbHVlKSAmQWNjb3VudCkgewogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLnR5cGUoYXQ6IC9zdG9yYWdlL2V2bSkgPT0gbmlsIHsKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZSg8LUVWTS5jcmVhdGVDYWRlbmNlT3duZWRBY2NvdW50KCksIHRvOiAvc3RvcmFnZS9ldm0pCiAgICAgICAgfQogICAgICAgIHNlbGYuY29hID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRVZNLldpdGhkcmF3LCBFVk0uQ2FsbCkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50Pihmcm9tOiAvc3RvcmFnZS9ldm0pCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3MgYnJpZGdlZCBhY2NvdW50IikKCiAgICAgICAgbGV0IHZhdWx0UmVmID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJkZsb3dUb2tlbi5WYXVsdD4oCiAgICAgICAgICAgICAgICBmcm9tOiAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlZmVyZW5jZSB0byB0aGUgb3duZXIncyBWYXVsdCEiKQogICAgICAgIHNlbGYuc2VudFZhdWx0IDwtIHZhdWx0UmVmLndpdGhkcmF3KGFtb3VudDogYW1vdW50KSBhcyEgQEZsb3dUb2tlbi5WYXVsdAoKICAgICAgICBzZWxmLnJlY2lwaWVudEVWTUFkZHJlc3MgPSBFVk0uYWRkcmVzc0Zyb21TdHJpbmcocmVjaXBpZW50RVZNQWRkcmVzc0hleCkKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICBzZWxmLmNvYS5kZXBvc2l0KGZyb206IDwtc2VsZi5zZW50VmF1bHQpCiAgICAgICAgCiAgICAgICAgbGV0IHZhbHVlQmFsYW5jZSA9IEVWTS5CYWxhbmNlKGF0dG9mbG93OiAwKQogICAgICAgIHZhbHVlQmFsYW5jZS5zZXRGTE9XKGZsb3c6IGFtb3VudCkKICAgICAgICBsZXQgdHhSZXN1bHQgPSBzZWxmLmNvYS5jYWxsKAogICAgICAgICAgICB0bzogc2VsZi5yZWNpcGllbnRFVk1BZGRyZXNzLAogICAgICAgICAgICBkYXRhOiBbXSwKICAgICAgICAgICAgZ2FzTGltaXQ6IGdhc0xpbWl0LAogICAgICAgICAgICB2YWx1ZTogdmFsdWVCYWxhbmNlCiAgICAgICAgKQogICAgICAgIGFzc2VydCgKICAgICAgICAgICAgdHhSZXN1bHQuc3RhdHVzID09IEVWTS5TdGF0dXMuZmFpbGVkIHx8IHR4UmVzdWx0LnN0YXR1cyA9PSBFVk0uU3RhdHVzLnN1Y2Nlc3NmdWwsCiAgICAgICAgICAgIG1lc3NhZ2U6ICJldm1fZXJyb3I9Ii5jb25jYXQodHhSZXN1bHQuZXJyb3JNZXNzYWdlKS5jb25jYXQoIlxuIikKICAgICAgICApCgogICAgfQp9",
          "withdrawCoa": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgd2l0aGRyYXdDb2EgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHg5YTA3NjZkOTNiNjYwOGI3CgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHg3ZTYwZGYwNDJhOWMwODY4CgppbXBvcnQgRVZNIGZyb20gMHg4YzUzMDNlYWEyNjIwMmQ2CgoKdHJhbnNhY3Rpb24oYW1vdW50OiBVRml4NjQsIGFkZHJlc3M6IEFkZHJlc3MpIHsKICAgIGxldCBzZW50VmF1bHQ6IEBGbG93VG9rZW4uVmF1bHQKCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChTdG9yYWdlLCBFVk0uV2l0aGRyYXcpICZBY2NvdW50KSB7CiAgICAgICAgbGV0IGNvYSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEVWTS5XaXRoZHJhdykgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50PigKICAgICAgICAgICAgZnJvbTogL3N0b3JhZ2UvZXZtCiAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyByZWZlcmVuY2UgdG8gdGhlIENPQSEiKQogICAgICAgIGxldCB3aXRoZHJhd0JhbGFuY2UgPSBFVk0uQmFsYW5jZShhdHRvZmxvdzogMCkKICAgICAgICB3aXRoZHJhd0JhbGFuY2Uuc2V0RkxPVyhmbG93OiBhbW91bnQpCiAgICAgICAgc2VsZi5zZW50VmF1bHQgPC0gY29hLndpdGhkcmF3KGJhbGFuY2U6IHdpdGhkcmF3QmFsYW5jZSkgYXMhIEBGbG93VG9rZW4uVmF1bHQKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICAgICAgICBsZXQgcmVjZWl2ZXIgPSBhY2NvdW50LmNhcGFiaWxpdGllcy5ib3Jyb3c8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4oL3B1YmxpYy9mbG93VG9rZW5SZWNlaXZlcikhCiAgICAgICAgcmVjZWl2ZXIuZGVwb3NpdChmcm9tOiA8LXNlbGYuc2VudFZhdWx0KQogICAgfQp9Cg=="
        },
        "hybridCustody": {
          "addNFTCollectionToDelegator": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgYWRkTkZUQ29sbGVjdGlvblRvRGVsZWdhdG9yIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4Mjk0ZTQ0ZTFlYzY5OTNjNgoKCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKaW1wb3J0IDxUb2tlbj4gZnJvbSA8VG9rZW5BZGRyZXNzPgoKdHJhbnNhY3Rpb24ocGFyZW50OiBBZGRyZXNzLCBpc1B1YmxpYzogQm9vbCkgewogICAgcHJlcGFyZShhY2N0OiBhdXRoKFN0b3JhZ2UsIENhcGFiaWxpdGllcykgJkFjY291bnQpIHsKICAgICAgICBsZXQgbyA9IGFjY3Quc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk93bmVyKSAmSHlicmlkQ3VzdG9keS5Pd25lZEFjY291bnQ+KGZyb206IEh5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50U3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJvd25lZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAgICAgbGV0IGNoaWxkOiAmSHlicmlkQ3VzdG9keS5DaGlsZEFjY291bnQgPSBvLmJvcnJvd0NoaWxkQWNjb3VudChwYXJlbnQ6IHBhcmVudCkKICAgICAgICAgICAgPz8gcGFuaWMoImNoaWxkIGFjY291bnQgbm90IGZvdW5kIikKCiAgICAgICAgbGV0IGNhcCA9IGFjY3QuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JkV4YW1wbGVORlQuQ29sbGVjdGlvbj4oRXhhbXBsZU5GVC5Db2xsZWN0aW9uU3RvcmFnZVBhdGgpCiAgICAgICAgby5hZGRDYXBhYmlsaXR5VG9EZWxlZ2F0b3IocGFyZW50OiBwYXJlbnQsIGNhcDogY2FwLCBpc1B1YmxpYzogaXNQdWJsaWMpCiAgICB9Cn0=",
          "batchBridgeChildNFTFromEvm": "",
          "batchBridgeChildNFTToEvm": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgYmF0Y2hCcmlkZ2VDaGlsZE5GVFRvRXZtIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHg5YTA3NjZkOTNiNjYwOGI3CgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHg3ZTYwZGYwNDJhOWMwODY4CgppbXBvcnQgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MgZnJvbSAweDlhMDc2NmQ5M2I2NjA4YjcKCmltcG9ydCBTY29wZWRGVFByb3ZpZGVycyBmcm9tIDB4ZGZjMjBhZWU2NTBmY2JkZgoKaW1wb3J0IEVWTSBmcm9tIDB4OGM1MzAzZWFhMjYyMDJkNgoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VVdGlscyBmcm9tIDB4ZGZjMjBhZWU2NTBmY2JkZgoKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweGRmYzIwYWVlNjUwZmNiZGYKCmltcG9ydCBGbG93RVZNQnJpZGdlQ29uZmlnIGZyb20gMHhkZmMyMGFlZTY1MGZjYmRmCgppbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4Mjk0ZTQ0ZTFlYzY5OTNjNgoKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweDI5NGU0NGUxZWM2OTkzYzYKCmltcG9ydCBDcm9zc1ZNTWV0YWRhdGFWaWV3cyBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKCnRyYW5zYWN0aW9uKG5mdElkZW50aWZpZXI6IFN0cmluZywgY2hpbGQ6IEFkZHJlc3MsIGlkczogW1VJbnQ2NF0pIHsKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKENvcHlWYWx1ZSwgQm9ycm93VmFsdWUsIElzc3VlU3RvcmFnZUNhcGFiaWxpdHlDb250cm9sbGVyLCBDYXBhYmlsaXRpZXMsIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICAvKiAtLS0gUmVmZXJlbmNlIHRoZSBzaWduZXIncyBDYWRlbmNlT3duZWRBY2NvdW50IC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBDT0EKICAgICAgICBsZXQgY29hID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRVZNLkNhbGwsIEVWTS5CcmlkZ2UpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oZnJvbTogL3N0b3JhZ2UvZXZtKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBDT0EgZnJvbSBwcm92aWRlZCBnYXRld2F5IGFkZHJlc3MiKQoKICAgICAgICBsZXQgbSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEh5YnJpZEN1c3RvZHkuTWFuYWdlKSAmSHlicmlkQ3VzdG9keS5NYW5hZ2VyPihmcm9tOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgICAgIGxldCBjaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogY2hpbGQpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCgogICAgICAgICAvLyBDb25zdHJ1Y3QgdGhlIE5GVCB0eXBlIGZyb20gdGhlIHByb3ZpZGVkIGlkZW50aWZpZXIKICAgICAgICBsZXQgbmZ0VHlwZSA9IENvbXBvc2l0ZVR5cGUobmZ0SWRlbnRpZmllcikKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBjb25zdHJ1Y3QgTkZUIHR5cGUgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdChuZnRJZGVudGlmaWVyKSkKICAgICAgICBsZXQgbmZ0Q29udHJhY3RBZGRyZXNzID0gRmxvd0VWTUJyaWRnZVV0aWxzLmdldENvbnRyYWN0QWRkcmVzcyhmcm9tVHlwZTogbmZ0VHlwZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgYWRkcmVzcyBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQogICAgICAgIGxldCBuZnRDb250cmFjdE5hbWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3ROYW1lKGZyb21UeXBlOiBuZnRUeXBlKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCBjb250cmFjdCBuYW1lIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQobmZ0SWRlbnRpZmllcikpCgogICAgICAgIC8qIC0tLSBSZXRyaWV2ZSB0aGUgTkZUIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBORlQgY29sbGVjdGlvbiwgY29uZmlndXJpbmcgaWYgbmVjZXNzYXJ5CiAgICAgICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQobmZ0Q29udHJhY3RBZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogbmZ0Q29udHJhY3ROYW1lKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBWaWV3UmVzb2x2ZXIgZnJvbSBORlQgY29udHJhY3QiKQogICAgICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBuaWwsCiAgICAgICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPigpCiAgICAgICAgICAgICkgYXMhIE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE/ID8/IHBhbmljKCJDb3VsZCBub3QgcmVzb2x2ZSBORlRDb2xsZWN0aW9uRGF0YSB2aWV3IikKICAgICAgICB2YXIgY29sbGVjdGlvbiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufT4oCiAgICAgICAgICAgICAgICBmcm9tOiBjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aAogICAgICAgICAgICApCgogICAgICAgIC8vIENyZWF0ZSBjb2xsZWN0aW9uIGlmIGl0IGRvZXNuJ3QgZXhpc3QKICAgICAgICBpZiBjb2xsZWN0aW9uID09IG5pbCB7CiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUoPC0gY29sbGVjdGlvbkRhdGEuY3JlYXRlRW1wdHlDb2xsZWN0aW9uKCksIHRvOiBjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy51bnB1Ymxpc2goY29sbGVjdGlvbkRhdGEucHVibGljUGF0aCkKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy5wdWJsaXNoKAogICAgICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufT4oY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpLAogICAgICAgICAgICAgICAgYXQ6IGNvbGxlY3Rpb25EYXRhLnB1YmxpY1BhdGgKICAgICAgICAgICAgKQoKICAgICAgICAgICAgLy8gQm9ycm93IGF1dGhvcml6ZWQgd2l0aGRyYXcgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBjb2xsZWN0aW9uCiAgICAgICAgICAgIGNvbGxlY3Rpb24gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KAogICAgICAgICAgICAgICAgZnJvbTogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgKICAgICAgICAgICAgKSEKICAgICAgICB9CgogICAgICAgIGxldCBjYXBUeXBlID0gVHlwZTxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KCkKICAgICAgICBsZXQgY29udHJvbGxlcklEID0gY2hpbGRBY2N0LmdldENvbnRyb2xsZXJJREZvclR5cGUodHlwZTogY2FwVHlwZSwgZm9yUGF0aDogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKCiAgICAgICAgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogY29udHJvbGxlcklELCB0eXBlOiBjYXBUeXBlKSA/PyBwYW5pYygibm8gY2FwIGZvdW5kIikKICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PgogICAgICAgIGFzc2VydChwcm92aWRlckNhcC5jaGVjaygpLCBtZXNzYWdlOiAiaW52YWxpZCBwcm92aWRlciBjYXBhYmlsaXR5IikKCiAgICAgICAgbGV0IGlkID0gaWRzWzBdCiAgICAgICAgLy8gR2V0IGEgcmVmZXJlbmNlIHRvIHRoZSBjaGlsZCdzIHN0b3JlZCB2YXVsdAogICAgICAgIGxldCBjb2xsZWN0aW9uUmVmID0gcHJvdmlkZXJDYXAuYm9ycm93KCkhCiAgICAgICAgbGV0IGNoaWxkTmZ0IDwtIGNvbGxlY3Rpb25SZWYud2l0aGRyYXcod2l0aGRyYXdJRDogaWQpCiAgICAgICAgY29sbGVjdGlvbiEuZGVwb3NpdCh0b2tlbjogPC1jaGlsZE5mdCkKICAgICAgICAvLyAvLyBXaXRoZHJhdyB0b2tlbnMgZnJvbSB0aGUgc2lnbmVyJ3Mgc3RvcmVkIHZhdWx0CiAgICAgICAgbGV0IGN1cnJlbnRTdG9yYWdlVXNhZ2UgPSBzaWduZXIuc3RvcmFnZS51c2VkCiAgICAgICAgbGV0IG5mdCA8LSBjb2xsZWN0aW9uIS53aXRoZHJhdyh3aXRoZHJhd0lEOiBpZCkKICAgICAgICBsZXQgd2l0aGRyYXduU3RvcmFnZVVzYWdlID0gc2lnbmVyLnN0b3JhZ2UudXNlZAogICAgICAgIGxldCBhcHByb3hGZWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuY2FsY3VsYXRlQnJpZGdlRmVlKAogICAgICAgICAgICAgICAgYnl0ZXM6IDQwMF8wMDAKICAgICAgICAgICAgKSArIChGbG93RVZNQnJpZGdlQ29uZmlnLmJhc2VGZWUgKiBVRml4NjQoaWRzLmxlbmd0aCkpCgogICAgICAgIC8qIC0tLSBDb25maWd1cmUgYSBTY29wZWRGVFByb3ZpZGVyIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gSXNzdWUgYW5kIHN0b3JlIGJyaWRnZS1kZWRpY2F0ZWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBpbiBzdG9yYWdlIGlmIG5lY2Vzc2FyeQogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLnR5cGUoYXQ6IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIGxldCBwcm92aWRlckNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KAogICAgICAgICAgICAgICAgL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgICAgICAgKQogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKHByb3ZpZGVyQ2FwLCB0bzogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkKICAgICAgICB9CiAgICAgICAgLy8gQ29weSB0aGUgc3RvcmVkIFByb3ZpZGVyIGNhcGFiaWxpdHkgYW5kIGNyZWF0ZSBhIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBsZXQgcHJvdmlkZXJDYXBDb3B5ID0gc2lnbmVyLnN0b3JhZ2UuY29weTxDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4+KAogICAgICAgICAgICAgICAgZnJvbTogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJJbnZhbGlkIFByb3ZpZGVyIENhcGFiaWxpdHkgZm91bmQgaW4gc3RvcmFnZS4iKQogICAgICAgIGxldCBwcm92aWRlckZpbHRlciA9IFNjb3BlZEZUUHJvdmlkZXJzLkFsbG93YW5jZUZpbHRlcihhcHByb3hGZWUpCiAgICAgICAgbGV0IHNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICAgICAgICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgICAgICkKCiAgICAgICAgLy8gRXhlY3V0ZSB0aGUgYnJpZGdlCiAgICAgICAgY29hLmRlcG9zaXRORlQoCiAgICAgICAgICAgIG5mdDogPC0gbmZ0LAogICAgICAgICAgICBmZWVQcm92aWRlcjogJnNjb3BlZFByb3ZpZGVyIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfQogICAgICAgICkKICAgICAgICB2YXIgaWR4ID0gMAogICAgICAgIGZvciBuZnRJZCBpbiBpZHMgewogICAgICAgICAgICBpZiBpZHggPT0gMCB7CiAgICAgICAgICAgICAgICBpZHggPSBpZHggKyAxCiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICB9CgogICAgICAgICAgICBsZXQgbmZ0IDwtIGNvbGxlY3Rpb25SZWYud2l0aGRyYXcod2l0aGRyYXdJRDogbmZ0SWQpCiAgICAgICAgICAgIGNvYS5kZXBvc2l0TkZUKAogICAgICAgICAgICAgICAgbmZ0OiA8LSBuZnQsCiAgICAgICAgICAgICAgICBmZWVQcm92aWRlcjogJnNjb3BlZFByb3ZpZGVyIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfQogICAgICAgICAgICApCiAgICAgICAgICAgIGlkeCA9IGlkeCArIDEKICAgICAgICB9CiAgICAgICAgLy8gRGVzdHJveSB0aGUgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGRlc3Ryb3kgc2NvcGVkUHJvdmlkZXIKCiAgICAgICAgLy8gV3JhcCBORlRzIGlmIGFwcGxpY2FibGUKICAgICAgICB3cmFwQW5kVHJhbnNmZXJORlRzSWZBcHBsaWNhYmxlKGNvYSwKICAgICAgICAgICAgbmZ0SURzOiBpZHMsCiAgICAgICAgICAgIG5mdFR5cGU6IG5mdFR5cGUsCiAgICAgICAgICAgIHZpZXdSZXNvbHZlcjogdmlld1Jlc29sdmVyLAogICAgICAgICAgICByZWNpcGllbnRJZk5vdENvYTogbmlsCiAgICAgICAgKQogICAgfQp9CgovLy8gV3JhcHMgYW5kIHRyYW5zZmVycyBicmlkZ2VkIE5GVHMgaW50byBhIHByb2plY3QncyBjdXN0b20gRVJDNzIxIHdyYXBwZXIgY29udHJhY3Qgb24gRVZNLCBpZiBhcHBsaWNhYmxlLgovLy8gRW5hYmxlcyBwcm9qZWN0cyB0byB1c2UgdGhlaXIgb3duIEVSQzcyMSBjb250cmFjdCB3aGlsZSBsZXZlcmFnaW5nIHRoZSBicmlkZ2UncyB1bmRlcmx5aW5nIGNvbnRyYWN0LAovLy8gdW50aWwgZGlyZWN0IGN1c3RvbSBjb250cmFjdCBzdXBwb3J0IGlzIGFkZGVkIHRvIHRoZSBicmlkZ2UuCi8vLwovLy8gQHBhcmFtIGNvYTogVGhlIENPQSBvZiB0aGUgc2lnbmVyCi8vLyBAcGFyYW0gbmZ0SURzOiBUaGUgSURzIG9mIHRoZSBORlRzIHRvIHdyYXAKLy8vIEBwYXJhbSBuZnRUeXBlOiBUaGUgdHlwZSBvZiB0aGUgTkZUcyB0byB3cmFwCi8vLyBAcGFyYW0gdmlld1Jlc29sdmVyOiBUaGUgVmlld1Jlc29sdmVyIG9mIHRoZSBORlQgY29udHJhY3QKLy8vIEBwYXJhbSByZWNpcGllbnRJZk5vdENvYTogVGhlIEVWTSBhZGRyZXNzIHRvIHRyYW5zZmVyIHRoZSB3cmFwcGVkIE5GVHMgdG8sIG5pbCBpZiB0aGUgTkZUcyBzaG91bGQgc3RheSBpbiBzaWduZXIncyBDT0EKLy8vCmFjY2VzcyhhbGwpIGZ1biB3cmFwQW5kVHJhbnNmZXJORlRzSWZBcHBsaWNhYmxlKAogICAgXyBjb2E6IGF1dGgoRVZNLkNhbGwpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudCwKICAgIG5mdElEczogW1VJbnQ2NF0sCiAgICBuZnRUeXBlOiBUeXBlLAogICAgdmlld1Jlc29sdmVyOiAme1ZpZXdSZXNvbHZlcn0sCiAgICByZWNpcGllbnRJZk5vdENvYTogRVZNLkVWTUFkZHJlc3M/CikgewogICAgLy8gR2V0IHRoZSBwcm9qZWN0LWRlZmluZWQgRVJDNzIxIGFkZHJlc3MgaWYgaXQgZXhpc3RzCiAgICBpZiBsZXQgY3Jvc3NWTVBvaW50ZXIgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBuZnRUeXBlLAogICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxDcm9zc1ZNTWV0YWRhdGFWaWV3cy5FVk1Qb2ludGVyPigpCiAgICApIGFzISBDcm9zc1ZNTWV0YWRhdGFWaWV3cy5FVk1Qb2ludGVyPyB7CiAgICAgICAgLy8gR2V0IHRoZSB1bmRlcmx5aW5nIEVSQzcyMSBhZGRyZXNzIGlmIGl0IGV4aXN0cwogICAgICAgIGlmIGxldCB1bmRlcmx5aW5nQWRkcmVzcyA9IGdldFVuZGVybHlpbmdFUkM3MjFBZGRyZXNzKGNvYSwgY3Jvc3NWTVBvaW50ZXIuZXZtQ29udHJhY3RBZGRyZXNzKSB7CiAgICAgICAgICAgIC8vIFdyYXAgTkZUcyBpZiB1bmRlcmx5aW5nIEVSQzcyMSBhZGRyZXNzIG1hdGNoZXMgYnJpZGdlJ3MgYXNzb2NpYXRlZCBhZGRyZXNzIGZvciBORlQgdHlwZQogICAgICAgICAgICBpZiB1bmRlcmx5aW5nQWRkcmVzcy5lcXVhbHMoRmxvd0VWTUJyaWRnZUNvbmZpZy5nZXRFVk1BZGRyZXNzQXNzb2NpYXRlZCh3aXRoOiBuZnRUeXBlKSEpIHsKICAgICAgICAgICAgICAgIC8vIEFwcHJvdmUgY29udHJhY3QgdG8gd2l0aGRyYXcgdW5kZXJseWluZyBORlRzIGZyb20gc2lnbmVyJ3MgY29hCiAgICAgICAgICAgICAgICBtdXN0Q2FsbChjb2EsIHVuZGVybHlpbmdBZGRyZXNzLAogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uU2lnOiAic2V0QXBwcm92YWxGb3JBbGwoYWRkcmVzcyxib29sKSIsCiAgICAgICAgICAgICAgICAgICAgYXJnczogW2Nyb3NzVk1Qb2ludGVyLmV2bUNvbnRyYWN0QWRkcmVzcywgdHJ1ZV0KICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgICAgICAvLyBXcmFwIE5GVHMgd2l0aCBwcm92aWRlZCBJRHMsIGFuZCBjaGVjayBpZiB0aGUgY2FsbCB3YXMgc3VjY2Vzc2Z1bAogICAgICAgICAgICAgICAgbGV0IHJlcyA9IG11c3RDYWxsKGNvYSwgY3Jvc3NWTVBvaW50ZXIuZXZtQ29udHJhY3RBZGRyZXNzLAogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uU2lnOiAiZGVwb3NpdEZvcihhZGRyZXNzLHVpbnQyNTZbXSkiLAogICAgICAgICAgICAgICAgICAgIGFyZ3M6IFtjb2EuYWRkcmVzcygpLCBuZnRJRHNdCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBsZXQgZGVjb2RlZFJlcyA9IEVWTS5kZWNvZGVBQkkodHlwZXM6IFtUeXBlPEJvb2w+KCldLCBkYXRhOiByZXMuZGF0YSkKICAgICAgICAgICAgICAgIGFzc2VydChkZWNvZGVkUmVzLmxlbmd0aCA9PSAxLCBtZXNzYWdlOiAiSW52YWxpZCByZXNwb25zZSBsZW5ndGgiKQogICAgICAgICAgICAgICAgYXNzZXJ0KGRlY29kZWRSZXNbMF0gYXMhIEJvb2wsIG1lc3NhZ2U6ICJGYWlsZWQgdG8gd3JhcCBORlRzIikKCiAgICAgICAgICAgICAgICAvLyBUcmFuc2ZlciBORlRzIHRvIHJlY2lwaWVudCBpZiBwcm92aWRlZAogICAgICAgICAgICAgICAgaWYgbGV0IHRvID0gcmVjaXBpZW50SWZOb3RDb2EgewogICAgICAgICAgICAgICAgICAgIG11c3RUcmFuc2Zlck5GVHMoY29hLCBjcm9zc1ZNUG9pbnRlci5ldm1Db250cmFjdEFkZHJlc3MsIG5mdElEczogbmZ0SURzLCB0bzogdG8pCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgLy8gUmV2b2tlIGFwcHJvdmFsIGZvciBjb250cmFjdCB0byB3aXRoZHJhdyB1bmRlcmx5aW5nIE5GVHMgZnJvbSBzaWduZXIncyBjb2EKICAgICAgICAgICAgICAgIG11c3RDYWxsKGNvYSwgdW5kZXJseWluZ0FkZHJlc3MsCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb25TaWc6ICJzZXRBcHByb3ZhbEZvckFsbChhZGRyZXNzLGJvb2wpIiwKICAgICAgICAgICAgICAgICAgICBhcmdzOiBbY3Jvc3NWTVBvaW50ZXIuZXZtQ29udHJhY3RBZGRyZXNzLCBmYWxzZV0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQoKLy8vIEdldHMgdGhlIHVuZGVybHlpbmcgRVJDNzIxIGFkZHJlc3MgaWYgaXQgZXhpc3RzIChpLmUuIGlmIHRoZSBFUkM3MjEgaXMgYSB3cmFwcGVyKQovLy8KYWNjZXNzKGFsbCkgZnVuIGdldFVuZGVybHlpbmdFUkM3MjFBZGRyZXNzKAogICAgXyBjb2E6IGF1dGgoRVZNLkNhbGwpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudCwKICAgIF8gd3JhcHBlckFkZHJlc3M6IEVWTS5FVk1BZGRyZXNzCik6IEVWTS5FVk1BZGRyZXNzPyB7CiAgICBsZXQgcmVzID0gY29hLmNhbGwoCiAgICAgICAgdG86IHdyYXBwZXJBZGRyZXNzLAogICAgICAgIGRhdGE6IEVWTS5lbmNvZGVBQklXaXRoU2lnbmF0dXJlKCJ1bmRlcmx5aW5nKCkiLCBbXSksCiAgICAgICAgZ2FzTGltaXQ6IDEwMF8wMDAsCiAgICAgICAgdmFsdWU6IEVWTS5CYWxhbmNlKGF0dG9mbG93OiAwKQogICAgKQoKICAgIC8vIElmIHRoZSBjYWxsIGZhaWxzLCByZXR1cm4gbmlsCiAgICBpZiByZXMuc3RhdHVzICE9IEVWTS5TdGF0dXMuc3VjY2Vzc2Z1bCB8fCByZXMuZGF0YS5sZW5ndGggPT0gMCB7CiAgICAgICAgcmV0dXJuIG5pbAogICAgfQoKICAgIC8vIERlY29kZSBhbmQgcmV0dXJuIHRoZSB1bmRlcmx5aW5nIEVSQzcyMSBhZGRyZXNzCiAgICBsZXQgZGVjb2RlZFJlc3VsdCA9IEVWTS5kZWNvZGVBQkkoCiAgICAgICAgdHlwZXM6IFtUeXBlPEVWTS5FVk1BZGRyZXNzPigpXSwKICAgICAgICBkYXRhOiByZXMuZGF0YQogICAgKQogICAgYXNzZXJ0KGRlY29kZWRSZXN1bHQubGVuZ3RoID09IDEsIG1lc3NhZ2U6ICJJbnZhbGlkIHJlc3BvbnNlIGxlbmd0aCIpCiAgICByZXR1cm4gZGVjb2RlZFJlc3VsdFswXSBhcyEgRVZNLkVWTUFkZHJlc3MKfQoKLy8vIENoZWNrcyBpZiB0aGUgcHJvdmlkZWQgTkZUIGlzIG93bmVkIGJ5IHRoZSBwcm92aWRlZCBFVk0gYWRkcmVzcwovLy8KYWNjZXNzKGFsbCkgZnVuIGlzT3duZXIoCiAgICBfIGNvYTogYXV0aChFVk0uQ2FsbCkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50LAogICAgXyBlcmM3MjFBZGRyZXNzOiBFVk0uRVZNQWRkcmVzcywKICAgIF8gbmZ0SUQ6IFVJbnQ2NCwKICAgIF8gb3duZXJUb0NoZWNrOiBFVk0uRVZNQWRkcmVzcwopOiBCb29sIHsKICAgIGxldCByZXMgPSBjb2EuY2FsbCgKICAgICAgICB0bzogZXJjNzIxQWRkcmVzcywKICAgICAgICBkYXRhOiBFVk0uZW5jb2RlQUJJV2l0aFNpZ25hdHVyZSgib3duZXJPZih1aW50MjU2KSIsIFtuZnRJRF0pLAogICAgICAgIGdhc0xpbWl0OiAxMDBfMDAwLAogICAgICAgIHZhbHVlOiBFVk0uQmFsYW5jZShhdHRvZmxvdzogMCkKICAgICkKICAgIGFzc2VydChyZXMuc3RhdHVzID09IEVWTS5TdGF0dXMuc3VjY2Vzc2Z1bCwgbWVzc2FnZTogIkNhbGwgdG8gRVJDNzIxLm93bmVyT2YodWludDI1NikgZmFpbGVkIikKICAgIGxldCBkZWNvZGVkUmVzID0gRVZNLmRlY29kZUFCSSh0eXBlczogW1R5cGU8RVZNLkVWTUFkZHJlc3M+KCldLCBkYXRhOiByZXMuZGF0YSkKICAgIGlmIGRlY29kZWRSZXMubGVuZ3RoID09IDEgewogICAgICAgIGxldCBhY3R1YWxPd25lciA9IGRlY29kZWRSZXNbMF0gYXMhIEVWTS5FVk1BZGRyZXNzCiAgICAgICAgcmV0dXJuIGFjdHVhbE93bmVyLmVxdWFscyhvd25lclRvQ2hlY2spCiAgICB9CiAgICByZXR1cm4gZmFsc2UKfQoKLy8vIFRyYW5zZmVycyBORlRzIGZyb20gdGhlIHByb3ZpZGVkIENPQSB0byB0aGUgcHJvdmlkZWQgRVZNIGFkZHJlc3MKLy8vCmFjY2VzcyhhbGwpIGZ1biBtdXN0VHJhbnNmZXJORlRzKAogICAgXyBjb2E6IGF1dGgoRVZNLkNhbGwpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudCwKICAgIF8gZXJjNzIxQWRkcmVzczogRVZNLkVWTUFkZHJlc3MsCiAgICBuZnRJRHM6IFtVSW50NjRdLAogICAgdG86IEVWTS5FVk1BZGRyZXNzCikgewogICAgZm9yIGlkIGluIG5mdElEcyB7CiAgICAgICAgYXNzZXJ0KGlzT3duZXIoY29hLCBlcmM3MjFBZGRyZXNzLCBpZCwgY29hLmFkZHJlc3MoKSksIG1lc3NhZ2U6ICJORlQgbm90IG93bmVkIGJ5IHNpZ25lcidzIENPQSIpCiAgICAgICAgbXVzdENhbGwoY29hLCBlcmM3MjFBZGRyZXNzLAogICAgICAgICAgICBmdW5jdGlvblNpZzogInNhZmVUcmFuc2ZlckZyb20oYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYpIiwKICAgICAgICAgICAgYXJnczogW2NvYS5hZGRyZXNzKCksIHRvLCBpZF0KICAgICAgICApCiAgICAgICAgYXNzZXJ0KGlzT3duZXIoY29hLCBlcmM3MjFBZGRyZXNzLCBpZCwgdG8pLCBtZXNzYWdlOiAiTkZUIG5vdCB0cmFuc2ZlcnJlZCB0byByZWNpcGllbnQiKQogICAgfQp9CgovLy8gQ2FsbHMgYSBmdW5jdGlvbiBvbiBhbiBFVk0gY29udHJhY3QgZnJvbSBwcm92aWRlZCBjb2EKLy8vCmFjY2VzcyhhbGwpIGZ1biBtdXN0Q2FsbCgKICAgIF8gY29hOiBhdXRoKEVWTS5DYWxsKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQsCiAgICBfIGNvbnRyYWN0QWRkcjogRVZNLkVWTUFkZHJlc3MsCiAgICBmdW5jdGlvblNpZzogU3RyaW5nLAogICAgYXJnczogW0FueVN0cnVjdF0KKTogRVZNLlJlc3VsdCB7CiAgICBsZXQgcmVzID0gY29hLmNhbGwoCiAgICAgICAgdG86IGNvbnRyYWN0QWRkciwKICAgICAgICBkYXRhOiBFVk0uZW5jb2RlQUJJV2l0aFNpZ25hdHVyZShmdW5jdGlvblNpZywgYXJncyksCiAgICAgICAgZ2FzTGltaXQ6IDRfMDAwXzAwMCwKICAgICAgICB2YWx1ZTogRVZNLkJhbGFuY2UoYXR0b2Zsb3c6IDApCiAgICApCgogICAgYXNzZXJ0KHJlcy5zdGF0dXMgPT0gRVZNLlN0YXR1cy5zdWNjZXNzZnVsLAogICAgICAgIG1lc3NhZ2U6ICJGYWlsZWQgdG8gY2FsbCAnIi5jb25jYXQoZnVuY3Rpb25TaWcpCiAgICAgICAgICAgIC5jb25jYXQoIlxuXHQgZXJyb3IgY29kZTogIikuY29uY2F0KHJlcy5lcnJvckNvZGUudG9TdHJpbmcoKSkKICAgICAgICAgICAgLmNvbmNhdCgiXG5cdCBlcnJvciBtZXNzYWdlOiAiKS5jb25jYXQocmVzLmVycm9yTWVzc2FnZSkKICAgICAgICAgICAgLmNvbmNhdCgiXG5cdCBnYXMgdXNlZDogIikuY29uY2F0KHJlcy5nYXNVc2VkLnRvU3RyaW5nKCkpCiAgICAgICAgICAgIC5jb25jYXQoIlxuXHQgY2FsbGVyIGFkZHJlc3M6IDB4IikuY29uY2F0KGNvYS5hZGRyZXNzKCkudG9TdHJpbmcoKSkKICAgICAgICAgICAgLmNvbmNhdCgiXG5cdCBjb250cmFjdCBhZGRyZXNzOiAweCIpLmNvbmNhdChjb250cmFjdEFkZHIudG9TdHJpbmcoKSkKICAgICkKCiAgICByZXR1cm4gcmVzCn0K",
          "batchBridgeChildNFTToEvmAddress": "",
          "batchSendChildNFT": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgYmF0Y2hTZW5kQ2hpbGRORlQgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHgyOTRlNDRlMWVjNjk5M2M2CgppbXBvcnQgQ2FwYWJpbGl0eUZpbHRlciBmcm9tIDB4Mjk0ZTQ0ZTFlYzY5OTNjNgoKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgoKaW1wb3J0IDxORlQ+IGZyb20gPE5GVEFkZHJlc3M+CgoKdHJhbnNhY3Rpb24oY2hpbGRBZGRyOiBBZGRyZXNzLCByZWNlaXZlcjogQWRkcmVzcywgaWRlbnRpZmllcjogU3RyaW5nLCBpZHM6IFtVSW50NjRdKSB7CiAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSkgJkFjY291bnQpIHsKICAgIC8vIHNpZ25lciBpcyB0aGUgcGFyZW50IGFjY291bnQKICAgIC8vIGdldCB0aGUgbWFuYWdlciByZXNvdXJjZSBhbmQgYm9ycm93IGNoaWxkQWNjb3VudAogICAgbGV0IG0gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgbGV0IGNoaWxkQWNjdCA9IG0uYm9ycm93QWNjb3VudChhZGRyOiBjaGlsZEFkZHIpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAKICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IDxORlQ+LnJlc29sdmVDb250cmFjdFZpZXcocmVzb3VyY2VUeXBlOiBuaWwsIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkpIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPwogICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IHRoZSB2YXVsdCBkYXRhIHZpZXcgZm9yIDxORlQ+ICIpCgogICAgLy9nZXQgRnQgY2FwIGZyb20gY2hpbGQgYWNjb3VudAogICAgbGV0IGNhcFR5cGUgPSBUeXBlPGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oKQogICAgbGV0IGNvbnRyb2xsZXJJRCA9IGNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgIAogICAgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogY29udHJvbGxlcklELCB0eXBlOiBjYXBUeXBlKSA/PyBwYW5pYygibm8gY2FwIGZvdW5kIikKICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+CiAgICBhc3NlcnQocHJvdmlkZXJDYXAuY2hlY2soKSwgbWVzc2FnZTogImludmFsaWQgcHJvdmlkZXIgY2FwYWJpbGl0eSIpCiAgICAKICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgY2hpbGQncyBzdG9yZWQgdmF1bHQKICAgIGxldCBjb2xsZWN0aW9uUmVmID0gcHJvdmlkZXJDYXAuYm9ycm93KCkhCgogICAKICAgIGxldCByZWNlaXZlckFjYyA9IGdldEFjY291bnQocmVjZWl2ZXIpCiAgICBsZXQgcmVjZWl2ZXJSZWYgPSAgcmVjZWl2ZXJBY2MuY2FwYWJpbGl0aWVzLmdldDwme05vbkZ1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9Pihjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKSEuYm9ycm93KCkKICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlY2VpdmVyIHJlZmVyZW5jZSB0byB0aGUgcmVjaXBpZW50J3MgVmF1bHQiKQogICAgCiAgICBmb3IgaWQgaW4gaWRzIHsKICAgICAgICAvLyBXaXRoZHJhdyB0b2tlbnMgZnJvbSB0aGUgc2lnbmVyJ3Mgc3RvcmVkIHZhdWx0CiAgICAgICAgbGV0IG5mdCA8LSBjb2xsZWN0aW9uUmVmLndpdGhkcmF3KHdpdGhkcmF3SUQ6IGlkKQogICAgICAgIHJlY2VpdmVyUmVmLmRlcG9zaXQodG9rZW46IDwtIG5mdCkKICAgIH0KICB9Cn0=",
          "batchSendChildNFTToChild": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgYmF0Y2hTZW5kQ2hpbGRORlRUb0NoaWxkIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4Mjk0ZTQ0ZTFlYzY5OTNjNgoKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweDI5NGU0NGUxZWM2OTkzYzYKCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKaW1wb3J0IDxORlQ+IGZyb20gPE5GVEFkZHJlc3M+CgoKdHJhbnNhY3Rpb24oY2hpbGRBZGRyOiBBZGRyZXNzLCByZWNlaXZlcjogQWRkcmVzcywgaWRlbnRpZmllcjogU3RyaW5nLCBpZHM6IFtVSW50NjRdKSB7CiAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSkgJkFjY291bnQpIHsKICAgIC8vIHNpZ25lciBpcyB0aGUgcGFyZW50IGFjY291bnQKICAgIC8vIGdldCB0aGUgbWFuYWdlciByZXNvdXJjZSBhbmQgYm9ycm93IGNoaWxkQWNjb3VudAogICAgbGV0IG0gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgbGV0IGNoaWxkQWNjdCA9IG0uYm9ycm93QWNjb3VudChhZGRyOiBjaGlsZEFkZHIpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAKICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IDxORlQ+LnJlc29sdmVDb250cmFjdFZpZXcocmVzb3VyY2VUeXBlOiBuaWwsIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkpIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPwogICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IHRoZSB2YXVsdCBkYXRhIHZpZXcgZm9yIDxORlQ+ICIpCgogICAgLy9nZXQgRnQgY2FwIGZyb20gY2hpbGQgYWNjb3VudAogICAgbGV0IGNhcFR5cGUgPSBUeXBlPGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oKQogICAgbGV0IGNvbnRyb2xsZXJJRCA9IGNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgIAogICAgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogY29udHJvbGxlcklELCB0eXBlOiBjYXBUeXBlKSA/PyBwYW5pYygibm8gY2FwIGZvdW5kIikKICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+CiAgICBhc3NlcnQocHJvdmlkZXJDYXAuY2hlY2soKSwgbWVzc2FnZTogImludmFsaWQgcHJvdmlkZXIgY2FwYWJpbGl0eSIpCiAgICBsZXQgY29sbGVjdGlvblJlZiA9IHByb3ZpZGVyQ2FwLmJvcnJvdygpIQoKCiAgICBsZXQgcmVjZWl2ZXJDaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogcmVjZWl2ZXIpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICBsZXQgcmVjZWl2ZXJDb250cm9sbGVySWQgPSByZWNlaXZlckNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgIGxldCByZWNlaXZlckNhcCA9IHJlY2VpdmVyQ2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiByZWNlaXZlckNvbnRyb2xsZXJJZCwgdHlwZTogY2FwVHlwZSkgPz8gcGFuaWMoIm5vIGNhcCBmb3VuZCIpIAogICAgbGV0IHB1YmxpY0NhcCA9IHJlY2VpdmVyQ2FwIGFzISBDYXBhYmlsaXR5PCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uUHVibGljfT4KICAgIGxldCByZWNlaXZlclJlZiA9ICBwdWJsaWNDYXAuYm9ycm93KCkhCgogICAgZm9yIGlkIGluIGlkcyB7CiAgICAgIGxldCBuZnQgPC0gY29sbGVjdGlvblJlZi53aXRoZHJhdyh3aXRoZHJhd0lEOiBpZCkKICAgICAgcmVjZWl2ZXJSZWYuZGVwb3NpdCh0b2tlbjogPC0gbmZ0KQogICAgfQogIH0KfQ==",
          "batchTransferChildNFT": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgYmF0Y2hUcmFuc2ZlckNoaWxkTkZUIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4Mjk0ZTQ0ZTFlYzY5OTNjNgoKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweDI5NGU0NGUxZWM2OTkzYzYKCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKaW1wb3J0IDxORlQ+IGZyb20gPE5GVEFkZHJlc3M+CgovLy8gVHJhbnNmZXIgbXVsdGlwbGUgTkZUcyBmcm9tIHByb3ZpZGVkIGNoaWxkIGFjY291bnQgYWRkcmVzcyB0byBwYXJlbnQgYWNjb3VudCAoc2lnbmVyKQovLy8KdHJhbnNhY3Rpb24oYWRkcmVzczogQWRkcmVzcywgcGF0aDogU3RyaW5nLCBpZHM6IFtVSW50NjRdKSB7CgogIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UsIENhcGFiaWxpdGllcykgJkFjY291bnQpIHsKICAgIC8vIEdldCB0aGUgbWFuYWdlciByZXNvdXJjZSBhbmQgYm9ycm93IGNoaWxkQWNjb3VudAogICAgbGV0IG0gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgbGV0IGNoaWxkQWNjdCA9IG0uYm9ycm93QWNjb3VudChhZGRyOiBhZGRyZXNzKSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQoKICAgIC8vIEdldCB0aGUgY29sbGVjdGlvbiBkYXRhIHZpZXcgZm9yIHRoZSBORlQKICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IDxORlQ+LnJlc29sdmVDb250cmFjdFZpZXcocmVzb3VyY2VUeXBlOiBuaWwsIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkpIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPwogICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IHRoZSB2YXVsdCBkYXRhIHZpZXcgZm9yIDxORlQ+ICIpCgogICAgLy8gUmV0cmlldmUgYSBwcm92aWRlciBjYXBhYmlsaXR5IGZyb20gdGhlIGNoaWxkIGFjY291bnQgYW5kIGJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgY2hpbGQncyBjb2xsZWN0aW9uCiAgICBsZXQgY2FwVHlwZSA9IFR5cGU8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigpCiAgICBsZXQgY29udHJvbGxlcklEID0gY2hpbGRBY2N0LmdldENvbnRyb2xsZXJJREZvclR5cGUodHlwZTogY2FwVHlwZSwgZm9yUGF0aDogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpCiAgICAgICAgPz8gcGFuaWMoIm5vIGNvbnRyb2xsZXIgZm91bmQgZm9yIGNhcFR5cGUiKQoKICAgIGxldCBjYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGNvbnRyb2xsZXJJRCwgdHlwZTogY2FwVHlwZSkgPz8gcGFuaWMoIm5vIGNhcCBmb3VuZCIpCiAgICBsZXQgcHJvdmlkZXJDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PgogICAgYXNzZXJ0KHByb3ZpZGVyQ2FwLmNoZWNrKCksIG1lc3NhZ2U6ICJpbnZhbGlkIHByb3ZpZGVyIGNhcGFiaWxpdHkiKQogICAgbGV0IGNoaWxkQ29sbGVjdGlvblJlZiA9IHByb3ZpZGVyQ2FwLmJvcnJvdygpIQoKICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3MgY29sbGVjdGlvbiBvciBjcmVhdGUgYSBjb2xsZWN0aW9uIGlmIGl0IGRvZXNuJ3QgZXhpc3QKICAgIHZhciByZWNlaXZlclJlZiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KGZyb206IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgaWYgcmVjZWl2ZXJSZWYgPT0gbmlsIHsKICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZSg8LSA8TkZUPi5jcmVhdGVFbXB0eUNvbGxlY3Rpb24obmZ0VHlwZTogVHlwZTxAPE5GVD4uTkZUPigpKSwgdG86IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICBzaWduZXIuY2FwYWJpbGl0aWVzLnVucHVibGlzaChjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKQogICAgICBsZXQgY29sbGVjdGlvbkNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwmPE5GVD4uQ29sbGVjdGlvbj4oY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpCiAgICAgIHNpZ25lci5jYXBhYmlsaXRpZXMucHVibGlzaChjb2xsZWN0aW9uQ2FwLCBhdDogY29sbGVjdGlvbkRhdGEucHVibGljUGF0aCkKICAgICAgcmVjZWl2ZXJSZWYgPSBjb2xsZWN0aW9uQ2FwLmJvcnJvdygpIQogICAgfQoKICAgIC8vIFRyYW5zZmVyIE5GVHMgZnJvbSBjaGlsZCBhY2NvdW50J3MgY29sbGVjdGlvbiB0byBzaWduZXIncyBjb2xsZWN0aW9uCiAgICBmb3IgaWQgaW4gaWRzIHsKICAgICAgICByZWNlaXZlclJlZiEuZGVwb3NpdCh0b2tlbjogPC0gY2hpbGRDb2xsZWN0aW9uUmVmLndpdGhkcmF3KHdpdGhkcmF3SUQ6IGlkKSkKICAgIH0KICB9Cn0K",
          "batchTransferNFTToChild": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgYmF0Y2hUcmFuc2Zlck5GVFRvQ2hpbGQgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHgyOTRlNDRlMWVjNjk5M2M2CgppbXBvcnQgQ2FwYWJpbGl0eUZpbHRlciBmcm9tIDB4Mjk0ZTQ0ZTFlYzY5OTNjNgoKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgppbXBvcnQgPE5GVD4gZnJvbSA8TkZUQWRkcmVzcz4KCnRyYW5zYWN0aW9uKGNoaWxkQWRkcjogQWRkcmVzcywgaWRlbnRpZmllcjogU3RyaW5nLCBpZHM6IFtVSW50NjRdKSB7CiAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSkgJkFjY291bnQpIHsKICAgIC8vIHNpZ25lciBpcyB0aGUgcGFyZW50IGFjY291bnQKICAgIC8vIGdldCB0aGUgbWFuYWdlciByZXNvdXJjZSBhbmQgYm9ycm93IGNoaWxkQWNjb3VudAogICAgbGV0IG0gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgbGV0IGNoaWxkQWNjdCA9IG0uYm9ycm93QWNjb3VudChhZGRyOiBjaGlsZEFkZHIpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAKICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IDxORlQ+LnJlc29sdmVDb250cmFjdFZpZXcocmVzb3VyY2VUeXBlOiBuaWwsIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkpIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPwogICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IHRoZSB2YXVsdCBkYXRhIHZpZXcgZm9yIDxORlQ+ICIpCgogICAgLy9nZXQgRnQgY2FwIGZyb20gY2hpbGQgYWNjb3VudAogICAgbGV0IGNhcFR5cGUgPSBUeXBlPGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oKQogICAgbGV0IGNvbnRyb2xsZXJJRCA9IGNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgIAogICAgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogY29udHJvbGxlcklELCB0eXBlOiBjYXBUeXBlKSA/PyBwYW5pYygibm8gY2FwIGZvdW5kIikKICAgIGxldCBjaGlsZENhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+CiAgICBhc3NlcnQoY2hpbGRDYXAuY2hlY2soKSwgbWVzc2FnZTogImludmFsaWQgcHJvdmlkZXIgY2FwYWJpbGl0eSIpCiAgICAKICAgIGxldCBwYXJlbnRSZWYgPSAgc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oZnJvbSA6IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKSEKICAgIGxldCBjaGlsZFJlZiA9IGNoaWxkQ2FwLmJvcnJvdygpIQoKICAgIGZvciBpZCBpbiBpZHMgeyAgICAgCiAgICAgICAgLy8gV2l0aGRyYXcgdG9rZW5zIGZyb20gdGhlIHNpZ25lcidzIHN0b3JlZCB2YXVsdAogICAgICAgIGxldCBuZnQgPC0gcGFyZW50UmVmIS53aXRoZHJhdyh3aXRoZHJhd0lEOiBpZCkhCiAgICAgICAgY2hpbGRSZWYuZGVwb3NpdCh0b2tlbjogPC0gbmZ0KQogICAgfQogIH0KfQ==",
          "bridgeChildFTFromEvm": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgYnJpZGdlQ2hpbGRGVEZyb21Fdm0gLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHg5YTA3NjZkOTNiNjYwOGI3CgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHg3ZTYwZGYwNDJhOWMwODY4CgppbXBvcnQgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MgZnJvbSAweDlhMDc2NmQ5M2I2NjA4YjcKCgppbXBvcnQgU2NvcGVkRlRQcm92aWRlcnMgZnJvbSAweGRmYzIwYWVlNjUwZmNiZGYKCgppbXBvcnQgRVZNIGZyb20gMHg4YzUzMDNlYWEyNjIwMmQ2CgoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VVdGlscyBmcm9tIDB4ZGZjMjBhZWU2NTBmY2JkZgoKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweGRmYzIwYWVlNjUwZmNiZGYKCmltcG9ydCBGbG93RVZNQnJpZGdlQ29uZmlnIGZyb20gMHhkZmMyMGFlZTY1MGZjYmRmCgoKCmltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHgyOTRlNDRlMWVjNjk5M2M2CgppbXBvcnQgQ2FwYWJpbGl0eUZpbHRlciBmcm9tIDB4Mjk0ZTQ0ZTFlYzY5OTNjNgoKCnRyYW5zYWN0aW9uKHZhdWx0SWRlbnRpZmllcjogU3RyaW5nLCBjaGlsZDogQWRkcmVzcywgYW1vdW50OiBVSW50MjU2KSB7CiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChCb3Jyb3dWYWx1ZSwgQ29weVZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSwgVW5wdWJsaXNoQ2FwYWJpbGl0eSkgJkFjY291bnQpIHsKICAgICAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIHNpZ25lcidzIENPQQogICAgICAgIGxldCBjb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgQ09BIGZyb20gcHJvdmlkZWQgZ2F0ZXdheSBhZGRyZXNzIikKICAgICAgICBsZXQgdmF1bHRUeXBlID0gQ29tcG9zaXRlVHlwZSh2YXVsdElkZW50aWZpZXIpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgY29uc3RydWN0IFZhdWx0IHR5cGUgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdCh2YXVsdElkZW50aWZpZXIpKQogICAgICAgIC8vIFBhcnNlIHRoZSBWYXVsdCBpZGVudGlmaWVyIGludG8gaXRzIGNvbXBvbmVudHMKICAgICAgICBsZXQgdG9rZW5Db250cmFjdEFkZHJlc3MgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3RBZGRyZXNzKGZyb21UeXBlOiB2YXVsdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IGFkZHJlc3MgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdCh2YXVsdElkZW50aWZpZXIpKQogICAgICAgIGxldCB0b2tlbkNvbnRyYWN0TmFtZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdE5hbWUoZnJvbVR5cGU6IHZhdWx0VHlwZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgbmFtZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KHZhdWx0SWRlbnRpZmllcikpCgogICAgICAgIC8qIC0tLSBSZXRyaWV2ZSB0aGUgZnVuZHMgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIEZ1bmdpYmxlVG9rZW4gVmF1bHQKICAgICAgICBsZXQgdmlld1Jlc29sdmVyID0gZ2V0QWNjb3VudCh0b2tlbkNvbnRyYWN0QWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IHRva2VuQ29udHJhY3ROYW1lKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBWaWV3UmVzb2x2ZXIgZnJvbSBGdW5naWJsZVRva2VuIGNvbnRyYWN0IikKICAgICAgICBsZXQgdmF1bHREYXRhID0gdmlld1Jlc29sdmVyLnJlc29sdmVDb250cmFjdFZpZXcoCiAgICAgICAgICAgICAgICByZXNvdXJjZVR5cGU6IG5pbCwKICAgICAgICAgICAgICAgIHZpZXdUeXBlOiBUeXBlPEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPigpCiAgICAgICAgICAgICkgYXMhIEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgRlRWYXVsdERhdGEgdmlldyIpCgogICAgICAgIC8vIHNpZ25lciBpcyB0aGUgcGFyZW50IGFjY291bnQKICAgICAgICAvLyBnZXQgdGhlIG1hbmFnZXIgcmVzb3VyY2UgYW5kIGJvcnJvdyBjaGlsZEFjY291bnQKICAgICAgICBsZXQgbSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEh5YnJpZEN1c3RvZHkuTWFuYWdlKSAmSHlicmlkQ3VzdG9keS5NYW5hZ2VyPihmcm9tOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgICAgIGxldCBjaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogY2hpbGQpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAgICAgCiAgICAgCiAgICAgICAgLy9nZXQgRnQgY2FwIGZyb20gY2hpbGQgYWNjb3VudAogICAgICAgIGxldCBjYXBUeXBlID0gVHlwZTwme0Z1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9PigpCiAgICAgICAgbGV0IGNvbnRyb2xsZXJJRCA9IGNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IHZhdWx0RGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIm5vIGNvbnRyb2xsZXIgZm91bmQgZm9yIGNhcFR5cGUiKQogICAgICAgIAogICAgICAgIGxldCBjYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGNvbnRyb2xsZXJJRCwgdHlwZTogY2FwVHlwZSkgPz8gcGFuaWMoIm5vIGNhcCBmb3VuZCIpCiAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gY2FwIGFzISBDYXBhYmlsaXR5PCZ7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+CiAgICAgICAgYXNzZXJ0KHByb3ZpZGVyQ2FwLmNoZWNrKCksIG1lc3NhZ2U6ICJpbnZhbGlkIHByb3ZpZGVyIGNhcGFiaWxpdHkiKQogICAgICAgIAogICAgICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgY2hpbGQncyBzdG9yZWQgdmF1bHQKICAgICAgICBsZXQgdmF1bHRSZWYgPSBwcm92aWRlckNhcC5ib3Jyb3coKSEKCiAgICAgIAogICAgICAgIGxldCBhcHByb3hGZWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuY2FsY3VsYXRlQnJpZGdlRmVlKGJ5dGVzOiA0MDBfMDAwKQogICAgICAgIC8qIC0tLSBDb25maWd1cmUgYSBTY29wZWRGVFByb3ZpZGVyIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gSXNzdWUgYW5kIHN0b3JlIGJyaWRnZS1kZWRpY2F0ZWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBpbiBzdG9yYWdlIGlmIG5lY2Vzc2FyeQogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLnR5cGUoYXQ6IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIGxldCBwcm92aWRlckNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KAogICAgICAgICAgICAgICAgL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgICAgICAgKQogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKHByb3ZpZGVyQ2FwLCB0bzogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkKICAgICAgICB9CiAgICAgICAgLy8gQ29weSB0aGUgc3RvcmVkIFByb3ZpZGVyIGNhcGFiaWxpdHkgYW5kIGNyZWF0ZSBhIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBsZXQgcHJvdmlkZXJDYXBDb3B5ID0gc2lnbmVyLnN0b3JhZ2UuY29weTxDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4+KAogICAgICAgICAgICAgICAgZnJvbTogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJJbnZhbGlkIFByb3ZpZGVyIENhcGFiaWxpdHkgZm91bmQgaW4gc3RvcmFnZS4iKQogICAgICAgIGxldCBwcm92aWRlckZpbHRlciA9IFNjb3BlZEZUUHJvdmlkZXJzLkFsbG93YW5jZUZpbHRlcihhcHByb3hGZWUpCiAgICAgICAgbGV0IHNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgICAgIGZpbHRlcnM6IFsgcHJvdmlkZXJGaWx0ZXIgXSwKICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgKQoKICAgICAgICBsZXQgdmF1bHQ6IEB7RnVuZ2libGVUb2tlbi5WYXVsdH0gPC0gY29hLndpdGhkcmF3VG9rZW5zKAogICAgICAgICAgICB0eXBlOiB2YXVsdFR5cGUsCiAgICAgICAgICAgIGFtb3VudDogYW1vdW50LAogICAgICAgICAgICBmZWVQcm92aWRlcjogJnNjb3BlZFByb3ZpZGVyIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfQogICAgICAgICkKCiAgICAgICAgdmF1bHRSZWYuZGVwb3NpdChmcm9tOiA8LSB2YXVsdCkKICAgICAgICBkZXN0cm95IHNjb3BlZFByb3ZpZGVyCiAgICB9Cgp9CiA=",
          "bridgeChildFTToEvm": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgYnJpZGdlQ2hpbGRGVFRvRXZtIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4OWEwNzY2ZDkzYjY2MDhiNwoKaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4N2U2MGRmMDQyYTljMDg2OAoKaW1wb3J0IEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzIGZyb20gMHg5YTA3NjZkOTNiNjYwOGI3CgoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHhkZmMyMGFlZTY1MGZjYmRmCgoKaW1wb3J0IEVWTSBmcm9tIDB4OGM1MzAzZWFhMjYyMDJkNgoKCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweGRmYzIwYWVlNjUwZmNiZGYKCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHhkZmMyMGFlZTY1MGZjYmRmCgppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4ZGZjMjBhZWU2NTBmY2JkZgoKCmltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHgyOTRlNDRlMWVjNjk5M2M2CgppbXBvcnQgQ2FwYWJpbGl0eUZpbHRlciBmcm9tIDB4Mjk0ZTQ0ZTFlYzY5OTNjNgoKCgp0cmFuc2FjdGlvbih2YXVsdElkZW50aWZpZXI6IFN0cmluZywgY2hpbGQ6IEFkZHJlc3MsIGFtb3VudDogVUZpeDY0KSB7CgogICAgLy8gVGhlIFZhdWx0IHJlc291cmNlIHRoYXQgaG9sZHMgdGhlIHRva2VucyB0aGF0IGFyZSBiZWluZyB0cmFuc2ZlcnJlZAogICAgbGV0IHBheW1lbnRWYXVsdDogQHtGdW5naWJsZVRva2VuLlZhdWx0fQogICAgbGV0IGNvYTogYXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQKICAgIGxldCBzY29wZWRQcm92aWRlcjogQFNjb3BlZEZUUHJvdmlkZXJzLlNjb3BlZEZUUHJvdmlkZXIKCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChTdG9yYWdlLCBDb3B5VmFsdWUsIEJvcnJvd1ZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICAvKiAtLS0gUmVmZXJlbmNlIHRoZSBzaWduZXIncyBDYWRlbmNlT3duZWRBY2NvdW50IC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBDT0EKICAgICAgICBzZWxmLmNvYSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEVWTS5CcmlkZ2UpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oZnJvbTogL3N0b3JhZ2UvZXZtKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBDT0EgZnJvbSBwcm92aWRlZCBnYXRld2F5IGFkZHJlc3MiKQoKICAgICAgICAvKiAtLS0gUmV0cmlldmUgdGhlIGZ1bmRzIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBGdW5naWJsZVRva2VuIFZhdWx0CiAgICAgICAgbGV0IHZhdWx0VHlwZSA9IENvbXBvc2l0ZVR5cGUodmF1bHRJZGVudGlmaWVyKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGNvbnN0cnVjdCBWYXVsdCB0eXBlIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQodmF1bHRJZGVudGlmaWVyKSkKICAgICAgICAvLyBQYXJzZSB0aGUgVmF1bHQgaWRlbnRpZmllciBpbnRvIGl0cyBjb21wb25lbnRzCiAgICAgICAgbGV0IHRva2VuQ29udHJhY3RBZGRyZXNzID0gRmxvd0VWTUJyaWRnZVV0aWxzLmdldENvbnRyYWN0QWRkcmVzcyhmcm9tVHlwZTogdmF1bHRUeXBlKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCBjb250cmFjdCBhZGRyZXNzIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQodmF1bHRJZGVudGlmaWVyKSkKICAgICAgICBsZXQgdG9rZW5Db250cmFjdE5hbWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3ROYW1lKGZyb21UeXBlOiB2YXVsdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IG5hbWUgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdCh2YXVsdElkZW50aWZpZXIpKQoKICAgICAgICBsZXQgdmlld1Jlc29sdmVyID0gZ2V0QWNjb3VudCh0b2tlbkNvbnRyYWN0QWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IHRva2VuQ29udHJhY3ROYW1lKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBWaWV3UmVzb2x2ZXIgZnJvbSBGdW5naWJsZVRva2VuIGNvbnRyYWN0IikKICAgICAgICBsZXQgdmF1bHREYXRhID0gdmlld1Jlc29sdmVyLnJlc29sdmVDb250cmFjdFZpZXcoCiAgICAgICAgICAgICAgICByZXNvdXJjZVR5cGU6IG5pbCwKICAgICAgICAgICAgICAgIHZpZXdUeXBlOiBUeXBlPEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPigpCiAgICAgICAgICAgICkgYXMhIEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgRlRWYXVsdERhdGEgdmlldyIpCiAgICAgICAgbGV0IHZhdWx0ID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlZhdWx0fT4oCiAgICAgICAgICAgICAgICBmcm9tOiB2YXVsdERhdGEuc3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGFjY2VzcyBzaWduZXIncyBGdW5naWJsZVRva2VuIFZhdWx0IikKCiAgICAgICAgLy8gc2lnbmVyIGlzIHRoZSBwYXJlbnQgYWNjb3VudAogICAgICAgIC8vIGdldCB0aGUgbWFuYWdlciByZXNvdXJjZSBhbmQgYm9ycm93IGNoaWxkQWNjb3VudAogICAgICAgIGxldCBtID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5NYW5hZ2UpICZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygibWFuYWdlciBkb2VzIG5vdCBleGlzdCIpCiAgICAgICAgbGV0IGNoaWxkQWNjdCA9IG0uYm9ycm93QWNjb3VudChhZGRyOiBjaGlsZCkgPz8gcGFuaWMoImNoaWxkIGFjY291bnQgbm90IGZvdW5kIikKICAgICAgICAKICAgICAKICAgICAgICAvL2dldCBGdCBjYXAgZnJvbSBjaGlsZCBhY2NvdW50CiAgICAgICAgbGV0IGNhcFR5cGUgPSBUeXBlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oKQogICAgICAgIGxldCBjb250cm9sbGVySUQgPSBjaGlsZEFjY3QuZ2V0Q29udHJvbGxlcklERm9yVHlwZSh0eXBlOiBjYXBUeXBlLCBmb3JQYXRoOiB2YXVsdERhdGEuc3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgICAgICAKICAgICAgICBsZXQgY2FwID0gY2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiBjb250cm9sbGVySUQsIHR5cGU6IGNhcFR5cGUpID8/IHBhbmljKCJubyBjYXAgZm91bmQiKQogICAgICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+CiAgICAgICAgYXNzZXJ0KHByb3ZpZGVyQ2FwLmNoZWNrKCksIG1lc3NhZ2U6ICJpbnZhbGlkIHByb3ZpZGVyIGNhcGFiaWxpdHkiKQogICAgICAgIAogICAgICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgY2hpbGQncyBzdG9yZWQgdmF1bHQKICAgICAgICBsZXQgdmF1bHRSZWYgPSBwcm92aWRlckNhcC5ib3Jyb3coKSEKCiAgICAgICAgLy8gV2l0aGRyYXcgdG9rZW5zIGZyb20gdGhlIHNpZ25lcidzIHN0b3JlZCB2YXVsdAoKICAgICAgICB2YXVsdC5kZXBvc2l0KGZyb206IDwtIHZhdWx0UmVmLndpdGhkcmF3KGFtb3VudDogYW1vdW50KSkKICAgICAgICAgICAvLyBXaXRoZHJhdyB0aGUgcmVxdWVzdGVkIGJhbGFuY2UgJiBjYWxjdWxhdGUgdGhlIGFwcHJveGltYXRlIGJyaWRnZSBmZWUgYmFzZWQgb24gc3RvcmFnZSB1c2FnZQogICAgICAgIGxldCBjdXJyZW50U3RvcmFnZVVzYWdlID0gc2lnbmVyLnN0b3JhZ2UudXNlZAogICAgICAgIHNlbGYucGF5bWVudFZhdWx0IDwtIHZhdWx0LndpdGhkcmF3KGFtb3VudDogYW1vdW50KQogICAgICAgIGxldCB3aXRoZHJhd25TdG9yYWdlVXNhZ2UgPSBzaWduZXIuc3RvcmFnZS51c2VkCiAgICAgICAgLy8gQXBwcm94aW1hdGUgdGhlIGJyaWRnZSBmZWUgYmFzZWQgb24gdGhlIGRpZmZlcmVuY2UgaW4gc3RvcmFnZSB1c2FnZSB3aXRoIHNvbWUgYnVmZmVyCiAgICAgICAgbGV0IGFwcHJveEZlZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5jYWxjdWxhdGVCcmlkZ2VGZWUoCiAgICAgICAgICAgICAgICBieXRlczogNDAwXzAwMAogICAgICAgICAgICApCgogICAgICAgIC8qIC0tLSBDb25maWd1cmUgYSBTY29wZWRGVFByb3ZpZGVyIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gSXNzdWUgYW5kIHN0b3JlIGJyaWRnZS1kZWRpY2F0ZWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBpbiBzdG9yYWdlIGlmIG5lY2Vzc2FyeQogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLnR5cGUoYXQ6IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIGxldCBwcm92aWRlckNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KAogICAgICAgICAgICAgICAgL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgICAgICAgKQogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKHByb3ZpZGVyQ2FwLCB0bzogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkKICAgICAgICB9CiAgICAgICAgLy8gQ29weSB0aGUgc3RvcmVkIFByb3ZpZGVyIGNhcGFiaWxpdHkgYW5kIGNyZWF0ZSBhIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBsZXQgcHJvdmlkZXJDYXBDb3B5ID0gc2lnbmVyLnN0b3JhZ2UuY29weTxDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4+KAogICAgICAgICAgICAgICAgZnJvbTogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJJbnZhbGlkIFByb3ZpZGVyIENhcGFiaWxpdHkgZm91bmQgaW4gc3RvcmFnZS4iKQogICAgICAgIGxldCBwcm92aWRlckZpbHRlciA9IFNjb3BlZEZUUHJvdmlkZXJzLkFsbG93YW5jZUZpbHRlcihhcHByb3hGZWUpCiAgICAgICAgc2VsZi5zY29wZWRQcm92aWRlciA8LSBTY29wZWRGVFByb3ZpZGVycy5jcmVhdGVTY29wZWRGVFByb3ZpZGVyKAogICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICAgICAgICBmaWx0ZXJzOiBbIHByb3ZpZGVyRmlsdGVyIF0sCiAgICAgICAgICAgIGV4cGlyYXRpb246IGdldEN1cnJlbnRCbG9jaygpLnRpbWVzdGFtcCArIDEuMAogICAgICAgICkKCiAgICB9CgogICAgZXhlY3V0ZSB7CgogICAgICAgICBzZWxmLmNvYS5kZXBvc2l0VG9rZW5zKAogICAgICAgICAgICB2YXVsdDogPC1zZWxmLnBheW1lbnRWYXVsdCwKICAgICAgICAgICAgZmVlUHJvdmlkZXI6ICZzZWxmLnNjb3BlZFByb3ZpZGVyIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfQogICAgICAgICkKICAgICAgICAvLyBEZXN0cm95IHRoZSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgZGVzdHJveSBzZWxmLnNjb3BlZFByb3ZpZGVyCiAgICB9Cn0KIA==",
          "bridgeChildFTToEvmAddress": "",
          "bridgeChildNFTFromEvm": "",
          "bridgeChildNFTToEvm": "",
          "bridgeChildNFTToEvmAddress": "",
          "checkChildLinkedCollections": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgY2hlY2tDaGlsZExpbmtlZENvbGxlY3Rpb25zIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4Mjk0ZTQ0ZTFlYzY5OTNjNgoKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweDI5NGU0NGUxZWM2OTkzYzYKCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgoKYWNjZXNzKGFsbCkgZnVuIG1haW4ocGFyZW50OiBBZGRyZXNzLCBjaGlsZDogQWRkcmVzcywgaWRlbnRpZmllcjogU3RyaW5nKTogQm9vbCB7CiAgICBsZXQgbWdyID0gZ2V0QXV0aEFjY291bnQocGFyZW50KS5ib3Jyb3c8Jkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgbWFuYWdlciBmcm9tIHBhcmVudCIpCiAgICBsZXQgY2hpbGQgPSBtZ3IuYm9ycm93QWNjb3VudChhZGRyOiBjaGlsZCkgPz8gcGFuaWMoIkNoaWxkIGFjY291bnQgbm90IGZvdW5kIikKCiAgICBsZXQgY2FwID0gY2hpbGQuZ2V0Q2FwYWJpbGl0eSgKICAgICAgICAgICAgcGF0aDogUHJpdmF0ZVBhdGgoaWRlbnRpZmllcjogaWRlbnRpZmllcikhIGFzIENhcGFiaWxpdHlQYXRoLAogICAgICAgICAgICB0eXBlOiBUeXBlPCZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlciwgTm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uUHVibGljfT4oKQogICAgICAgICkgYXMhIENhcGFiaWxpdHk8JntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyLCBOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb25QdWJsaWN9Pj8KCiAgICAKICAgIHJldHVybiBjYXAgIT0gbmlsCn0gICAKICAgIA==",
          "checkChildLinkedVaults": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgY2hlY2tDaGlsZExpbmtlZFZhdWx0cyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweDI5NGU0NGUxZWM2OTkzYzYKCmltcG9ydCBDYXBhYmlsaXR5RmlsdGVyIGZyb20gMHgyOTRlNDRlMWVjNjk5M2M2CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4OWEwNzY2ZDkzYjY2MDhiNwoKCmFjY2VzcyhhbGwpIGZ1biBtYWluKHBhcmVudDogQWRkcmVzcywgY2hpbGQ6IEFkZHJlc3MsIHBhdGg6IFN0cmluZyk6IEJvb2wgewogIGxldCBhY2NvdW50ID0gZ2V0QXV0aEFjY291bnQ8YXV0aChTdG9yYWdlKSAmQWNjb3VudD4ocGFyZW50KQogIGxldCBtYW5hZ2VyID0gZ2V0QXV0aEFjY291bnQ8YXV0aChTdG9yYWdlKSAmQWNjb3VudD4ocGFyZW50KS5zdG9yYWdlLmJvcnJvdzxhdXRoKEh5YnJpZEN1c3RvZHkuTWFuYWdlKSAmSHlicmlkQ3VzdG9keS5NYW5hZ2VyPihmcm9tOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkgPz8gcGFuaWMgKCJtYW5hZ2VyIGRvZXMgbm90IGV4aXN0IikKICAKICBsZXQgcHJvdmlkZXJUeXBlID0gVHlwZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KCkKCiAgbGV0IGFkZHIgPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UsIENhcGFiaWxpdGllcykgJkFjY291bnQ+KGNoaWxkKQogIAogIGxldCBjaGlsZEFjY3QgPSBtYW5hZ2VyLmJvcnJvd0FjY291bnQoYWRkcjogY2hpbGQpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCgogIGxldCBjb250cm9sbGVycyA9IGFkZHIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuZ2V0Q29udHJvbGxlcnMoZm9yUGF0aDogU3RvcmFnZVBhdGgoaWRlbnRpZmllcjogcGF0aCkhKQogIHZhciBmbGFnID0gZmFsc2UKCiAgZm9yIGMgaW4gY29udHJvbGxlcnMgewogICAgaWYgIWMuYm9ycm93VHlwZS5pc1N1YnR5cGUob2Y6IHByb3ZpZGVyVHlwZSkgewogICAgICBjb250aW51ZQogICAgfQoKICAgIGlmIGxldCBjYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGMuY2FwYWJpbGl0eUlELCB0eXBlOiBwcm92aWRlclR5cGUpIHsKICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gY2FwIGFzISBDYXBhYmlsaXR5PCZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+IAoKICAgICAgaWYgIXByb3ZpZGVyQ2FwLmNoZWNrKCl7CiAgICAgICAgY29udGludWUKICAgICAgfQoKICAgICAgZmxhZyA9IHRydWUKICAgICAgYnJlYWsKICAgIH0KICB9CgogIHJldHVybiBmbGFnCn0gCiAgICA=",
          "checkChildRecieveVaults": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgY2hlY2tDaGlsZFJlY2lldmVWYXVsdHMgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHgyOTRlNDRlMWVjNjk5M2M2CgppbXBvcnQgQ2FwYWJpbGl0eUZpbHRlciBmcm9tIDB4Mjk0ZTQ0ZTFlYzY5OTNjNgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweDlhMDc2NmQ5M2I2NjA4YjcKCgphY2Nlc3MoYWxsKSBmdW4gbWFpbihwYXJlbnQ6IEFkZHJlc3MsIGNoaWxkOiBBZGRyZXNzLCBwYXRoOiBTdHJpbmcpOiBCb29sIHsKICBsZXQgYWNjb3VudCA9IGdldEF1dGhBY2NvdW50PGF1dGgoU3RvcmFnZSkgJkFjY291bnQ+KHBhcmVudCkKICBsZXQgbWFuYWdlciA9IGdldEF1dGhBY2NvdW50PGF1dGgoU3RvcmFnZSkgJkFjY291bnQ+KHBhcmVudCkuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpID8/IHBhbmljICgibWFuYWdlciBkb2VzIG5vdCBleGlzdCIpCiAgCiAgbGV0IHJlY2VpdmVyVHlwZSA9IFR5cGU8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4oKQoKICBsZXQgYWRkciA9IGdldEF1dGhBY2NvdW50PGF1dGgoU3RvcmFnZSwgQ2FwYWJpbGl0aWVzKSAmQWNjb3VudD4oY2hpbGQpCiAgCiAgbGV0IGNoaWxkQWNjdCA9IG1hbmFnZXIuYm9ycm93QWNjb3VudChhZGRyOiBjaGlsZCkgPz8gcGFuaWMoImNoaWxkIGFjY291bnQgbm90IGZvdW5kIikKCiAgbGV0IGNvbnRyb2xsZXJzID0gYWRkci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5nZXRDb250cm9sbGVycyhmb3JQYXRoOiBTdG9yYWdlUGF0aChpZGVudGlmaWVyOiBwYXRoKSEpCiAgdmFyIGZsYWcgPSBmYWxzZQoKICBmb3IgYyBpbiBjb250cm9sbGVycyB7CiAgICBpZiAhYy5ib3Jyb3dUeXBlLmlzU3VidHlwZShvZjogcmVjZWl2ZXJUeXBlKSB7CiAgICAgIGNvbnRpbnVlCiAgICB9CgogICAgaWYgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogYy5jYXBhYmlsaXR5SUQsIHR5cGU6IHJlY2VpdmVyVHlwZSkgewogICAgICBsZXQgcHJvdmlkZXJDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4gCgogICAgICBpZiAhcHJvdmlkZXJDYXAuY2hlY2soKXsKICAgICAgICBjb250aW51ZQogICAgICB9CgogICAgICBmbGFnID0gdHJ1ZQogICAgICBicmVhawogICAgfQogIH0KCiAgcmV0dXJuIGZsYWcKfSAKICAgIA==",
          "editChildAccount": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZWRpdENoaWxkQWNjb3VudCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweDI5NGU0NGUxZWM2OTkzYzYKCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgoKdHJhbnNhY3Rpb24oY2hpbGRBZGRyZXNzOiBBZGRyZXNzLCBuYW1lOiBTdHJpbmcsIGRlc2NyaXB0aW9uOiBTdHJpbmcsIHRodW1ibmFpbDogU3RyaW5nKSB7CiAgICBwcmVwYXJlKGFjY3Q6IEF1dGhBY2NvdW50KSB7CiAgICAgICAgbGV0IG0gPSBhY2N0LmJvcnJvdzwmSHlicmlkQ3VzdG9keS5NYW5hZ2VyPihmcm9tOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgbm90IGZvdW5kIikKICAgICAgICAKICAgICAgICBsZXQgZCA9IE1ldGFkYXRhVmlld3MuRGlzcGxheSgKICAgICAgICAgICAgbmFtZTogbmFtZSwKICAgICAgICAgICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uLAogICAgICAgICAgICB0aHVtYm5haWw6IE1ldGFkYXRhVmlld3MuSFRUUEZpbGUodXJsOiB0aHVtYm5haWwpCiAgICAgICAgKQoKICAgICAgICBtLnNldENoaWxkQWNjb3VudERpc3BsYXkoYWRkcmVzczogY2hpbGRBZGRyZXNzLCBkKQogICAgfQp9",
          "getAccessibleChildAccountNFTs": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0QWNjZXNzaWJsZUNoaWxkQWNjb3VudE5GVHMgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHgyOTRlNDRlMWVjNjk5M2M2CgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCgoKLy8gVGhpcyBzY3JpcHQgaXRlcmF0ZXMgdGhyb3VnaCBhIHBhcmVudCdzIGNoaWxkIGFjY291bnRzLCAKLy8gaWRlbnRpZmllcyBwcml2YXRlIHBhdGhzIHdpdGggYW4gYWNjZXNzaWJsZSBOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyLCBhbmQgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyB0eXBlSWRzCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHI6IEFkZHJlc3MpOiBBbnlTdHJ1Y3QgewogIGxldCBtYW5hZ2VyID0gZ2V0QXV0aEFjY291bnQ8YXV0aChTdG9yYWdlKSAmQWNjb3VudD4oYWRkcikuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpID8/IHBhbmljICgibWFuYWdlciBkb2VzIG5vdCBleGlzdCIpCgogIHZhciB0eXBlSWRzV2l0aFByb3ZpZGVyID0ge30gYXMge0FkZHJlc3M6IFtTdHJpbmddfQoKICAvLyBBZGRyZXNzIC0+IG5mdCBVVUlEIC0+IERpc3BsYXkKICB2YXIgbmZ0Vmlld3MgPSB7fSBhcyB7QWRkcmVzczoge1N0cmluZzogW1VJbnQ2NF19fSAKCiAgCiAgbGV0IHByb3ZpZGVyVHlwZSA9IFR5cGU8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigpCiAgbGV0IGNvbGxlY3Rpb25UeXBlOiBUeXBlID0gVHlwZTxAe05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+KCkKCiAgLy8gSXRlcmF0ZSB0aHJvdWdoIGNoaWxkIGFjY291bnRzCiAgZm9yIGFkZHJlc3MgaW4gbWFuYWdlci5nZXRDaGlsZEFkZHJlc3NlcygpIHsKICAgIGxldCBhY2N0ID0gZ2V0QXV0aEFjY291bnQ8YXV0aChTdG9yYWdlLCBDYXBhYmlsaXRpZXMpICZBY2NvdW50PihhZGRyZXNzKQogICAgbGV0IGZvdW5kVHlwZXM6IFtTdHJpbmddID0gW10KICAgIGxldCB2aWV3czoge1N0cmluZzogW1VJbnQ2NF19ID0ge30KICAgIGxldCBjaGlsZEFjY3QgPSBtYW5hZ2VyLmJvcnJvd0FjY291bnQoYWRkcjogYWRkcmVzcykgPz8gcGFuaWMoImNoaWxkIGFjY291bnQgbm90IGZvdW5kIikKICAgICAKICAgIC8vIHR5cGVJZHNXaXRoUHJvdmlkZXJbYWRkcmVzc10gPSBmb3VuZFR5cGVzCgogICAgYWNjdC5zdG9yYWdlLmZvckVhY2hTdG9yZWQoZnVuIChwYXRoOiBTdG9yYWdlUGF0aCwgdHlwZTogVHlwZSk6IEJvb2wgewoKICAgICAgbGV0IGNvbnRyb2xsZXJzID0gYWNjdC5jYXBhYmlsaXRpZXMuc3RvcmFnZS5nZXRDb250cm9sbGVycyhmb3JQYXRoOiBwYXRoISkKICAgICAgZm9yIGMgaW4gY29udHJvbGxlcnMgewogICAgICAgIGlmICFjLmJvcnJvd1R5cGUuaXNTdWJ0eXBlKG9mOiBwcm92aWRlclR5cGUpIHsKICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgfQoKICAgICAgICBpZiBsZXQgY2FwID0gY2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiBjLmNhcGFiaWxpdHlJRCwgdHlwZTogcHJvdmlkZXJUeXBlKSB7CiAgICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8JntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4gCgogICAgICAgICAgaWYgIXByb3ZpZGVyQ2FwLmNoZWNrKCl7CiAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICB9CiAgICAgICAgICBmb3VuZFR5cGVzLmFwcGVuZChjYXAuYm9ycm93PCZBbnlSZXNvdXJjZT4oKSEuZ2V0VHlwZSgpLmlkZW50aWZpZXIpCiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiB0cnVlCiAgICB9KQoKICAgIHR5cGVJZHNXaXRoUHJvdmlkZXJbYWRkcmVzc10gPSBmb3VuZFR5cGVzCiAgICAKCiAgICAvLyBpdGVyYXRlIHN0b3JhZ2UsIGNoZWNrIGlmIHR5cGVJZHNXaXRoUHJvdmlkZXIgY29udGFpbnMgdGhlIHR5cGVJZCwgaWYgc28sIGFkZCB0byB2aWV3cwogICAgYWNjdC5zdG9yYWdlLmZvckVhY2hTdG9yZWQoZnVuIChwYXRoOiBTdG9yYWdlUGF0aCwgdHlwZTogVHlwZSk6IEJvb2wgewogICAgICAKICAgICAgaWYgdHlwZUlkc1dpdGhQcm92aWRlclthZGRyZXNzXSA9PSBuaWwgewogICAgICAgIHJldHVybiB0cnVlCiAgICAgIH0KCiAgICAgIGZvciBrZXkgaW4gdHlwZUlkc1dpdGhQcm92aWRlci5rZXlzIHsKICAgICAgICBmb3IgaWR4LCB2YWx1ZSBpbiB0eXBlSWRzV2l0aFByb3ZpZGVyW2tleV0hIHsKICAgICAgICAgIGxldCB2YWx1ZSA9IHR5cGVJZHNXaXRoUHJvdmlkZXJba2V5XSEKCiAgICAgICAgICBpZiB2YWx1ZVtpZHhdICE9IHR5cGUuaWRlbnRpZmllciB7CiAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZiB0eXBlLmlzSW5zdGFuY2UoY29sbGVjdGlvblR5cGUpIHsKICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIGxldCBjb2xsZWN0aW9uID0gYWNjdC5zdG9yYWdlLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpYywgVmlld1Jlc29sdmVyLlJlc29sdmVyQ29sbGVjdGlvbn0+KGZyb206IHBhdGgpIHsgCiAgICAgICAgICAgICAgLy8gSXRlcmF0ZSBvdmVyIElEcyAmIHJlc29sdmUgdGhlIHZpZXcKICAgICAgICAgICAgIAogICAgICAgICAgICAgIGZvciBpZCBpbiBjb2xsZWN0aW9uLmdldElEcygpIHsKICAgICAgICAgICAgICAgIGxldCBuZnQgPSBjb2xsZWN0aW9uLmJvcnJvd05GVChpZCkhCgogICAgICAgICAgICAgICAgdmlld3NbbmZ0LmdldFR5cGUoKS5pZGVudGlmaWVyXSA9IGNvbGxlY3Rpb24uZ2V0SURzKCkKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gdHJ1ZQogICAgfSkKICAgIG5mdFZpZXdzW2FkZHJlc3NdID0gdmlld3MKICB9CiAgcmV0dXJuIG5mdFZpZXdzCn0=",
          "getAccessibleCoinInfo": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0QWNjZXNzaWJsZUNvaW5JbmZvIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgogaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweDI5NGU0NGUxZWM2OTkzYzYKCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4OWEwNzY2ZDkzYjY2MDhiNwoKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCgphY2Nlc3MoYWxsKSBzdHJ1Y3QgVG9rZW5JbmZvIHsKYWNjZXNzKGFsbCkgbGV0IGlkOiBTdHJpbmcKYWNjZXNzKGFsbCkgbGV0IGJhbGFuY2U6IFVGaXg2NAoKaW5pdChpZDogU3RyaW5nLCBiYWxhbmNlOiBVRml4NjQpIHsKICAgIHNlbGYuaWQgPSBpZAogICAgc2VsZi5iYWxhbmNlID0gYmFsYW5jZQp9Cn0KCmFjY2VzcyhhbGwpIGZ1biBtYWluKHBhcmVudDogQWRkcmVzcywgY2hpbGRBZGRyZXNzOiBBZGRyZXNzKTogW1Rva2VuSW5mb10gewogICAgbGV0IG1hbmFnZXIgPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UpICZBY2NvdW50PihwYXJlbnQpLnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5NYW5hZ2UpICZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKSA/PyBwYW5pYyAoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQoKICAgIHZhciB0eXBlSWRzV2l0aFByb3ZpZGVyOiB7QWRkcmVzczogW1N0cmluZ119ID0ge30KCiAgICB2YXIgY29pbkluZm9MaXN0OiBbVG9rZW5JbmZvXSA9IFtdCiAgICBsZXQgcHJvdmlkZXJUeXBlID0gVHlwZTxDYXBhYmlsaXR5PCZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+PigpCiAgICBsZXQgdmF1bHRUeXBlOiBUeXBlID0gVHlwZTxAe0Z1bmdpYmxlVG9rZW4uVmF1bHR9PigpCgogICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGNoaWxkIGFjY291bnRzCgogICAgbGV0IGFjY3QgPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UsIENhcGFiaWxpdGllcykgJkFjY291bnQ+IChjaGlsZEFkZHJlc3MpCiAgICBsZXQgZm91bmRUeXBlczogW1N0cmluZ10gPSBbXQogICAgbGV0IHZhdWx0QmFsYW5jZXM6IHtTdHJpbmc6IFVGaXg2NH0gPSB7fQogICAgbGV0IGNoaWxkQWNjdCA9IG1hbmFnZXIuYm9ycm93QWNjb3VudChhZGRyOiBjaGlsZEFkZHJlc3MpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAvLyBnZXQgYWxsIHByaXZhdGUgcGF0aHMKICAgIGFjY3Quc3RvcmFnZS5mb3JFYWNoU3RvcmVkKGZ1biAocGF0aDogU3RvcmFnZVBhdGgsIHR5cGU6IFR5cGUpOiBCb29sIHsKICAgICAgICAvLyBDaGVjayB3aGljaCBwcml2YXRlIHBhdGhzIGhhdmUgTkZUIFByb3ZpZGVyIEFORCBjYW4gYmUgYm9ycm93ZWQKICAgICAgICBpZiAhdHlwZS5pc1N1YnR5cGUob2Y6IHByb3ZpZGVyVHlwZSl7CiAgICAgICAgICAgIHJldHVybiB0cnVlCiAgICAgICAgfQoKICAgICAgICBsZXQgY29udHJvbGxlcnMgPSBhY2N0LmNhcGFiaWxpdGllcy5zdG9yYWdlLmdldENvbnRyb2xsZXJzKGZvclBhdGg6IHBhdGgpCgogICAgICAgIC8vIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTwme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PiAKCiAgICAgICAgZm9yIGMgaW4gY29udHJvbGxlcnMgewogICAgICAgICAgICBpZiAhYy5ib3Jyb3dUeXBlLmlzU3VidHlwZShvZjogcHJvdmlkZXJUeXBlKSB7CiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiBsZXQgY2FwID0gY2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiBjLmNhcGFiaWxpdHlJRCwgdHlwZTogcHJvdmlkZXJUeXBlKSB7CiAgICAgICAgICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8JntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4gCgogICAgICAgICAgICAgICAgaWYgIXByb3ZpZGVyQ2FwLmNoZWNrKCl7CiAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZvdW5kVHlwZXMuYXBwZW5kKGNhcC5ib3Jyb3c8JkFueVJlc291cmNlPigpIS5nZXRUeXBlKCkuaWRlbnRpZmllcikKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gdHJ1ZQogICAgfSkKICAgIHR5cGVJZHNXaXRoUHJvdmlkZXJbY2hpbGRBZGRyZXNzXSA9IGZvdW5kVHlwZXMKCiAgICAKICAgIGFjY3Quc3RvcmFnZS5mb3JFYWNoU3RvcmVkKGZ1biAocGF0aDogU3RvcmFnZVBhdGgsIHR5cGU6IFR5cGUpOiBCb29sIHsKICAgIAogICAgaWYgdHlwZUlkc1dpdGhQcm92aWRlcltjaGlsZEFkZHJlc3NdID09IG5pbCB7CiAgICAgICAgcmV0dXJuIHRydWUKICAgIH0KCiAgICBmb3Iga2V5IGluIHR5cGVJZHNXaXRoUHJvdmlkZXIua2V5cyB7CiAgICAgICAgZm9yIGlkeCwgdmFsdWUgaW4gdHlwZUlkc1dpdGhQcm92aWRlcltrZXldISB7CiAgICAgICAgICAgIGxldCB2YWx1ZSA9IHR5cGVJZHNXaXRoUHJvdmlkZXJba2V5XSEKCiAgICAgICAgICAgIGlmIHZhbHVlW2lkeF0gIT0gdHlwZS5pZGVudGlmaWVyIHsKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBpZiB0eXBlLmlzSW5zdGFuY2UodmF1bHRUeXBlKSB7CiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgbGV0IHZhdWx0ID0gYWNjdC5zdG9yYWdlLmJvcnJvdzwme0Z1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KGZyb206IHBhdGgpIHsgCiAgICAgICAgICAgICAgICAvLyBJdGVyYXRlIG92ZXIgSURzICYgcmVzb2x2ZSB0aGUgdmlldwogICAgICAgICAgICAgICAgICAgIGNvaW5JbmZvTGlzdC5hcHBlbmQoCiAgICAgICAgICAgICAgICAgICAgVG9rZW5JbmZvKGlkOiB0eXBlLmlkZW50aWZpZXIsIGJhbGFuY2U6IHZhdWx0LmJhbGFuY2UpKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB9CiAgICAgIHJldHVybiB0cnVlCiAgICB9KQoKICAgIAogICAgcmV0dXJuIGNvaW5JbmZvTGlzdAp9",
          "getAccessibleCollectionAndIdsDisplay": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0QWNjZXNzaWJsZUNvbGxlY3Rpb25BbmRJZHNEaXNwbGF5IC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4Mjk0ZTQ0ZTFlYzY5OTNjNgoKaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHg5YTA3NjZkOTNiNjYwOGI3CgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKCgphY2Nlc3MoYWxsKSBzdHJ1Y3QgQ29sbGVjdGlvbkRpc3BsYXkgewogIGFjY2VzcyhhbGwpIGxldCBuYW1lOiBTdHJpbmcKICBhY2Nlc3MoYWxsKSBsZXQgc3F1YXJlSW1hZ2U6IE1ldGFkYXRhVmlld3MuTWVkaWEKCiAgaW5pdChuYW1lOiBTdHJpbmcsIHNxdWFyZUltYWdlOiBNZXRhZGF0YVZpZXdzLk1lZGlhKSB7CiAgICBzZWxmLm5hbWUgPSBuYW1lCiAgICBzZWxmLnNxdWFyZUltYWdlID0gc3F1YXJlSW1hZ2UKICB9Cn0KCmFjY2VzcyhhbGwpIHN0cnVjdCBORlRDb2xsZWN0aW9uIHsKICBhY2Nlc3MoYWxsKSBsZXQgaWQ6IFN0cmluZwogIGFjY2VzcyhhbGwpIGxldCBkaXNwbGF5OiBDb2xsZWN0aW9uRGlzcGxheT8KICBhY2Nlc3MoYWxsKSBsZXQgaWRMaXN0OiBbVUludDY0XQoKICBpbml0KGlkOlN0cmluZywgZGlzcGxheTogQ29sbGVjdGlvbkRpc3BsYXk/LCBpZExpc3Q6IFtVSW50NjRdKSB7CiAgICBzZWxmLmlkID0gaWQKICAgIHNlbGYuZGlzcGxheSA9IGRpc3BsYXkKICAgIHNlbGYuaWRMaXN0ID0gaWRMaXN0CiAgfQp9CgphY2Nlc3MoYWxsKSBmdW4gZ2V0RGlzcGxheShhZGRyZXNzOiBBZGRyZXNzLCBwYXRoOiBTdG9yYWdlUGF0aCk6IENvbGxlY3Rpb25EaXNwbGF5PyB7CiAgbGV0IGFjY291bnQgPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UsIENhcGFiaWxpdGllcykgJkFjY291bnQ+KGFkZHJlc3MpCgogIGxldCByZXNvdXJjZVR5cGUgPSBUeXBlPEBBbnlSZXNvdXJjZT4oKQogIC8vIGxldCB2YXVsdFR5cGUgPSBUeXBlPEB7RnVuZ2libGVUb2tlbi5WYXVsdH0+KCkKICBsZXQgY29sbGVjdGlvblR5cGUgPSBUeXBlPEB7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufT4oKQogIGxldCBtZXRhZGF0YVZpZXdUeXBlID0gVHlwZTwme1ZpZXdSZXNvbHZlci5SZXNvbHZlckNvbGxlY3Rpb259PigpCiAgdmFyIGl0ZW06IENvbGxlY3Rpb25EaXNwbGF5PyA9ICBuaWwKCiAgICBpZiBsZXQgdHlwZSA9IGFjY291bnQuc3RvcmFnZS50eXBlKGF0OiBwYXRoKSB7CiAgICAgIGxldCBpc1Jlc291cmNlID0gdHlwZS5pc1N1YnR5cGUob2Y6IHJlc291cmNlVHlwZSkKICAgICAgbGV0IGlzTkZUQ29sbGVjdGlvbiA9IHR5cGUuaXNTdWJ0eXBlKG9mOiBjb2xsZWN0aW9uVHlwZSkKICAgICAgbGV0IGNvbmZvcm1lZE1ldGFkYXRhVmlld3MgPSB0eXBlLmlzU3VidHlwZShvZjogbWV0YWRhdGFWaWV3VHlwZSkKCiAgICAgIHZhciB0b2tlbklEczogW1VJbnQ2NF0gPSBbXQogICAgICBpZiBpc05GVENvbGxlY3Rpb24gJiYgY29uZm9ybWVkTWV0YWRhdGFWaWV3cyB7CiAgICAgICAgaWYgbGV0IGNvbGxlY3Rpb25SZWYgPSBhY2NvdW50LnN0b3JhZ2UuYm9ycm93PCZ7Vmlld1Jlc29sdmVyLlJlc29sdmVyQ29sbGVjdGlvbiwgTm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uUHVibGljfT4oZnJvbTogcGF0aCkgewogICAgICAgICAgdG9rZW5JRHMgPSBjb2xsZWN0aW9uUmVmLmdldElEcygpCgogICAgICAgICAgLy8gVE9ETzogbW92ZSB0byBhIGxpc3QKICAgICAgICAgIGlmIHRva2VuSURzLmxlbmd0aCA+IDAgCiAgICAgICAgICAmJiBwYXRoICE9IC9zdG9yYWdlL1JhcmlibGVORlRDb2xsZWN0aW9uIAogICAgICAgICAgJiYgcGF0aCAhPSAvc3RvcmFnZS9BUlRJRkFDVFBhY2tWM0NvbGxlY3Rpb24KICAgICAgICAgICYmIHBhdGggIT0gL3N0b3JhZ2UvQXJsZWVTY2VuZSB7CiAgICAgICAgICAgIGxldCByZXNvbHZlciA9IGNvbGxlY3Rpb25SZWYuYm9ycm93Vmlld1Jlc29sdmVyKGlkOiB0b2tlbklEc1swXSkhCiAgICAgICAgICAgIGlmIGxldCBkaXNwbGF5ID0gTWV0YWRhdGFWaWV3cy5nZXRORlRDb2xsZWN0aW9uRGlzcGxheShyZXNvbHZlcikgewogICAgICAgICAgICAgIGl0ZW0gPSBDb2xsZWN0aW9uRGlzcGxheSgKICAgICAgICAgICAgICAgIG5hbWU6IGRpc3BsYXkubmFtZSwKICAgICAgICAgICAgICAgIHNxdWFyZUltYWdlOiBkaXNwbGF5LnNxdWFyZUltYWdlCiAgICAgICAgICAgICAgKQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogIHJldHVybiBpdGVtCn0KCmFjY2VzcyhhbGwpIGZ1biBtYWluKHBhcmVudDogQWRkcmVzcywgY2hpbGRBY2NvdW50OiBBZGRyZXNzKTogW05GVENvbGxlY3Rpb25dIHsKICAgIGxldCBtYW5hZ2VyID0gIGdldEF1dGhBY2NvdW50PGF1dGgoU3RvcmFnZSkgJkFjY291bnQ+KHBhcmVudCkuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpID8/IHBhbmljICgibWFuYWdlciBkb2VzIG5vdCBleGlzdCIpCgogICAgLy8gQWRkcmVzcyAtPiBDb2xsZWN0aW9uIFR5cGUgLT4gb3duZWRORlRzCgogICAgbGV0IHByb3ZpZGVyVHlwZSA9IFR5cGU8Q2FwYWJpbGl0eTwme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oKQogICAgbGV0IGNvbGxlY3Rpb25UeXBlOiBUeXBlID0gVHlwZTxAe05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+KCkKCiAgICAvLyBJdGVyYXRlIHRocm91Z2ggY2hpbGQgYWNjb3VudHMKCiAgICBsZXQgYWNjdCA9IGdldEF1dGhBY2NvdW50PGF1dGgoU3RvcmFnZSwgQ2FwYWJpbGl0aWVzKSAmQWNjb3VudD4oY2hpbGRBY2NvdW50KQogICAgbGV0IGZvdW5kVHlwZXM6IFtUeXBlXSA9IFtdCiAgICBsZXQgbmZ0czoge1N0cmluZzogW1VJbnQ2NF19ID0ge30KICAgIGxldCBjb2xsZWN0aW9uTGlzdDogW05GVENvbGxlY3Rpb25dID0gW10KICAgIGxldCBjaGlsZEFjY3QgPSBtYW5hZ2VyLmJvcnJvd0FjY291bnQoYWRkcjogY2hpbGRBY2NvdW50KSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQogICAgCiAgICAvLyBnZXQgYWxsIHByaXZhdGUgcGF0aHMKICAgIGFjY3Quc3RvcmFnZS5mb3JFYWNoU3RvcmVkKGZ1biAocGF0aDogU3RvcmFnZVBhdGgsIHR5cGU6IFR5cGUpOiBCb29sIHsKICAgICAgICAvLyBDaGVjayB3aGljaCBwcml2YXRlIHBhdGhzIGhhdmUgTkZUIFByb3ZpZGVyIEFORCBjYW4gYmUgYm9ycm93ZWQKICAgICAgICAvLyBpZiAhdHlwZS5pc1N1YnR5cGUob2Y6IHByb3ZpZGVyVHlwZSl7CiAgICAgICAgLy8gICAgIHJldHVybiB0cnVlCiAgICAgICAgLy8gfQogICAgICAgIC8vIGlmIGxldCBjYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShwYXRoOiBwYXRoLCB0eXBlOiBUeXBlPCZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KCkpIHsKICAgICAgICAvLyAgICAgbGV0IHByb3ZpZGVyQ2FwID0gY2FwIGFzISBDYXBhYmlsaXR5PCZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+IAoKICAgICAgICAvLyAgICAgaWYgIXByb3ZpZGVyQ2FwLmNoZWNrKCl7CiAgICAgICAgLy8gICAgICAgICAvLyBpZiB0aGlzIGlzbid0IGEgcHJvdmlkZXIgY2FwYWJpbGl0eSwgZXhpdCB0aGUgYWNjb3VudCBpdGVyYXRpb24gZnVuY3Rpb24gZm9yIHRoaXMgcGF0aAogICAgICAgIC8vICAgICAgICAgcmV0dXJuIHRydWUKICAgICAgICAvLyAgICAgfQogICAgICAgIC8vICAgICBmb3VuZFR5cGVzLmFwcGVuZChjYXAuYm9ycm93PCZBbnlSZXNvdXJjZT4oKSEuZ2V0VHlwZSgpKQogICAgICAgIC8vIH0KCiAgICAgICAgbGV0IGNvbnRyb2xsZXJzID0gYWNjdC5jYXBhYmlsaXRpZXMuc3RvcmFnZS5nZXRDb250cm9sbGVycyhmb3JQYXRoOiBwYXRoISkKICAgICAgICBmb3IgYyBpbiBjb250cm9sbGVycyB7CiAgICAgICAgICBpZiAhYy5ib3Jyb3dUeXBlLmlzU3VidHlwZShvZjogcHJvdmlkZXJUeXBlKSB7CiAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICB9CgogICAgICAgICAgaWYgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogYy5jYXBhYmlsaXR5SUQsIHR5cGU6IHByb3ZpZGVyVHlwZSkgewogICAgICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8JntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4gCgogICAgICAgICAgICBpZiAhcHJvdmlkZXJDYXAuY2hlY2soKXsKICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvdW5kVHlwZXMuYXBwZW5kKGNhcC5ib3Jyb3c8JkFueVJlc291cmNlPigpIS5nZXRUeXBlKCkpCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiB0cnVlCiAgICB9KQoKICAgIC8vIGl0ZXJhdGUgc3RvcmFnZSwgY2hlY2sgaWYgdHlwZUlkc1dpdGhQcm92aWRlciBjb250YWlucyB0aGUgdHlwZUlkLCBpZiBzbywgYWRkIHRvIG5mdHMKICAgIGFjY3Quc3RvcmFnZS5mb3JFYWNoU3RvcmVkKGZ1biAocGF0aDogU3RvcmFnZVBhdGgsIHR5cGU6IFR5cGUpOiBCb29sIHsKCiAgICAgICAgaWYgZm91bmRUeXBlcyA9PSBuaWwgewogICAgICAgICAgICByZXR1cm4gdHJ1ZQogICAgICAgIH0KCiAgICAgICAgZm9yIGlkeCwgdmFsdWUgaW4gZm91bmRUeXBlcyB7CiAgICAgICAgICAgIGxldCB2YWx1ZSA9IGZvdW5kVHlwZXMhCgogICAgICAgICAgICBpZiB2YWx1ZVtpZHhdICE9IHR5cGUgewogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGlmIHR5cGUuaXNJbnN0YW5jZShjb2xsZWN0aW9uVHlwZSkgewogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiBsZXQgY29sbGVjdGlvbiA9IGFjY3Quc3RvcmFnZS5ib3Jyb3c8JntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb25QdWJsaWN9Pihmcm9tOiBwYXRoKSB7IAogICAgICAgICAgICAgICAgICAgIG5mdHMuaW5zZXJ0KGtleTogdHlwZS5pZGVudGlmaWVyLCBjb2xsZWN0aW9uLmdldElEcygpKQogICAgICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25MaXN0LmFwcGVuZCgKICAgICAgICAgICAgICAgICAgICAgIE5GVENvbGxlY3Rpb24oCiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiB0eXBlLmlkZW50aWZpZXIsCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGdldERpc3BsYXkoYWRkcmVzczogY2hpbGRBY2NvdW50LCBwYXRoOiBwYXRoKSwKICAgICAgICAgICAgICAgICAgICAgICAgaWRMaXN0OiBjb2xsZWN0aW9uLmdldElEcygpCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gdHJ1ZQogICAgfSkKCiAgICByZXR1cm4gY29sbGVjdGlvbkxpc3QKfQ==",
          "getChildAccountAllowTypes": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0Q2hpbGRBY2NvdW50QWxsb3dUeXBlcyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweDI5NGU0NGUxZWM2OTkzYzYKCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4OWEwNzY2ZDkzYjY2MDhiNwoKCi8vIFRoaXMgc2NyaXB0IGl0ZXJhdGVzIHRocm91Z2ggYSBwYXJlbnQncyBjaGlsZCBhY2NvdW50cywgCi8vIGlkZW50aWZpZXMgcHJpdmF0ZSBwYXRocyB3aXRoIGFuIGFjY2Vzc2libGUgTm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlciwgYW5kIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgdHlwZUlkcwphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyOiBBZGRyZXNzLCBjaGlsZDogQWRkcmVzcyk6IFtTdHJpbmddPyB7CiAgbGV0IGFjY291bnQgPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UpICZBY2NvdW50PihhZGRyKQogIGxldCBtYW5hZ2VyID0gZ2V0QXV0aEFjY291bnQ8YXV0aChTdG9yYWdlKSAmQWNjb3VudD4oYWRkcikuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpID8/IHBhbmljICgibWFuYWdlciBkb2VzIG5vdCBleGlzdCIpCgoKICAKICBsZXQgbmZ0UHJvdmlkZXJUeXBlID0gVHlwZTxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KCkKICBsZXQgZnRQcm92aWRlclR5cGUgPSBUeXBlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oKQoKICAvLyBJdGVyYXRlIHRocm91Z2ggY2hpbGQgYWNjb3VudHMKICBsZXQgYWRkciA9IGdldEF1dGhBY2NvdW50PGF1dGgoU3RvcmFnZSwgQ2FwYWJpbGl0aWVzKSAmQWNjb3VudD4oY2hpbGQpCiAgbGV0IGZvdW5kVHlwZXM6IFtTdHJpbmddID0gW10KICBsZXQgY2hpbGRBY2N0ID0gbWFuYWdlci5ib3Jyb3dBY2NvdW50KGFkZHI6IGNoaWxkKSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQogIC8vIGdldCBhbGwgcHJpdmF0ZSBwYXRocwoKICBmb3IgcyBpbiBhZGRyLnN0b3JhZ2Uuc3RvcmFnZVBhdGhzIHsKICAgIGxldCBjb250cm9sbGVycyA9IGFkZHIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuZ2V0Q29udHJvbGxlcnMoZm9yUGF0aDogcykKICAgIGZvciBjIGluIGNvbnRyb2xsZXJzIHsKICAgICAgLy8gaWYgIWMuYm9ycm93VHlwZS5pc1N1YnR5cGUob2Y6IHByb3ZpZGVyVHlwZSkgewogICAgICAvLyAgIGNvbnRpbnVlCiAgICAgIC8vIH0KCiAgICAgIGlmIGxldCBuZnRDYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGMuY2FwYWJpbGl0eUlELCB0eXBlOiBuZnRQcm92aWRlclR5cGUpIHsKICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBuZnRDYXAgYXMhIENhcGFiaWxpdHk8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PiAKCiAgICAgICAgaWYgIXByb3ZpZGVyQ2FwLmNoZWNrKCl7CiAgICAgICAgICBjb250aW51ZQogICAgICAgIH0KCiAgICAgICAgZm91bmRUeXBlcy5hcHBlbmQobmZ0Q2FwLmJvcnJvdzwmQW55UmVzb3VyY2U+KCkhLmdldFR5cGUoKS5pZGVudGlmaWVyKQogICAgICAgIGJyZWFrCiAgICAgIH0KICAgICAgaWYgbGV0IGZ0Q2FwID0gY2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiBjLmNhcGFiaWxpdHlJRCwgdHlwZTogZnRQcm92aWRlclR5cGUpIHsKICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBmdENhcCBhcyEgQ2FwYWJpbGl0eTwme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PiAKCiAgICAgICAgaWYgIXByb3ZpZGVyQ2FwLmNoZWNrKCl7CiAgICAgICAgICBjb250aW51ZQogICAgICAgIH0KCiAgICAgICAgZm91bmRUeXBlcy5hcHBlbmQoZnRDYXAuYm9ycm93PCZBbnlSZXNvdXJjZT4oKSEuZ2V0VHlwZSgpLmlkZW50aWZpZXIpCiAgICAgICAgYnJlYWsKICAgICAgfQogICAgfQogIH0KCiAgcmV0dXJuIGZvdW5kVHlwZXMKfQ==",
          "getChildAccountFTCapabilities": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0Q2hpbGRBY2NvdW50RlRDYXBhYmlsaXRpZXMgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHgyOTRlNDRlMWVjNjk5M2M2CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4OWEwNzY2ZDkzYjY2MDhiNwoKCi8vIFRoaXMgc2NyaXB0IGl0ZXJhdGVzIHRocm91Z2ggYSBwYXJlbnQncyBjaGlsZCBhY2NvdW50cywgCi8vIGlkZW50aWZpZXMgcHJpdmF0ZSBwYXRocyB3aXRoIGFuIGFjY2Vzc2libGUgRnVuZ2libGVUb2tlbi5Qcm92aWRlciwgYW5kIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgdHlwZUlkcwphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyOiBBZGRyZXNzKTpBbnlTdHJ1Y3QgewogIGxldCBhY2NvdW50ID0gZ2V0QXV0aEFjY291bnQ8YXV0aChTdG9yYWdlKSAmQWNjb3VudD4oYWRkcikKICBsZXQgbWFuYWdlciA9IGdldEF1dGhBY2NvdW50PGF1dGgoU3RvcmFnZSkgJkFjY291bnQ+KGFkZHIpLnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5NYW5hZ2UpICZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQogICAgPz8gcGFuaWMgKCJtYW5hZ2VyIGRvZXMgbm90IGV4aXN0IikKCiAgdmFyIHR5cGVJZHNXaXRoUHJvdmlkZXI6IHtBZGRyZXNzOiBbU3RyaW5nXX0gPSB7fQogIAogIGxldCBwcm92aWRlclR5cGUgPSBUeXBlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oKQoKICAvLyBJdGVyYXRlIHRocm91Z2ggY2hpbGQgYWNjb3VudHMKICBmb3IgYWRkcmVzcyBpbiBtYW5hZ2VyLmdldENoaWxkQWRkcmVzc2VzKCkgewogICAgbGV0IGFkZHIgPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UsIENhcGFiaWxpdGllcykgJkFjY291bnQ+KGFkZHJlc3MpCiAgICBsZXQgZm91bmRUeXBlczogW1N0cmluZ10gPSBbXQogICAgbGV0IGNoaWxkQWNjdCA9IG1hbmFnZXIuYm9ycm93QWNjb3VudChhZGRyOiBhZGRyZXNzKSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQogICAgLy8gZ2V0IGFsbCBwcml2YXRlIHBhdGhzCgogICAgZm9yIHMgaW4gYWRkci5zdG9yYWdlLnN0b3JhZ2VQYXRocyB7CiAgICAgIGZvciBjIGluIGFkZHIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuZ2V0Q29udHJvbGxlcnMoZm9yUGF0aDogcykgewogICAgICAgIGlmICFjLmJvcnJvd1R5cGUuaXNTdWJ0eXBlKG9mOiBwcm92aWRlclR5cGUpewogICAgICAgICAgY29udGludWUKICAgICAgICB9CgogICAgICAgIGlmIGxldCBjYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGMuY2FwYWJpbGl0eUlELCB0eXBlOiBwcm92aWRlclR5cGUpIHsKICAgICAgICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTwme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PiAKCiAgICAgICAgICBpZiAhcHJvdmlkZXJDYXAuY2hlY2soKXsKICAgICAgICAgICAgY29udGludWUKICAgICAgICAgIH0KCiAgICAgICAgICBmb3VuZFR5cGVzLmFwcGVuZChjYXAuYm9ycm93PCZBbnlSZXNvdXJjZT4oKSEuZ2V0VHlwZSgpLmlkZW50aWZpZXIpCiAgICAgICAgICB0eXBlSWRzV2l0aFByb3ZpZGVyW2FkZHJlc3NdID0gZm91bmRUeXBlcwogICAgICAgICAgYnJlYWsKICAgICAgICB9CiAgICAgIH0KICAgIH0gICAgICAKICB9CgogIHJldHVybiB0eXBlSWRzV2l0aFByb3ZpZGVyCn0KIA==",
          "getChildAccountMeta": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0Q2hpbGRBY2NvdW50TWV0YSAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweDI5NGU0NGUxZWM2OTkzYzYKCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgoKYWNjZXNzKGFsbCkgZnVuIG1haW4ocGFyZW50OiBBZGRyZXNzKToge0FkZHJlc3M6IEFueVN0cnVjdH0gewogICAgbGV0IGFjY3QgPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UpICZBY2NvdW50PihwYXJlbnQpCiAgICBsZXQgbSA9IGFjY3Quc3RvcmFnZS5ib3Jyb3c8Jkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCgogICAgaWYgbSA9PSBuaWwgewogICAgICAgIHJldHVybiB7fQogICAgfSBlbHNlIHsKICAgICAgICB2YXIgZGF0YToge0FkZHJlc3M6IEFueVN0cnVjdH0gPSB7fQogICAgICAgIGZvciBhZGRyZXNzIGluIG0/LmdldENoaWxkQWRkcmVzc2VzKCkhIHsKICAgICAgICAgICAgbGV0IGMgPSBtPy5nZXRDaGlsZEFjY291bnREaXNwbGF5KGFkZHJlc3M6IGFkZHJlc3MpIAogICAgICAgICAgICBkYXRhLmluc2VydChrZXk6IGFkZHJlc3MsIGMpCiAgICAgICAgfQogICAgICAgIHJldHVybiBkYXRhCiAgICB9Cn0=",
          "getChildAddresses": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0Q2hpbGRBZGRyZXNzZXMgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHgyOTRlNDRlMWVjNjk5M2M2CgoKYWNjZXNzKGFsbCkgZnVuIG1haW4ocGFyZW50OiBBZGRyZXNzKTogW0FkZHJlc3NdIHsKICAgIGxldCBhY2N0ID0gZ2V0QXV0aEFjY291bnQ8YXV0aChTdG9yYWdlKSAmQWNjb3VudD4ocGFyZW50KQogICAgbGV0IG1hbmFnZXIgPSBhY2N0LnN0b3JhZ2UuYm9ycm93PCZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJtYW5hZ2VyIG5vdCBmb3VuZCIpCiAgICByZXR1cm4gIG1hbmFnZXIuZ2V0Q2hpbGRBZGRyZXNzZXMoKQp9",
          "getExamplenftCollectionFromDelegator": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0RXhhbXBsZW5mdENvbGxlY3Rpb25Gcm9tRGVsZWdhdG9yIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4Mjk0ZTQ0ZTFlYzY5OTNjNgoKCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgppbXBvcnQgPFRva2VuPiBmcm9tIDxUb2tlbkFkZHJlc3M+CgphY2Nlc3MoYWxsKSBmdW4gbWFpbihwYXJlbnQ6IEFkZHJlc3MsIGNoaWxkOiBBZGRyZXNzLCBpc1B1YmxpYzogQm9vbCkgewogICAgbGV0IG0gPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UpICZBY2NvdW50PihwYXJlbnQpLnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5NYW5hZ2UpICZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJtYW5hZ2VyIG5vdCBmb3VuZCIpCiAgICBsZXQgYWNjdCA9IG0uYm9ycm93QWNjb3VudChhZGRyOiBjaGlsZCkKICAgICAgICA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQgaW4gbWFuYWdlciIpCgogICAgbGV0IHQgPSBUeXBlPENhcGFiaWxpdHk8JkV4YW1wbGVORlQuQ29sbGVjdGlvbj4+KCkKCiAgICBsZXQgY2FwID0gKGlzUHVibGljID8gYWNjdC5nZXRQdWJsaWNDYXBGcm9tRGVsZWdhdG9yKHR5cGU6IHQpIDogYWNjdC5nZXRQcml2YXRlQ2FwRnJvbURlbGVnYXRvcih0eXBlOiB0KSkKICAgICAgICA/PyBwYW5pYygiY2FwYWJpbGl0eSBub3QgZm91bmQiKQogICAgCiAgICBhc3NlcnQoY2FwLmdldFR5cGUoKSA9PSB0LCBtZXNzYWdlOiAibWlzbWF0Y2hlZCBjYXBhYmlsaXR5IHR5cGVzIikKfQ==",
          "publishToParent": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgcHVibGlzaFRvUGFyZW50IC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgojYWxsb3dBY2NvdW50TGlua2luZwoKaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweDI5NGU0NGUxZWM2OTkzYzYKCmltcG9ydCBDYXBhYmlsaXR5RmFjdG9yeSBmcm9tIDB4Mjk0ZTQ0ZTFlYzY5OTNjNgoKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweDI5NGU0NGUxZWM2OTkzYzYKCmltcG9ydCBDYXBhYmlsaXR5RGVsZWdhdG9yIGZyb20gMHgyOTRlNDRlMWVjNjk5M2M2CgoKdHJhbnNhY3Rpb24ocGFyZW50OiBBZGRyZXNzLCBmYWN0b3J5QWRkcmVzczogQWRkcmVzcywgZmlsdGVyQWRkcmVzczogQWRkcmVzcykgewogICAgcHJlcGFyZShhY2N0OiBhdXRoKFN0b3JhZ2UpICZBY2NvdW50KSB7CiAgICAgICAgbGV0IG93bmVkID0gYWNjdC5zdG9yYWdlLmJvcnJvdzxhdXRoKEh5YnJpZEN1c3RvZHkuT3duZXIpICZIeWJyaWRDdXN0b2R5Lk93bmVkQWNjb3VudD4oZnJvbTogSHlicmlkQ3VzdG9keS5Pd25lZEFjY291bnRTdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIm93bmVkIGFjY291bnQgbm90IGZvdW5kIikKCiAgICAgICAgbGV0IGZhY3RvcnkgPSBnZXRBY2NvdW50KGZhY3RvcnlBZGRyZXNzKS5jYXBhYmlsaXRpZXMuZ2V0PCZDYXBhYmlsaXR5RmFjdG9yeS5NYW5hZ2VyPihDYXBhYmlsaXR5RmFjdG9yeS5QdWJsaWNQYXRoKQogICAgICAgIGFzc2VydChmYWN0b3J5LmNoZWNrKCksIG1lc3NhZ2U6ICJmYWN0b3J5IGFkZHJlc3MgaXMgbm90IGNvbmZpZ3VyZWQgcHJvcGVybHkiKQoKICAgICAgICBsZXQgZmlsdGVyID0gZ2V0QWNjb3VudChmaWx0ZXJBZGRyZXNzKS5jYXBhYmlsaXRpZXMuZ2V0PCZ7Q2FwYWJpbGl0eUZpbHRlci5GaWx0ZXJ9PihDYXBhYmlsaXR5RmlsdGVyLlB1YmxpY1BhdGgpCiAgICAgICAgYXNzZXJ0KGZpbHRlci5jaGVjaygpLCBtZXNzYWdlOiAiY2FwYWJpbGl0eSBmaWx0ZXIgaXMgbm90IGNvbmZpZ3VyZWQgcHJvcGVybHkiKQoKICAgICAgICBvd25lZC5wdWJsaXNoVG9QYXJlbnQocGFyZW50QWRkcmVzczogcGFyZW50LCBmYWN0b3J5OiBmYWN0b3J5LCBmaWx0ZXI6IGZpbHRlcikKICAgIH0KfQ==",
          "redeemAccount": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgcmVkZWVtQWNjb3VudCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCgppbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4Mjk0ZTQ0ZTFlYzY5OTNjNgoKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweDI5NGU0NGUxZWM2OTkzYzYKCgp0cmFuc2FjdGlvbihjaGlsZEFkZHJlc3M6IEFkZHJlc3MsIGZpbHRlckFkZHJlc3M6IEFkZHJlc3M/LCBmaWx0ZXJQYXRoOiBQdWJsaWNQYXRoPykgewogICAgcHJlcGFyZShhY2N0OiBhdXRoKFN0b3JhZ2UsIENhcGFiaWxpdGllcywgSW5ib3gpICZBY2NvdW50KSB7CiAgICAgICAgdmFyIGZpbHRlcjogQ2FwYWJpbGl0eTwme0NhcGFiaWxpdHlGaWx0ZXIuRmlsdGVyfT4/ID0gbmlsCiAgICAgICAgaWYgZmlsdGVyQWRkcmVzcyAhPSBuaWwgJiYgZmlsdGVyUGF0aCAhPSBuaWwgewogICAgICAgICAgICBmaWx0ZXIgPSBnZXRBY2NvdW50KGZpbHRlckFkZHJlc3MhKS5jYXBhYmlsaXRpZXMuZ2V0PCZ7Q2FwYWJpbGl0eUZpbHRlci5GaWx0ZXJ9PihmaWx0ZXJQYXRoISkKICAgICAgICB9CgogICAgICAgIGlmIGFjY3Quc3RvcmFnZS5ib3Jyb3c8Jkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIGxldCBtIDwtIEh5YnJpZEN1c3RvZHkuY3JlYXRlTWFuYWdlcihmaWx0ZXI6IGZpbHRlcikKICAgICAgICAgICAgYWNjdC5zdG9yYWdlLnNhdmUoPC0gbSwgdG86IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQoKICAgICAgICAgICAgZm9yIGMgaW4gYWNjdC5jYXBhYmlsaXRpZXMuc3RvcmFnZS5nZXRDb250cm9sbGVycyhmb3JQYXRoOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkgewogICAgICAgICAgICAgICAgYy5kZWxldGUoKQogICAgICAgICAgICB9CgogICAgICAgICAgICBhY2N0LmNhcGFiaWxpdGllcy51bnB1Ymxpc2goSHlicmlkQ3VzdG9keS5NYW5hZ2VyUHVibGljUGF0aCkKCiAgICAgICAgICAgIGFjY3QuY2FwYWJpbGl0aWVzLnB1Ymxpc2goCiAgICAgICAgICAgICAgICBhY2N0LmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCZ7SHlicmlkQ3VzdG9keS5NYW5hZ2VyUHVibGljfT4oSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpLAogICAgICAgICAgICAgICAgYXQ6IEh5YnJpZEN1c3RvZHkuTWFuYWdlclB1YmxpY1BhdGgKICAgICAgICAgICAgKQoKICAgICAgICAgICAgYWNjdC5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEh5YnJpZEN1c3RvZHkuTWFuYWdlKSAme0h5YnJpZEN1c3RvZHkuTWFuYWdlclByaXZhdGUsIEh5YnJpZEN1c3RvZHkuTWFuYWdlclB1YmxpY30+KEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQogICAgICAgIH0KCiAgICAgICAgbGV0IGluYm94TmFtZSA9IEh5YnJpZEN1c3RvZHkuZ2V0Q2hpbGRBY2NvdW50SWRlbnRpZmllcihhY2N0LmFkZHJlc3MpCiAgICAgICAgbGV0IGNhcCA9IGFjY3QuaW5ib3guY2xhaW08YXV0aChIeWJyaWRDdXN0b2R5LkNoaWxkKSAme0h5YnJpZEN1c3RvZHkuQWNjb3VudFByaXZhdGUsIEh5YnJpZEN1c3RvZHkuQWNjb3VudFB1YmxpYywgVmlld1Jlc29sdmVyLlJlc29sdmVyfT4oaW5ib3hOYW1lLCBwcm92aWRlcjogY2hpbGRBZGRyZXNzKQogICAgICAgICAgICA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBjYXAgbm90IGZvdW5kIikKCiAgICAgICAgbGV0IG1hbmFnZXIgPSBhY2N0LnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5NYW5hZ2UpICZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygibWFuYWdlciBubyBmb3VuZCIpCgogICAgICAgIG1hbmFnZXIuYWRkQWNjb3VudChjYXA6IGNhcCkKICAgIH0KfQ==",
          "sendChildFT": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgc2VuZENoaWxkRlQgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHgyOTRlNDRlMWVjNjk5M2M2CgoKLy8gSEMtb3duZWQgaW1wb3J0cwppbXBvcnQgQ2FwYWJpbGl0eUZhY3RvcnkgZnJvbSAweDI5NGU0NGUxZWM2OTkzYzYKCmltcG9ydCBDYXBhYmlsaXR5RmlsdGVyIGZyb20gMHgyOTRlNDRlMWVjNjk5M2M2CgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweDlhMDc2NmQ5M2I2NjA4YjcKCmltcG9ydCA8VG9rZW4+IGZyb20gPFRva2VuQWRkcmVzcz4KCgp0cmFuc2FjdGlvbihhZGRyZXNzOiBBZGRyZXNzLCByZWNlaXZlcjogQWRkcmVzcywgcGF0aDogU3RyaW5nLCBhbW91bnQ6IFVGaXg2NCApIHsKCiAgLy8gVGhlIFZhdWx0IHJlc291cmNlIHRoYXQgaG9sZHMgdGhlIHRva2VucyB0aGF0IGFyZSBiZWluZyB0cmFuc2ZlcnJlZAogIGxldCBwYXltZW50VmF1bHQ6IEB7RnVuZ2libGVUb2tlbi5WYXVsdH0KICBsZXQgdmF1bHREYXRhOiBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YQoKICBwcmVwYXJlKHNpZ25lcjogYXV0aChTdG9yYWdlKSAmQWNjb3VudCkgewogICAgICAvLyBzaWduZXIgaXMgdGhlIHBhcmVudCBhY2NvdW50CiAgICAgIC8vIGdldCB0aGUgbWFuYWdlciByZXNvdXJjZSBhbmQgYm9ycm93IGNoaWxkQWNjb3VudAogICAgICBsZXQgbSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEh5YnJpZEN1c3RvZHkuTWFuYWdlKSAmSHlicmlkQ3VzdG9keS5NYW5hZ2VyPihmcm9tOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkKICAgICAgICAgID8/IHBhbmljKCJtYW5hZ2VyIGRvZXMgbm90IGV4aXN0IikKICAgICAgbGV0IGNoaWxkQWNjdCA9IG0uYm9ycm93QWNjb3VudChhZGRyOiBhZGRyZXNzKSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQogICAgICAKICAgICAgc2VsZi52YXVsdERhdGEgPSA8VG9rZW4+LnJlc29sdmVDb250cmFjdFZpZXcocmVzb3VyY2VUeXBlOiBuaWwsIHZpZXdUeXBlOiBUeXBlPEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPigpKSBhcyEgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE/CiAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCB0aGUgdmF1bHQgZGF0YSB2aWV3IGZvciA8VG9rZW4+ICIpCgogICAgICAvL2dldCBGdCBjYXAgZnJvbSBjaGlsZCBhY2NvdW50CiAgICAgIGxldCBjYXBUeXBlID0gVHlwZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KCkKICAgICAgbGV0IGNvbnRyb2xsZXJJRCA9IGNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IHNlbGYudmF1bHREYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgICAgPz8gcGFuaWMoIm5vIGNvbnRyb2xsZXIgZm91bmQgZm9yIGNhcFR5cGUiKQogICAgICAKICAgICAgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogY29udHJvbGxlcklELCB0eXBlOiBjYXBUeXBlKSA/PyBwYW5pYygibm8gY2FwIGZvdW5kIikKICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gY2FwIGFzISBDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4KICAgICAgYXNzZXJ0KHByb3ZpZGVyQ2FwLmNoZWNrKCksIG1lc3NhZ2U6ICJpbnZhbGlkIHByb3ZpZGVyIGNhcGFiaWxpdHkiKQogICAgICAKICAgICAgLy8gR2V0IGEgcmVmZXJlbmNlIHRvIHRoZSBjaGlsZCdzIHN0b3JlZCB2YXVsdAogICAgICBsZXQgdmF1bHRSZWYgPSBwcm92aWRlckNhcC5ib3Jyb3coKSEKCiAgICAgIC8vIFdpdGhkcmF3IHRva2VucyBmcm9tIHRoZSBzaWduZXIncyBzdG9yZWQgdmF1bHQKICAgICAgc2VsZi5wYXltZW50VmF1bHQgPC0gdmF1bHRSZWYud2l0aGRyYXcoYW1vdW50OiBhbW91bnQpCiAgfQoKICBleGVjdXRlIHsKCiAgICAgIC8vIEdldCB0aGUgcmVjaXBpZW50J3MgcHVibGljIGFjY291bnQgb2JqZWN0CiAgICAgIGxldCByZWNpcGllbnQgPSBnZXRBY2NvdW50KHJlY2VpdmVyKQoKICAgICAgLy8gR2V0IGEgcmVmZXJlbmNlIHRvIHRoZSByZWNpcGllbnQncyBSZWNlaXZlcgogICAgICBsZXQgcmVjZWl2ZXJSZWYgPSByZWNpcGllbnQuY2FwYWJpbGl0aWVzLmdldDwme0Z1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9PihzZWxmLnZhdWx0RGF0YS5yZWNlaXZlclBhdGgpIS5ib3Jyb3coKQogICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVjZWl2ZXIgcmVmZXJlbmNlIHRvIHRoZSByZWNpcGllbnQncyBWYXVsdCIpCgogICAgICAvLyBEZXBvc2l0IHRoZSB3aXRoZHJhd24gdG9rZW5zIGluIHRoZSByZWNpcGllbnQncyByZWNlaXZlcgogICAgICByZWNlaXZlclJlZi5kZXBvc2l0KGZyb206IDwtc2VsZi5wYXltZW50VmF1bHQpCiAgfQp9CiA=",
          "sendChildFTToChild": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgc2VuZENoaWxkRlRUb0NoaWxkIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4Mjk0ZTQ0ZTFlYzY5OTNjNgoKCi8vIEhDLW93bmVkIGltcG9ydHMKaW1wb3J0IENhcGFiaWxpdHlGYWN0b3J5IGZyb20gMHgyOTRlNDRlMWVjNjk5M2M2CgppbXBvcnQgQ2FwYWJpbGl0eUZpbHRlciBmcm9tIDB4Mjk0ZTQ0ZTFlYzY5OTNjNgoKCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHg5YTA3NjZkOTNiNjYwOGI3CgppbXBvcnQgPFRva2VuPiBmcm9tIDxUb2tlbkFkZHJlc3M+CgoKdHJhbnNhY3Rpb24oYWRkcmVzczogQWRkcmVzcywgcmVjZWl2ZXI6IEFkZHJlc3MsIHBhdGg6IFN0cmluZywgYW1vdW50OiBVRml4NjQgKSB7CgogIC8vIFRoZSBWYXVsdCByZXNvdXJjZSB0aGF0IGhvbGRzIHRoZSB0b2tlbnMgdGhhdCBhcmUgYmVpbmcgdHJhbnNmZXJyZWQKICBsZXQgcGF5bWVudFZhdWx0OiBAe0Z1bmdpYmxlVG9rZW4uVmF1bHR9CiAgbGV0IHZhdWx0RGF0YTogRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGEKCiAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSkgJkFjY291bnQpIHsKICAgICAgLy8gc2lnbmVyIGlzIHRoZSBwYXJlbnQgYWNjb3VudAogICAgICAvLyBnZXQgdGhlIG1hbmFnZXIgcmVzb3VyY2UgYW5kIGJvcnJvdyBjaGlsZEFjY291bnQKICAgICAgbGV0IG0gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgICA/PyBwYW5pYygibWFuYWdlciBkb2VzIG5vdCBleGlzdCIpCiAgICAgIGxldCBjaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogYWRkcmVzcykgPz8gcGFuaWMoImNoaWxkIGFjY291bnQgbm90IGZvdW5kIikKICAgICAgCiAgICAgIHNlbGYudmF1bHREYXRhID0gPFRva2VuPi5yZXNvbHZlQ29udHJhY3RWaWV3KHJlc291cmNlVHlwZTogbmlsLCB2aWV3VHlwZTogVHlwZTxGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT4oKSkgYXMhIEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPwogICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgdGhlIHZhdWx0IGRhdGEgdmlldyBmb3IgPFRva2VuPiAiKQoKICAgICAgLy9nZXQgRnQgY2FwIGZyb20gY2hpbGQgYWNjb3VudAogICAgICBsZXQgY2FwVHlwZSA9IFR5cGU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigpCiAgICAgIGxldCBjb250cm9sbGVySUQgPSBjaGlsZEFjY3QuZ2V0Q29udHJvbGxlcklERm9yVHlwZSh0eXBlOiBjYXBUeXBlLCBmb3JQYXRoOiBzZWxmLnZhdWx0RGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgICAgCiAgICAgIGxldCBjYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGNvbnRyb2xsZXJJRCwgdHlwZTogY2FwVHlwZSkgPz8gcGFuaWMoIm5vIGNhcCBmb3VuZCIpCiAgICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+CiAgICAgIGFzc2VydChwcm92aWRlckNhcC5jaGVjaygpLCBtZXNzYWdlOiAiaW52YWxpZCBwcm92aWRlciBjYXBhYmlsaXR5IikKICAgICAgCiAgICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgY2hpbGQncyBzdG9yZWQgdmF1bHQKICAgICAgbGV0IHZhdWx0UmVmID0gcHJvdmlkZXJDYXAuYm9ycm93KCkhCgogICAgICAvLyBXaXRoZHJhdyB0b2tlbnMgZnJvbSB0aGUgc2lnbmVyJ3Mgc3RvcmVkIHZhdWx0CiAgICAgIHNlbGYucGF5bWVudFZhdWx0IDwtIHZhdWx0UmVmLndpdGhkcmF3KGFtb3VudDogYW1vdW50KQogIH0KCiAgZXhlY3V0ZSB7CgogICAgICAvLyBHZXQgdGhlIHJlY2lwaWVudCdzIHB1YmxpYyBhY2NvdW50IG9iamVjdAogICAgICBsZXQgcmVjaXBpZW50ID0gZ2V0QWNjb3VudChyZWNlaXZlcikKCiAgICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgcmVjaXBpZW50J3MgUmVjZWl2ZXIKICAgICAgbGV0IHJlY2VpdmVyUmVmID0gcmVjaXBpZW50LmNhcGFiaWxpdGllcy5nZXQ8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4oc2VsZi52YXVsdERhdGEucmVjZWl2ZXJQYXRoKSEuYm9ycm93KCkKICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlY2VpdmVyIHJlZmVyZW5jZSB0byB0aGUgcmVjaXBpZW50J3MgVmF1bHQiKQoKICAgICAgLy8gRGVwb3NpdCB0aGUgd2l0aGRyYXduIHRva2VucyBpbiB0aGUgcmVjaXBpZW50J3MgcmVjZWl2ZXIKICAgICAgcmVjZWl2ZXJSZWYuZGVwb3NpdChmcm9tOiA8LXNlbGYucGF5bWVudFZhdWx0KQogIH0KfQog",
          "sendChildFTWithParent": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgc2VuZENoaWxkRlRXaXRoUGFyZW50IC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4OWEwNzY2ZDkzYjY2MDhiNwoKCmltcG9ydCA8VG9rZW4+IGZyb20gPFRva2VuQWRkcmVzcz4KCmltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHgyOTRlNDRlMWVjNjk5M2M2CgppbXBvcnQgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MgZnJvbSAweDlhMDc2NmQ5M2I2NjA4YjcKCgp0cmFuc2FjdGlvbihhbW91bnQ6IFVGaXg2NCwgdG86IEFkZHJlc3MsIGNoaWxkOiBBZGRyZXNzKSB7CgogICAgLy8gVGhlIFZhdWx0IHJlc291cmNlIHRoYXQgaG9sZHMgdGhlIHRva2VucyB0aGF0IGFyZSBiZWluZyB0cmFuc2ZlcnJlZAogICAgbGV0IHBheW1lbnRWYXVsdDogQHtGdW5naWJsZVRva2VuLlZhdWx0fQogICAgbGV0IHZhdWx0RGF0YTogRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGEKCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChTdG9yYWdlKSAmQWNjb3VudCkgewogICAgICAgIC8vIHNpZ25lciBpcyB0aGUgcGFyZW50IGFjY291bnQKICAgICAgICAvLyBnZXQgdGhlIG1hbmFnZXIgcmVzb3VyY2UgYW5kIGJvcnJvdyBjaGlsZEFjY291bnQKICAgICAgICBsZXQgbSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEh5YnJpZEN1c3RvZHkuTWFuYWdlKSAmSHlicmlkQ3VzdG9keS5NYW5hZ2VyPihmcm9tOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgICAgIGxldCBjaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogY2hpbGQpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAgICAgCiAgICAgICAgc2VsZi52YXVsdERhdGEgPSBFeGFtcGxlVG9rZW4ucmVzb2x2ZUNvbnRyYWN0VmlldyhyZXNvdXJjZVR5cGU6IG5pbCwgdmlld1R5cGU6IFR5cGU8RnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE+KCkpIGFzISBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT8KICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgdGhlIHZhdWx0IGRhdGEgdmlldyBmb3IgRXhhbXBsZVRva2VuIikKCiAgICAgICAgLy9nZXQgRnQgY2FwIGZyb20gY2hpbGQgYWNjb3VudAogICAgICAgIGxldCBjYXBUeXBlID0gVHlwZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KCkKICAgICAgICBsZXQgY29udHJvbGxlcklEID0gY2hpbGRBY2N0LmdldENvbnRyb2xsZXJJREZvclR5cGUodHlwZTogY2FwVHlwZSwgZm9yUGF0aDogc2VsZi52YXVsdERhdGEuc3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgICAgICAKICAgICAgICBsZXQgY2FwID0gY2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiBjb250cm9sbGVySUQsIHR5cGU6IGNhcFR5cGUpID8/IHBhbmljKCJubyBjYXAgZm91bmQiKQogICAgICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+CiAgICAgICAgYXNzZXJ0KHByb3ZpZGVyQ2FwLmNoZWNrKCksIG1lc3NhZ2U6ICJpbnZhbGlkIHByb3ZpZGVyIGNhcGFiaWxpdHkiKQogICAgICAgIAogICAgICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgY2hpbGQncyBzdG9yZWQgdmF1bHQKICAgICAgICBsZXQgdmF1bHRSZWYgPSBwcm92aWRlckNhcC5ib3Jyb3coKSEKCiAgICAgICAgLy8gV2l0aGRyYXcgdG9rZW5zIGZyb20gdGhlIHNpZ25lcidzIHN0b3JlZCB2YXVsdAogICAgICAgIHNlbGYucGF5bWVudFZhdWx0IDwtIHZhdWx0UmVmLndpdGhkcmF3KGFtb3VudDogYW1vdW50KQogICAgfQoKICAgIGV4ZWN1dGUgewoKICAgICAgICAvLyBHZXQgdGhlIHJlY2lwaWVudCdzIHB1YmxpYyBhY2NvdW50IG9iamVjdAogICAgICAgIGxldCByZWNpcGllbnQgPSBnZXRBY2NvdW50KHRvKQoKICAgICAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIHJlY2lwaWVudCdzIFJlY2VpdmVyCiAgICAgICAgbGV0IHJlY2VpdmVyUmVmID0gcmVjaXBpZW50LmNhcGFiaWxpdGllcy5nZXQ8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4oc2VsZi52YXVsdERhdGEucmVjZWl2ZXJQYXRoKSEuYm9ycm93KCkKCQkJPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVjZWl2ZXIgcmVmZXJlbmNlIHRvIHRoZSByZWNpcGllbnQncyBWYXVsdCIpCgogICAgICAgIC8vIERlcG9zaXQgdGhlIHdpdGhkcmF3biB0b2tlbnMgaW4gdGhlIHJlY2lwaWVudCdzIHJlY2VpdmVyCiAgICAgICAgcmVjZWl2ZXJSZWYuZGVwb3NpdChmcm9tOiA8LXNlbGYucGF5bWVudFZhdWx0KQogICAgfQp9CiA=",
          "sendChildNFT": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgc2VuZENoaWxkTkZUIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4Mjk0ZTQ0ZTFlYzY5OTNjNgoKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweDI5NGU0NGUxZWM2OTkzYzYKCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKCmltcG9ydCA8TkZUPiBmcm9tIDxORlRBZGRyZXNzPgoKCnRyYW5zYWN0aW9uKGNoaWxkQWRkcjogQWRkcmVzcywgcmVjZWl2ZXI6IEFkZHJlc3MsIGlkZW50aWZpZXI6IFN0cmluZywgaWQ6IFVJbnQ2NCkgewogIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UpICZBY2NvdW50KSB7CiAgICAvLyBzaWduZXIgaXMgdGhlIHBhcmVudCBhY2NvdW50CiAgICAvLyBnZXQgdGhlIG1hbmFnZXIgcmVzb3VyY2UgYW5kIGJvcnJvdyBjaGlsZEFjY291bnQKICAgIGxldCBtID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5NYW5hZ2UpICZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJtYW5hZ2VyIGRvZXMgbm90IGV4aXN0IikKICAgIGxldCBjaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogY2hpbGRBZGRyKSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQogICAgCiAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSA8TkZUPi5yZXNvbHZlQ29udHJhY3RWaWV3KHJlc291cmNlVHlwZTogbmlsLCB2aWV3VHlwZTogVHlwZTxNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPigpKSBhcyEgTWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT8KICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCB0aGUgdmF1bHQgZGF0YSB2aWV3IGZvciA8TkZUPiAiKQoKICAgIC8vZ2V0IEZ0IGNhcCBmcm9tIGNoaWxkIGFjY291bnQKICAgIGxldCBjYXBUeXBlID0gVHlwZTxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KCkKICAgIGxldCBjb250cm9sbGVySUQgPSBjaGlsZEFjY3QuZ2V0Q29udHJvbGxlcklERm9yVHlwZSh0eXBlOiBjYXBUeXBlLCBmb3JQYXRoOiBjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICA/PyBwYW5pYygibm8gY29udHJvbGxlciBmb3VuZCBmb3IgY2FwVHlwZSIpCiAgICAKICAgIGxldCBjYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGNvbnRyb2xsZXJJRCwgdHlwZTogY2FwVHlwZSkgPz8gcGFuaWMoIm5vIGNhcCBmb3VuZCIpCiAgICBsZXQgcHJvdmlkZXJDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PgogICAgYXNzZXJ0KHByb3ZpZGVyQ2FwLmNoZWNrKCksIG1lc3NhZ2U6ICJpbnZhbGlkIHByb3ZpZGVyIGNhcGFiaWxpdHkiKQogICAgCiAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIGNoaWxkJ3Mgc3RvcmVkIHZhdWx0CiAgICBsZXQgY29sbGVjdGlvblJlZiA9IHByb3ZpZGVyQ2FwLmJvcnJvdygpIQoKICAgIC8vIFdpdGhkcmF3IHRva2VucyBmcm9tIHRoZSBzaWduZXIncyBzdG9yZWQgdmF1bHQKICAgIGxldCBuZnQgPC0gY29sbGVjdGlvblJlZi53aXRoZHJhdyh3aXRoZHJhd0lEOiBpZCkKICAgIGxldCByZWNlaXZlckFjYyA9IGdldEFjY291bnQocmVjZWl2ZXIpCiAgICBsZXQgcmVjZWl2ZXJSZWYgPSAgcmVjZWl2ZXJBY2MuY2FwYWJpbGl0aWVzLmdldDwme05vbkZ1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9Pihjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKSEuYm9ycm93KCkKICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlY2VpdmVyIHJlZmVyZW5jZSB0byB0aGUgcmVjaXBpZW50J3MgVmF1bHQiKQogICAgCiAgICByZWNlaXZlclJlZi5kZXBvc2l0KHRva2VuOiA8LSBuZnQpCiAgfQp9",
          "sendChildNFTToChild": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgc2VuZENoaWxkTkZUVG9DaGlsZCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweDI5NGU0NGUxZWM2OTkzYzYKCmltcG9ydCBDYXBhYmlsaXR5RmlsdGVyIGZyb20gMHgyOTRlNDRlMWVjNjk5M2M2CgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCmltcG9ydCA8TkZUPiBmcm9tIDxORlRBZGRyZXNzPgoKdHJhbnNhY3Rpb24oY2hpbGRBZGRyOiBBZGRyZXNzLCByZWNlaXZlcjogQWRkcmVzcywgaWRlbnRpZmllcjogU3RyaW5nLCBpZDogVUludDY0KSB7CiAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSkgJkFjY291bnQpIHsKICAgIC8vIHNpZ25lciBpcyB0aGUgcGFyZW50IGFjY291bnQKICAgIC8vIGdldCB0aGUgbWFuYWdlciByZXNvdXJjZSBhbmQgYm9ycm93IGNoaWxkQWNjb3VudAogICAgbGV0IG0gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgbGV0IGNoaWxkQWNjdCA9IG0uYm9ycm93QWNjb3VudChhZGRyOiBjaGlsZEFkZHIpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAKICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IDxORlQ+LnJlc29sdmVDb250cmFjdFZpZXcocmVzb3VyY2VUeXBlOiBuaWwsIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkpIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPwogICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IHRoZSB2YXVsdCBkYXRhIHZpZXcgZm9yIDxORlQ+ICIpCgogICAgLy9nZXQgRnQgY2FwIGZyb20gY2hpbGQgYWNjb3VudAogICAgbGV0IGNhcFR5cGUgPSBUeXBlPGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oKQogICAgbGV0IGNvbnRyb2xsZXJJRCA9IGNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgIAogICAgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogY29udHJvbGxlcklELCB0eXBlOiBjYXBUeXBlKSA/PyBwYW5pYygibm8gY2FwIGZvdW5kIikKICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+CiAgICBhc3NlcnQocHJvdmlkZXJDYXAuY2hlY2soKSwgbWVzc2FnZTogImludmFsaWQgcHJvdmlkZXIgY2FwYWJpbGl0eSIpCiAgICBsZXQgY29sbGVjdGlvblJlZiA9IHByb3ZpZGVyQ2FwLmJvcnJvdygpIQoKCiAgICBsZXQgcmVjZWl2ZXJDaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogcmVjZWl2ZXIpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICBsZXQgcmVjZWl2ZXJDb250cm9sbGVySWQgPSByZWNlaXZlckNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgIGxldCByZWNlaXZlckNhcCA9IHJlY2VpdmVyQ2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiByZWNlaXZlckNvbnRyb2xsZXJJZCwgdHlwZTogY2FwVHlwZSkgPz8gcGFuaWMoIm5vIGNhcCBmb3VuZCIpIAogICAgbGV0IHB1YmxpY0NhcCA9IHJlY2VpdmVyQ2FwIGFzISBDYXBhYmlsaXR5PCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uUHVibGljfT4KICAgIGxldCByZWNlaXZlclJlZiA9ICBwdWJsaWNDYXAuYm9ycm93KCkhCgogICAgLy8gV2l0aGRyYXcgdG9rZW5zIGZyb20gdGhlIHNpZ25lcidzIHN0b3JlZCB2YXVsdAogICAgbGV0IG5mdCA8LSBjb2xsZWN0aW9uUmVmLndpdGhkcmF3KHdpdGhkcmF3SUQ6IGlkKQogICAgCiAgICByZWNlaXZlclJlZi5kZXBvc2l0KHRva2VuOiA8LSBuZnQpCiAgfQp9",
          "setupOwnedAccount": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgc2V0dXBPd25lZEFjY291bnQgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCiNhbGxvd0FjY291bnRMaW5raW5nCgppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweDI5NGU0NGUxZWM2OTkzYzYKCi8vLyBUaGlzIHRyYW5zYWN0aW9uIGNvbmZpZ3VyZXMgYW4gT3duZWRBY2NvdW50IGluIHRoZSBzaWduZXIgaWYgbmVlZGVkIGFuZCBjb25maWd1cmVzIGl0cyBDYXBhYmlsaXRpZXMgcGVyCi8vLyBIeWJyaWRDdXN0b2R5J3MgaW50ZW5kZWQgZGVzaWduLiBJZiBEaXNwbGF5IHZhbHVlcyBhcmUgc3BlY2lmaWVkIChhcyByZWNvbW1lbmRlZCksIHRoZXkgd2lsbCBiZSBzZXQgb24gdGhlCi8vLyBzaWduZXIncyBPd25lZEFjY291bnQuCi8vLwp0cmFuc2FjdGlvbihuYW1lOiBTdHJpbmc/LCBkZXNjOiBTdHJpbmc/LCB0aHVtYm5haWxVUkw6IFN0cmluZz8pIHsKICAgIHByZXBhcmUoYWNjdDogYXV0aChTdG9yYWdlLCBDYXBhYmlsaXRpZXMpICZBY2NvdW50KSB7CiAgICAgICAgbGV0IGFjY3RDYXAgPSBhY2N0LmNhcGFiaWxpdGllcy5hY2NvdW50Lmlzc3VlPGF1dGgoU3RvcmFnZSwgQ29udHJhY3RzLCBLZXlzLCBJbmJveCwgQ2FwYWJpbGl0aWVzKSAmQWNjb3VudD4oKQoKICAgICAgICBpZiBhY2N0LnN0b3JhZ2UuYm9ycm93PCZIeWJyaWRDdXN0b2R5Lk93bmVkQWNjb3VudD4oZnJvbTogSHlicmlkQ3VzdG9keS5Pd25lZEFjY291bnRTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IG93bmVkQWNjb3VudCA8LSBIeWJyaWRDdXN0b2R5LmNyZWF0ZU93bmVkQWNjb3VudChhY2N0OiBhY2N0Q2FwKQogICAgICAgICAgICBhY2N0LnN0b3JhZ2Uuc2F2ZSg8LW93bmVkQWNjb3VudCwgdG86IEh5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50U3RvcmFnZVBhdGgpCiAgICAgICAgfQoKICAgICAgICBsZXQgb3duZWQgPSBhY2N0LnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5Pd25lcikgJkh5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50Pihmcm9tOiBIeWJyaWRDdXN0b2R5Lk93bmVkQWNjb3VudFN0b3JhZ2VQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygib3duZWQgYWNjb3VudCBub3QgZm91bmQiKQogICAgICAgIAogICAgICAgIC8vIFNldCB0aGUgZGlzcGxheSBtZXRhZGF0YSBmb3IgdGhlIE93bmVkQWNjb3VudAogICAgICAgIGlmIG5hbWUgIT0gbmlsICYmIGRlc2MgIT0gbmlsICYmIHRodW1ibmFpbFVSTCAhPSBuaWwgewogICAgICAgICAgICBsZXQgdGh1bWJuYWlsID0gTWV0YWRhdGFWaWV3cy5IVFRQRmlsZSh1cmw6IHRodW1ibmFpbFVSTCEpCiAgICAgICAgICAgIGxldCBkaXNwbGF5ID0gTWV0YWRhdGFWaWV3cy5EaXNwbGF5KG5hbWU6IG5hbWUhLCBkZXNjcmlwdGlvbjogZGVzYyEsIHRodW1ibmFpbDogdGh1bWJuYWlsKQogICAgICAgICAgICBvd25lZC5zZXREaXNwbGF5KGRpc3BsYXkpCiAgICAgICAgfQoKICAgICAgICAvLyBjaGVjayB0aGF0IHBhdGhzIGFyZSBhbGwgY29uZmlndXJlZCBwcm9wZXJseQogICAgICAgIGZvciBjIGluIGFjY3QuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuZ2V0Q29udHJvbGxlcnMoZm9yUGF0aDogSHlicmlkQ3VzdG9keS5Pd25lZEFjY291bnRTdG9yYWdlUGF0aCkgewogICAgICAgICAgICBjLmRlbGV0ZSgpCiAgICAgICAgfQoKICAgICAgICBhY2N0LmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCZ7SHlicmlkQ3VzdG9keS5Cb3Jyb3dhYmxlQWNjb3VudCwgSHlicmlkQ3VzdG9keS5Pd25lZEFjY291bnRQdWJsaWMsIFZpZXdSZXNvbHZlci5SZXNvbHZlcn0+KEh5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50U3RvcmFnZVBhdGgpCiAgICAgICAgYWNjdC5jYXBhYmlsaXRpZXMucHVibGlzaCgKICAgICAgICAgICAgYWNjdC5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwme0h5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50UHVibGljLCBWaWV3UmVzb2x2ZXIuUmVzb2x2ZXJ9PihIeWJyaWRDdXN0b2R5Lk93bmVkQWNjb3VudFN0b3JhZ2VQYXRoKSwKICAgICAgICAgICAgYXQ6IEh5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50UHVibGljUGF0aAogICAgICAgICkKICAgIH0KfQog",
          "setupOwnedAccountAndPublishToParent": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgc2V0dXBPd25lZEFjY291bnRBbmRQdWJsaXNoVG9QYXJlbnQgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCiNhbGxvd0FjY291bnRMaW5raW5nCgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKCgppbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4Mjk0ZTQ0ZTFlYzY5OTNjNgoKaW1wb3J0IENhcGFiaWxpdHlGYWN0b3J5IGZyb20gMHgyOTRlNDRlMWVjNjk5M2M2CgppbXBvcnQgQ2FwYWJpbGl0eUZpbHRlciBmcm9tIDB4Mjk0ZTQ0ZTFlYzY5OTNjNgoKaW1wb3J0IENhcGFiaWxpdHlEZWxlZ2F0b3IgZnJvbSAweDI5NGU0NGUxZWM2OTkzYzYKCi8vLyBUaGlzIHRyYW5zYWN0aW9uIGNvbmZpZ3VyZXMgYW4gT3duZWRBY2NvdW50IGluIHRoZSBzaWduZXIgaWYgbmVlZGVkLCBhbmQgcHJvY2VlZHMgdG8gY3JlYXRlIGEgQ2hpbGRBY2NvdW50IAovLy8gdXNpbmcgQ2FwYWJpbGl0eUZhY3RvcnkuTWFuYWdlciBhbmQgQ2FwYWJpbGl0eUZpbHRlci5GaWx0ZXIgQ2FwYWJpbGl0aWVzIGZyb20gdGhlIGdpdmVuIGFkZHJlc3Nlcy4gQQovLy8gQ2FwYWJpbGl0eSBvbiB0aGUgQ2hpbGRBY2NvdW50IGlzIHRoZW4gcHVibGlzaGVkIHRvIHRoZSBzcGVjaWZpZWQgcGFyZW50IGFjY291bnQuIAovLy8KdHJhbnNhY3Rpb24oCiAgICBwYXJlbnQ6IEFkZHJlc3MsCiAgICBmYWN0b3J5QWRkcmVzczogQWRkcmVzcywKICAgIGZpbHRlckFkZHJlc3M6IEFkZHJlc3MsCiAgICBuYW1lOiBTdHJpbmcsCiAgICBkZXNjOiBTdHJpbmcsCiAgICB0aHVtYm5haWxVUkw6IFN0cmluZwopIHsKICAgIHByZXBhcmUoYWNjdDogYXV0aChTdG9yYWdlLCBDYXBhYmlsaXRpZXMpICZBY2NvdW50KSB7CiAgICAgICAgLy8gQ29uZmlndXJlIE93bmVkQWNjb3VudCBpZiBpdCBkb2Vzbid0IGV4aXN0CiAgICAgICAgaWYgYWNjdC5zdG9yYWdlLmJvcnJvdzwmSHlicmlkQ3VzdG9keS5Pd25lZEFjY291bnQ+KGZyb206IEh5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50U3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIHZhciBhY2N0Q2FwID0gYWNjdC5jYXBhYmlsaXRpZXMuYWNjb3VudC5pc3N1ZTxhdXRoKFN0b3JhZ2UsIENvbnRyYWN0cywgS2V5cywgSW5ib3gsIENhcGFiaWxpdGllcykgJkFjY291bnQ+KCkKICAgICAgICAgICAgbGV0IG93bmVkQWNjb3VudCA8LSBIeWJyaWRDdXN0b2R5LmNyZWF0ZU93bmVkQWNjb3VudChhY2N0OiBhY2N0Q2FwKQogICAgICAgICAgICBhY2N0LnN0b3JhZ2Uuc2F2ZSg8LW93bmVkQWNjb3VudCwgdG86IEh5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50U3RvcmFnZVBhdGgpCiAgICAgICAgfQoKICAgICAgICBmb3IgYyBpbiBhY2N0LmNhcGFiaWxpdGllcy5zdG9yYWdlLmdldENvbnRyb2xsZXJzKGZvclBhdGg6IEh5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50U3RvcmFnZVBhdGgpIHsKICAgICAgICAgICAgYy5kZWxldGUoKQogICAgICAgIH0KCgogICAgICAgIGFjY3QuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JntIeWJyaWRDdXN0b2R5LkJvcnJvd2FibGVBY2NvdW50LCBIeWJyaWRDdXN0b2R5Lk93bmVkQWNjb3VudFB1YmxpYywgVmlld1Jlc29sdmVyLlJlc29sdmVyfT4oSHlicmlkQ3VzdG9keS5Pd25lZEFjY291bnRTdG9yYWdlUGF0aCkKICAgICAgICBhY2N0LmNhcGFiaWxpdGllcy5wdWJsaXNoKAogICAgICAgICAgICBhY2N0LmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCZ7SHlicmlkQ3VzdG9keS5Pd25lZEFjY291bnRQdWJsaWMsIFZpZXdSZXNvbHZlci5SZXNvbHZlcn0+KEh5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50U3RvcmFnZVBhdGgpLAogICAgICAgICAgICBhdDogSHlicmlkQ3VzdG9keS5Pd25lZEFjY291bnRQdWJsaWNQYXRoCiAgICAgICAgKQoKICAgICAgICBsZXQgb3duZWQgPSBhY2N0LnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5Pd25lcikgJkh5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50Pihmcm9tOiBIeWJyaWRDdXN0b2R5Lk93bmVkQWNjb3VudFN0b3JhZ2VQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygib3duZWQgYWNjb3VudCBub3QgZm91bmQiKQogICAgICAgIAogICAgICAgIC8vIFNldCB0aGUgZGlzcGxheSBtZXRhZGF0YSBmb3IgdGhlIE93bmVkQWNjb3VudAogICAgICAgIGlmIG5hbWUgIT0gbmlsICYmIGRlc2MgIT0gbmlsICYmIHRodW1ibmFpbFVSTCAhPSBuaWwgewogICAgICAgICAgICBsZXQgdGh1bWJuYWlsID0gTWV0YWRhdGFWaWV3cy5IVFRQRmlsZSh1cmw6IHRodW1ibmFpbFVSTCEpCiAgICAgICAgICAgIGxldCBkaXNwbGF5ID0gTWV0YWRhdGFWaWV3cy5EaXNwbGF5KG5hbWU6IG5hbWUhLCBkZXNjcmlwdGlvbjogZGVzYyEsIHRodW1ibmFpbDogdGh1bWJuYWlsKQogICAgICAgICAgICBvd25lZC5zZXREaXNwbGF5KGRpc3BsYXkpCiAgICAgICAgfQoKICAgICAgICAvLyBHZXQgQ2FwYWJpbGl0eUZhY3RvcnkgJiBDYXBhYmlsaXR5RmlsdGVyIENhcGFiaWxpdGllcwogICAgICAgIGxldCBmYWN0b3J5ID0gZ2V0QWNjb3VudChmYWN0b3J5QWRkcmVzcykuY2FwYWJpbGl0aWVzLmdldDwmQ2FwYWJpbGl0eUZhY3RvcnkuTWFuYWdlcj4oQ2FwYWJpbGl0eUZhY3RvcnkuUHVibGljUGF0aCkKICAgICAgICBhc3NlcnQoZmFjdG9yeS5jaGVjaygpLCBtZXNzYWdlOiAiZmFjdG9yeSBhZGRyZXNzIGlzIG5vdCBjb25maWd1cmVkIHByb3Blcmx5IikKCiAgICAgICAgbGV0IGZpbHRlciA9IGdldEFjY291bnQoZmlsdGVyQWRkcmVzcykuY2FwYWJpbGl0aWVzLmdldDwme0NhcGFiaWxpdHlGaWx0ZXIuRmlsdGVyfT4oQ2FwYWJpbGl0eUZpbHRlci5QdWJsaWNQYXRoKQogICAgICAgIGFzc2VydChmaWx0ZXIuY2hlY2soKSwgbWVzc2FnZTogImNhcGFiaWxpdHkgZmlsdGVyIGlzIG5vdCBjb25maWd1cmVkIHByb3Blcmx5IikKCiAgICAgICAgLy8gRmluYWxseSBwdWJsaXNoIGEgQ2hpbGRBY2NvdW50IGNhcGFiaWxpdHkgb24gdGhlIHNpZ25pbmcgYWNjb3VudCB0byB0aGUgc3BlY2lmaWVkIHBhcmVudAogICAgICAgIG93bmVkLnB1Ymxpc2hUb1BhcmVudChwYXJlbnRBZGRyZXNzOiBwYXJlbnQsIGZhY3Rvcnk6IGZhY3RvcnksIGZpbHRlcjogZmlsdGVyKQogICAgfQp9",
          "transferChildFT": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgdHJhbnNmZXJDaGlsZEZUIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4Mjk0ZTQ0ZTFlYzY5OTNjNgoKCi8vIEhDLW93bmVkIGltcG9ydHMKaW1wb3J0IENhcGFiaWxpdHlGYWN0b3J5IGZyb20gMHgyOTRlNDRlMWVjNjk5M2M2CgppbXBvcnQgQ2FwYWJpbGl0eUZpbHRlciBmcm9tIDB4Mjk0ZTQ0ZTFlYzY5OTNjNgoKCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHg5YTA3NjZkOTNiNjYwOGI3CgppbXBvcnQgPFRva2VuPiBmcm9tIDxUb2tlbkFkZHJlc3M+CgoKCnRyYW5zYWN0aW9uKGFkZHJlc3M6IEFkZHJlc3MsIHBhdGg6IFN0cmluZywgYW1vdW50OiBVRml4NjQgKSB7CgogIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UpICZBY2NvdW50KSB7CiAgICAvLyBzaWduZXIgaXMgdGhlIHBhcmVudCBhY2NvdW50CiAgICAvLyBnZXQgdGhlIG1hbmFnZXIgcmVzb3VyY2UgYW5kIGJvcnJvdyBjaGlsZEFjY291bnQKICAgIGxldCBtID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5NYW5hZ2UpICZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJtYW5hZ2VyIGRvZXMgbm90IGV4aXN0IikKICAgIGxldCBjaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogYWRkcmVzcykgPz8gcGFuaWMoImNoaWxkIGFjY291bnQgbm90IGZvdW5kIikKICAgIAogICAgbGV0IHZhdWx0RGF0YSA9IDxUb2tlbj4ucmVzb2x2ZUNvbnRyYWN0VmlldyhyZXNvdXJjZVR5cGU6IG5pbCwgdmlld1R5cGU6IFR5cGU8RnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE+KCkpIGFzISBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT8KICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCB0aGUgdmF1bHQgZGF0YSB2aWV3IGZvciA8VG9rZW4+ICIpCgogICAgLy9nZXQgRnQgY2FwIGZyb20gY2hpbGQgYWNjb3VudAogICAgbGV0IGNhcFR5cGUgPSBUeXBlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oKQogICAgbGV0IGNvbnRyb2xsZXJJRCA9IGNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IHZhdWx0RGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICA/PyBwYW5pYygibm8gY29udHJvbGxlciBmb3VuZCBmb3IgY2FwVHlwZSIpCiAgICAKICAgIGxldCBjYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGNvbnRyb2xsZXJJRCwgdHlwZTogY2FwVHlwZSkgPz8gcGFuaWMoIm5vIGNhcCBmb3VuZCIpCiAgICBsZXQgcHJvdmlkZXJDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PgogICAgYXNzZXJ0KHByb3ZpZGVyQ2FwLmNoZWNrKCksIG1lc3NhZ2U6ICJpbnZhbGlkIHByb3ZpZGVyIGNhcGFiaWxpdHkiKQogICAgCiAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIGNoaWxkJ3Mgc3RvcmVkIHZhdWx0CiAgICBsZXQgdmF1bHRSZWYgPSBwcm92aWRlckNhcC5ib3Jyb3coKSEKCiAgICAvLyBXaXRoZHJhdyB0b2tlbnMgZnJvbSB0aGUgc2lnbmVyJ3Mgc3RvcmVkIHZhdWx0CiAgICBsZXQgcGF5bWVudFZhdWx0IDwtIHZhdWx0UmVmLndpdGhkcmF3KGFtb3VudDogYW1vdW50KQogICAgbGV0IHJlY2VpdmVyUmVmID0gIHNpZ25lci5jYXBhYmlsaXRpZXMuZ2V0PCZ7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KHZhdWx0RGF0YS5yZWNlaXZlclBhdGgpIS5ib3Jyb3coKQogICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVjZWl2ZXIgcmVmZXJlbmNlIHRvIHRoZSByZWNpcGllbnQncyBWYXVsdCIpCiAgICByZWNlaXZlclJlZi5kZXBvc2l0KGZyb206IDwtcGF5bWVudFZhdWx0KQogIH0KfQ==",
          "transferChildNFT": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgdHJhbnNmZXJDaGlsZE5GVCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweDI5NGU0NGUxZWM2OTkzYzYKCmltcG9ydCBDYXBhYmlsaXR5RmlsdGVyIGZyb20gMHgyOTRlNDRlMWVjNjk5M2M2CgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCmltcG9ydCA8TkZUPiBmcm9tIDxORlRBZGRyZXNzPgoKLy8vIFRyYW5zZmVyIGEgc2luZ2xlIE5GVCBmcm9tIHByb3ZpZGVkIGNoaWxkIGFjY291bnQgYWRkcmVzcyB0byBwYXJlbnQgYWNjb3VudCAoc2lnbmVyKQovLy8KdHJhbnNhY3Rpb24oYWRkcmVzczogQWRkcmVzcywgcGF0aDogU3RyaW5nLCBpZDogVUludDY0KSB7CgogIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UsIENhcGFiaWxpdGllcykgJkFjY291bnQpIHsKICAgIC8vIEdldCB0aGUgbWFuYWdlciByZXNvdXJjZSBhbmQgYm9ycm93IGNoaWxkQWNjb3VudAogICAgbGV0IG0gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgbGV0IGNoaWxkQWNjdCA9IG0uYm9ycm93QWNjb3VudChhZGRyOiBhZGRyZXNzKSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQoKICAgIC8vIEdldCB0aGUgY29sbGVjdGlvbiBkYXRhIHZpZXcgZm9yIHRoZSBORlQKICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IDxORlQ+LnJlc29sdmVDb250cmFjdFZpZXcocmVzb3VyY2VUeXBlOiBuaWwsIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkpIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPwogICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IHRoZSB2YXVsdCBkYXRhIHZpZXcgZm9yIDxORlQ+ICIpCgogICAgLy8gUmV0cmlldmUgYSBwcm92aWRlciBjYXBhYmlsaXR5IGZyb20gdGhlIGNoaWxkIGFjY291bnQgYW5kIGJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgY2hpbGQncyBjb2xsZWN0aW9uCiAgICBsZXQgY2FwVHlwZSA9IFR5cGU8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigpCiAgICBsZXQgY29udHJvbGxlcklEID0gY2hpbGRBY2N0LmdldENvbnRyb2xsZXJJREZvclR5cGUodHlwZTogY2FwVHlwZSwgZm9yUGF0aDogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpCiAgICAgICAgPz8gcGFuaWMoIm5vIGNvbnRyb2xsZXIgZm91bmQgZm9yIGNhcFR5cGUiKQoKICAgIGxldCBjYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGNvbnRyb2xsZXJJRCwgdHlwZTogY2FwVHlwZSkgPz8gcGFuaWMoIm5vIGNhcCBmb3VuZCIpCiAgICBsZXQgcHJvdmlkZXJDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PgogICAgYXNzZXJ0KHByb3ZpZGVyQ2FwLmNoZWNrKCksIG1lc3NhZ2U6ICJpbnZhbGlkIHByb3ZpZGVyIGNhcGFiaWxpdHkiKQogICAgbGV0IGNoaWxkQ29sbGVjdGlvblJlZiA9IHByb3ZpZGVyQ2FwLmJvcnJvdygpIQoKICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3MgY29sbGVjdGlvbiBvciBjcmVhdGUgYSBjb2xsZWN0aW9uIGlmIGl0IGRvZXNuJ3QgZXhpc3QKICAgIHZhciByZWNlaXZlclJlZiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KGZyb206IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgaWYgcmVjZWl2ZXJSZWYgPT0gbmlsIHsKICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZSg8LSA8TkZUPi5jcmVhdGVFbXB0eUNvbGxlY3Rpb24obmZ0VHlwZTogVHlwZTxAPE5GVD4uTkZUPigpKSwgdG86IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICBzaWduZXIuY2FwYWJpbGl0aWVzLnVucHVibGlzaChjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKQogICAgICBsZXQgY29sbGVjdGlvbkNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwmPE5GVD4uQ29sbGVjdGlvbj4oY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpCiAgICAgIHNpZ25lci5jYXBhYmlsaXRpZXMucHVibGlzaChjb2xsZWN0aW9uQ2FwLCBhdDogY29sbGVjdGlvbkRhdGEucHVibGljUGF0aCkKICAgICAgcmVjZWl2ZXJSZWYgPSBjb2xsZWN0aW9uQ2FwLmJvcnJvdygpIQogICAgfQoKICAgIC8vIFRyYW5zZmVyIE5GVCBmcm9tIGNoaWxkIGFjY291bnQncyBjb2xsZWN0aW9uIHRvIHNpZ25lcidzIGNvbGxlY3Rpb24KICAgIHJlY2VpdmVyUmVmIS5kZXBvc2l0KHRva2VuOiA8LSBjaGlsZENvbGxlY3Rpb25SZWYud2l0aGRyYXcod2l0aGRyYXdJRDogaWQpKQogIH0KfQ==",
          "transferNFTToChild": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgdHJhbnNmZXJORlRUb0NoaWxkIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4Mjk0ZTQ0ZTFlYzY5OTNjNgoKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweDI5NGU0NGUxZWM2OTkzYzYKCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKaW1wb3J0IDxORlQ+IGZyb20gPE5GVEFkZHJlc3M+Cgp0cmFuc2FjdGlvbihjaGlsZEFkZHI6IEFkZHJlc3MsIGlkZW50aWZpZXI6IFN0cmluZywgaWQ6IFVJbnQ2NCkgewogIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UpICZBY2NvdW50KSB7CiAgICAvLyBzaWduZXIgaXMgdGhlIHBhcmVudCBhY2NvdW50CiAgICAvLyBnZXQgdGhlIG1hbmFnZXIgcmVzb3VyY2UgYW5kIGJvcnJvdyBjaGlsZEFjY291bnQKICAgIGxldCBtID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5NYW5hZ2UpICZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJtYW5hZ2VyIGRvZXMgbm90IGV4aXN0IikKICAgIGxldCBjaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogY2hpbGRBZGRyKSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQogICAgCiAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSA8TkZUPiAucmVzb2x2ZUNvbnRyYWN0VmlldyhyZXNvdXJjZVR5cGU6IG5pbCwgdmlld1R5cGU6IFR5cGU8TWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT4oKSkgYXMhIE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE/CiAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgdGhlIHZhdWx0IGRhdGEgdmlldyBmb3IgPE5GVD4gIikKCiAgICAvL2dldCBGdCBjYXAgZnJvbSBjaGlsZCBhY2NvdW50CiAgICBsZXQgY2FwVHlwZSA9IFR5cGU8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigpCiAgICBsZXQgY29udHJvbGxlcklEID0gY2hpbGRBY2N0LmdldENvbnRyb2xsZXJJREZvclR5cGUodHlwZTogY2FwVHlwZSwgZm9yUGF0aDogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpCiAgICAgICAgPz8gcGFuaWMoIm5vIGNvbnRyb2xsZXIgZm91bmQgZm9yIGNhcFR5cGUiKQogICAgCiAgICBsZXQgY2FwID0gY2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiBjb250cm9sbGVySUQsIHR5cGU6IGNhcFR5cGUpID8/IHBhbmljKCJubyBjYXAgZm91bmQiKQogICAgbGV0IGNoaWxkQ2FwID0gY2FwIGFzISBDYXBhYmlsaXR5PCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uUHVibGljfT4KICAgIGFzc2VydChjaGlsZENhcC5jaGVjaygpLCBtZXNzYWdlOiAiaW52YWxpZCBwcm92aWRlciBjYXBhYmlsaXR5IikKICAgIAogICAgbGV0IHBhcmVudFJlZiA9ICBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pihmcm9tIDogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpIQogICAgbGV0IGNoaWxkUmVmID0gY2hpbGRDYXAuYm9ycm93KCkhCiAgICAvLyBXaXRoZHJhdyB0b2tlbnMgZnJvbSB0aGUgc2lnbmVyJ3Mgc3RvcmVkIHZhdWx0CiAgICBsZXQgbmZ0IDwtIHBhcmVudFJlZiEud2l0aGRyYXcod2l0aGRyYXdJRDogaWQpIQogICAgCiAgICBjaGlsZFJlZi5kZXBvc2l0KHRva2VuOiA8LSBuZnQpCiAgfQp9",
          "unlinkChildAccount": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgdW5saW5rQ2hpbGRBY2NvdW50IC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4Mjk0ZTQ0ZTFlYzY5OTNjNgoKCnRyYW5zYWN0aW9uKGNoaWxkOiBBZGRyZXNzKSB7CiAgICBwcmVwYXJlIChhY2N0OiBhdXRoKFN0b3JhZ2UpICZBY2NvdW50KSB7CiAgICAgICAgbGV0IG1hbmFnZXIgPSBhY2N0LnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5NYW5hZ2UpICZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygibWFuYWdlciBub3QgZm91bmQiKQogICAgICAgIG1hbmFnZXIucmVtb3ZlQ2hpbGQoYWRkcjogY2hpbGQpCiAgICB9Cn0="
        },
        "lostAndFound": {
          "claimFT": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgY2xhaW1GVCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKCgoKaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4N2U2MGRmMDQyYTljMDg2OAoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweDlhMDc2NmQ5M2I2NjA4YjcKCmltcG9ydCBMb3N0QW5kRm91bmQgZnJvbSAweGJlNDYzNTM1M2Y1NWJiZDQKCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCmltcG9ydCBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cyBmcm9tIDB4OWEwNzY2ZDkzYjY2MDhiNwoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VVdGlscyBmcm9tIDB4ZGZjMjBhZWU2NTBmY2JkZgoKCnRyYW5zYWN0aW9uKHZhdWx0SWRlbnRpZmllcjogU3RyaW5nKSB7CiAgICBwcmVwYXJlKGFjY3Q6IGF1dGgoU3RvcmFnZSwgQ2FwYWJpbGl0aWVzKSAmQWNjb3VudCkgewogICAgICAgIGxldCB2YXVsdFR5cGUgPSBDb21wb3NpdGVUeXBlKHZhdWx0SWRlbnRpZmllcikKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBjb25zdHJ1Y3QgVmF1bHQgdHlwZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KHZhdWx0SWRlbnRpZmllcikpCiAgICAgICAgbGV0IHRva2VuQ29udHJhY3RBZGRyZXNzID0gRmxvd0VWTUJyaWRnZVV0aWxzLmdldENvbnRyYWN0QWRkcmVzcyhmcm9tVHlwZTogdmF1bHRUeXBlKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCBjb250cmFjdCBhZGRyZXNzIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQodmF1bHRJZGVudGlmaWVyKSkKICAgICAgICBsZXQgdG9rZW5Db250cmFjdE5hbWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3ROYW1lKGZyb21UeXBlOiB2YXVsdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IG5hbWUgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdCh2YXVsdElkZW50aWZpZXIpKQogICAgICAgIAogICAgICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KHRva2VuQ29udHJhY3RBZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogdG9rZW5Db250cmFjdE5hbWUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZpZXdSZXNvbHZlciBmcm9tIEZ1bmdpYmxlVG9rZW4gY29udHJhY3QiKQogICAgICAgIGxldCB2YXVsdERhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgICAgIHJlc291cmNlVHlwZTogbmlsLAogICAgICAgICAgICAgICAgdmlld1R5cGU6IFR5cGU8RnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE+KCkKICAgICAgICAgICAgKSBhcyEgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE/ID8/IHBhbmljKCJDb3VsZCBub3QgcmVzb2x2ZSBGVFZhdWx0RGF0YSB2aWV3IikKCgogICAgICAgCgogICAgICAgIGlmIGFjY3Quc3RvcmFnZS5ib3Jyb3c8JntGdW5naWJsZVRva2VuLlZhdWx0fT4oZnJvbTogdmF1bHREYXRhLnN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBhY2N0LnN0b3JhZ2Uuc2F2ZSgKICAgICAgICAgICAgICAgIDwtIHZhdWx0RGF0YS5jcmVhdGVFbXB0eVZhdWx0KCksCiAgICAgICAgICAgICAgICB0bzogdmF1bHREYXRhLnN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkKICAgICAgICB9CgogICAgICAgIGFjY3QuY2FwYWJpbGl0aWVzLnVucHVibGlzaCh2YXVsdERhdGEucmVjZWl2ZXJQYXRoKQogICAgICAgIGFjY3QuY2FwYWJpbGl0aWVzLnB1Ymxpc2goCiAgICAgICAgICAgIGFjY3QuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyLCBGdW5naWJsZVRva2VuLkJhbGFuY2V9Pih2YXVsdERhdGEuc3RvcmFnZVBhdGgpLAogICAgICAgICAgICBhdDogdmF1bHREYXRhLnJlY2VpdmVyUGF0aAogICAgICAgICkKICAgICAgICAgICAgICAgIAogICAgICAgIGxldCBjYXAgPSBhY2N0LmNhcGFiaWxpdGllcy5nZXQ8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4odmF1bHREYXRhLnJlY2VpdmVyUGF0aCkKCiAgICAgICAgTG9zdEFuZEZvdW5kLnJlZGVlbUFsbCh0eXBlOiB2YXVsdFR5cGUsIG1heDogbmlsLCByZWNlaXZlcjogY2FwKQogICAgICAgIGFjY3QuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuZ2V0Q29udHJvbGxlcihieUNhcGFiaWxpdHlJRDogY2FwLmlkKSEuZGVsZXRlKCkKICAgIH0KfQ==",
          "claimNFT": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgY2xhaW1ORlQgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKaW1wb3J0IExvc3RBbmRGb3VuZCBmcm9tIDB4YmU0NjM1MzUzZjU1YmJkNAoKaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweGRmYzIwYWVlNjUwZmNiZGYKCgoKdHJhbnNhY3Rpb24obmZ0SWRlbnRpZmllcjogU3RyaW5nKSB7CiAgICBwcmVwYXJlKGFjY3Q6IGF1dGgoU3RvcmFnZSwgQ2FwYWJpbGl0aWVzKSAmQWNjb3VudCkgewogICAgICAgIGxldCBuZnRUeXBlID0gQ29tcG9zaXRlVHlwZShuZnRJZGVudGlmaWVyKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGNvbnN0cnVjdCBORlQgdHlwZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQogICAgICAgIGxldCBuZnRDb250cmFjdEFkZHJlc3MgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3RBZGRyZXNzKGZyb21UeXBlOiBuZnRUeXBlKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCBjb250cmFjdCBhZGRyZXNzIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQobmZ0SWRlbnRpZmllcikpCiAgICAgICAgbGV0IG5mdENvbnRyYWN0TmFtZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdE5hbWUoZnJvbVR5cGU6IG5mdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IG5hbWUgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdChuZnRJZGVudGlmaWVyKSkKCiAgICAgICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQobmZ0Q29udHJhY3RBZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogbmZ0Q29udHJhY3ROYW1lKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBWaWV3UmVzb2x2ZXIgZnJvbSBORlQgY29udHJhY3QiKQogICAgICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBuaWwsCiAgICAgICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPigpCiAgICAgICAgICAgICkgYXMhIE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE/ID8/IHBhbmljKCJDb3VsZCBub3QgcmVzb2x2ZSBORlRDb2xsZWN0aW9uRGF0YSB2aWV3IikKICAgICAgICAKICAgICAgIAoKICAgICAgICBpZiBhY2N0LnN0b3JhZ2UuYm9ycm93PCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufT4oZnJvbTogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIGFjY3Quc3RvcmFnZS5zYXZlKAogICAgICAgICAgICAgICAgPC0gY29sbGVjdGlvbkRhdGEuY3JlYXRlRW1wdHlDb2xsZWN0aW9uKCksCiAgICAgICAgICAgICAgICB0bzogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgKICAgICAgICAgICAgKQogICAgICAgIH0KCiAgICAgICAgYWNjdC5jYXBhYmlsaXRpZXMudW5wdWJsaXNoKGNvbGxlY3Rpb25EYXRhLnB1YmxpY1BhdGgpCiAgICAgICAgYWNjdC5jYXBhYmlsaXRpZXMucHVibGlzaCgKICAgICAgICAgICAgYWNjdC5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwme05vbkZ1bmdpYmxlVG9rZW4uUmVjZWl2ZXIsIE5vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+KGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKSwKICAgICAgICAgICAgYXQ6IGNvbGxlY3Rpb25EYXRhLnB1YmxpY1BhdGgKICAgICAgICApCiAgICAgICAgICAgICAgICAKICAgICAgICBsZXQgY2FwID0gYWNjdC5jYXBhYmlsaXRpZXMuZ2V0PCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uUHVibGljfT4oY29sbGVjdGlvbkRhdGEucHVibGljUGF0aCkKCiAgICAgICAgTG9zdEFuZEZvdW5kLnJlZGVlbUFsbCh0eXBlOiBuZnRUeXBlLCBtYXg6IG5pbCwgcmVjZWl2ZXI6IGNhcCkKICAgICAgICBhY2N0LmNhcGFiaWxpdGllcy5zdG9yYWdlLmdldENvbnRyb2xsZXIoYnlDYXBhYmlsaXR5SUQ6IGNhcC5pZCkhLmRlbGV0ZSgpCiAgICB9Cn0=",
          "queryUnclaimedFTs": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgcXVlcnlVbmNsYWltZWRGVHMgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBMb3N0QW5kRm91bmQgZnJvbSAweGJlNDYzNTM1M2Y1NWJiZDQKCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4OWEwNzY2ZDkzYjY2MDhiNwoKCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHI6IEFkZHJlc3MpOiBbQW55U3RydWN0P10gewogICAgbGV0IHRpY2tldHMgPSBMb3N0QW5kRm91bmQuYm9ycm93QWxsVGlja2V0cyhhZGRyOiBhZGRyKQogICAgCiAgICBsZXQgZGlzcGxheUFycjogW0FueVN0cnVjdD9dICA9IFtdCiAgICBmb3IgdGlja2V0IGluIHRpY2tldHMgewogICAgICAgIGlmIHRpY2tldC50eXBlLmlzU3VidHlwZShvZjogVHlwZTxAe0Z1bmdpYmxlVG9rZW4uVmF1bHR9PigpKSB7IAogICAgICAgICAgICBkaXNwbGF5QXJyLmFwcGVuZCh7ImRpc3BsYXkiOiB0aWNrZXQuZGlzcGxheSwgImJhbGFuY2UiOiB0aWNrZXQuZ2V0RnVuZ2libGVUb2tlbkJhbGFuY2UoKX0pCiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIGRpc3BsYXlBcnIKfQ==",
          "queryUnclaimedNFTs": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgcXVlcnlVbmNsYWltZWRORlRzIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgTG9zdEFuZEZvdW5kIGZyb20gMHhiZTQ2MzUzNTNmNTViYmQ0CgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCgphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyOiBBZGRyZXNzKTogWyZNZXRhZGF0YVZpZXdzLkRpc3BsYXk/XSB7CiAgICBsZXQgdGlja2V0cyA9IExvc3RBbmRGb3VuZC5ib3Jyb3dBbGxUaWNrZXRzKGFkZHI6IGFkZHIpCiAgICAKICAgIGxldCBkaXNwbGF5QXJyOiBbJk1ldGFkYXRhVmlld3MuRGlzcGxheT9dICA9IFtdCiAgICBmb3IgdGlja2V0IGluIHRpY2tldHMgewogICAgICAgIGlmIHRpY2tldC50eXBlLmlzU3VidHlwZShvZjogVHlwZTxAe05vbkZ1bmdpYmxlVG9rZW4uTkZUfT4oKSkgeyAKICAgICAgICAgICAgZGlzcGxheUFyci5hcHBlbmQodGlja2V0LmRpc3BsYXkpCiAgICAgICAgfQogICAgfQogICAgCiAgICByZXR1cm4gZGlzcGxheUFycgp9",
          "queryUnclaimedNumber": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgcXVlcnlVbmNsYWltZWROdW1iZXIgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBMb3N0QW5kRm91bmQgZnJvbSAweGJlNDYzNTM1M2Y1NWJiZDQKCgphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyOiBBZGRyZXNzKTogSW50IHsKICAgIGxldCBzaGVsZk1hbmFnZXIgPSBMb3N0QW5kRm91bmQuYm9ycm93U2hlbGZNYW5hZ2VyKCkKICAgIGxldCBzaGVsZiA9IHNoZWxmTWFuYWdlci5ib3Jyb3dTaGVsZihyZWRlZW1lcjogYWRkcikKICAgIGlmIHNoZWxmID09IG5pbCB7CiAgICAgICAgcmV0dXJuIDAKICAgIH0KICAgIAogICAgcmV0dXJuIHNoZWxmIS5nZXRSZWRlZW1hYmxlVHlwZXMoKS5sZW5ndGgKfQ==",
          "sendFT": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgc2VuZEZUIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgoKaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4N2U2MGRmMDQyYTljMDg2OAoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweDlhMDc2NmQ5M2I2NjA4YjcKCmltcG9ydCBMb3N0QW5kRm91bmQgZnJvbSAweGJlNDYzNTM1M2Y1NWJiZDQKCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgppbXBvcnQgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MgZnJvbSAweDlhMDc2NmQ5M2I2NjA4YjcKCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweGRmYzIwYWVlNjUwZmNiZGYKCgoKdHJhbnNhY3Rpb24odmF1bHRJZGVudGlmaWVyOiBTdHJpbmcsIHJlY2lwaWVudDogQWRkcmVzcywgYW1vdW50OiBVRml4NjQsIG1lbW86IFN0cmluZykgewogICAgbGV0IHNlbnRWYXVsdDogQHtGdW5naWJsZVRva2VuLlZhdWx0fQogICAgbGV0IGZsb3dQcm92aWRlcjogQ2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZGbG93VG9rZW4uVmF1bHQ+CiAgICBsZXQgZmxvd1JlY2VpdmVyOiBDYXBhYmlsaXR5PCZGbG93VG9rZW4uVmF1bHQ+CiAgICBsZXQgcmVjZWl2ZXJDYXA6IENhcGFiaWxpdHk8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4KICAgIGxldCBkaXNwbGF5OiBNZXRhZGF0YVZpZXdzLkRpc3BsYXk/CgoKICAgIHByZXBhcmUoYWNjdDogYXV0aChTdG9yYWdlLCBDYXBhYmlsaXRpZXMpICZBY2NvdW50KSB7CiAgICAgICAgIGxldCB2YXVsdFR5cGUgPSBDb21wb3NpdGVUeXBlKHZhdWx0SWRlbnRpZmllcikKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBjb25zdHJ1Y3QgVmF1bHQgdHlwZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KHZhdWx0SWRlbnRpZmllcikpCiAgICAgICAgLy8gUGFyc2UgdGhlIFZhdWx0IGlkZW50aWZpZXIgaW50byBpdHMgY29tcG9uZW50cwogICAgICAgIGxldCB0b2tlbkNvbnRyYWN0QWRkcmVzcyA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdEFkZHJlc3MoZnJvbVR5cGU6IHZhdWx0VHlwZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgYWRkcmVzcyBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KHZhdWx0SWRlbnRpZmllcikpCiAgICAgICAgbGV0IHRva2VuQ29udHJhY3ROYW1lID0gRmxvd0VWTUJyaWRnZVV0aWxzLmdldENvbnRyYWN0TmFtZShmcm9tVHlwZTogdmF1bHRUeXBlKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCBjb250cmFjdCBuYW1lIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQodmF1bHRJZGVudGlmaWVyKSkKICAgICAgICAKICAgICAgICAvKiAtLS0gUmV0cmlldmUgdGhlIGZ1bmRzIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBGdW5naWJsZVRva2VuIFZhdWx0CiAgICAgICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQodG9rZW5Db250cmFjdEFkZHJlc3MpLmNvbnRyYWN0cy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXJ9PihuYW1lOiB0b2tlbkNvbnRyYWN0TmFtZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gRnVuZ2libGVUb2tlbiBjb250cmFjdCIpCiAgICAgICAgbGV0IHZhdWx0RGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBuaWwsCiAgICAgICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT4oKQogICAgICAgICAgICApIGFzISBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT8gPz8gcGFuaWMoIkNvdWxkIG5vdCByZXNvbHZlIEZUVmF1bHREYXRhIHZpZXciKQoKCiAgICAgICAgbGV0IHZhdWx0RGlzcGxheSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBuaWwsCiAgICAgICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVERpc3BsYXk+KCkKICAgICAgICAgICAgKSBhcyEgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlREaXNwbGF5PyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgRlRWYXVsdERhdGEgdmlldyIpCgogICAgICAgIHNlbGYuZGlzcGxheSA9IE1ldGFkYXRhVmlld3MuRGlzcGxheSgKICAgICAgICAgICAgbmFtZTogdmF1bHREaXNwbGF5Lm5hbWUsCiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB2YXVsdERpc3BsYXkuZGVzY3JpcHRpb24sCiAgICAgICAgICAgIHRodW1ibmFpbDogdmF1bHREaXNwbGF5LmxvZ29zLml0ZW1zWzBdLmZpbGUKICAgICAgICApCgogICAgICAgIGxldCB2YXVsdCA9IGFjY3Quc3RvcmFnZS5ib3Jyb3c8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uVmF1bHR9PigKICAgICAgICAgICAgICAgIGZyb206IHZhdWx0RGF0YS5zdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYWNjZXNzIHNpZ25lcidzIEZ1bmdpYmxlVG9rZW4gVmF1bHQiKQoKICAgICAgICBzZWxmLnNlbnRWYXVsdCA8LSB2YXVsdC53aXRoZHJhdyhhbW91bnQ6IGFtb3VudCkKCiAgICAgICAgdmFyIHByb3ZpZGVyOiBDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJkZsb3dUb2tlbi5WYXVsdD4/ID0gbmlsCiAgICAgICAgYWNjdC5jYXBhYmlsaXRpZXMuc3RvcmFnZS5mb3JFYWNoQ29udHJvbGxlcihmb3JQYXRoOiAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdCwgZnVuKGM6ICZTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIpOiBCb29sIHsKICAgICAgICAgICAgaWYgYy5ib3Jyb3dUeXBlID09IFR5cGU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAmRmxvd1Rva2VuLlZhdWx0PigpIHsKICAgICAgICAgICAgICAgIHByb3ZpZGVyID0gYy5jYXBhYmlsaXR5IGFzISBDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJkZsb3dUb2tlbi5WYXVsdD4KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdHJ1ZQogICAgICAgIH0pCgogICAgICAgIGlmIHByb3ZpZGVyID09IG5pbCB7CiAgICAgICAgICAgIHByb3ZpZGVyID0gYWNjdC5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZGbG93VG9rZW4uVmF1bHQ+KC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0KQogICAgICAgIH0KICAgICAgICBzZWxmLmZsb3dQcm92aWRlciA9IHByb3ZpZGVyIQogICAgICAgIHNlbGYuZmxvd1JlY2VpdmVyID0gYWNjdC5jYXBhYmlsaXRpZXMuZ2V0PCZGbG93VG9rZW4uVmF1bHQ+KC9wdWJsaWMvZmxvd1Rva2VuUmVjZWl2ZXIpIQogICAgICAgIHNlbGYucmVjZWl2ZXJDYXAgPSBnZXRBY2NvdW50KHJlY2lwaWVudCkuY2FwYWJpbGl0aWVzLmdldDwme0Z1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9Pih2YXVsdERhdGEucmVjZWl2ZXJQYXRoKSEKICAgIH0KCiAgICBleGVjdXRlIHsKCiAgICAgICAgCiAgICAgICAgbGV0IGRlcG9zaXRFc3RpbWF0ZSA8LSBMb3N0QW5kRm91bmQuZXN0aW1hdGVEZXBvc2l0KHJlZGVlbWVyOiByZWNpcGllbnQsIGl0ZW06IDwtc2VsZi5zZW50VmF1bHQsIG1lbW86IG1lbW8sIGRpc3BsYXk6IHNlbGYuZGlzcGxheSkKICAgICAgICBsZXQgc3RvcmFnZUZlZSA8LSBzZWxmLmZsb3dQcm92aWRlci5ib3Jyb3coKSEud2l0aGRyYXcoYW1vdW50OiBkZXBvc2l0RXN0aW1hdGUuc3RvcmFnZUZlZSkKICAgICAgICBsZXQgaXRlbSA8LSBkZXBvc2l0RXN0aW1hdGUud2l0aGRyYXcoKQoKICAgICAgICBMb3N0QW5kRm91bmQudHJ5U2VuZFJlc291cmNlKAogICAgICAgICAgICBpdGVtOiA8LWl0ZW0sCiAgICAgICAgICAgIGNhcDogc2VsZi5yZWNlaXZlckNhcCwKICAgICAgICAgICAgbWVtbzogbWVtbywKICAgICAgICAgICAgZGlzcGxheTogc2VsZi5kaXNwbGF5LAogICAgICAgICAgICBzdG9yYWdlUGF5bWVudDogJnN0b3JhZ2VGZWUgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uVmF1bHR9LAogICAgICAgICAgICBmbG93VG9rZW5SZXBheW1lbnQ6IHNlbGYuZmxvd1JlY2VpdmVyCiAgICAgICAgKQoKICAgICAgICBzZWxmLmZsb3dSZWNlaXZlci5ib3Jyb3coKSEuZGVwb3NpdChmcm9tOiA8LXN0b3JhZ2VGZWUpCiAgICAgICAgZGVzdHJveSBkZXBvc2l0RXN0aW1hdGUKICAgIH0KfQ==",
          "sendNFT": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgc2VuZE5GVCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweDdlNjBkZjA0MmE5YzA4NjgKCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHg2MzFlODhhZTdmMWQ3YzIwCgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4OWEwNzY2ZDkzYjY2MDhiNwoKaW1wb3J0IExvc3RBbmRGb3VuZCBmcm9tIDB4YmU0NjM1MzUzZjU1YmJkNAoKaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCmltcG9ydCBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cyBmcm9tIDB4OWEwNzY2ZDkzYjY2MDhiNwoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VVdGlscyBmcm9tIDB4ZGZjMjBhZWU2NTBmY2JkZgoKCgp0cmFuc2FjdGlvbihuZnRJZGVudGlmaWVyOiBTdHJpbmcsIHJlY2lwaWVudDogQWRkcmVzcywgaWQ6IFVJbnQ2NCwgbWVtbzogU3RyaW5nKSB7CiAgICBsZXQgbmZ0OiBAe05vbkZ1bmdpYmxlVG9rZW4uTkZUfQogICAgbGV0IGZsb3dQcm92aWRlcjogQ2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZGbG93VG9rZW4uVmF1bHQ+CiAgICBsZXQgZmxvd1JlY2VpdmVyOiBDYXBhYmlsaXR5PCZGbG93VG9rZW4uVmF1bHQ+CiAgICBsZXQgcmVjZWl2ZXJDYXA6IENhcGFiaWxpdHk8JntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb25QdWJsaWN9PgoKCiAgICBwcmVwYXJlKGFjY3Q6IGF1dGgoU3RvcmFnZSwgQ2FwYWJpbGl0aWVzKSAmQWNjb3VudCkgewogICAgICAgIGxldCBuZnRUeXBlID0gQ29tcG9zaXRlVHlwZShuZnRJZGVudGlmaWVyKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGNvbnN0cnVjdCBORlQgdHlwZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQogICAgICAgIGxldCBuZnRDb250cmFjdEFkZHJlc3MgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3RBZGRyZXNzKGZyb21UeXBlOiBuZnRUeXBlKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCBjb250cmFjdCBhZGRyZXNzIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQobmZ0SWRlbnRpZmllcikpCiAgICAgICAgbGV0IG5mdENvbnRyYWN0TmFtZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdE5hbWUoZnJvbVR5cGU6IG5mdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IG5hbWUgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdChuZnRJZGVudGlmaWVyKSkKCiAgICAgICAgLyogLS0tIFJldHJpZXZlIHRoZSBmdW5kcyAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgRnVuZ2libGVUb2tlbiBWYXVsdAogICAgICAgCiAgICAgICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQobmZ0Q29udHJhY3RBZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogbmZ0Q29udHJhY3ROYW1lKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBWaWV3UmVzb2x2ZXIgZnJvbSBORlQgY29udHJhY3QiKQogICAgICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBuaWwsCiAgICAgICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPigpCiAgICAgICAgICAgICkgYXMhIE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE/ID8/IHBhbmljKCJDb3VsZCBub3QgcmVzb2x2ZSBORlRDb2xsZWN0aW9uRGF0YSB2aWV3IikKICAgICAgICAKICAgICAgICAKCiAgICAgICAgbGV0IGNvbGxlY3Rpb24gPSBhY2N0LnN0b3JhZ2UuYm9ycm93PGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259PigKICAgICAgICAgICAgICAgIGZyb206IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkNvdWxkIG5vdCBhY2Nlc3Mgc2lnbmVyJ3MgRnVuZ2libGVUb2tlbiBWYXVsdCIpCgogICAgICAgIHNlbGYubmZ0IDwtIGNvbGxlY3Rpb24ud2l0aGRyYXcod2l0aGRyYXdJRDogaWQpCgogICAgICAgIHZhciBwcm92aWRlcjogQ2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZGbG93VG9rZW4uVmF1bHQ+PyA9IG5pbAogICAgICAgIGFjY3QuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuZm9yRWFjaENvbnRyb2xsZXIoZm9yUGF0aDogL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQsIGZ1bihjOiAmU3RvcmFnZUNhcGFiaWxpdHlDb250cm9sbGVyKTogQm9vbCB7CiAgICAgICAgICAgIGlmIGMuYm9ycm93VHlwZSA9PSBUeXBlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJkZsb3dUb2tlbi5WYXVsdD4oKSB7CiAgICAgICAgICAgICAgICBwcm92aWRlciA9IGMuY2FwYWJpbGl0eSBhcyEgQ2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZGbG93VG9rZW4uVmF1bHQ+CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHRydWUKICAgICAgICB9KQoKICAgICAgICBpZiBwcm92aWRlciA9PSBuaWwgewogICAgICAgICAgICBwcm92aWRlciA9IGFjY3QuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAmRmxvd1Rva2VuLlZhdWx0Pigvc3RvcmFnZS9mbG93VG9rZW5WYXVsdCkKICAgICAgICB9CiAgICAgICAgc2VsZi5mbG93UHJvdmlkZXIgPSBwcm92aWRlciEKICAgICAgICBzZWxmLmZsb3dSZWNlaXZlciA9IGFjY3QuY2FwYWJpbGl0aWVzLmdldDwmRmxvd1Rva2VuLlZhdWx0PigvcHVibGljL2Zsb3dUb2tlblJlY2VpdmVyKSEKICAgICAgICBzZWxmLnJlY2VpdmVyQ2FwID0gZ2V0QWNjb3VudChyZWNpcGllbnQpLmNhcGFiaWxpdGllcy5nZXQ8JntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb25QdWJsaWN9Pihjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKSEKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICAKICAgICAgICBsZXQgZGlzcGxheSA9IHNlbGYubmZ0LnJlc29sdmVWaWV3KFR5cGU8TWV0YWRhdGFWaWV3cy5EaXNwbGF5PigpKSBhcyEgTWV0YWRhdGFWaWV3cy5EaXNwbGF5PwoKICAgICAgICBsZXQgZGVwb3NpdEVzdGltYXRlIDwtIExvc3RBbmRGb3VuZC5lc3RpbWF0ZURlcG9zaXQocmVkZWVtZXI6IHJlY2lwaWVudCwgaXRlbTogPC1zZWxmLm5mdCwgbWVtbzogbWVtbywgZGlzcGxheTogZGlzcGxheSkKICAgICAgICBsZXQgc3RvcmFnZUZlZSA8LSBzZWxmLmZsb3dQcm92aWRlci5ib3Jyb3coKSEud2l0aGRyYXcoYW1vdW50OiBkZXBvc2l0RXN0aW1hdGUuc3RvcmFnZUZlZSkKICAgICAgICBsZXQgaXRlbSA8LSBkZXBvc2l0RXN0aW1hdGUud2l0aGRyYXcoKQoKICAgICAgICBMb3N0QW5kRm91bmQudHJ5U2VuZFJlc291cmNlKAogICAgICAgICAgICBpdGVtOiA8LWl0ZW0sCiAgICAgICAgICAgIGNhcDogc2VsZi5yZWNlaXZlckNhcCwKICAgICAgICAgICAgbWVtbzogbWVtbywKICAgICAgICAgICAgZGlzcGxheTogZGlzcGxheSwKICAgICAgICAgICAgc3RvcmFnZVBheW1lbnQ6ICZzdG9yYWdlRmVlIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlZhdWx0fSwKICAgICAgICAgICAgZmxvd1Rva2VuUmVwYXltZW50OiBzZWxmLmZsb3dSZWNlaXZlcgogICAgICAgICkKCiAgICAgICAgc2VsZi5mbG93UmVjZWl2ZXIuYm9ycm93KCkhLmRlcG9zaXQoZnJvbTogPC1zdG9yYWdlRmVlKQogICAgICAgIGRlc3Ryb3kgZGVwb3NpdEVzdGltYXRlCiAgICB9Cn0="
        },
        "staking": {
          "checkSetup": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgY2hlY2tTZXR1cCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZsb3dTdGFraW5nQ29sbGVjdGlvbiBmcm9tIDB4OTVlMDE5YTE3ZDBlMjNkNwoKCi8vLyBEZXRlcm1pbmVzIGlmIGFuIGFjY291bnQgaXMgc2V0IHVwIHdpdGggYSBTdGFraW5nIENvbGxlY3Rpb24KCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MpOiBCb29sIHsKICAgIHJldHVybiBGbG93U3Rha2luZ0NvbGxlY3Rpb24uZG9lc0FjY291bnRIYXZlU3Rha2luZ0NvbGxlY3Rpb24oYWRkcmVzczogYWRkcmVzcykKfQ==",
          "checkStakingEnabled": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgY2hlY2tTdGFraW5nRW5hYmxlZCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZsb3dJRFRhYmxlU3Rha2luZyBmcm9tIDB4OWVjYTJiMzhiMThiNWRmZQoKCmFjY2VzcyhhbGwpIGZ1biBtYWluKCk6Qm9vbCB7CiAgICByZXR1cm4gRmxvd0lEVGFibGVTdGFraW5nLnN0YWtpbmdFbmFibGVkKCkKfQ==",
          "closeStake": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgY2xvc2VTdGFrZSAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZsb3dTdGFraW5nQ29sbGVjdGlvbiBmcm9tIDB4OTVlMDE5YTE3ZDBlMjNkNwoKCi8vIENsb3NlcyBvdXQgYSBzdGFraW5nIG9iamVjdCBpbiB0aGUgc3Rha2luZyBjb2xsZWN0aW9uCi8vIFRoaXMgZG9lcyBub3QgcmVtb3ZlIHRoZSByZWNvcmQgZnJvbSB0aGUgaWRlbnRpdHkgdGFibGUsCi8vIGJ1dCBpdCBkb2VzIG1lYW4gdGhhdCB0aGUgYWNjb3VudCB0aGF0IGNsb3NlcyBpdCBjYW5ub3QgZXZlciBhY2Nlc3MgaXQgYWdhaW4KCnRyYW5zYWN0aW9uKG5vZGVJRDogU3RyaW5nLCBkZWxlZ2F0b3JJRDogVUludDMyPykgewogICAgCiAgICBsZXQgc3Rha2luZ0NvbGxlY3Rpb25SZWY6IGF1dGgoRmxvd1N0YWtpbmdDb2xsZWN0aW9uLkNvbGxlY3Rpb25Pd25lcikgJkZsb3dTdGFraW5nQ29sbGVjdGlvbi5TdGFraW5nQ29sbGVjdGlvbgoKICAgIHByZXBhcmUoYWNjb3VudDogYXV0aChCb3Jyb3dWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICBzZWxmLnN0YWtpbmdDb2xsZWN0aW9uUmVmID0gYWNjb3VudC5zdG9yYWdlLmJvcnJvdzxhdXRoKEZsb3dTdGFraW5nQ29sbGVjdGlvbi5Db2xsZWN0aW9uT3duZXIpICZGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb24+KGZyb206IEZsb3dTdGFraW5nQ29sbGVjdGlvbi5TdGFraW5nQ29sbGVjdGlvblN0b3JhZ2VQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBhIHJlZmVyZW5jZSB0byBhIFN0YWtpbmdDb2xsZWN0aW9uIGluIHRoZSBwcmltYXJ5IHVzZXIncyBhY2NvdW50IikKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICBzZWxmLnN0YWtpbmdDb2xsZWN0aW9uUmVmLmNsb3NlU3Rha2Uobm9kZUlEOiBub2RlSUQsIGRlbGVnYXRvcklEOiBkZWxlZ2F0b3JJRCkKICAgIH0KfQ==",
          "createDelegator": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgY3JlYXRlRGVsZWdhdG9yIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRmxvd1N0YWtpbmdDb2xsZWN0aW9uIGZyb20gMHg5NWUwMTlhMTdkMGUyM2Q3CgoKLy8vIFJlZ2lzdGVycyBhIGRlbGVnYXRvciBpbiB0aGUgc3Rha2luZyBjb2xsZWN0aW9uIHJlc291cmNlCi8vLyBmb3IgdGhlIHNwZWNpZmllZCBub2RlSUQgYW5kIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGNvbW1pdAoKdHJhbnNhY3Rpb24oaWQ6IFN0cmluZywgYW1vdW50OiBVRml4NjQpIHsKICAgIAogICAgbGV0IHN0YWtpbmdDb2xsZWN0aW9uUmVmOiBhdXRoKEZsb3dTdGFraW5nQ29sbGVjdGlvbi5Db2xsZWN0aW9uT3duZXIpICZGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb24KCiAgICBwcmVwYXJlKGFjY291bnQ6IGF1dGgoQm9ycm93VmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgc2VsZi5zdGFraW5nQ29sbGVjdGlvblJlZiA9IGFjY291bnQuc3RvcmFnZS5ib3Jyb3c8YXV0aChGbG93U3Rha2luZ0NvbGxlY3Rpb24uQ29sbGVjdGlvbk93bmVyKSAmRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uPihmcm9tOiBGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb25TdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgYSByZWZlcmVuY2UgdG8gYSBTdGFraW5nQ29sbGVjdGlvbiBpbiB0aGUgcHJpbWFyeSB1c2VyJ3MgYWNjb3VudCIpCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgc2VsZi5zdGFraW5nQ29sbGVjdGlvblJlZi5yZWdpc3RlckRlbGVnYXRvcihub2RlSUQ6IGlkLCBhbW91bnQ6IGFtb3VudCkgICAgICAKICAgIH0KfQ==",
          "createStake": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgY3JlYXRlU3Rha2UgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGbG93U3Rha2luZ0NvbGxlY3Rpb24gZnJvbSAweDk1ZTAxOWExN2QwZTIzZDcKCgovLy8gQ29tbWl0cyBuZXcgdG9rZW5zIHRvIHN0YWtlIGZvciB0aGUgc3BlY2lmaWVkIG5vZGUgb3IgZGVsZWdhdG9yIGluIHRoZSBzdGFraW5nIGNvbGxlY3Rpb24KLy8vIFRoZSB0b2tlbnMgZnJvbSB0aGUgbG9ja2VkIHZhdWx0IGFyZSB1c2VkIGZpcnN0LCBpZiBpdCBleGlzdHMKLy8vIGZvbGxvd2VkIGJ5IHRoZSB0b2tlbnMgZnJvbSB0aGUgdW5sb2NrZWQgdmF1bHQKCnRyYW5zYWN0aW9uKG5vZGVJRDogU3RyaW5nLCBkZWxlZ2F0b3JJRDogVUludDMyPywgYW1vdW50OiBVRml4NjQpIHsKICAgIAogICAgbGV0IHN0YWtpbmdDb2xsZWN0aW9uUmVmOiBhdXRoKEZsb3dTdGFraW5nQ29sbGVjdGlvbi5Db2xsZWN0aW9uT3duZXIpICZGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb24KCiAgICBwcmVwYXJlKGFjY291bnQ6IGF1dGgoQm9ycm93VmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgc2VsZi5zdGFraW5nQ29sbGVjdGlvblJlZiA9IGFjY291bnQuc3RvcmFnZS5ib3Jyb3c8YXV0aChGbG93U3Rha2luZ0NvbGxlY3Rpb24uQ29sbGVjdGlvbk93bmVyKSAmRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uPihmcm9tOiBGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb25TdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgYSByZWZlcmVuY2UgdG8gYSBTdGFraW5nQ29sbGVjdGlvbiBpbiB0aGUgcHJpbWFyeSB1c2VyJ3MgYWNjb3VudCIpCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgc2VsZi5zdGFraW5nQ29sbGVjdGlvblJlZi5zdGFrZU5ld1Rva2Vucyhub2RlSUQ6IG5vZGVJRCwgZGVsZWdhdG9ySUQ6IGRlbGVnYXRvcklELCBhbW91bnQ6IGFtb3VudCkKICAgIH0KfQ==",
          "getApr": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0QXByIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRmxvd0lEVGFibGVTdGFraW5nIGZyb20gMHg5ZWNhMmIzOGIxOGI1ZGZlCgoKYWNjZXNzKGFsbCkgZnVuIG1haW4oKTogVUZpeDY0IHsKICAgIGxldCBhcHIgPSBGbG93SURUYWJsZVN0YWtpbmcuZ2V0RXBvY2hUb2tlblBheW91dCgpIC8gRmxvd0lEVGFibGVTdGFraW5nLmdldFRvdGFsU3Rha2VkKCkgLyA3LjAgKiAzNjUuMCAqICgxLjAgLSBGbG93SURUYWJsZVN0YWtpbmcuZ2V0UmV3YXJkQ3V0UGVyY2VudGFnZSgpKQogICAgcmV0dXJuIGFwcgp9",
          "getApyWeekly": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0QXB5V2Vla2x5IC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRmxvd0lEVGFibGVTdGFraW5nIGZyb20gMHg5ZWNhMmIzOGIxOGI1ZGZlCgoKYWNjZXNzKGFsbCkgZnVuIG1haW4oKTogVUZpeDY0IHsKICAgIGxldCBhcHIgPSBGbG93SURUYWJsZVN0YWtpbmcuZ2V0RXBvY2hUb2tlblBheW91dCgpIC8gRmxvd0lEVGFibGVTdGFraW5nLmdldFRvdGFsU3Rha2VkKCkgKiA1NC4wICogKDEuMCAtIEZsb3dJRFRhYmxlU3Rha2luZy5nZXRSZXdhcmRDdXRQZXJjZW50YWdlKCkpCiAgICByZXR1cm4gYXByCn0=",
          "getDelegatesIndo": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0RGVsZWdhdGVzSW5kbyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKCmltcG9ydCBGbG93U3Rha2luZ0NvbGxlY3Rpb24gZnJvbSAweDk1ZTAxOWExN2QwZTIzZDcKCmltcG9ydCBGbG93SURUYWJsZVN0YWtpbmcgZnJvbSAweDllY2EyYjM4YjE4YjVkZmUKCmltcG9ydCBMb2NrZWRUb2tlbnMgZnJvbSAweDk1ZTAxOWExN2QwZTIzZDcKCgphY2Nlc3MoYWxsKSBzdHJ1Y3QgRGVsZWdhdGVJbmZvIHsKICAgIGFjY2VzcyhhbGwpIGxldCBkZWxlZ2F0b3JJRDogVUludDMyCiAgICBhY2Nlc3MoYWxsKSBsZXQgbm9kZUlEOiBTdHJpbmcKICAgIGFjY2VzcyhhbGwpIGxldCB0b2tlbnNDb21taXR0ZWQ6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgbGV0IHRva2Vuc1N0YWtlZDogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSBsZXQgdG9rZW5zVW5zdGFraW5nOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIGxldCB0b2tlbnNSZXdhcmRlZDogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSBsZXQgdG9rZW5zVW5zdGFrZWQ6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgbGV0IHRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZTogVUZpeDY0CgogICAgLy8gUHJvamVjdGVkIFZhbHVlcwoKICAgIGFjY2VzcyhhbGwpIGxldCBpZDogU3RyaW5nCiAgICBhY2Nlc3MoYWxsKSBsZXQgcm9sZTogVUludDgKICAgIGFjY2VzcyhhbGwpIGxldCB1bnN0YWthYmxlVG9rZW5zOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIGxldCBkZWxlZ2F0ZWROb2RlSW5mbzogRmxvd0lEVGFibGVTdGFraW5nLk5vZGVJbmZvCiAgICBhY2Nlc3MoYWxsKSBsZXQgcmVzdGFrYWJsZVVuc3Rha2VkVG9rZW5zOiBVRml4NjQKCiAgICBpbml0KGRlbGVnYXRvckluZm86IEZsb3dJRFRhYmxlU3Rha2luZy5EZWxlZ2F0b3JJbmZvKSB7CiAgICAgICAgc2VsZi5kZWxlZ2F0b3JJRCA9IGRlbGVnYXRvckluZm8uaWQKICAgICAgICBzZWxmLm5vZGVJRCA9IGRlbGVnYXRvckluZm8ubm9kZUlECiAgICAgICAgc2VsZi50b2tlbnNDb21taXR0ZWQgPSBkZWxlZ2F0b3JJbmZvLnRva2Vuc0NvbW1pdHRlZAogICAgICAgIHNlbGYudG9rZW5zU3Rha2VkID0gZGVsZWdhdG9ySW5mby50b2tlbnNTdGFrZWQKICAgICAgICBzZWxmLnRva2Vuc1Vuc3Rha2luZyA9IGRlbGVnYXRvckluZm8udG9rZW5zVW5zdGFraW5nCiAgICAgICAgc2VsZi50b2tlbnNVbnN0YWtlZCA9IGRlbGVnYXRvckluZm8udG9rZW5zVW5zdGFrZWQKICAgICAgICBzZWxmLnRva2Vuc1Jld2FyZGVkID0gZGVsZWdhdG9ySW5mby50b2tlbnNSZXdhcmRlZAogICAgICAgIHNlbGYudG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlID0gZGVsZWdhdG9ySW5mby50b2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UKCiAgICAgICAgLy8gUHJvamVjdGVkIFZhbHVlcwogICAgICAgIGxldCBub2RlSW5mbyA9IEZsb3dJRFRhYmxlU3Rha2luZy5Ob2RlSW5mbyhub2RlSUQ6IGRlbGVnYXRvckluZm8ubm9kZUlEKQogICAgICAgIHNlbGYuZGVsZWdhdGVkTm9kZUluZm8gPSBub2RlSW5mbwogICAgICAgIHNlbGYuaWQgPSBub2RlSW5mby5pZAogICAgICAgIHNlbGYucm9sZSA9IG5vZGVJbmZvLnJvbGUKICAgICAgICBzZWxmLnVuc3Rha2FibGVUb2tlbnMgPSBzZWxmLnRva2Vuc1N0YWtlZCArIHNlbGYudG9rZW5zQ29tbWl0dGVkCiAgICAgICAgc2VsZi5yZXN0YWthYmxlVW5zdGFrZWRUb2tlbnMgPSBzZWxmLnRva2Vuc1Vuc3Rha2VkICsgc2VsZi50b2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UKICAgIH0KfQoKYWNjZXNzKGFsbCkgZnVuIG1haW4oYWNjb3VudDogQWRkcmVzcyk6IHtTdHJpbmc6IHtVSW50MzI6IERlbGVnYXRlSW5mb319PyB7CiAgICBsZXQgZG9lc0FjY291bnRIYXZlU3Rha2luZ0NvbGxlY3Rpb24gPSBGbG93U3Rha2luZ0NvbGxlY3Rpb24uZG9lc0FjY291bnRIYXZlU3Rha2luZ0NvbGxlY3Rpb24oYWRkcmVzczogYWNjb3VudCkKICAgIGlmICghZG9lc0FjY291bnRIYXZlU3Rha2luZ0NvbGxlY3Rpb24pIHsKICAgICAgICByZXR1cm4gbmlsCiAgICB9CgogICAgbGV0IGRlbGVnYXRvcklEczogW0Zsb3dTdGFraW5nQ29sbGVjdGlvbi5EZWxlZ2F0b3JJRHNdID0gRmxvd1N0YWtpbmdDb2xsZWN0aW9uLmdldERlbGVnYXRvcklEcyhhZGRyZXNzOiBhY2NvdW50KQoKICAgIGxldCBmb3JtYXR0ZWREZWxlZ2F0b3JJbmZvOiB7U3RyaW5nOiB7VUludDMyOiBEZWxlZ2F0ZUluZm99fSA9IHt9CgogICAgZm9yIGRlbGVnYXRvcklEIGluIGRlbGVnYXRvcklEcyB7CiAgICAgICAgaWYgbGV0IF9mb3JtYXR0ZWREZWxlZ2F0b3JJbmZvID0gZm9ybWF0dGVkRGVsZWdhdG9ySW5mb1tkZWxlZ2F0b3JJRC5kZWxlZ2F0b3JOb2RlSURdIHsKICAgICAgICAgICAgbGV0IGRlbGVnYXRvckluZm86IEZsb3dJRFRhYmxlU3Rha2luZy5EZWxlZ2F0b3JJbmZvID0gRmxvd0lEVGFibGVTdGFraW5nLkRlbGVnYXRvckluZm8obm9kZUlEOiBkZWxlZ2F0b3JJRC5kZWxlZ2F0b3JOb2RlSUQsIGRlbGVnYXRvcklEOiBkZWxlZ2F0b3JJRC5kZWxlZ2F0b3JJRCkKICAgICAgICAgICAgX2Zvcm1hdHRlZERlbGVnYXRvckluZm9bZGVsZWdhdG9ySUQuZGVsZWdhdG9ySURdID0gRGVsZWdhdGVJbmZvKGRlbGVnYXRvckluZm86IGRlbGVnYXRvckluZm8pCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbGV0IGRlbGVnYXRvckluZm86IEZsb3dJRFRhYmxlU3Rha2luZy5EZWxlZ2F0b3JJbmZvID0gRmxvd0lEVGFibGVTdGFraW5nLkRlbGVnYXRvckluZm8obm9kZUlEOiBkZWxlZ2F0b3JJRC5kZWxlZ2F0b3JOb2RlSUQsIGRlbGVnYXRvcklEOiBkZWxlZ2F0b3JJRC5kZWxlZ2F0b3JJRCkKICAgICAgICAgICAgZm9ybWF0dGVkRGVsZWdhdG9ySW5mb1tkZWxlZ2F0b3JJRC5kZWxlZ2F0b3JOb2RlSURdID0geyBkZWxlZ2F0b3JJRC5kZWxlZ2F0b3JJRDogRGVsZWdhdGVJbmZvKGRlbGVnYXRvckluZm86IGRlbGVnYXRvckluZm8pfQogICAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gZm9ybWF0dGVkRGVsZWdhdG9ySW5mbwp9Cg==",
          "getDelegatesInfo": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0RGVsZWdhdGVzSW5mbyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKCmltcG9ydCBGbG93U3Rha2luZ0NvbGxlY3Rpb24gZnJvbSAweDk1ZTAxOWExN2QwZTIzZDcKCmltcG9ydCBGbG93SURUYWJsZVN0YWtpbmcgZnJvbSAweDllY2EyYjM4YjE4YjVkZmUKCmltcG9ydCBMb2NrZWRUb2tlbnMgZnJvbSAweDk1ZTAxOWExN2QwZTIzZDcKCgphY2Nlc3MoYWxsKSBzdHJ1Y3QgRGVsZWdhdGVJbmZvIHsKICAgIGFjY2VzcyhhbGwpIGxldCBkZWxlZ2F0b3JJRDogVUludDMyCiAgICBhY2Nlc3MoYWxsKSBsZXQgbm9kZUlEOiBTdHJpbmcKICAgIGFjY2VzcyhhbGwpIGxldCB0b2tlbnNDb21taXR0ZWQ6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgbGV0IHRva2Vuc1N0YWtlZDogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSBsZXQgdG9rZW5zVW5zdGFraW5nOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIGxldCB0b2tlbnNSZXdhcmRlZDogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSBsZXQgdG9rZW5zVW5zdGFrZWQ6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgbGV0IHRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZTogVUZpeDY0CgogICAgLy8gUHJvamVjdGVkIFZhbHVlcwoKICAgIGFjY2VzcyhhbGwpIGxldCBpZDogU3RyaW5nCiAgICBhY2Nlc3MoYWxsKSBsZXQgcm9sZTogVUludDgKICAgIGFjY2VzcyhhbGwpIGxldCB1bnN0YWthYmxlVG9rZW5zOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIGxldCBkZWxlZ2F0ZWROb2RlSW5mbzogRmxvd0lEVGFibGVTdGFraW5nLk5vZGVJbmZvCiAgICBhY2Nlc3MoYWxsKSBsZXQgcmVzdGFrYWJsZVVuc3Rha2VkVG9rZW5zOiBVRml4NjQKCiAgICBpbml0KGRlbGVnYXRvckluZm86IEZsb3dJRFRhYmxlU3Rha2luZy5EZWxlZ2F0b3JJbmZvKSB7CiAgICAgICAgc2VsZi5kZWxlZ2F0b3JJRCA9IGRlbGVnYXRvckluZm8uaWQKICAgICAgICBzZWxmLm5vZGVJRCA9IGRlbGVnYXRvckluZm8ubm9kZUlECiAgICAgICAgc2VsZi50b2tlbnNDb21taXR0ZWQgPSBkZWxlZ2F0b3JJbmZvLnRva2Vuc0NvbW1pdHRlZAogICAgICAgIHNlbGYudG9rZW5zU3Rha2VkID0gZGVsZWdhdG9ySW5mby50b2tlbnNTdGFrZWQKICAgICAgICBzZWxmLnRva2Vuc1Vuc3Rha2luZyA9IGRlbGVnYXRvckluZm8udG9rZW5zVW5zdGFraW5nCiAgICAgICAgc2VsZi50b2tlbnNVbnN0YWtlZCA9IGRlbGVnYXRvckluZm8udG9rZW5zVW5zdGFrZWQKICAgICAgICBzZWxmLnRva2Vuc1Jld2FyZGVkID0gZGVsZWdhdG9ySW5mby50b2tlbnNSZXdhcmRlZAogICAgICAgIHNlbGYudG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlID0gZGVsZWdhdG9ySW5mby50b2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UKCiAgICAgICAgLy8gUHJvamVjdGVkIFZhbHVlcwogICAgICAgIGxldCBub2RlSW5mbyA9IEZsb3dJRFRhYmxlU3Rha2luZy5Ob2RlSW5mbyhub2RlSUQ6IGRlbGVnYXRvckluZm8ubm9kZUlEKQogICAgICAgIHNlbGYuZGVsZWdhdGVkTm9kZUluZm8gPSBub2RlSW5mbwogICAgICAgIHNlbGYuaWQgPSBub2RlSW5mby5pZAogICAgICAgIHNlbGYucm9sZSA9IG5vZGVJbmZvLnJvbGUKICAgICAgICBzZWxmLnVuc3Rha2FibGVUb2tlbnMgPSBzZWxmLnRva2Vuc1N0YWtlZCArIHNlbGYudG9rZW5zQ29tbWl0dGVkCiAgICAgICAgc2VsZi5yZXN0YWthYmxlVW5zdGFrZWRUb2tlbnMgPSBzZWxmLnRva2Vuc1Vuc3Rha2VkICsgc2VsZi50b2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UKICAgIH0KfQoKYWNjZXNzKGFsbCkgZnVuIG1haW4oYWNjb3VudDogQWRkcmVzcyk6IHtTdHJpbmc6IHtVSW50MzI6IERlbGVnYXRlSW5mb319PyB7CiAgICBsZXQgZG9lc0FjY291bnRIYXZlU3Rha2luZ0NvbGxlY3Rpb24gPSBGbG93U3Rha2luZ0NvbGxlY3Rpb24uZG9lc0FjY291bnRIYXZlU3Rha2luZ0NvbGxlY3Rpb24oYWRkcmVzczogYWNjb3VudCkKICAgIGlmICghZG9lc0FjY291bnRIYXZlU3Rha2luZ0NvbGxlY3Rpb24pIHsKICAgICAgICByZXR1cm4gbmlsCiAgICB9CgogICAgbGV0IGRlbGVnYXRvcklEczogW0Zsb3dTdGFraW5nQ29sbGVjdGlvbi5EZWxlZ2F0b3JJRHNdID0gRmxvd1N0YWtpbmdDb2xsZWN0aW9uLmdldERlbGVnYXRvcklEcyhhZGRyZXNzOiBhY2NvdW50KQoKICAgIGxldCBmb3JtYXR0ZWREZWxlZ2F0b3JJbmZvOiB7U3RyaW5nOiB7VUludDMyOiBEZWxlZ2F0ZUluZm99fSA9IHt9CgogICAgZm9yIGRlbGVnYXRvcklEIGluIGRlbGVnYXRvcklEcyB7CiAgICAgICAgaWYgbGV0IF9mb3JtYXR0ZWREZWxlZ2F0b3JJbmZvID0gZm9ybWF0dGVkRGVsZWdhdG9ySW5mb1tkZWxlZ2F0b3JJRC5kZWxlZ2F0b3JOb2RlSURdIHsKICAgICAgICAgICAgbGV0IGRlbGVnYXRvckluZm86IEZsb3dJRFRhYmxlU3Rha2luZy5EZWxlZ2F0b3JJbmZvID0gRmxvd0lEVGFibGVTdGFraW5nLkRlbGVnYXRvckluZm8obm9kZUlEOiBkZWxlZ2F0b3JJRC5kZWxlZ2F0b3JOb2RlSUQsIGRlbGVnYXRvcklEOiBkZWxlZ2F0b3JJRC5kZWxlZ2F0b3JJRCkKICAgICAgICAgICAgX2Zvcm1hdHRlZERlbGVnYXRvckluZm9bZGVsZWdhdG9ySUQuZGVsZWdhdG9ySURdID0gRGVsZWdhdGVJbmZvKGRlbGVnYXRvckluZm86IGRlbGVnYXRvckluZm8pCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgbGV0IGRlbGVnYXRvckluZm86IEZsb3dJRFRhYmxlU3Rha2luZy5EZWxlZ2F0b3JJbmZvID0gRmxvd0lEVGFibGVTdGFraW5nLkRlbGVnYXRvckluZm8obm9kZUlEOiBkZWxlZ2F0b3JJRC5kZWxlZ2F0b3JOb2RlSUQsIGRlbGVnYXRvcklEOiBkZWxlZ2F0b3JJRC5kZWxlZ2F0b3JJRCkKICAgICAgICAgICAgZm9ybWF0dGVkRGVsZWdhdG9ySW5mb1tkZWxlZ2F0b3JJRC5kZWxlZ2F0b3JOb2RlSURdID0geyBkZWxlZ2F0b3JJRC5kZWxlZ2F0b3JJRDogRGVsZWdhdGVJbmZvKGRlbGVnYXRvckluZm86IGRlbGVnYXRvckluZm8pfQogICAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gZm9ybWF0dGVkRGVsZWdhdG9ySW5mbwp9",
          "getDelegatesInfoArray": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0RGVsZWdhdGVzSW5mb0FycmF5IC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgoKaW1wb3J0IEZsb3dTdGFraW5nQ29sbGVjdGlvbiBmcm9tIDB4OTVlMDE5YTE3ZDBlMjNkNwoKaW1wb3J0IEZsb3dJRFRhYmxlU3Rha2luZyBmcm9tIDB4OWVjYTJiMzhiMThiNWRmZQoKaW1wb3J0IExvY2tlZFRva2VucyBmcm9tIDB4OTVlMDE5YTE3ZDBlMjNkNwoKICAgICAgICAKYWNjZXNzKGFsbCkgZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcyk6IFtGbG93SURUYWJsZVN0YWtpbmcuRGVsZWdhdG9ySW5mb10gewogICAgcmV0dXJuIEZsb3dTdGFraW5nQ29sbGVjdGlvbi5nZXRBbGxEZWxlZ2F0b3JJbmZvKGFkZHJlc3M6IGFkZHJlc3MpCn0=",
          "getDelegatesInfoArrayV2": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0RGVsZWdhdGVzSW5mb0FycmF5VjIgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCgppbXBvcnQgRmxvd1N0YWtpbmdDb2xsZWN0aW9uIGZyb20gMHg5NWUwMTlhMTdkMGUyM2Q3CgppbXBvcnQgRmxvd0lEVGFibGVTdGFraW5nIGZyb20gMHg5ZWNhMmIzOGIxOGI1ZGZlCgppbXBvcnQgTG9ja2VkVG9rZW5zIGZyb20gMHg5NWUwMTlhMTdkMGUyM2Q3CgogICAgICAgIAphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzKTogW0Zsb3dJRFRhYmxlU3Rha2luZy5EZWxlZ2F0b3JJbmZvXT8gewogICAgdmFyIHJlczogW0Zsb3dJRFRhYmxlU3Rha2luZy5EZWxlZ2F0b3JJbmZvXT8gPSBuaWwKCiAgICBsZXQgaW5pdGVkID0gRmxvd1N0YWtpbmdDb2xsZWN0aW9uLmRvZXNBY2NvdW50SGF2ZVN0YWtpbmdDb2xsZWN0aW9uKGFkZHJlc3M6IGFkZHJlc3MpCgogICAgaWYgaW5pdGVkIHsKICAgICAgICByZXMgPSBGbG93U3Rha2luZ0NvbGxlY3Rpb24uZ2V0QWxsRGVsZWdhdG9ySW5mbyhhZGRyZXNzOiBhZGRyZXNzKQogICAgfQogICAgcmV0dXJuIHJlcwp9",
          "getDelegatorInfo": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0RGVsZWdhdG9ySW5mbyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZsb3dJRFRhYmxlU3Rha2luZyBmcm9tIDB4OWVjYTJiMzhiMThiNWRmZQoKCmFjY2VzcyhhbGwpIGZ1biBtYWluKG5vZGVJRDogU3RyaW5nLCBkZWxlZ2F0b3JJRDogVUludDMyKTogRmxvd0lEVGFibGVTdGFraW5nLkRlbGVnYXRvckluZm8gewogIHJldHVybiBGbG93SURUYWJsZVN0YWtpbmcuRGVsZWdhdG9ySW5mbyhub2RlSUQ6IG5vZGVJRCwgZGVsZWdhdG9ySUQ6IGRlbGVnYXRvcklEKQp9",
          "getEpochMetadata": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0RXBvY2hNZXRhZGF0YSAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZsb3dFcG9jaCBmcm9tIDB4OWVjYTJiMzhiMThiNWRmZQoKCmFjY2VzcyhhbGwpIGZ1biBtYWluKGVwb2NoQ291bnRlcjogVUludDY0KTogRmxvd0Vwb2NoLkVwb2NoTWV0YWRhdGEgewogICAgcmV0dXJuIEZsb3dFcG9jaC5nZXRFcG9jaE1ldGFkYXRhKGVwb2NoQ291bnRlcikhCn0=",
          "getNodeInfo": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0Tm9kZUluZm8gLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGbG93SURUYWJsZVN0YWtpbmcgZnJvbSAweDllY2EyYjM4YjE4YjVkZmUKCgphY2Nlc3MoYWxsKSBmdW4gbWFpbihub2RlSUQ6IFN0cmluZyk6IEZsb3dJRFRhYmxlU3Rha2luZy5Ob2RlSW5mbyB7CiAgcmV0dXJuIEZsb3dJRFRhYmxlU3Rha2luZy5Ob2RlSW5mbyhub2RlSUQ6IG5vZGVJRCkKfQ==",
          "getNodesInfo": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0Tm9kZXNJbmZvIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRmxvd1N0YWtpbmdDb2xsZWN0aW9uIGZyb20gMHg5NWUwMTlhMTdkMGUyM2Q3CgppbXBvcnQgRmxvd0lEVGFibGVTdGFraW5nIGZyb20gMHg5ZWNhMmIzOGIxOGI1ZGZlCgoKYWNjZXNzKGFsbCkgc3RydWN0IFN1bW1hcnlTdGFrZURlbGVnYXRlSW5mbyB7CgogICAgYWNjZXNzKGFsbCkgdmFyIG5vZGVDb3VudDogVUludDY0CiAgICBhY2Nlc3MoYWxsKSB2YXIgZGVsZWdhdGVDb3VudDogVUludDY0CgogICAgYWNjZXNzKGFsbCkgdmFyIHRvdGFsVG9rZW5zU3Rha2VkOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIHZhciB0b3RhbFRva2Vuc0NvbW1pdHRlZDogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSB2YXIgdG90YWxUb2tlbnNVbnN0YWtpbmc6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgdmFyIHRvdGFsVG9rZW5zVW5zdGFrZWQ6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgdmFyIHRvdGFsVG9rZW5zUmV3YXJkZWQ6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgdmFyIHRvdGFsVG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlOiBVRml4NjQKCiAgICBhY2Nlc3MoYWxsKSB2YXIgc3Rha2VUb2tlbnNTdGFrZWQ6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgdmFyIHN0YWtlVG9rZW5zQ29tbWl0dGVkOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIHZhciBzdGFrZVRva2Vuc1Vuc3Rha2luZzogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSB2YXIgc3Rha2VUb2tlbnNVbnN0YWtlZDogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSB2YXIgc3Rha2VUb2tlbnNSZXdhcmRlZDogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSB2YXIgc3Rha2VUb2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2U6IFVGaXg2NAoKICAgIGFjY2VzcyhhbGwpIHZhciBkZWxlZ2F0ZVRva2Vuc1N0YWtlZDogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSB2YXIgZGVsZWdhdGVUb2tlbnNDb21taXR0ZWQ6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgdmFyIGRlbGVnYXRlVG9rZW5zVW5zdGFraW5nOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIHZhciBkZWxlZ2F0ZVRva2Vuc1Vuc3Rha2VkOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIHZhciBkZWxlZ2F0ZVRva2Vuc1Jld2FyZGVkOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIHZhciBkZWxlZ2F0ZVRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZTogVUZpeDY0CgogICAgaW5pdChhbGxOb2RlSW5mbzogW0Zsb3dJRFRhYmxlU3Rha2luZy5Ob2RlSW5mb10sIGFsbERlbGVnYXRlSW5mbzogW0Zsb3dJRFRhYmxlU3Rha2luZy5EZWxlZ2F0b3JJbmZvXSkgewoKICAgICAgICBzZWxmLm5vZGVDb3VudCA9IFVJbnQ2NCgwKQogICAgICAgIHNlbGYuZGVsZWdhdGVDb3VudCA9IFVJbnQ2NCgwKQoKICAgICAgICBzZWxmLnRvdGFsVG9rZW5zU3Rha2VkID0gVUZpeDY0KDApCiAgICAgICAgc2VsZi50b3RhbFRva2Vuc0NvbW1pdHRlZCA9IFVGaXg2NCgwKQogICAgICAgIHNlbGYudG90YWxUb2tlbnNVbnN0YWtpbmcgPSBVRml4NjQoMCkKICAgICAgICBzZWxmLnRvdGFsVG9rZW5zVW5zdGFrZWQgPSBVRml4NjQoMCkKICAgICAgICBzZWxmLnRvdGFsVG9rZW5zUmV3YXJkZWQgPSBVRml4NjQoMCkKICAgICAgICBzZWxmLnRvdGFsVG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlID0gVUZpeDY0KDApCgogICAgICAgIHNlbGYuc3Rha2VUb2tlbnNTdGFrZWQgPSBVRml4NjQoMCkKICAgICAgICBzZWxmLnN0YWtlVG9rZW5zQ29tbWl0dGVkID0gVUZpeDY0KDApCiAgICAgICAgc2VsZi5zdGFrZVRva2Vuc1Vuc3Rha2luZyA9IFVGaXg2NCgwKQogICAgICAgIHNlbGYuc3Rha2VUb2tlbnNVbnN0YWtlZCA9IFVGaXg2NCgwKQogICAgICAgIHNlbGYuc3Rha2VUb2tlbnNSZXdhcmRlZCA9IFVGaXg2NCgwKQogICAgICAgIHNlbGYuc3Rha2VUb2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UgPSBVRml4NjQoMCkKCiAgICAgICAgc2VsZi5kZWxlZ2F0ZVRva2Vuc1N0YWtlZCA9IFVGaXg2NCgwKQogICAgICAgIHNlbGYuZGVsZWdhdGVUb2tlbnNDb21taXR0ZWQgPSBVRml4NjQoMCkKICAgICAgICBzZWxmLmRlbGVnYXRlVG9rZW5zVW5zdGFraW5nID0gVUZpeDY0KDApCiAgICAgICAgc2VsZi5kZWxlZ2F0ZVRva2Vuc1Vuc3Rha2VkID0gVUZpeDY0KDApCiAgICAgICAgc2VsZi5kZWxlZ2F0ZVRva2Vuc1Jld2FyZGVkID0gVUZpeDY0KDApCiAgICAgICAgc2VsZi5kZWxlZ2F0ZVRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZSA9IFVGaXg2NCgwKQoKICAgICAgICBmb3Igbm9kZUluZm8gaW4gYWxsTm9kZUluZm8gewogICAgICAgICAgICBzZWxmLm5vZGVDb3VudCA9IHNlbGYubm9kZUNvdW50ICsgMQoKICAgICAgICAgICAgc2VsZi50b3RhbFRva2Vuc1N0YWtlZCA9IHNlbGYudG90YWxUb2tlbnNTdGFrZWQgKyBub2RlSW5mby50b2tlbnNTdGFrZWQKICAgICAgICAgICAgc2VsZi50b3RhbFRva2Vuc0NvbW1pdHRlZCA9IHNlbGYudG90YWxUb2tlbnNDb21taXR0ZWQgKyBub2RlSW5mby50b2tlbnNDb21taXR0ZWQKICAgICAgICAgICAgc2VsZi50b3RhbFRva2Vuc1Vuc3Rha2luZyA9IHNlbGYudG90YWxUb2tlbnNVbnN0YWtpbmcgKyBub2RlSW5mby50b2tlbnNVbnN0YWtpbmcKICAgICAgICAgICAgc2VsZi50b3RhbFRva2Vuc1Vuc3Rha2VkID0gc2VsZi50b3RhbFRva2Vuc1Vuc3Rha2VkICsgbm9kZUluZm8udG9rZW5zVW5zdGFrZWQKICAgICAgICAgICAgc2VsZi50b3RhbFRva2Vuc1Jld2FyZGVkID0gc2VsZi50b3RhbFRva2Vuc1Jld2FyZGVkICsgbm9kZUluZm8udG9rZW5zUmV3YXJkZWQKICAgICAgICAgICAgc2VsZi50b3RhbFRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZSA9IHNlbGYudG90YWxUb2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UgKyBub2RlSW5mby50b2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UKCiAgICAgICAgICAgIHNlbGYuc3Rha2VUb2tlbnNTdGFrZWQgPSBzZWxmLnN0YWtlVG9rZW5zU3Rha2VkICsgbm9kZUluZm8udG9rZW5zU3Rha2VkCiAgICAgICAgICAgIHNlbGYuc3Rha2VUb2tlbnNDb21taXR0ZWQgPSBzZWxmLnN0YWtlVG9rZW5zQ29tbWl0dGVkICsgbm9kZUluZm8udG9rZW5zQ29tbWl0dGVkCiAgICAgICAgICAgIHNlbGYuc3Rha2VUb2tlbnNVbnN0YWtpbmcgPSBzZWxmLnN0YWtlVG9rZW5zVW5zdGFraW5nICsgbm9kZUluZm8udG9rZW5zVW5zdGFraW5nCiAgICAgICAgICAgIHNlbGYuc3Rha2VUb2tlbnNVbnN0YWtlZCA9IHNlbGYuc3Rha2VUb2tlbnNVbnN0YWtlZCArIG5vZGVJbmZvLnRva2Vuc1Vuc3Rha2VkCiAgICAgICAgICAgIHNlbGYuc3Rha2VUb2tlbnNSZXdhcmRlZCA9IHNlbGYuc3Rha2VUb2tlbnNSZXdhcmRlZCArIG5vZGVJbmZvLnRva2Vuc1Jld2FyZGVkCiAgICAgICAgICAgIHNlbGYuc3Rha2VUb2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UgPSBzZWxmLnN0YWtlVG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlICsgbm9kZUluZm8udG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlCiAgICAgICAgfQoKICAgICAgICBmb3IgZGVsZWdhdGVJbmZvIGluIGFsbERlbGVnYXRlSW5mbyB7CiAgICAgICAgICAgIHNlbGYuZGVsZWdhdGVDb3VudCA9IHNlbGYuZGVsZWdhdGVDb3VudCArIDEKCiAgICAgICAgICAgIHNlbGYudG90YWxUb2tlbnNTdGFrZWQgPSBzZWxmLnRvdGFsVG9rZW5zU3Rha2VkICsgZGVsZWdhdGVJbmZvLnRva2Vuc1N0YWtlZAogICAgICAgICAgICBzZWxmLnRvdGFsVG9rZW5zQ29tbWl0dGVkID0gc2VsZi50b3RhbFRva2Vuc0NvbW1pdHRlZCArIGRlbGVnYXRlSW5mby50b2tlbnNDb21taXR0ZWQKICAgICAgICAgICAgc2VsZi50b3RhbFRva2Vuc1Vuc3Rha2luZyA9IHNlbGYudG90YWxUb2tlbnNVbnN0YWtpbmcgKyBkZWxlZ2F0ZUluZm8udG9rZW5zVW5zdGFraW5nCiAgICAgICAgICAgIHNlbGYudG90YWxUb2tlbnNVbnN0YWtlZCA9IHNlbGYudG90YWxUb2tlbnNVbnN0YWtlZCArIGRlbGVnYXRlSW5mby50b2tlbnNVbnN0YWtlZAogICAgICAgICAgICBzZWxmLnRvdGFsVG9rZW5zUmV3YXJkZWQgPSBzZWxmLnRvdGFsVG9rZW5zUmV3YXJkZWQgKyBkZWxlZ2F0ZUluZm8udG9rZW5zUmV3YXJkZWQKICAgICAgICAgICAgc2VsZi50b3RhbFRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZSA9IHNlbGYudG90YWxUb2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UgKyBkZWxlZ2F0ZUluZm8udG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlCgogICAgICAgICAgICBzZWxmLmRlbGVnYXRlVG9rZW5zU3Rha2VkID0gc2VsZi5kZWxlZ2F0ZVRva2Vuc1N0YWtlZCArIGRlbGVnYXRlSW5mby50b2tlbnNTdGFrZWQKICAgICAgICAgICAgc2VsZi5kZWxlZ2F0ZVRva2Vuc0NvbW1pdHRlZCA9IHNlbGYuZGVsZWdhdGVUb2tlbnNDb21taXR0ZWQgKyBkZWxlZ2F0ZUluZm8udG9rZW5zQ29tbWl0dGVkCiAgICAgICAgICAgIHNlbGYuZGVsZWdhdGVUb2tlbnNVbnN0YWtpbmcgPSBzZWxmLmRlbGVnYXRlVG9rZW5zVW5zdGFraW5nICsgZGVsZWdhdGVJbmZvLnRva2Vuc1Vuc3Rha2luZwogICAgICAgICAgICBzZWxmLmRlbGVnYXRlVG9rZW5zVW5zdGFrZWQgPSBzZWxmLmRlbGVnYXRlVG9rZW5zVW5zdGFrZWQgKyBkZWxlZ2F0ZUluZm8udG9rZW5zVW5zdGFrZWQKICAgICAgICAgICAgc2VsZi5kZWxlZ2F0ZVRva2Vuc1Jld2FyZGVkID0gc2VsZi5kZWxlZ2F0ZVRva2Vuc1Jld2FyZGVkICsgZGVsZWdhdGVJbmZvLnRva2Vuc1Jld2FyZGVkCiAgICAgICAgICAgIHNlbGYuZGVsZWdhdGVUb2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UgPSBzZWxmLmRlbGVnYXRlVG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlICsgZGVsZWdhdGVJbmZvLnRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZQogICAgICAgIH0KCiAgICB9Cn0KCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFjY291bnQ6IEFkZHJlc3MpOiBTdW1tYXJ5U3Rha2VEZWxlZ2F0ZUluZm8/IHsKICAgIGxldCBkb2VzQWNjb3VudEhhdmVTdGFraW5nQ29sbGVjdGlvbiA9IEZsb3dTdGFraW5nQ29sbGVjdGlvbi5kb2VzQWNjb3VudEhhdmVTdGFraW5nQ29sbGVjdGlvbihhZGRyZXNzOiBhY2NvdW50KQogICAgaWYgKCFkb2VzQWNjb3VudEhhdmVTdGFraW5nQ29sbGVjdGlvbikgewogICAgICAgIHJldHVybiBuaWwKICAgIH0KCiAgICBsZXQgYWxsTm9kZUluZm86IFtGbG93SURUYWJsZVN0YWtpbmcuTm9kZUluZm9dID0gRmxvd1N0YWtpbmdDb2xsZWN0aW9uLmdldEFsbE5vZGVJbmZvKGFkZHJlc3M6IGFjY291bnQpCiAgICBsZXQgYWxsRGVsZWdhdGVJbmZvOiBbRmxvd0lEVGFibGVTdGFraW5nLkRlbGVnYXRvckluZm9dID0gRmxvd1N0YWtpbmdDb2xsZWN0aW9uLmdldEFsbERlbGVnYXRvckluZm8oYWRkcmVzczogYWNjb3VudCkKCiAgICByZXR1cm4gU3VtbWFyeVN0YWtlRGVsZWdhdGVJbmZvKGFsbE5vZGVJbmZvOiBhbGxOb2RlSW5mbywgYWxsRGVsZWdhdGVJbmZvOiBhbGxEZWxlZ2F0ZUluZm8pCn0K",
          "getStakeInfo": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0U3Rha2VJbmZvIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgoKaW1wb3J0IEZsb3dTdGFraW5nQ29sbGVjdGlvbiBmcm9tIDB4OTVlMDE5YTE3ZDBlMjNkNwoKaW1wb3J0IEZsb3dJRFRhYmxlU3Rha2luZyBmcm9tIDB4OWVjYTJiMzhiMThiNWRmZQoKaW1wb3J0IExvY2tlZFRva2VucyBmcm9tIDB4OTVlMDE5YTE3ZDBlMjNkNwoKCmFjY2VzcyhhbGwpIHN0cnVjdCBTdGFrZUluZm8gewogICAgYWNjZXNzKGFsbCkgbGV0IGlkOiBTdHJpbmcKICAgIGFjY2VzcyhhbGwpIGxldCByb2xlOiBVSW50OAogICAgYWNjZXNzKGFsbCkgbGV0IG5ldHdvcmtpbmdBZGRyZXNzOiBTdHJpbmcKICAgIGFjY2VzcyhhbGwpIGxldCBuZXR3b3JraW5nS2V5OiBTdHJpbmcKICAgIGFjY2VzcyhhbGwpIGxldCBzdGFraW5nS2V5OiBTdHJpbmcKICAgIGFjY2VzcyhhbGwpIGxldCB0b2tlbnNTdGFrZWQ6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgbGV0IHRvdGFsVG9rZW5zU3Rha2VkOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIGxldCB0b2tlbnNDb21taXR0ZWQ6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgbGV0IHRva2Vuc1Vuc3Rha2luZzogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSBsZXQgdG9rZW5zVW5zdGFrZWQ6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgbGV0IHRva2Vuc1Jld2FyZGVkOiBVRml4NjQKCiAgICBhY2Nlc3MoYWxsKSBsZXQgZGVsZWdhdG9yc0NudDogSW50CiAgICBhY2Nlc3MoYWxsKSBsZXQgZGVsZWdhdG9ySURDb3VudGVyOiBVSW50MzIKICAgIGFjY2VzcyhhbGwpIGxldCB0b2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2U6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgbGV0IGluaXRpYWxXZWlnaHQ6IFVJbnQ2NAoKICAgIC8vIFByb2plY3RlZCBWYWx1ZXMKICAgIGFjY2VzcyhhbGwpIGxldCBub2RlSUQ6IFN0cmluZwogICAgYWNjZXNzKGFsbCkgbGV0IHVuc3Rha2FibGVUb2tlbnM6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgbGV0IHRva2Vuc0RlbGVnYXRlZDogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSBsZXQgcmVzdGFrYWJsZVVuc3Rha2VkVG9rZW5zOiBVRml4NjQKCiAgICBhY2Nlc3MoYWxsKSBsZXQgbWFjaGluZUFjY291bnRBZGRyZXNzOiBBZGRyZXNzPwogICAgYWNjZXNzKGFsbCkgbGV0IG1hY2hpbmVBY2NvdW50QmFsYW5jZTogVUZpeDY0PwoKICAgIGluaXQobm9kZUluZm86IEZsb3dJRFRhYmxlU3Rha2luZy5Ob2RlSW5mbywgbWFjaGluZUFjY291bnRJbmZvOiBGbG93U3Rha2luZ0NvbGxlY3Rpb24uTWFjaGluZUFjY291bnRJbmZvPykgewogICAgICAgIHNlbGYuaWQgPSBub2RlSW5mby5pZAogICAgICAgIHNlbGYucm9sZSA9IG5vZGVJbmZvLnJvbGUKICAgICAgICBzZWxmLm5ldHdvcmtpbmdBZGRyZXNzID0gbm9kZUluZm8ubmV0d29ya2luZ0FkZHJlc3MKICAgICAgICBzZWxmLm5ldHdvcmtpbmdLZXkgPSBub2RlSW5mby5uZXR3b3JraW5nS2V5CiAgICAgICAgc2VsZi5zdGFraW5nS2V5ID0gbm9kZUluZm8uc3Rha2luZ0tleQogICAgICAgIHNlbGYudG9rZW5zU3Rha2VkID0gbm9kZUluZm8udG9rZW5zU3Rha2VkCiAgICAgICAgc2VsZi50b3RhbFRva2Vuc1N0YWtlZCA9IG5vZGVJbmZvLnRvdGFsU3Rha2VkV2l0aERlbGVnYXRvcnMoKQogICAgICAgIHNlbGYudG9rZW5zQ29tbWl0dGVkID0gbm9kZUluZm8udG9rZW5zQ29tbWl0dGVkCiAgICAgICAgc2VsZi50b2tlbnNVbnN0YWtpbmcgPSBub2RlSW5mby50b2tlbnNVbnN0YWtpbmcKICAgICAgICBzZWxmLnRva2Vuc1Vuc3Rha2VkID0gbm9kZUluZm8udG9rZW5zVW5zdGFrZWQKICAgICAgICBzZWxmLnRva2Vuc1Jld2FyZGVkID0gbm9kZUluZm8udG9rZW5zUmV3YXJkZWQKCiAgICAgICAgc2VsZi5kZWxlZ2F0b3JzQ250ID0gbm9kZUluZm8uZGVsZWdhdG9ycy5sZW5ndGggCiAgICAgICAgc2VsZi5kZWxlZ2F0b3JJRENvdW50ZXIgPSBub2RlSW5mby5kZWxlZ2F0b3JJRENvdW50ZXIKICAgICAgICBzZWxmLnRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZSA9IG5vZGVJbmZvLnRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZQogICAgICAgIHNlbGYuaW5pdGlhbFdlaWdodCA9IG5vZGVJbmZvLmluaXRpYWxXZWlnaHQKCiAgICAgICAgLy8gUHJvamVjdGVkIFZhbHVlcwogICAgICAgIHNlbGYubm9kZUlEID0gbm9kZUluZm8uaWQKICAgICAgICBzZWxmLnVuc3Rha2FibGVUb2tlbnMgPSBzZWxmLnRva2Vuc1N0YWtlZCArIHNlbGYudG9rZW5zQ29tbWl0dGVkCiAgICAgICAgbGV0IG5vZGVTdGFrZWRCYWxhbmNlV2l0aERlbGVnYXRvcnMgPSBub2RlSW5mby50b3RhbFN0YWtlZFdpdGhEZWxlZ2F0b3JzKCkKICAgICAgICBzZWxmLnRva2Vuc0RlbGVnYXRlZCA9IG5vZGVTdGFrZWRCYWxhbmNlV2l0aERlbGVnYXRvcnMgLSBub2RlSW5mby50b2tlbnNTdGFrZWQKICAgICAgICBzZWxmLnJlc3Rha2FibGVVbnN0YWtlZFRva2VucyA9IHNlbGYudG9rZW5zVW5zdGFrZWQgKyBzZWxmLnRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZQoKICAgICAgICBpZiBsZXQgX21hY2hpbmVBY2NvdW50SW5mbyA9IG1hY2hpbmVBY2NvdW50SW5mbyB7CiAgICAgICAgICAgIGxldCBfbWFjaGluZUFjY291bnRBZGRyZXNzID0gX21hY2hpbmVBY2NvdW50SW5mby5nZXRBZGRyZXNzKCkKCiAgICAgICAgICAgIGxldCBtYWNoaW5lQWNjb3VudCA9IGdldEFjY291bnQoX21hY2hpbmVBY2NvdW50QWRkcmVzcykKCiAgICAgICAgICAgIHNlbGYubWFjaGluZUFjY291bnRBZGRyZXNzID0gX21hY2hpbmVBY2NvdW50QWRkcmVzcwogICAgICAgICAgICBzZWxmLm1hY2hpbmVBY2NvdW50QmFsYW5jZSA9IG1hY2hpbmVBY2NvdW50LmJhbGFuY2UKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBzZWxmLm1hY2hpbmVBY2NvdW50QWRkcmVzcyA9IG5pbAogICAgICAgICAgICBzZWxmLm1hY2hpbmVBY2NvdW50QmFsYW5jZSA9IG5pbAogICAgICAgIH0KICAgIH0KfQoKYWNjZXNzKGFsbCkgZnVuIG1haW4oYWNjb3VudDogQWRkcmVzcyk6IHtTdHJpbmc6IFN0YWtlSW5mb30/IHsKICAgIGxldCBkb2VzQWNjb3VudEhhdmVTdGFraW5nQ29sbGVjdGlvbiA9IEZsb3dTdGFraW5nQ29sbGVjdGlvbi5kb2VzQWNjb3VudEhhdmVTdGFraW5nQ29sbGVjdGlvbihhZGRyZXNzOiBhY2NvdW50KQogICAgaWYgKCFkb2VzQWNjb3VudEhhdmVTdGFraW5nQ29sbGVjdGlvbikgewogICAgICAgIHJldHVybiBuaWwKICAgIH0KCiAgICBsZXQgZm9ybWF0dGVkTm9kZUluZm86IHtTdHJpbmc6IFN0YWtlSW5mb30gPSB7fQogICAgbGV0IGFsbE5vZGVJbmZvOiBbRmxvd0lEVGFibGVTdGFraW5nLk5vZGVJbmZvXSA9IEZsb3dTdGFraW5nQ29sbGVjdGlvbi5nZXRBbGxOb2RlSW5mbyhhZGRyZXNzOiBhY2NvdW50KQogICAgbGV0IG1hY2hpbmVBY2NvdW50czoge1N0cmluZzogRmxvd1N0YWtpbmdDb2xsZWN0aW9uLk1hY2hpbmVBY2NvdW50SW5mb30gPSBGbG93U3Rha2luZ0NvbGxlY3Rpb24uZ2V0TWFjaGluZUFjY291bnRzKGFkZHJlc3M6IGFjY291bnQpCgogICAgZm9yIG5vZGVJbmZvIGluIGFsbE5vZGVJbmZvIHsKICAgICAgICBmb3JtYXR0ZWROb2RlSW5mb1tub2RlSW5mby5pZF0gPSBTdGFrZUluZm8obm9kZUluZm86IG5vZGVJbmZvLCBtYWNoaW5lQWNjb3VudEluZm86IG1hY2hpbmVBY2NvdW50c1tub2RlSW5mby5pZF0pCiAgICB9CgogICAgcmV0dXJuIGZvcm1hdHRlZE5vZGVJbmZvCn0K",
          "getStakingInfo": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0U3Rha2luZ0luZm8gLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBMb2NrZWRUb2tlbnMgZnJvbSAweDk1ZTAxOWExN2QwZTIzZDcKCmltcG9ydCBGbG93SURUYWJsZVN0YWtpbmcgZnJvbSAweDllY2EyYjM4YjE4YjVkZmUKCmltcG9ydCBGbG93RXBvY2ggZnJvbSAweDllY2EyYjM4YjE4YjVkZmUKCgphY2Nlc3MoYWxsKXN0cnVjdCBFcG9jaEluZm8gewogIGFjY2VzcyhhbGwpbGV0IGN1cnJlbnRFcG9jaENvdW50ZXI6IFVJbnQ2NAogIGFjY2VzcyhhbGwpbGV0IGN1cnJlbnRFcG9jaFBoYXNlOiBVSW50OAoKICBpbml0KAogICAgICBjdXJyZW50RXBvY2hDb3VudGVyOiBVSW50NjQsCiAgICAgIGN1cnJlbnRFcG9jaFBoYXNlOiBVSW50OAogICkgewogICAgICBzZWxmLmN1cnJlbnRFcG9jaENvdW50ZXIgPSBjdXJyZW50RXBvY2hDb3VudGVyCiAgICAgIHNlbGYuY3VycmVudEVwb2NoUGhhc2UgPSBjdXJyZW50RXBvY2hQaGFzZQogIH0KfQoKYWNjZXNzKGFsbClzdHJ1Y3QgUmVzdWx0IHsKICBhY2Nlc3MoYWxsKWxldCBzdGFraW5nSW5mbzogU3Rha2luZ0luZm8/CgogIGluaXQoc3Rha2luZ0luZm86IFN0YWtpbmdJbmZvPykgewogICAgc2VsZi5zdGFraW5nSW5mbyA9IHN0YWtpbmdJbmZvCiAgfQp9CgphY2Nlc3MoYWxsKXN0cnVjdCBTdGFraW5nSW5mbyB7CiAgYWNjZXNzKGFsbClsZXQgZXBvY2hJbmZvOiBFcG9jaEluZm8KICBhY2Nlc3MoYWxsKWxldCBsb2NrZWRBZGRyZXNzOiBBZGRyZXNzICAgCiAgYWNjZXNzKGFsbClsZXQgbG9ja2VkQmFsYW5jZTogVUZpeDY0CiAgYWNjZXNzKGFsbClsZXQgdW5sb2NrTGltaXQ6IFVGaXg2NAogIGFjY2VzcyhhbGwpbGV0IG5vZGVJbmZvOiBOb2RlSW5mbz8KICBhY2Nlc3MoYWxsKWxldCBkZWxlZ2F0b3JOb2RlSW5mbzogTm9kZUluZm8/CiAgYWNjZXNzKGFsbClsZXQgZGVsZWdhdG9ySW5mbzogRGVsZWdhdG9ySW5mbz8KCiAgaW5pdCgKICAgIGVwb2NoSW5mbzogRXBvY2hJbmZvLAogICAgbG9ja2VkQWRkcmVzczogQWRkcmVzcywKICAgIGxvY2tlZEJhbGFuY2U6IFVGaXg2NCwKICAgIHVubG9ja0xpbWl0OiBVRml4NjQsCiAgICBub2RlSW5mbzogTm9kZUluZm8/LAogICAgZGVsZWdhdG9yTm9kZUluZm86IE5vZGVJbmZvPywKICAgIGRlbGVnYXRvckluZm86IERlbGVnYXRvckluZm8/LAogICkgewogICAgc2VsZi5lcG9jaEluZm8gPSBlcG9jaEluZm8KICAgIHNlbGYubG9ja2VkQWRkcmVzcyA9IGxvY2tlZEFkZHJlc3MKICAgIHNlbGYubG9ja2VkQmFsYW5jZSA9IGxvY2tlZEJhbGFuY2UKICAgIHNlbGYudW5sb2NrTGltaXQgPSB1bmxvY2tMaW1pdAogICAgc2VsZi5ub2RlSW5mbyA9IG5vZGVJbmZvCiAgICBzZWxmLmRlbGVnYXRvck5vZGVJbmZvID0gZGVsZWdhdG9yTm9kZUluZm8KICAgIHNlbGYuZGVsZWdhdG9ySW5mbyA9IGRlbGVnYXRvckluZm8KICB9Cn0KCmFjY2VzcyhhbGwpc3RydWN0IE5vZGVJbmZvIHsKICBhY2Nlc3MoYWxsKWxldCBpZDogU3RyaW5nCiAgYWNjZXNzKGFsbClsZXQgbmV0d29ya2luZ0FkZHJlc3M6IFN0cmluZwogIGFjY2VzcyhhbGwpbGV0IHJvbGU6IFVJbnQ4CiAgYWNjZXNzKGFsbClsZXQgdG9rZW5zU3Rha2VkOiBVRml4NjQKICBhY2Nlc3MoYWxsKWxldCB0b2tlbnNDb21taXR0ZWQ6IFVGaXg2NAogIGFjY2VzcyhhbGwpbGV0IHRva2Vuc1Vuc3Rha2luZzogVUZpeDY0CiAgYWNjZXNzKGFsbClsZXQgdG9rZW5zVW5zdGFrZWQ6IFVGaXg2NAogIGFjY2VzcyhhbGwpbGV0IHRva2Vuc1Jld2FyZGVkOiBVRml4NjQKICAKICBhY2Nlc3MoYWxsKWxldCBkZWxlZ2F0b3JJRENvdW50ZXI6IFVJbnQzMgogIGFjY2VzcyhhbGwpbGV0IHRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZTogVUZpeDY0CiAgYWNjZXNzKGFsbClsZXQgaW5pdGlhbFdlaWdodDogVUludDY0CgogIGluaXQobm9kZUlEOiBTdHJpbmcpIHsKICAgIGxldCBub2RlSW5mbyA9IEZsb3dJRFRhYmxlU3Rha2luZy5Ob2RlSW5mbyhub2RlSUQ6IG5vZGVJRCkgCgogICAgc2VsZi5pZCA9IG5vZGVJbmZvLmlkCiAgICBzZWxmLm5ldHdvcmtpbmdBZGRyZXNzID0gbm9kZUluZm8ubmV0d29ya2luZ0FkZHJlc3MKICAgIHNlbGYucm9sZSA9IG5vZGVJbmZvLnJvbGUKICAgIHNlbGYudG9rZW5zU3Rha2VkID0gbm9kZUluZm8udG9rZW5zU3Rha2VkCiAgICBzZWxmLnRva2Vuc0NvbW1pdHRlZCA9IG5vZGVJbmZvLnRva2Vuc0NvbW1pdHRlZAogICAgc2VsZi50b2tlbnNVbnN0YWtpbmcgPSBub2RlSW5mby50b2tlbnNVbnN0YWtpbmcKICAgIHNlbGYudG9rZW5zVW5zdGFrZWQgPSBub2RlSW5mby50b2tlbnNVbnN0YWtlZAogICAgc2VsZi50b2tlbnNSZXdhcmRlZCA9IG5vZGVJbmZvLnRva2Vuc1Jld2FyZGVkCiAgICBzZWxmLmRlbGVnYXRvcklEQ291bnRlciA9IG5vZGVJbmZvLmRlbGVnYXRvcklEQ291bnRlcgogICAgc2VsZi50b2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UgPSBub2RlSW5mby50b2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UKICAgIHNlbGYuaW5pdGlhbFdlaWdodCA9IG5vZGVJbmZvLmluaXRpYWxXZWlnaHQKICB9Cn0KCmFjY2VzcyhhbGwpc3RydWN0IERlbGVnYXRvckluZm8gewogIGFjY2VzcyhhbGwpbGV0IGlkOiBVSW50MzIKICBhY2Nlc3MoYWxsKWxldCBub2RlSUQ6IFN0cmluZwogIGFjY2VzcyhhbGwpbGV0IHRva2Vuc0NvbW1pdHRlZDogVUZpeDY0CiAgYWNjZXNzKGFsbClsZXQgdG9rZW5zU3Rha2VkOiBVRml4NjQKICBhY2Nlc3MoYWxsKWxldCB0b2tlbnNVbnN0YWtpbmc6IFVGaXg2NAogIGFjY2VzcyhhbGwpbGV0IHRva2Vuc1Jld2FyZGVkOiBVRml4NjQKICBhY2Nlc3MoYWxsKWxldCB0b2tlbnNVbnN0YWtlZDogVUZpeDY0CiAgYWNjZXNzKGFsbClsZXQgdG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlOiBVRml4NjQKCiAgaW5pdChub2RlSUQ6IFN0cmluZywgZGVsZWdhdG9ySUQ6IFVJbnQzMikgewogICAgbGV0IGRlbGVnYXRvckluZm8gPSBGbG93SURUYWJsZVN0YWtpbmcuRGVsZWdhdG9ySW5mbyhub2RlSUQ6IG5vZGVJRCwgZGVsZWdhdG9ySUQ6IGRlbGVnYXRvcklEKQoKICAgIHNlbGYuaWQgPSBkZWxlZ2F0b3JJbmZvLmlkCiAgICBzZWxmLm5vZGVJRCA9IGRlbGVnYXRvckluZm8ubm9kZUlECiAgICBzZWxmLnRva2Vuc0NvbW1pdHRlZCA9IGRlbGVnYXRvckluZm8udG9rZW5zQ29tbWl0dGVkCiAgICBzZWxmLnRva2Vuc1N0YWtlZCA9IGRlbGVnYXRvckluZm8udG9rZW5zU3Rha2VkCiAgICBzZWxmLnRva2Vuc1Vuc3Rha2luZyA9IGRlbGVnYXRvckluZm8udG9rZW5zVW5zdGFraW5nCiAgICBzZWxmLnRva2Vuc1Jld2FyZGVkID0gZGVsZWdhdG9ySW5mby50b2tlbnNSZXdhcmRlZAogICAgc2VsZi50b2tlbnNVbnN0YWtlZCA9IGRlbGVnYXRvckluZm8udG9rZW5zVW5zdGFrZWQKICAgIHNlbGYudG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlID0gZGVsZWdhdG9ySW5mby50b2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UKICB9Cn0KCmFjY2VzcyhhbGwpZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcyk6IFJlc3VsdCB7CiAgbGV0IHRva2VuSG9sZGVyUmVmID0gCiAgICAgIGdldEF1dGhBY2NvdW50KGFkZHJlc3MpCiAgICAgICAgICAuYm9ycm93PCZMb2NrZWRUb2tlbnMuVG9rZW5Ib2xkZXI+KGZyb206IExvY2tlZFRva2Vucy5Ub2tlbkhvbGRlclN0b3JhZ2VQYXRoKQoKICB2YXIgc3Rha2luZ0luZm86IFN0YWtpbmdJbmZvPyA9IG5pbAogIGlmIGxldCB0b2tlbkhvbGRlciA9IHRva2VuSG9sZGVyUmVmIHsKICAgIGxldCBsb2NrZWRBZGRyZXNzID0gdG9rZW5Ib2xkZXIuZ2V0TG9ja2VkQWNjb3VudEFkZHJlc3MoKSAgICAgICAKICAgIGxldCBsb2NrZWRCYWxhbmNlID0gdG9rZW5Ib2xkZXIuZ2V0TG9ja2VkQWNjb3VudEJhbGFuY2UoKQogICAgbGV0IHVubG9ja0xpbWl0ID0gdG9rZW5Ib2xkZXIuZ2V0VW5sb2NrTGltaXQoKQogICAgCiAgICB2YXIgbm9kZUluZm86IE5vZGVJbmZvPyA9IG5pbAogICAgaWYgbGV0IG5vZGVJRCA9IHRva2VuSG9sZGVyLmdldE5vZGVJRCgpIHsKICAgICAgbm9kZUluZm8gPSBOb2RlSW5mbyhub2RlSUQ6IG5vZGVJRCkKICAgIH0KCiAgICB2YXIgZGVsZWdhdG9yTm9kZUluZm86IE5vZGVJbmZvPyA9IG5pbAogICAgdmFyIGRlbGVnYXRvckluZm86IERlbGVnYXRvckluZm8/ID0gbmlsCiAgICBpZiBsZXQgZGVsZWdhdG9yTm9kZUlEID0gdG9rZW5Ib2xkZXIuZ2V0RGVsZWdhdG9yTm9kZUlEKCkgewogICAgICBpZiBsZXQgZGVsZWdhdG9ySUQgPSB0b2tlbkhvbGRlci5nZXREZWxlZ2F0b3JJRCgpIHsKICAgICAgICBkZWxlZ2F0b3JOb2RlSW5mbyA9IE5vZGVJbmZvKG5vZGVJRDogZGVsZWdhdG9yTm9kZUlEKQogICAgICAgIGRlbGVnYXRvckluZm8gPSBEZWxlZ2F0b3JJbmZvKG5vZGVJRDogZGVsZWdhdG9yTm9kZUlELCBkZWxlZ2F0b3JJRDogZGVsZWdhdG9ySUQpCiAgICAgIH0gCiAgICB9IAoKICAgIGxldCBlcG9jaEluZm86IEVwb2NoSW5mbyA9IEVwb2NoSW5mbygKICAgICAgY3VycmVudEVwb2NoQ291bnRlcjogRmxvd0Vwb2NoLmN1cnJlbnRFcG9jaENvdW50ZXIsCiAgICAgIGN1cnJlbnRFcG9jaFBoYXNlOiBGbG93RXBvY2guY3VycmVudEVwb2NoUGhhc2UucmF3VmFsdWUKICAgICkKCiAgICBzdGFraW5nSW5mbyA9IFN0YWtpbmdJbmZvKAogICAgICBlcG9jaEluZm86IGVwb2NoSW5mbywKICAgICAgbG9ja2VkQWRkcmVzczogbG9ja2VkQWRkcmVzcywKICAgICAgbG9ja2VkQmFsYW5jZTogbG9ja2VkQmFsYW5jZSwKICAgICAgdW5sb2NrTGltaXQ6IHVubG9ja0xpbWl0LAogICAgICBub2RlSW5mbzogbm9kZUluZm8sCiAgICAgIGRlbGVnYXRvck5vZGVJbmZvOiBkZWxlZ2F0b3JOb2RlSW5mbywKICAgICAgZGVsZWdhdG9ySW5mbzogZGVsZWdhdG9ySW5mbyAKICAgICkKICB9CgogIHJldHVybiBSZXN1bHQoc3Rha2luZ0luZm86IHN0YWtpbmdJbmZvKQp9",
          "restakeReward": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgcmVzdGFrZVJld2FyZCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKIGltcG9ydCBGbG93U3Rha2luZ0NvbGxlY3Rpb24gZnJvbSAweDk1ZTAxOWExN2QwZTIzZDcKCgovLy8gQ29tbWl0cyByZXdhcmRlZCB0b2tlbnMgdG8gc3Rha2UgZm9yIHRoZSBzcGVjaWZpZWQgbm9kZSBvciBkZWxlZ2F0b3IgaW4gdGhlIHN0YWtpbmcgY29sbGVjdGlvbgoKdHJhbnNhY3Rpb24obm9kZUlEOiBTdHJpbmcsIGRlbGVnYXRvcklEOiBVSW50MzI/LCBhbW91bnQ6IFVGaXg2NCkgewogICAgCiAgICBsZXQgc3Rha2luZ0NvbGxlY3Rpb25SZWY6IGF1dGgoRmxvd1N0YWtpbmdDb2xsZWN0aW9uLkNvbGxlY3Rpb25Pd25lcikgJkZsb3dTdGFraW5nQ29sbGVjdGlvbi5TdGFraW5nQ29sbGVjdGlvbgoKICAgIHByZXBhcmUoYWNjb3VudDogYXV0aChCb3Jyb3dWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICBzZWxmLnN0YWtpbmdDb2xsZWN0aW9uUmVmID0gYWNjb3VudC5zdG9yYWdlLmJvcnJvdzxhdXRoKEZsb3dTdGFraW5nQ29sbGVjdGlvbi5Db2xsZWN0aW9uT3duZXIpICZGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb24+KGZyb206IEZsb3dTdGFraW5nQ29sbGVjdGlvbi5TdGFraW5nQ29sbGVjdGlvblN0b3JhZ2VQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBhIHJlZmVyZW5jZSB0byBhIFN0YWtpbmdDb2xsZWN0aW9uIGluIHRoZSBwcmltYXJ5IHVzZXIncyBhY2NvdW50IikKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICBzZWxmLnN0YWtpbmdDb2xsZWN0aW9uUmVmLnN0YWtlUmV3YXJkZWRUb2tlbnMobm9kZUlEOiBub2RlSUQsIGRlbGVnYXRvcklEOiBkZWxlZ2F0b3JJRCwgYW1vdW50OiBhbW91bnQpCiAgICB9Cn0=",
          "restakeUnstaked": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgcmVzdGFrZVVuc3Rha2VkIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRmxvd1N0YWtpbmdDb2xsZWN0aW9uIGZyb20gMHg5NWUwMTlhMTdkMGUyM2Q3CgoKLy8vIENvbW1pdHMgdW5zdGFrZWQgdG9rZW5zIHRvIHN0YWtlIGZvciB0aGUgc3BlY2lmaWVkIG5vZGUgb3IgZGVsZWdhdG9yIGluIHRoZSBzdGFraW5nIGNvbGxlY3Rpb24KCnRyYW5zYWN0aW9uKG5vZGVJRDogU3RyaW5nLCBkZWxlZ2F0b3JJRDogVUludDMyPywgYW1vdW50OiBVRml4NjQpIHsKICAgIAogICAgbGV0IHN0YWtpbmdDb2xsZWN0aW9uUmVmOiBhdXRoKEZsb3dTdGFraW5nQ29sbGVjdGlvbi5Db2xsZWN0aW9uT3duZXIpICZGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb24KCiAgICBwcmVwYXJlKGFjY291bnQ6IGF1dGgoQm9ycm93VmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgc2VsZi5zdGFraW5nQ29sbGVjdGlvblJlZiA9IGFjY291bnQuc3RvcmFnZS5ib3Jyb3c8YXV0aChGbG93U3Rha2luZ0NvbGxlY3Rpb24uQ29sbGVjdGlvbk93bmVyKSAmRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uPihmcm9tOiBGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb25TdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgYSByZWZlcmVuY2UgdG8gYSBTdGFraW5nQ29sbGVjdGlvbiBpbiB0aGUgcHJpbWFyeSB1c2VyJ3MgYWNjb3VudCIpCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgc2VsZi5zdGFraW5nQ29sbGVjdGlvblJlZi5zdGFrZVVuc3Rha2VkVG9rZW5zKG5vZGVJRDogbm9kZUlELCBkZWxlZ2F0b3JJRDogZGVsZWdhdG9ySUQsIGFtb3VudDogYW1vdW50KQogICAgfQp9",
          "setup": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgc2V0dXAgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHg5YTA3NjZkOTNiNjYwOGI3CgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHg3ZTYwZGYwNDJhOWMwODY4CgppbXBvcnQgTG9ja2VkVG9rZW5zIGZyb20gMHg5NWUwMTlhMTdkMGUyM2Q3CgppbXBvcnQgRmxvd0lEVGFibGVTdGFraW5nIGZyb20gMHg5ZWNhMmIzOGIxOGI1ZGZlCgppbXBvcnQgRmxvd1N0YWtpbmdDb2xsZWN0aW9uIGZyb20gMHg5NWUwMTlhMTdkMGUyM2Q3CgoKLy8vIFRoaXMgdHJhbnNhY3Rpb24gc2V0cyB1cCBhbiBhY2NvdW50IHRvIHVzZSBhIHN0YWtpbmcgY29sbGVjdGlvbgovLy8gSXQgd2lsbCB3b3JrIHJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGV5IGhhdmUgYSByZWd1bGFyIGFjY291bnQsIGEgdHdvLWFjY291bnQgbG9ja2VkIHRva2VucyBzZXR1cCwKLy8vIG9yIHN0YWtpbmcgb2JqZWN0cyBzdG9yZWQgaW4gdGhlIHVubG9ja2VkIGFjY291bnQKCnRyYW5zYWN0aW9uIHsKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKEJvcnJvd1ZhbHVlLCBTdG9yYWdlLCBDYXBhYmlsaXRpZXMpICZBY2NvdW50KSB7CgogICAgICAgIC8vIElmIHRoZXJlIGlzbid0IGFscmVhZHkgYSBzdGFraW5nIGNvbGxlY3Rpb24KICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8JkZsb3dTdGFraW5nQ29sbGVjdGlvbi5TdGFraW5nQ29sbGVjdGlvbj4oZnJvbTogRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uU3RvcmFnZVBhdGgpID09IG5pbCB7CgogICAgICAgICAgICAvLyBDcmVhdGUgcHJpdmF0ZSBjYXBhYmlsaXRpZXMgZm9yIHRoZSB0b2tlbiBob2xkZXIgYW5kIHVubG9ja2VkIHZhdWx0CiAgICAgICAgICAgIGxldCBsb2NrZWRIb2xkZXIgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3LCBMb2NrZWRUb2tlbnMuVG9rZW5PcGVyYXRpb25zKSAmTG9ja2VkVG9rZW5zLlRva2VuSG9sZGVyPihMb2NrZWRUb2tlbnMuVG9rZW5Ib2xkZXJTdG9yYWdlUGF0aCkhCiAgICAgICAgICAgIGxldCBmbG93VG9rZW4gPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAmRmxvd1Rva2VuLlZhdWx0Pigvc3RvcmFnZS9mbG93VG9rZW5WYXVsdCkhCgogICAgICAgICAgICAvLyBDcmVhdGUgYSBuZXcgU3Rha2luZyBDb2xsZWN0aW9uIGFuZCBwdXQgaXQgaW4gc3RvcmFnZQogICAgICAgICAgICBpZiBsb2NrZWRIb2xkZXIuY2hlY2soKSB7CiAgICAgICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKAogICAgICAgICAgICAgICAgICAgIDwtIEZsb3dTdGFraW5nQ29sbGVjdGlvbi5jcmVhdGVTdGFraW5nQ29sbGVjdGlvbigKICAgICAgICAgICAgICAgICAgICAgICAgdW5sb2NrZWRWYXVsdDogZmxvd1Rva2VuLAogICAgICAgICAgICAgICAgICAgICAgICB0b2tlbkhvbGRlcjogbG9ja2VkSG9sZGVyCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICB0bzogRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uU3RvcmFnZVBhdGgKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUoCiAgICAgICAgICAgICAgICAgICAgPC0gRmxvd1N0YWtpbmdDb2xsZWN0aW9uLmNyZWF0ZVN0YWtpbmdDb2xsZWN0aW9uKAogICAgICAgICAgICAgICAgICAgICAgICB1bmxvY2tlZFZhdWx0OiBmbG93VG9rZW4sCiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuSG9sZGVyOiBuaWwKICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIHRvOiBGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb25TdG9yYWdlUGF0aAogICAgICAgICAgICAgICAgKQogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBQdWJsaXNoIGEgY2FwYWJpbGl0eSB0byB0aGUgY3JlYXRlZCBzdGFraW5nIGNvbGxlY3Rpb24uCiAgICAgICAgICAgIGxldCBzdGFraW5nQ29sbGVjdGlvbkNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwmRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uPigKICAgICAgICAgICAgICAgIEZsb3dTdGFraW5nQ29sbGVjdGlvbi5TdGFraW5nQ29sbGVjdGlvblN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkKCiAgICAgICAgICAgIHNpZ25lci5jYXBhYmlsaXRpZXMucHVibGlzaCgKICAgICAgICAgICAgICAgIHN0YWtpbmdDb2xsZWN0aW9uQ2FwLAogICAgICAgICAgICAgICAgYXQ6IEZsb3dTdGFraW5nQ29sbGVjdGlvbi5TdGFraW5nQ29sbGVjdGlvblB1YmxpY1BhdGgKICAgICAgICAgICAgKQogICAgICAgIH0KCiAgICAgICAgLy8gYm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBzdGFraW5nIGNvbGxlY3Rpb24KICAgICAgICBsZXQgY29sbGVjdGlvblJlZiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzwmRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uPihmcm9tOiBGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb25TdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgc3Rha2luZyBjb2xsZWN0aW9uIHJlZmVyZW5jZSIpCgogICAgICAgIC8vIElmIHRoZXJlIGlzIGEgbm9kZSBzdGFrZXIgb2JqZWN0IGluIHRoZSBhY2NvdW50LCBwdXQgaXQgaW4gdGhlIHN0YWtpbmcgY29sbGVjdGlvbgogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLmJvcnJvdzwmRmxvd0lEVGFibGVTdGFraW5nLk5vZGVTdGFrZXI+KGZyb206IEZsb3dJRFRhYmxlU3Rha2luZy5Ob2RlU3Rha2VyU3RvcmFnZVBhdGgpICE9IG5pbCB7CiAgICAgICAgICAgIGxldCBub2RlIDwtIHNpZ25lci5zdG9yYWdlLmxvYWQ8QEZsb3dJRFRhYmxlU3Rha2luZy5Ob2RlU3Rha2VyPihmcm9tOiBGbG93SURUYWJsZVN0YWtpbmcuTm9kZVN0YWtlclN0b3JhZ2VQYXRoKSEKICAgICAgICAgICAgY29sbGVjdGlvblJlZi5hZGROb2RlT2JqZWN0KDwtbm9kZSwgbWFjaGluZUFjY291bnRJbmZvOiBuaWwpCiAgICAgICAgfQoKICAgICAgICAvLyBJZiB0aGVyZSBpcyBhIGRlbGVnYXRvciBvYmplY3QgaW4gdGhlIGFjY291bnQsIHB1dCBpdCBpbiB0aGUgc3Rha2luZyBjb2xsZWN0aW9uCiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UuYm9ycm93PCZGbG93SURUYWJsZVN0YWtpbmcuTm9kZURlbGVnYXRvcj4oZnJvbTogRmxvd0lEVGFibGVTdGFraW5nLkRlbGVnYXRvclN0b3JhZ2VQYXRoKSAhPSBuaWwgewogICAgICAgICAgICBsZXQgZGVsZWdhdG9yIDwtIHNpZ25lci5zdG9yYWdlLmxvYWQ8QEZsb3dJRFRhYmxlU3Rha2luZy5Ob2RlRGVsZWdhdG9yPihmcm9tOiBGbG93SURUYWJsZVN0YWtpbmcuRGVsZWdhdG9yU3RvcmFnZVBhdGgpIQogICAgICAgICAgICBjb2xsZWN0aW9uUmVmLmFkZERlbGVnYXRvck9iamVjdCg8LWRlbGVnYXRvcikKICAgICAgICB9CiAgICB9Cn0=",
          "unstake": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgdW5zdGFrZSAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKIGltcG9ydCBGbG93U3Rha2luZ0NvbGxlY3Rpb24gZnJvbSAweDk1ZTAxOWExN2QwZTIzZDcKCgovLy8gUmVxdWVzdHMgdW5zdGFraW5nIGZvciB0aGUgc3BlY2lmaWVkIG5vZGUgb3IgZGVsZWdhdG9yIGluIHRoZSBzdGFraW5nIGNvbGxlY3Rpb24KCnRyYW5zYWN0aW9uKG5vZGVJRDogU3RyaW5nLCBkZWxlZ2F0b3JJRDogVUludDMyPywgYW1vdW50OiBVRml4NjQpIHsKICAgIAogICAgbGV0IHN0YWtpbmdDb2xsZWN0aW9uUmVmOiBhdXRoKEZsb3dTdGFraW5nQ29sbGVjdGlvbi5Db2xsZWN0aW9uT3duZXIpICZGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb24KCiAgICBwcmVwYXJlKGFjY291bnQ6IGF1dGgoQm9ycm93VmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgc2VsZi5zdGFraW5nQ29sbGVjdGlvblJlZiA9IGFjY291bnQuc3RvcmFnZS5ib3Jyb3c8YXV0aChGbG93U3Rha2luZ0NvbGxlY3Rpb24uQ29sbGVjdGlvbk93bmVyKSAmRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uPihmcm9tOiBGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb25TdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgYSByZWZlcmVuY2UgdG8gYSBTdGFraW5nQ29sbGVjdGlvbiBpbiB0aGUgcHJpbWFyeSB1c2VyJ3MgYWNjb3VudCIpCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgc2VsZi5zdGFraW5nQ29sbGVjdGlvblJlZi5yZXF1ZXN0VW5zdGFraW5nKG5vZGVJRDogbm9kZUlELCBkZWxlZ2F0b3JJRDogZGVsZWdhdG9ySUQsIGFtb3VudDogYW1vdW50KQogICAgfQp9",
          "withdrawLocked": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgd2l0aGRyYXdMb2NrZWQgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhGVU5HSUJMRVRPS0VOQUREUkVTUwppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHhGTE9XVE9LRU5BRERSRVNTCmltcG9ydCBMb2NrZWRUb2tlbnMgZnJvbSAweExPQ0tFRFRPS0VOQUREUkVTUwoKdHJhbnNhY3Rpb24oYW1vdW50OiBVRml4NjQpIHsKCiAgICBsZXQgaG9sZGVyUmVmOiBhdXRoKExvY2tlZFRva2Vucy5Ub2tlbk9wZXJhdGlvbnMsIEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZMb2NrZWRUb2tlbnMuVG9rZW5Ib2xkZXIKICAgIGxldCB2YXVsdFJlZjogYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAmRmxvd1Rva2VuLlZhdWx0CgogICAgcHJlcGFyZShhY2N0OiBhdXRoKEJvcnJvd1ZhbHVlKSAmQWNjb3VudCkgewogICAgICAgIHNlbGYuaG9sZGVyUmVmID0gYWNjdC5zdG9yYWdlLmJvcnJvdzxhdXRoKExvY2tlZFRva2Vucy5Ub2tlbk9wZXJhdGlvbnMsIEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZMb2NrZWRUb2tlbnMuVG9rZW5Ib2xkZXI+KGZyb206IExvY2tlZFRva2Vucy5Ub2tlbkhvbGRlclN0b3JhZ2VQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygiVGhlIHByaW1hcnkgdXNlciBhY2NvdW50IGRvZXMgbm90IGhhdmUgYW4gYXNzb2NpYXRlZCBsb2NrZWQgYWNjb3VudCIpCgogICAgICAgIHNlbGYudmF1bHRSZWYgPSBhY2N0LnN0b3JhZ2UuYm9ycm93PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJkZsb3dUb2tlbi5WYXVsdD4oZnJvbTogL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IGZsb3cgdG9rZW4gdmF1bHQgcmVmIikKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICBzZWxmLnZhdWx0UmVmLmRlcG9zaXQoZnJvbTogPC1zZWxmLmhvbGRlclJlZi53aXRoZHJhdyhhbW91bnQ6IGFtb3VudCkpCiAgICB9Cn0=",
          "withdrawReward": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgd2l0aGRyYXdSZXdhcmQgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGbG93U3Rha2luZ0NvbGxlY3Rpb24gZnJvbSAweDk1ZTAxOWExN2QwZTIzZDcKCgovLy8gUmVxdWVzdCB0byB3aXRoZHJhdyByZXdhcmRlZCB0b2tlbnMgZm9yIHRoZSBzcGVjaWZpZWQgbm9kZSBvciBkZWxlZ2F0b3IgaW4gdGhlIHN0YWtpbmcgY29sbGVjdGlvbgovLy8gVGhlIHRva2VucyBhcmUgYXV0b21hdGljYWxseSBkZXBvc2l0ZWQgdG8gdGhlIHVubG9ja2VkIGFjY291bnQgdmF1bHQgZmlyc3QsCi8vLyBBbmQgdGhlbiBhbnkgbG9ja2VkIHRva2VucyBhcmUgZGVwb3NpdGVkIGludG8gdGhlIGxvY2tlZCBhY2NvdW50IHZhdWx0Cgp0cmFuc2FjdGlvbihub2RlSUQ6IFN0cmluZywgZGVsZWdhdG9ySUQ6IFVJbnQzMj8sIGFtb3VudDogVUZpeDY0KSB7CiAgICAKICAgIGxldCBzdGFraW5nQ29sbGVjdGlvblJlZjogYXV0aChGbG93U3Rha2luZ0NvbGxlY3Rpb24uQ29sbGVjdGlvbk93bmVyKSAmRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uCgogICAgcHJlcGFyZShhY2NvdW50OiBhdXRoKEJvcnJvd1ZhbHVlKSAmQWNjb3VudCkgewogICAgICAgIHNlbGYuc3Rha2luZ0NvbGxlY3Rpb25SZWYgPSBhY2NvdW50LnN0b3JhZ2UuYm9ycm93PGF1dGgoRmxvd1N0YWtpbmdDb2xsZWN0aW9uLkNvbGxlY3Rpb25Pd25lcikgJkZsb3dTdGFraW5nQ29sbGVjdGlvbi5TdGFraW5nQ29sbGVjdGlvbj4oZnJvbTogRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uU3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IGEgcmVmZXJlbmNlIHRvIGEgU3Rha2luZ0NvbGxlY3Rpb24gaW4gdGhlIHByaW1hcnkgdXNlcidzIGFjY291bnQiKQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIHNlbGYuc3Rha2luZ0NvbGxlY3Rpb25SZWYud2l0aGRyYXdSZXdhcmRlZFRva2Vucyhub2RlSUQ6IG5vZGVJRCwgZGVsZWdhdG9ySUQ6IGRlbGVnYXRvcklELCBhbW91bnQ6IGFtb3VudCkKICAgIH0KfQ==",
          "withdrawUnstaked": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgd2l0aGRyYXdVbnN0YWtlZCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKIGltcG9ydCBGbG93U3Rha2luZ0NvbGxlY3Rpb24gZnJvbSAweDk1ZTAxOWExN2QwZTIzZDcKCgovLy8gUmVxdWVzdCB0byB3aXRoZHJhdyB1bnN0YWtlZCB0b2tlbnMgZm9yIHRoZSBzcGVjaWZpZWQgbm9kZSBvciBkZWxlZ2F0b3IgaW4gdGhlIHN0YWtpbmcgY29sbGVjdGlvbgovLy8gVGhlIHRva2VucyBhcmUgYXV0b21hdGljYWxseSBkZXBvc2l0ZWQgdG8gdGhlIHVubG9ja2VkIGFjY291bnQgdmF1bHQgZmlyc3QsCi8vLyBBbmQgdGhlbiBhbnkgbG9ja2VkIHRva2VucyBhcmUgZGVwb3NpdGVkIGludG8gdGhlIGxvY2tlZCBhY2NvdW50IHZhdWx0IGlmIGl0IGlzIHRoZXJlCgp0cmFuc2FjdGlvbihub2RlSUQ6IFN0cmluZywgZGVsZWdhdG9ySUQ6IFVJbnQzMj8sIGFtb3VudDogVUZpeDY0KSB7CiAgICAKICAgIGxldCBzdGFraW5nQ29sbGVjdGlvblJlZjogYXV0aChGbG93U3Rha2luZ0NvbGxlY3Rpb24uQ29sbGVjdGlvbk93bmVyKSAmRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uCgogICAgcHJlcGFyZShhY2NvdW50OiBhdXRoKEJvcnJvd1ZhbHVlKSAmQWNjb3VudCkgewogICAgICAgIHNlbGYuc3Rha2luZ0NvbGxlY3Rpb25SZWYgPSBhY2NvdW50LnN0b3JhZ2UuYm9ycm93PGF1dGgoRmxvd1N0YWtpbmdDb2xsZWN0aW9uLkNvbGxlY3Rpb25Pd25lcikgJkZsb3dTdGFraW5nQ29sbGVjdGlvbi5TdGFraW5nQ29sbGVjdGlvbj4oZnJvbTogRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uU3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IGEgcmVmZXJlbmNlIHRvIGEgU3Rha2luZ0NvbGxlY3Rpb24gaW4gdGhlIHByaW1hcnkgdXNlcidzIGFjY291bnQiKQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIHNlbGYuc3Rha2luZ0NvbGxlY3Rpb25SZWYud2l0aGRyYXdVbnN0YWtlZFRva2Vucyhub2RlSUQ6IG5vZGVJRCwgZGVsZWdhdG9ySUQ6IGRlbGVnYXRvcklELCBhbW91bnQ6IGFtb3VudCkKICAgIH0KfQ=="
        },
        "storage": {
          "enableTokenStorage": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZW5hYmxlVG9rZW5TdG9yYWdlIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4OWEwNzY2ZDkzYjY2MDhiNwoKaW1wb3J0IDxUb2tlbj4gZnJvbSA8VG9rZW5BZGRyZXNzPgoKdHJhbnNhY3Rpb24gewoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UsIENhcGFiaWxpdGllcykgJkFjY291bnQpIHsKCiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UuYm9ycm93PCY8VG9rZW4+LlZhdWx0Pihmcm9tOiA8VG9rZW5TdG9yYWdlUGF0aD4gKSA9PSBuaWwgewogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKDwtIDxUb2tlbj4uY3JlYXRlRW1wdHlWYXVsdCh2YXVsdFR5cGU6IFR5cGU8QDxUb2tlbj4uVmF1bHQ+KCkpLCB0bzogPFRva2VuU3RvcmFnZVBhdGg+KQogICAgICAgIH0KCiAgICAgICAgaWYgc2lnbmVyLmNhcGFiaWxpdGllcy5leGlzdHMoPFRva2VuUmVjZWl2ZXJQYXRoPikgPT0gZmFsc2UgewogICAgICAgICAgICBsZXQgcmVjZWl2ZXJDYXBhYmlsaXR5ID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCY8VG9rZW4+LlZhdWx0Pig8VG9rZW5TdG9yYWdlUGF0aD4pCiAgICAgICAgICAgIHNpZ25lci5jYXBhYmlsaXRpZXMucHVibGlzaChyZWNlaXZlckNhcGFiaWxpdHksIGF0OiA8VG9rZW5SZWNlaXZlclBhdGg+KQogICAgICAgIAogICAgICAgIH0KICAgICAgIAogICAgICAgIGlmIHNpZ25lci5jYXBhYmlsaXRpZXMuZXhpc3RzKDxUb2tlbkJhbGFuY2VQYXRoPikgPT0gZmFsc2UgewogICAgICAgICAgICBsZXQgYmFsYW5jZUNhcGFiaWxpdHkgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JjxUb2tlbj4uVmF1bHQ+KDxUb2tlblN0b3JhZ2VQYXRoPikKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy5wdWJsaXNoKGJhbGFuY2VDYXBhYmlsaXR5LCBhdDogPFRva2VuQmFsYW5jZVBhdGg+KQogICAgICAgIH0KICAgIAogICAgfQp9",
          "getBasicPublicItems": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0QmFzaWNQdWJsaWNJdGVtcyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKYWNjZXNzKGFsbClzdHJ1Y3QgSXRlbSB7CiAgYWNjZXNzKGFsbClsZXQgYWRkcmVzczogQWRkcmVzcwogIGFjY2VzcyhhbGwpbGV0IHBhdGg6IFN0cmluZwogIGFjY2VzcyhhbGwpbGV0IHRhcmdldFBhdGg6IFN0cmluZz8KCiAgaW5pdChhZGRyZXNzOiBBZGRyZXNzLCBwYXRoOiBTdHJpbmcsIHRhcmdldFBhdGg6IFN0cmluZz8pIHsKICAgIHNlbGYuYWRkcmVzcyA9IGFkZHJlc3MKICAgIHNlbGYucGF0aCA9IHBhdGgKICAgIHNlbGYudGFyZ2V0UGF0aCA9IHRhcmdldFBhdGgKICB9Cn0KCmFjY2VzcyhhbGwpZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcyk6IFtJdGVtXSB7CiAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgbGV0IGl0ZW1zOiBbSXRlbV0gPSBbXQoKCiAgZnVuIGVhY2hQYXRoKHBhdGg6IFB1YmxpY1BhdGgsIGNhcFR5cGU6IFR5cGUpOiBCb29sIHsKICAgIC8vIHRvZG8KICAgIGxldCBjYXAgPSBhY2NvdW50LmNhcGFiaWxpdGllcy5nZXQ8JkFueVN0cnVjdD4ocGF0aCkKICAgIHZhciB0YXJnZXRQYXRoID0gIiIKCiAgICBpZiBjYXAgIT0gbmlsIHsKICAgICAgdGFyZ2V0UGF0aCA9ICIxMiIgCiAgICB9CiAgICBsZXQgaXRlbSA9IEl0ZW0oYWRkcmVzczogYWRkcmVzcywgcGF0aDogcGF0aC50b1N0cmluZygpLCB0YXJnZXRQYXRoOiB0YXJnZXRQYXRoKQogICAgaXRlbXMuYXBwZW5kKGl0ZW0pCiAgICByZXR1cm4gdHJ1ZQogIH0KICBhY2NvdW50LnN0b3JhZ2UuZm9yRWFjaFB1YmxpYyhlYWNoUGF0aCkKCiAgcmV0dXJuIGl0ZW1zCn0=",
          "getPrivateItems": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0UHJpdmF0ZUl0ZW1zIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgphY2Nlc3MoYWxsKXN0cnVjdCBJdGVtIHsKICBhY2Nlc3MoYWxsKWxldCBhZGRyZXNzOiBBZGRyZXNzCiAgYWNjZXNzKGFsbClsZXQgcGF0aDogU3RyaW5nCiAgYWNjZXNzKGFsbClsZXQgdHlwZTogVHlwZQogIGFjY2VzcyhhbGwpbGV0IHRhcmdldFBhdGg6IFN0cmluZz8KCiAgaW5pdCgKICAgIGFkZHJlc3M6IEFkZHJlc3MsIAogICAgcGF0aDogU3RyaW5nLCAKICAgIHR5cGU6IFR5cGUsIAogICAgdGFyZ2V0UGF0aDogU3RyaW5nPwogICkgewogICAgc2VsZi5hZGRyZXNzID0gYWRkcmVzcwogICAgc2VsZi5wYXRoID0gcGF0aAogICAgc2VsZi50eXBlID0gdHlwZQogICAgc2VsZi50YXJnZXRQYXRoID0gdGFyZ2V0UGF0aAogIH0KfQoKYWNjZXNzKGFsbClmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzLCBwYXRoTWFwOiB7U3RyaW5nOiBCb29sfSk6IFtJdGVtXSB7CiAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCgogIGxldCBpdGVtczogW0l0ZW1dID0gW10KCiAgYWNjb3VudC5zdG9yYWdlLmZvckVhY2hQcml2YXRlKGZ1biAocGF0aDogUHJpdmF0ZVBhdGgsIHR5cGU6IFR5cGUpOiBCb29sIHsKICAgIGlmICFwYXRoTWFwLmNvbnRhaW5zS2V5KHBhdGgudG9TdHJpbmcoKSkgewogICAgICByZXR1cm4gdHJ1ZQogICAgfQoKICAgIHZhciB0YXJnZXRQYXRoOiBTdHJpbmc/ID0gbmlsCiAgICBpZiBsZXQgdGFyZ2V0ID0gYWNjb3VudC5nZXRMaW5rVGFyZ2V0KHBhdGgpIHsKICAgICAgdGFyZ2V0UGF0aCA9IHRhcmdldC50b1N0cmluZygpCiAgICB9CgogICAgbGV0IGl0ZW0gPSBJdGVtKAogICAgICBhZGRyZXNzOiBhZGRyZXNzLAogICAgICBwYXRoOiBwYXRoLnRvU3RyaW5nKCksCiAgICAgIHR5cGU6IHR5cGUsCiAgICAgIHRhcmdldFBhdGg6IHRhcmdldFBhdGgKICAgICkKCiAgICBpdGVtcy5hcHBlbmQoaXRlbSkKICAgIHJldHVybiB0cnVlCiAgfSkKCiAgcmV0dXJuIGl0ZW1zCn0=",
          "getPrivatePaths": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0UHJpdmF0ZVBhdGhzIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgphY2Nlc3MoYWxsKWZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MpOiBbUHJpdmF0ZVBhdGhdIHsKICBsZXQgYWNjb3VudCA9IGdldEF1dGhBY2NvdW50KGFkZHJlc3MpCiAgbGV0IGNsZWFuZFBhdGhzOiBbUHJpdmF0ZVBhdGhdID0gW10KICBmb3IgcGF0aCBpbiBhY2NvdW50LnByaXZhdGVQYXRocyB7CiAgICBjbGVhbmRQYXRocy5hcHBlbmQocGF0aCkKICB9CiAgcmV0dXJuIGNsZWFuZFBhdGhzCn0=",
          "getPublicItem": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0UHVibGljSXRlbSAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKLy8gQSB3b3JrYXJvdW5kIG1ldGhvZAppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4OWEwNzY2ZDkzYjY2MDhiNwoKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCiAgCmFjY2VzcyhhbGwpIHN0cnVjdCBJdGVtIHsKICBhY2Nlc3MoYWxsKSBsZXQgYWRkcmVzczogQWRkcmVzcwogIGFjY2VzcyhhbGwpIGxldCBwYXRoOiBTdHJpbmcKICBhY2Nlc3MoYWxsKSBsZXQgdHlwZTogVHlwZQoKICBhY2Nlc3MoYWxsKSBsZXQgdGFyZ2V0UGF0aDogU3RyaW5nPwoKICBpbml0KAogICAgYWRkcmVzczogQWRkcmVzcywgCiAgICBwYXRoOiBTdHJpbmcsIAogICAgdHlwZTogVHlwZSwgCiAgICB0YXJnZXRQYXRoOiBTdHJpbmc/CiAgKSB7CiAgICBzZWxmLmFkZHJlc3MgPSBhZGRyZXNzCiAgICBzZWxmLnBhdGggPSBwYXRoCiAgICBzZWxmLnR5cGUgPSB0eXBlCiAgICBzZWxmLnRhcmdldFBhdGggPSB0YXJnZXRQYXRoCiAgfQp9CgphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzLCBwYXRoTWFwOiB7U3RyaW5nOiBCb29sfSk6IFtJdGVtXSB7CiAgbGV0IGFjY291bnQgPSBnZXRBdXRoQWNjb3VudChhZGRyZXNzKQoKICBsZXQgaXRlbXM6IFtJdGVtXSA9IFtdCiAgYWNjb3VudC5mb3JFYWNoUHVibGljKGZ1biAocGF0aDogUHVibGljUGF0aCwgdHlwZTogVHlwZSk6IEJvb2wgewogICAgaWYgIXBhdGhNYXAuY29udGFpbnNLZXkocGF0aC50b1N0cmluZygpKSB7CiAgICAgIHJldHVybiB0cnVlCiAgICB9CgogICAgdmFyIHRhcmdldFBhdGg6IFN0cmluZz8gPSBuaWwKCiAgICBpZiBsZXQgdGFyZ2V0ID0gYWNjb3VudC5nZXRMaW5rVGFyZ2V0KHBhdGgpIHsKICAgICAgdGFyZ2V0UGF0aCA9IHRhcmdldC50b1N0cmluZygpCiAgICB9CgogICAgbGV0IGl0ZW0gPSBJdGVtKAogICAgICBhZGRyZXNzOiBhZGRyZXNzLAogICAgICBwYXRoOiBwYXRoLnRvU3RyaW5nKCksCiAgICAgIHR5cGU6IHR5cGUsCiAgICAgIHRhcmdldFBhdGg6IHRhcmdldFBhdGgKICAgICkKCiAgICBpdGVtcy5hcHBlbmQoaXRlbSkKICAgIHJldHVybiBmYWxzZQogIH0pCgogIHJldHVybiBpdGVtcwp9",
          "getPublicItems": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0UHVibGljSXRlbXMgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHg5YTA3NjZkOTNiNjYwOGI3CgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKICAKYWNjZXNzKGFsbCkgc3RydWN0IEl0ZW0gewogIGFjY2VzcyhhbGwpIGxldCBhZGRyZXNzOiBBZGRyZXNzCiAgYWNjZXNzKGFsbCkgbGV0IHBhdGg6IFN0cmluZwogIGFjY2VzcyhhbGwpIGxldCB0eXBlOiBUeXBlCgogIGFjY2VzcyhhbGwpIGxldCB0YXJnZXRQYXRoOiBTdHJpbmc/CgogIGFjY2VzcyhhbGwpIGxldCBpc0NvbGxlY3Rpb25DYXA6IEJvb2wKICBhY2Nlc3MoYWxsKSBsZXQgdG9rZW5JRHM6IFtVSW50NjRdCgogIGFjY2VzcyhhbGwpIGxldCBpc0JhbGFuY2VDYXA6IEJvb2wKICBhY2Nlc3MoYWxsKSBsZXQgYmFsYW5jZTogVUZpeDY0PwoKICBpbml0KAogICAgYWRkcmVzczogQWRkcmVzcywgCiAgICBwYXRoOiBTdHJpbmcsIAogICAgdHlwZTogVHlwZSwgCiAgICB0YXJnZXRQYXRoOiBTdHJpbmc/LCAKICAgIGlzQ29sbGVjdGlvbkNhcDogQm9vbCwgCiAgICB0b2tlbklEczogW1VJbnQ2NF0sCiAgICBpc0JhbGFuY2VDYXA6IEJvb2wsCiAgICBiYWxhbmNlOiBVRml4NjQ/CiAgKSB7CiAgICBzZWxmLmFkZHJlc3MgPSBhZGRyZXNzCiAgICBzZWxmLnBhdGggPSBwYXRoCiAgICBzZWxmLnR5cGUgPSB0eXBlCiAgICBzZWxmLnRhcmdldFBhdGggPSB0YXJnZXRQYXRoCiAgICBzZWxmLmlzQ29sbGVjdGlvbkNhcCA9IGlzQ29sbGVjdGlvbkNhcAogICAgc2VsZi50b2tlbklEcyA9IHRva2VuSURzCiAgICBzZWxmLmlzQmFsYW5jZUNhcCA9IGlzQmFsYW5jZUNhcAogICAgc2VsZi5iYWxhbmNlID0gYmFsYW5jZQogIH0KfQoKYWNjZXNzKGFsbCkgZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcywgcGF0aE1hcDoge1N0cmluZzogQm9vbH0pOiBbSXRlbV0gewogIGxldCBhY2NvdW50ID0gZ2V0QXV0aEFjY291bnQoYWRkcmVzcykKCiAgbGV0IGl0ZW1zOiBbSXRlbV0gPSBbXQogIGxldCBiYWxhbmNlQ2FwVHlwZSA9IFR5cGU8Q2FwYWJpbGl0eTwmQW55UmVzb3VyY2V7RnVuZ2libGVUb2tlbi5CYWxhbmNlfT4+KCkKICBsZXQgY29sbGVjdGlvblR5cGUgPSBUeXBlPENhcGFiaWxpdHk8JkFueVJlc291cmNle05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+PigpCgogIGFjY291bnQuZm9yRWFjaFB1YmxpYyhmdW4gKHBhdGg6IFB1YmxpY1BhdGgsIHR5cGU6IFR5cGUpOiBCb29sIHsKICAgIGlmICFwYXRoTWFwLmNvbnRhaW5zS2V5KHBhdGgudG9TdHJpbmcoKSkgewogICAgICByZXR1cm4gdHJ1ZQogICAgfQoKICAgIHZhciB0YXJnZXRQYXRoOiBTdHJpbmc/ID0gbmlsCiAgICB2YXIgaXNDb2xsZWN0aW9uQ2FwID0gZmFsc2UKICAgIHZhciBpc0JhbGFuY2VDYXAgPSBmYWxzZQogICAgdmFyIHRva2VuSURzOiBbVUludDY0XSA9IFtdCiAgICB2YXIgYmFsYW5jZTogVUZpeDY0PyA9IG5pbAoKICAgIGlmIGxldCB0YXJnZXQgPSBhY2NvdW50LmdldExpbmtUYXJnZXQocGF0aCkgewogICAgICB0YXJnZXRQYXRoID0gdGFyZ2V0LnRvU3RyaW5nKCkKICAgIH0KCiAgICBpZiAodHlwZS5pc1N1YnR5cGUob2Y6IGJhbGFuY2VDYXBUeXBlKSkgewogICAgICBpc0JhbGFuY2VDYXAgPSB0cnVlCiAgICAgIGxldCB2YXVsdFJlZiA9IGFjY291bnQKICAgICAgICAgIC5nZXRDYXBhYmlsaXR5KHBhdGgpCiAgICAgICAgICAuYm9ycm93PCZ7RnVuZ2libGVUb2tlbi5CYWxhbmNlfT4oKQoKICAgICAgaWYgbGV0IHZhdWx0ID0gdmF1bHRSZWYgewogICAgICAgICAgYmFsYW5jZSA9IHZhdWx0LmJhbGFuY2UKICAgICAgfQogICAgfSBlbHNlIGlmICh0eXBlLmlzU3VidHlwZShvZjogY29sbGVjdGlvblR5cGUpKSB7CiAgICAgIGlzQ29sbGVjdGlvbkNhcCA9IHRydWUKICAgICAgbGV0IGNvbGxlY3Rpb25SZWYgPSBhY2NvdW50CiAgICAgICAgLmdldENhcGFiaWxpdHkocGF0aCkKICAgICAgICAuYm9ycm93PCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uUHVibGljfT4oKQoKICAgICAgaWYgbGV0IGNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uUmVmIHsKICAgICAgICB0b2tlbklEcyA9IGNvbGxlY3Rpb24uZ2V0SURzKCkKICAgICAgfQogICAgfQoKICAgIGxldCBpdGVtID0gSXRlbSgKICAgICAgYWRkcmVzczogYWRkcmVzcywKICAgICAgcGF0aDogcGF0aC50b1N0cmluZygpLAogICAgICB0eXBlOiB0eXBlLAogICAgICB0YXJnZXRQYXRoOiB0YXJnZXRQYXRoLAogICAgICBpc0NvbGxlY3Rpb25DYXA6IGlzQ29sbGVjdGlvbkNhcCwKICAgICAgdG9rZW5JRHM6IHRva2VuSURzLAogICAgICBpc0JhbGFuY2VDYXA6IGlzQmFsYW5jZUNhcCwKICAgICAgYmFsYW5jZTogYmFsYW5jZQogICAgKQoKICAgIGl0ZW1zLmFwcGVuZChpdGVtKQogICAgcmV0dXJuIHRydWUKICB9KQoKICByZXR1cm4gaXRlbXMKfQ==",
          "getPublicPaths": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0UHVibGljUGF0aHMgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCnB1YiBmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzKTogW1B1YmxpY1BhdGhdIHsKICBsZXQgYWNjb3VudCA9IGdldEF1dGhBY2NvdW50KGFkZHJlc3MpCiAgbGV0IGNsZWFuZFBhdGhzOiBbUHVibGljUGF0aF0gPSBbXQogIGZvciBwYXRoIGluIGFjY291bnQucHVibGljUGF0aHMgewogICAgY2xlYW5kUGF0aHMuYXBwZW5kKHBhdGgpCiAgfQogIHJldHVybiBjbGVhbmRQYXRocwp9",
          "getStoragePaths": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0U3RvcmFnZVBhdGhzIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgpwdWIgZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcyk6IFtTdG9yYWdlUGF0aF0gewogIGxldCBhY2NvdW50ID0gZ2V0QXV0aEFjY291bnQoYWRkcmVzcykKICBsZXQgY2xlYW5kUGF0aHM6IFtTdG9yYWdlUGF0aF0gPSBbXQogIGZvciBwYXRoIGluIGFjY291bnQuc3RvcmFnZVBhdGhzIHsKICAgIGNsZWFuZFBhdGhzLmFwcGVuZChwYXRoKQogIH0KICByZXR1cm4gY2xlYW5kUGF0aHMKfQ==",
          "getStoredItems": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0U3RvcmVkSXRlbXMgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHg5YTA3NjZkOTNiNjYwOGI3CgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCgpwdWIgc3RydWN0IENvbGxlY3Rpb25EaXNwbGF5IHsKICBwdWIgbGV0IG5hbWU6IFN0cmluZwogIHB1YiBsZXQgc3F1YXJlSW1hZ2U6IE1ldGFkYXRhVmlld3MuTWVkaWEKCiAgaW5pdChuYW1lOiBTdHJpbmcsIHNxdWFyZUltYWdlOiBNZXRhZGF0YVZpZXdzLk1lZGlhKSB7CiAgICBzZWxmLm5hbWUgPSBuYW1lCiAgICBzZWxmLnNxdWFyZUltYWdlID0gc3F1YXJlSW1hZ2UKICB9Cn0KCnB1YiBzdHJ1Y3QgSXRlbSB7CiAgcHViIGxldCBhZGRyZXNzOiBBZGRyZXNzCiAgcHViIGxldCBwYXRoOiBTdHJpbmcKICBwdWIgbGV0IHR5cGU6IFR5cGUKICBwdWIgbGV0IGlzUmVzb3VyY2U6IEJvb2wKICBwdWIgbGV0IGlzTkZUQ29sbGVjdGlvbjogQm9vbAogIHB1YiBsZXQgZGlzcGxheTogQ29sbGVjdGlvbkRpc3BsYXk/CiAgcHViIGxldCB0b2tlbklEczogW1VJbnQ2NF0KICBwdWIgbGV0IGlzVmF1bHQ6IEJvb2wKICBwdWIgbGV0IGJhbGFuY2U6IFVGaXg2ND8KCiAgaW5pdChhZGRyZXNzOiBBZGRyZXNzLCBwYXRoOiBTdHJpbmcsIHR5cGU6IFR5cGUsIGlzUmVzb3VyY2U6IEJvb2wsIAogICAgaXNORlRDb2xsZWN0aW9uOiBCb29sLCBkaXNwbGF5OiBDb2xsZWN0aW9uRGlzcGxheT8sCiAgICB0b2tlbklEczogW1VJbnQ2NF0sIGlzVmF1bHQ6IEJvb2wsIGJhbGFuY2U6IFVGaXg2ND8pIHsKICAgICAgc2VsZi5hZGRyZXNzID0gYWRkcmVzcwogICAgICBzZWxmLnBhdGggPSBwYXRoCiAgICAgIHNlbGYudHlwZSA9IHR5cGUKICAgICAgc2VsZi5pc1Jlc291cmNlID0gaXNSZXNvdXJjZQogICAgICBzZWxmLmlzTkZUQ29sbGVjdGlvbiA9IGlzTkZUQ29sbGVjdGlvbgogICAgICBzZWxmLmRpc3BsYXkgPSBkaXNwbGF5CiAgICAgIHNlbGYudG9rZW5JRHMgPSB0b2tlbklEcwogICAgICBzZWxmLmlzVmF1bHQgPSBpc1ZhdWx0CiAgICAgIHNlbGYuYmFsYW5jZSA9IGJhbGFuY2UKICB9Cn0KCnB1YiBmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzLCBwYXRoSWRlbnRpZmllcnM6IFtTdHJpbmddKTogW0l0ZW1dIHsKICBsZXQgYWNjb3VudCA9IGdldEF1dGhBY2NvdW50KGFkZHJlc3MpCiAgbGV0IHJlc291cmNlVHlwZSA9IFR5cGU8QEFueVJlc291cmNlPigpCiAgbGV0IHZhdWx0VHlwZSA9IFR5cGU8QEZ1bmdpYmxlVG9rZW4uVmF1bHQ+KCkKICBsZXQgY29sbGVjdGlvblR5cGUgPSBUeXBlPEBOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb24+KCkKICBsZXQgbWV0YWRhdGFWaWV3VHlwZSA9IFR5cGU8QEFueVJlc291cmNle01ldGFkYXRhVmlld3MuUmVzb2x2ZXJDb2xsZWN0aW9ufT4oKQogIGxldCBpdGVtczogW0l0ZW1dID0gW10KCiAgZm9yIGlkZW50aWZpZXIgaW4gcGF0aElkZW50aWZpZXJzIHsKICAgIGxldCBwYXRoID0gU3RvcmFnZVBhdGgoaWRlbnRpZmllcjogaWRlbnRpZmllcikhCgogICAgaWYgbGV0IHR5cGUgPSBhY2NvdW50LnR5cGUoYXQ6IHBhdGgpIHsKICAgICAgbGV0IGlzUmVzb3VyY2UgPSB0eXBlLmlzU3VidHlwZShvZjogcmVzb3VyY2VUeXBlKQogICAgICBsZXQgaXNORlRDb2xsZWN0aW9uID0gdHlwZS5pc1N1YnR5cGUob2Y6IGNvbGxlY3Rpb25UeXBlKQogICAgICBsZXQgY29uZm9ybWVkTWV0YWRhdGFWaWV3cyA9IHR5cGUuaXNTdWJ0eXBlKG9mOiBtZXRhZGF0YVZpZXdUeXBlKQoKICAgICAgdmFyIHRva2VuSURzOiBbVUludDY0XSA9IFtdCiAgICAgIHZhciBjb2xsZWN0aW9uRGlzcGxheTogQ29sbGVjdGlvbkRpc3BsYXk/ID0gbmlsCiAgICAgIGlmIGlzTkZUQ29sbGVjdGlvbiAmJiBjb25mb3JtZWRNZXRhZGF0YVZpZXdzIHsKICAgICAgICBpZiBsZXQgY29sbGVjdGlvblJlZiA9IGFjY291bnQuYm9ycm93PCZ7TWV0YWRhdGFWaWV3cy5SZXNvbHZlckNvbGxlY3Rpb24sIE5vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+KGZyb206IHBhdGgpIHsKICAgICAgICAgIHRva2VuSURzID0gY29sbGVjdGlvblJlZi5nZXRJRHMoKQoKICAgICAgICAgIC8vIFRPRE86IG1vdmUgdG8gYSBsaXN0CiAgICAgICAgICBpZiB0b2tlbklEcy5sZW5ndGggPiAwIAogICAgICAgICAgJiYgcGF0aCAhPSAvc3RvcmFnZS9SYXJpYmxlTkZUQ29sbGVjdGlvbiAKICAgICAgICAgICYmIHBhdGggIT0gL3N0b3JhZ2UvQVJUSUZBQ1RQYWNrVjNDb2xsZWN0aW9uCiAgICAgICAgICAmJiBwYXRoICE9IC9zdG9yYWdlL0FybGVlU2NlbmUgewogICAgICAgICAgICBsZXQgcmVzb2x2ZXIgPSBjb2xsZWN0aW9uUmVmLmJvcnJvd1ZpZXdSZXNvbHZlcihpZDogdG9rZW5JRHNbMF0pIAogICAgICAgICAgICBpZiBsZXQgZGlzcGxheSA9IE1ldGFkYXRhVmlld3MuZ2V0TkZUQ29sbGVjdGlvbkRpc3BsYXkocmVzb2x2ZXIpIHsKICAgICAgICAgICAgICBjb2xsZWN0aW9uRGlzcGxheSA9IENvbGxlY3Rpb25EaXNwbGF5KAogICAgICAgICAgICAgICAgbmFtZTogZGlzcGxheS5uYW1lLAogICAgICAgICAgICAgICAgc3F1YXJlSW1hZ2U6IGRpc3BsYXkuc3F1YXJlSW1hZ2UKICAgICAgICAgICAgICApCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiBpc05GVENvbGxlY3Rpb24gewogICAgICAgIGlmIGxldCBjb2xsZWN0aW9uUmVmID0gYWNjb3VudC5ib3Jyb3c8Jk5vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbj4oZnJvbTogcGF0aCkgewogICAgICAgICAgdG9rZW5JRHMgPSBjb2xsZWN0aW9uUmVmLmdldElEcygpCiAgICAgICAgfQogICAgICB9CgogICAgICBsZXQgaXNWYXVsdCA9IHR5cGUuaXNTdWJ0eXBlKG9mOiB2YXVsdFR5cGUpIAogICAgICB2YXIgYmFsYW5jZTogVUZpeDY0PyA9IG5pbAogICAgICBpZiBpc1ZhdWx0IHsKICAgICAgICBpZiBsZXQgdmF1bHRSZWYgPSBhY2NvdW50LmJvcnJvdzwmRnVuZ2libGVUb2tlbi5WYXVsdD4oZnJvbTogcGF0aCkgewogICAgICAgICAgYmFsYW5jZSA9IHZhdWx0UmVmLmJhbGFuY2UKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGxldCBpdGVtID0gSXRlbSgKICAgICAgICBhZGRyZXNzOiBhZGRyZXNzLAogICAgICAgIHBhdGg6IHBhdGgudG9TdHJpbmcoKSwKICAgICAgICB0eXBlOiB0eXBlLAogICAgICAgIGlzUmVzb3VyY2U6IGlzUmVzb3VyY2UsCiAgICAgICAgaXNORlRDb2xsZWN0aW9uOiBpc05GVENvbGxlY3Rpb24sCiAgICAgICAgZGlzcGxheTogY29sbGVjdGlvbkRpc3BsYXksCiAgICAgICAgdG9rZW5JRHM6IHRva2VuSURzLAogICAgICAgIGlzVmF1bHQ6IGlzVmF1bHQsCiAgICAgICAgYmFsYW5jZTogYmFsYW5jZQogICAgICApCgogICAgICBpdGVtcy5hcHBlbmQoaXRlbSkKICAgIH0KICB9CgogIHJldHVybiBpdGVtcwp9",
          "getStoredResource": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0U3RvcmVkUmVzb3VyY2UgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCnB1YiBmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzLCBwYXRoU3RyOiBTdHJpbmcpOiAmQW55UmVzb3VyY2U/IHsKICBsZXQgYWNjb3VudCA9IGdldEF1dGhBY2NvdW50KGFkZHJlc3MpCiAgbGV0IHBhdGggPSBTdG9yYWdlUGF0aChpZGVudGlmaWVyOiBwYXRoU3RyKSEKICByZXR1cm4gYWNjb3VudC5ib3Jyb3c8JkFueVJlc291cmNlPihmcm9tOiBwYXRoKQp9",
          "getStoredStruct": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgZ2V0U3RvcmVkU3RydWN0IC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgpwdWIgZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcywgcGF0aFN0cjogU3RyaW5nKTogJkFueVN0cnVjdD8gewogIGxldCBhY2NvdW50ID0gZ2V0QXV0aEFjY291bnQoYWRkcmVzcykKICBsZXQgcGF0aCA9IFN0b3JhZ2VQYXRoKGlkZW50aWZpZXI6IHBhdGhTdHIpIQogIHJldHVybiBhY2NvdW50LmJvcnJvdzwmQW55U3RydWN0Pihmcm9tOiBwYXRoKQp9"
        },
        "temp": {
          "addKeys": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgYWRkS2V5cyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IENyeXB0bwoKdHJhbnNhY3Rpb24ocHVibGljS2V5OiBTdHJpbmcpIHsKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKEtleXMpICZBY2NvdW50KSB7CiAgICAgICAgbGV0IGtleSA9IFB1YmxpY0tleSgKICAgICAgICAgICAgcHVibGljS2V5OiBwdWJsaWNLZXkuZGVjb2RlSGV4KCksCiAgICAgICAgICAgIHNpZ25hdHVyZUFsZ29yaXRobTogU2lnbmF0dXJlQWxnb3JpdGhtKHJhd1ZhbHVlOiAxKSEKICAgICAgICApCiAgICAgICAgdmFyIGlkeCA9IDAKICAgICAgICB3aGlsZSBpZHggPCA5OSB7CiAgICAgICAgICAgIHNpZ25lci5rZXlzLmFkZCgKICAgICAgICAgICAgICAgIHB1YmxpY0tleToga2V5LAogICAgICAgICAgICAgICAgaGFzaEFsZ29yaXRobTogSGFzaEFsZ29yaXRobShyYXdWYWx1ZTogMSkhLAogICAgICAgICAgICAgICAgd2VpZ2h0OiAxMDAwLjAKICAgICAgICAgICAgKQogICAgICAgICAgICBpZHggPSBpZHggKyAxCiAgICAgICAgfQogICAgICAgCiAgICB9Cn0=",
          "createAccount": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgY3JlYXRlQWNjb3VudCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IENyeXB0bwppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4OWEwNzY2ZDkzYjY2MDhiNwoKaW1wb3J0IEVWTSBmcm9tIDB4OGM1MzAzZWFhMjYyMDJkNgoKaW1wb3J0IFVTRENGbG93IGZyb20gMHg2NGFkZjM5Y2JjMzU0ZmNiCgppbXBvcnQgc3RGbG93VG9rZW4gZnJvbSAweGU0NWM2NGVjZmUzMWU0NjUKCgp0cmFuc2FjdGlvbihwdWJsaWNLZXlzOiBbQ3J5cHRvLktleUxpc3RFbnRyeV0sIGNvbnRyYWN0czoge1N0cmluZzogU3RyaW5nfSkgewogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQm9ycm93VmFsdWUpICZBY2NvdW50KSB7CgogICAgICAgIGxldCBuZXdBY2NvdW50ID0gQWNjb3VudChwYXllcjogc2lnbmVyKQoKICAgICAgICBmb3Iga2V5IGluIHB1YmxpY0tleXMgewogICAgICAgICAgICBuZXdBY2NvdW50LmtleXMuYWRkKHB1YmxpY0tleToga2V5LnB1YmxpY0tleSwgaGFzaEFsZ29yaXRobToga2V5Lmhhc2hBbGdvcml0aG0sIHdlaWdodDoga2V5LndlaWdodCkKICAgICAgICB9CgogICAgICAgIGZvciBjb250cmFjdCBpbiBjb250cmFjdHMua2V5cyB7CiAgICAgICAgICAgIG5ld0FjY291bnQuY29udHJhY3RzLmFkZChuYW1lOiBjb250cmFjdCwgY29kZTogY29udHJhY3RzW2NvbnRyYWN0XSEuZGVjb2RlSGV4KCkpCiAgICAgICAgfQoKICAgICAgICBsZXQgY29hIDwtIEVWTS5jcmVhdGVDYWRlbmNlT3duZWRBY2NvdW50KCkKICAgICAgICBsZXQgY29hUGF0aCA9IC9zdG9yYWdlL2V2bQogICAgICAgIG5ld0FjY291bnQuc3RvcmFnZS5zYXZlKDwtY29hLCB0bzogY29hUGF0aCkKICAgICAgICBsZXQgY29hQ2FwYWJpbGl0eSA9IG5ld0FjY291bnQuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JkVWTS5DYWRlbmNlT3duZWRBY2NvdW50Pihjb2FQYXRoKQogICAgICAgIG5ld0FjY291bnQuY2FwYWJpbGl0aWVzLnB1Ymxpc2goY29hQ2FwYWJpbGl0eSwgYXQ6IC9wdWJsaWMvZXZtKQogICAgICAgIGxldCB1c2RjVmF1bHQgPC0gVVNEQ0Zsb3cuY3JlYXRlRW1wdHlWYXVsdCh2YXVsdFR5cGU6IFR5cGU8QFVTRENGbG93LlZhdWx0PigpKQogICAgICAgIG5ld0FjY291bnQuc3RvcmFnZS5zYXZlKDwtdXNkY1ZhdWx0LCB0bzogVVNEQ0Zsb3cuVmF1bHRTdG9yYWdlUGF0aCkKICAgICAgICBuZXdBY2NvdW50LmNhcGFiaWxpdGllcy5wdWJsaXNoKAogICAgICAgICAgICBuZXdBY2NvdW50LmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCZ7RnVuZ2libGVUb2tlbi5SZWNlaXZlciwgRnVuZ2libGVUb2tlbi5CYWxhbmNlfT4oVVNEQ0Zsb3cuVmF1bHRTdG9yYWdlUGF0aCksCiAgICAgICAgICAgIGF0OiBVU0RDRmxvdy5WYXVsdFB1YmxpY1BhdGgKICAgICAgICApCiAgICAgICAgbmV3QWNjb3VudC5jYXBhYmlsaXRpZXMucHVibGlzaCgKICAgICAgICAgICAgbmV3QWNjb3VudC5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwme0Z1bmdpYmxlVG9rZW4uUmVjZWl2ZXIsIEZ1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KFVTRENGbG93LlZhdWx0U3RvcmFnZVBhdGgpLAogICAgICAgICAgICBhdDogVVNEQ0Zsb3cuUmVjZWl2ZXJQdWJsaWNQYXRoCiAgICAgICAgKQoKICAgICAgICAvLyBzdEZsb3cKICAgICAgICBsZXQgc3RGbG93VmF1bHQgPC0gc3RGbG93VG9rZW4uY3JlYXRlRW1wdHlWYXVsdCh2YXVsdFR5cGU6IFR5cGU8QHN0Rmxvd1Rva2VuLlZhdWx0PigpKQogICAgICAgIG5ld0FjY291bnQuc3RvcmFnZS5zYXZlKDwtc3RGbG93VmF1bHQsIHRvOiBzdEZsb3dUb2tlbi50b2tlblZhdWx0UGF0aCkKICAgICAgICBuZXdBY2NvdW50LmNhcGFiaWxpdGllcy5wdWJsaXNoKAogICAgICAgICAgICBuZXdBY2NvdW50LmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCZ7RnVuZ2libGVUb2tlbi5SZWNlaXZlciwgRnVuZ2libGVUb2tlbi5CYWxhbmNlfT4oc3RGbG93VG9rZW4udG9rZW5WYXVsdFBhdGgpLAogICAgICAgICAgICBhdDogc3RGbG93VG9rZW4udG9rZW5CYWxhbmNlUGF0aAogICAgICAgICkKICAgICAgICBuZXdBY2NvdW50LmNhcGFiaWxpdGllcy5wdWJsaXNoKAogICAgICAgICAgICBuZXdBY2NvdW50LmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCZ7RnVuZ2libGVUb2tlbi5SZWNlaXZlciwgRnVuZ2libGVUb2tlbi5CYWxhbmNlfT4oc3RGbG93VG9rZW4udG9rZW5WYXVsdFBhdGgpLAogICAgICAgICAgICBhdDogc3RGbG93VG9rZW4udG9rZW5SZWNlaXZlclBhdGgKICAgICAgICApCiAgICB9Cgp9",
          "mintNFT": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgbWludE5GVCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKLy8vIFRoaXMgc2NyaXB0IHVzZXMgdGhlIE5GVE1pbnRlciByZXNvdXJjZSB0byBtaW50IGEgbmV3IE5GVAovLy8gSXQgbXVzdCBiZSBydW4gd2l0aCB0aGUgYWNjb3VudCB0aGF0IGhhcyB0aGUgbWludGVyIHJlc291cmNlCi8vLyBzdG9yZWQgaW4gL3N0b3JhZ2UvTkZUTWludGVyCgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4OWEwNzY2ZDkzYjY2MDhiNwoKaW1wb3J0IEV4YW1wbGVORlQgZnJvbSAweDM5MGI0NzA1ZGE2MzA1YzMKCnRyYW5zYWN0aW9uKAogICAgcmVjaXBpZW50OiBBZGRyZXNzLAogICAgbmFtZTogU3RyaW5nLAogICAgZGVzY3JpcHRpb246IFN0cmluZywKICAgIHRodW1ibmFpbDogU3RyaW5nLAogICAgY3V0czogW1VGaXg2NF0sCiAgICByb3lhbHR5RGVzY3JpcHRpb25zOiBbU3RyaW5nXSwKICAgIHJveWFsdHlCZW5lZmljaWFyaWVzOiBbQWRkcmVzc10KKSB7CgogICAgLy8vIGxvY2FsIHZhcmlhYmxlIGZvciBzdG9yaW5nIHRoZSBtaW50ZXIgcmVmZXJlbmNlCiAgICBsZXQgbWludGVyOiAmRXhhbXBsZU5GVC5ORlRNaW50ZXIKCiAgICAvLy8gUmVmZXJlbmNlIHRvIHRoZSByZWNlaXZlcidzIGNvbGxlY3Rpb24KICAgIGxldCByZWNpcGllbnRDb2xsZWN0aW9uUmVmOiAme05vbkZ1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9CgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQm9ycm93VmFsdWUpICZBY2NvdW50KSB7CgogICAgICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IEV4YW1wbGVORlQucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgICAgIHJlc291cmNlVHlwZTogbmlsLAogICAgICAgICAgICAgICAgdmlld1R5cGU6IFR5cGU8TWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT4oKQogICAgICAgICAgICApIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPwogICAgICAgICAgICA/PyBwYW5pYygiVmlld1Jlc29sdmVyIGRvZXMgbm90IHJlc29sdmUgTkZUQ29sbGVjdGlvbkRhdGEgdmlldyIpCiAgICAgICAgCiAgICAgICAgLy8gYm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBORlRNaW50ZXIgcmVzb3VyY2UgaW4gc3RvcmFnZQogICAgICAgIHNlbGYubWludGVyID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PCZFeGFtcGxlTkZULk5GVE1pbnRlcj4oZnJvbTogRXhhbXBsZU5GVC5NaW50ZXJTdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIkFjY291bnQgZG9lcyBub3Qgc3RvcmUgYW4gb2JqZWN0IGF0IHRoZSBzcGVjaWZpZWQgcGF0aCIpCgogICAgICAgIC8vIEJvcnJvdyB0aGUgcmVjaXBpZW50J3MgcHVibGljIE5GVCBjb2xsZWN0aW9uIHJlZmVyZW5jZQogICAgICAgIHNlbGYucmVjaXBpZW50Q29sbGVjdGlvblJlZiA9IGdldEFjY291bnQocmVjaXBpZW50KS5jYXBhYmlsaXRpZXMuYm9ycm93PCZ7Tm9uRnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KAogICAgICAgICAgICAgICAgY29sbGVjdGlvbkRhdGEucHVibGljUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IHJlY2VpdmVyIHJlZmVyZW5jZSB0byB0aGUgTkZUIENvbGxlY3Rpb24iKQogICAgfQoKICAgIHByZSB7CiAgICAgICAgY3V0cy5sZW5ndGggPT0gcm95YWx0eURlc2NyaXB0aW9ucy5sZW5ndGggJiYgY3V0cy5sZW5ndGggPT0gcm95YWx0eUJlbmVmaWNpYXJpZXMubGVuZ3RoOiAiQXJyYXkgbGVuZ3RoIHNob3VsZCBiZSBlcXVhbCBmb3Igcm95YWx0eSByZWxhdGVkIGRldGFpbHMiCiAgICB9CgogICAgZXhlY3V0ZSB7CgogICAgICAgIC8vIENyZWF0ZSB0aGUgcm95YWx0eSBkZXRhaWxzCiAgICAgICAgdmFyIGNvdW50ID0gMAogICAgICAgIHZhciByb3lhbHRpZXM6IFtNZXRhZGF0YVZpZXdzLlJveWFsdHldID0gW10KICAgICAgICBsb2cocm95YWx0eUJlbmVmaWNpYXJpZXMubGVuZ3RoKQogICAgICAgIHdoaWxlIHJveWFsdHlCZW5lZmljaWFyaWVzLmxlbmd0aCA+IGNvdW50IHsKICAgICAgICAgICAgbGV0IGJlbmVmaWNpYXJ5ID0gcm95YWx0eUJlbmVmaWNpYXJpZXNbY291bnRdCiAgICAgICAgICAgIGxldCBiZW5lZmljaWFyeUNhcGFiaWxpdHkgPSBnZXRBY2NvdW50KGJlbmVmaWNpYXJ5KS5jYXBhYmlsaXRpZXMuZ2V0PCZ7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KAogICAgICAgICAgICAgICAgICAgIE1ldGFkYXRhVmlld3MuZ2V0Um95YWx0eVJlY2VpdmVyUHVibGljUGF0aCgpCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgIGlmICFiZW5lZmljaWFyeUNhcGFiaWxpdHkuY2hlY2soKSB7CiAgICAgICAgICAgICAgICBwYW5pYygiQmVuZWZpY2lhcnkgZG9lcyBub3QgaGF2ZSBSZWNlaXZlciBjb25maWd1cmVkIGF0IFJveWFsdHlSZWNlaXZlclB1YmxpY1BhdGgiKQogICAgICAgICAgICB9CgogICAgICAgICAgICByb3lhbHRpZXMuYXBwZW5kKAogICAgICAgICAgICAgICAgTWV0YWRhdGFWaWV3cy5Sb3lhbHR5KAogICAgICAgICAgICAgICAgICAgIHJlY2VpdmVyOiBiZW5lZmljaWFyeUNhcGFiaWxpdHksCiAgICAgICAgICAgICAgICAgICAgY3V0OiBjdXRzW2NvdW50XSwKICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogcm95YWx0eURlc2NyaXB0aW9uc1tjb3VudF0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgKQogICAgICAgICAgICBjb3VudCA9IGNvdW50ICsgMQogICAgICAgIH0KCgogICAgICAgIC8vIE1pbnQgdGhlIE5GVCBhbmQgZGVwb3NpdCBpdCB0byB0aGUgcmVjaXBpZW50J3MgY29sbGVjdGlvbgogICAgICAgIGxldCBtaW50ZWRORlQgPC0gc2VsZi5taW50ZXIubWludE5GVCgKICAgICAgICAgICAgbmFtZTogbmFtZSwKICAgICAgICAgICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uLAogICAgICAgICAgICB0aHVtYm5haWw6IHRodW1ibmFpbCwKICAgICAgICAgICAgcm95YWx0aWVzOiByb3lhbHRpZXMKICAgICAgICApCiAgICAgICAgc2VsZi5yZWNpcGllbnRDb2xsZWN0aW9uUmVmLmRlcG9zaXQodG9rZW46IDwtbWludGVkTkZUKQogICAgfQoKfQ==",
          "onboardEvmToFlow": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgb25ib2FyZEV2bVRvRmxvdyAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweDlhMDc2NmQ5M2I2NjA4YjcKCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweDdlNjBkZjA0MmE5YzA4NjgKCgppbXBvcnQgU2NvcGVkRlRQcm92aWRlcnMgZnJvbSAweGRmYzIwYWVlNjUwZmNiZGYKCgppbXBvcnQgRVZNIGZyb20gMHg4YzUzMDNlYWEyNjIwMmQ2CgoKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweGRmYzIwYWVlNjUwZmNiZGYKCmltcG9ydCBGbG93RVZNQnJpZGdlQ29uZmlnIGZyb20gMHhkZmMyMGFlZTY1MGZjYmRmCkNvbmZpZwoKLy8vIFRoaXMgdHJhbnNhY3Rpb24gb25ib2FyZHMgRVJDMjAvRVJDNzIxIGFzc2V0cyB0byB0aGUgYnJpZGdlLCBjb25maWd1cmluZyB0aGUgYnJpZGdlIHRvIG1vdmUgYXNzZXRzIGJldHdlZW4KLy8vIGVudmlyb25tZW50cwovLy8gTk9URTogVGhpcyBtdXN0IGJlIGRvbmUgYmVmb3JlIGJyaWRnaW5nIGEgQ2FkZW5jZS1uYXRpdmUgTkZUIHRvIEVWTQovLy8KLy8vIEBwYXJhbSBhZGRyZXNzZXNBc0hleDogQXJyYXkgb2YgRVZNIGNvbnRyYWN0IGFkZHJlc3NlcyBkZWZpbmluZyB0aGUgCi8vLyAgICAgYnJpZGdlYWJsZSBhc3NldCB0byBiZSBvbmJvYXJkZWQKLy8vCnRyYW5zYWN0aW9uKGFkZHJlc3Nlc0FzSGV4OiBbU3RyaW5nXSkgewpsZXQgc2NvcGVkUHJvdmlkZXI6IEBTY29wZWRGVFByb3ZpZGVycy5TY29wZWRGVFByb3ZpZGVyCgpwcmVwYXJlKHNpZ25lcjogYXV0aChDb3B5VmFsdWUsIEJvcnJvd1ZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsKICAgIC8qIC0tLSBDb25maWd1cmUgYSBTY29wZWRGVFByb3ZpZGVyIC0tLSAqLwogICAgLy8KICAgIC8vIElzc3VlIGFuZCBzdG9yZSBicmlkZ2UtZGVkaWNhdGVkIFByb3ZpZGVyIENhcGFiaWxpdHkgaW4gc3RvcmFnZSBpZiBuZWNlc3NhcnkKICAgIGlmIHNpZ25lci5zdG9yYWdlLnR5cGUoYXQ6IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgIC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICAgKQogICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgfQogICAgLy8gQ29weSB0aGUgc3RvcmVkIFByb3ZpZGVyIGNhcGFiaWxpdHkgYW5kIGNyZWF0ZSBhIFNjb3BlZEZUUHJvdmlkZXIKICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgIGZyb206IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgKICAgICAgICApID8/IHBhbmljKCJJbnZhbGlkIFByb3ZpZGVyIENhcGFiaWxpdHkgZm91bmQgaW4gc3RvcmFnZS4iKQogICAgLy8gU2V0IGEgd2l0aGRyYXdhbCBsaW1pdCBmb3IgdGhlIHByb3ZpZGVyCiAgICBsZXQgcHJvdmlkZXJMaW1pdCA9IEZsb3dFVk1CcmlkZ2VDb25maWcub25ib2FyZEZlZSAqIFVGaXg2NChhZGRyZXNzZXNBc0hleC5sZW5ndGgpCiAgICBsZXQgcHJvdmlkZXJGaWx0ZXIgPSBTY29wZWRGVFByb3ZpZGVycy5BbGxvd2FuY2VGaWx0ZXIocHJvdmlkZXJMaW1pdCkKICAgIC8vIENyZWF0ZSBTY29wZWRGVFByb3ZpZGVyIHRvIGV4cGlyZSBqdXN0IGFmdGVyIHRoaXMgdHJhbnNhY3Rpb24KICAgIHNlbGYuc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgICAgICAgcHJvdmlkZXI6IHByb3ZpZGVyQ2FwQ29weSwKICAgICAgICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICAgICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICAgICApCn0KZXhlY3V0ZSB7CiAgICAvLyBJdGVyYXRlIG92ZXIgcHJvdmlkZWQgYXJyYXkKICAgIGZvciBhZGRyZXNzSGV4IGluIGFkZHJlc3Nlc0FzSGV4IHsKICAgICAgICAvLyBDb252ZXJ0IGhleCBzdHJpbmcgdG8gRVZNQWRkcmVzcwogICAgICAgIGxldCBhZGRyZXNzID0gRVZNLmFkZHJlc3NGcm9tU3RyaW5nKGFkZHJlc3NIZXgpCiAgICAgICAgLy8gQ29udGludWUgaWYgdGhlIGhleCBpcyBub3QgYSB2YWxpZCBFVk0gYWRkcmVzcyBvciBpZiB0aGUgYWRkcmVzcyBpcyBhbHJlYWR5IG9uYm9hcmRlZAogICAgICAgIGlmIGFkZHJlc3MgPT0gbmlsIHx8IEZsb3dFVk1CcmlkZ2UuZXZtQWRkcmVzc1JlcXVpcmVzT25ib2FyZGluZyhhZGRyZXNzISkgIT0gdHJ1ZSB7CiAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgfQogICAgICAgIEZsb3dFVk1CcmlkZ2Uub25ib2FyZEJ5RVZNQWRkcmVzcygKICAgICAgICAgICAgYWRkcmVzcyEsCiAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICApCiAgICB9CiAgICBkZXN0cm95IHNlbGYuc2NvcGVkUHJvdmlkZXIKfQp9",
          "setupFTProvider": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgc2V0dXBGVFByb3ZpZGVyIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4OWEwNzY2ZDkzYjY2MDhiNwoKCmltcG9ydCBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cyBmcm9tIDB4OWEwNzY2ZDkzYjY2MDhiNwoKaW1wb3J0IDxUb2tlbj4gZnJvbSA8VG9rZW5BZGRyZXNzPgoKdHJhbnNhY3Rpb24gewogICAgcHJlcGFyZShhY2N0OiBhdXRoKENhcGFiaWxpdGllcykgJkFjY291bnQpIHsKICAgICAgICBsZXQgdmF1bHREYXRhID0gRXhhbXBsZVRva2VuLnJlc29sdmVDb250cmFjdFZpZXcocmVzb3VyY2VUeXBlOiBuaWwsIHZpZXdUeXBlOiBUeXBlPEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPigpKSBhcyEgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE/CiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IHRoZSB2YXVsdCBkYXRhIHZpZXcgZm9yIEV4YW1wbGVUb2tlbiIpCiAgICAKICAgICAgICBhY2N0LmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4odmF1bHREYXRhLnN0b3JhZ2VQYXRoKQogICAgfQp9CiA=",
          "setupNFTFull": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgc2V0dXBORlRGdWxsIC0gdjIuNjUKLy8gPHBsYXRmb3JtX2luZm8+CgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4NjMxZTg4YWU3ZjFkN2MyMAoKaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCgppbXBvcnQgPFRva2VuPiBmcm9tIDxUb2tlbkFkZHJlc3M+Cgp0cmFuc2FjdGlvbiB7CiAgICBwcmVwYXJlKGFjY3Q6IGF1dGgoU3RvcmFnZSwgQ2FwYWJpbGl0aWVzKSAmQWNjb3VudCkgewogICAgICAgIGxldCBkID0gRXhhbXBsZU5GVC5yZXNvbHZlQ29udHJhY3RWaWV3KHJlc291cmNlVHlwZTogbmlsLCB2aWV3VHlwZTogVHlwZTxNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPigpKSEgYXMhIE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGEKCiAgICAgICAgaWYgYWNjdC5zdG9yYWdlLmJvcnJvdzwmRXhhbXBsZU5GVC5Db2xsZWN0aW9uPihmcm9tOiBkLnN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBhY2N0LnN0b3JhZ2Uuc2F2ZSg8LSBFeGFtcGxlTkZULmNyZWF0ZUVtcHR5Q29sbGVjdGlvbigpLCB0bzogRXhhbXBsZU5GVC5Db2xsZWN0aW9uU3RvcmFnZVBhdGgpCiAgICAgICAgfQoKICAgICAgICBhY2N0LmNhcGFiaWxpdGllcy51bnB1Ymxpc2goZC5wdWJsaWNQYXRoKQogICAgICAgIGxldCBjYXAgPSBhY2N0LmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCZ7RXhhbXBsZU5GVC5FeGFtcGxlTkZUQ29sbGVjdGlvblB1YmxpYywgTm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uUHVibGljfT4oZC5zdG9yYWdlUGF0aCkKICAgICAgICBhY2N0LmNhcGFiaWxpdGllcy5wdWJsaXNoKGNhcCwgYXQ6IGQucHVibGljUGF0aCkKCiAgICAgICAgYWNjdC5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RXhhbXBsZU5GVC5FeGFtcGxlTkZUQ29sbGVjdGlvblB1YmxpYywgTm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uUHVibGljLCBOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oZC5zdG9yYWdlUGF0aCkKICAgIH0KfQo=",
          "test": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgdGVzdCAtIHYyLjY1Ci8vIDxwbGF0Zm9ybV9pbmZvPgoK",
          "transferTokens": "Ly8gRmxvdyBXYWxsZXQgLSB0ZXN0bmV0IFNjcmlwdCAgdHJhbnNmZXJUb2tlbnMgLSB2Mi42NQovLyA8cGxhdGZvcm1faW5mbz4KCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHg5YTA3NjZkOTNiNjYwOGI3CgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHg3ZTYwZGYwNDJhOWMwODY4CgoKdHJhbnNhY3Rpb24ocmVjaXBpZW50OiBBZGRyZXNzLCBhbW91bnQ6IFVGaXg2NCkgewogICAgLy8gVGhlIFZhdWx0IHJlc291cmNlIHRoYXQgaG9sZHMgdGhlIHRva2VucyB0aGF0IGFyZSBiZWluZyB0cmFuc2ZlcmVkCiAgICBsZXQgc2VudFZhdWx0OiBAe0Z1bmdpYmxlVG9rZW4uVmF1bHR9CiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChTdG9yYWdlLCBCb3Jyb3dWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICAgLy8gR2V0IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBzdG9yZWQgdmF1bHQKICAgICAgICBsZXQgdmF1bHRSZWYgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAmRmxvd1Rva2VuLlZhdWx0Pihmcm9tOiAvc3RvcmFnZS9GbG93VG9rZW5WYXVsdCkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVmZXJlbmNlIHRvIHRoZSBvd25lcidzIFZhdWx0ISIpCgogICAgICAgIC8vIFdpdGhkcmF3IHRva2VucyBmcm9tIHRoZSBzaWduZXIncyBzdG9yZWQgdmF1bHQKICAgICAgICBzZWxmLnNlbnRWYXVsdCA8LSB2YXVsdFJlZi53aXRoZHJhdyhhbW91bnQ6IGFtb3VudCkKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICAvLyBHZXQgdGhlIHJlY2lwaWVudCdzIHB1YmxpYyBhY2NvdW50IG9iamVjdAogICAgICAgIGxldCByZWNpcGllbnRBY2NvdW50ID0gZ2V0QWNjb3VudChyZWNpcGllbnQpCgogICAgICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgcmVjaXBpZW50J3MgUmVjZWl2ZXIKICAgICAgICBsZXQgcmVjZWl2ZXJSZWYgPSByZWNpcGllbnRBY2NvdW50LmNhcGFiaWxpdGllcy5ib3Jyb3c8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4oL3B1YmxpYy9GbG93VG9rZW5SZWNlaXZlcikhCiAgICAgICAgICAgIAogICAgICAgIC8vIERlcG9zaXQgdGhlIHdpdGhkcmF3biB0b2tlbnMgaW4gdGhlIHJlY2lwaWVudCdzIHJlY2VpdmVyCiAgICAgICAgcmVjZWl2ZXJSZWYuZGVwb3NpdChmcm9tOiA8LXNlbGYuc2VudFZhdWx0KQogICAgfQp9"
        }
      }
    },
    "version": "2.65"
}
